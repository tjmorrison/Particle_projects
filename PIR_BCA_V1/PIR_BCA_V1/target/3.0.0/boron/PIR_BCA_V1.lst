
c:/Users/tjmor/OneDrive/Documents/Particle_projects/PIR_BCA_V1/PIR_BCA_V1/target/3.0.0/boron/PIR_BCA_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004180  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d81a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e4f4  000d81a4  0001e4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000288  2003e568  2003e568  0002e568  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8218  000d8218  00028218  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8240  000d8240  00028240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00190b65  00000000  00000000  00028244  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017c87  00000000  00000000  001b8da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003867e  00000000  00000000  001d0a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cd0  00000000  00000000  002090ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009b98  00000000  00000000  0020bd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038804  00000000  00000000  00215916  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003d44d  00000000  00000000  0024e11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012c5c3  00000000  00000000  0028b567  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007f24  00000000  00000000  003b7b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fd3f 	bl	d7ab4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fd61 	bl	d7b04 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4f4 	.word	0x2003e4f4
   d404c:	000d81a4 	.word	0x000d81a4
   d4050:	2003e568 	.word	0x2003e568
   d4054:	2003e568 	.word	0x2003e568
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 f849 	bl	d60f8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d8170 	.word	0x000d8170
   d4080:	000d8194 	.word	0x000d8194

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8a1 	b.w	d41ca <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8f1 	bl	d4270 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bff3 	b.w	d607c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bd1b 	b.w	d4ad0 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bd19 	b.w	d4ad0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bd1f 	b.w	d4ae0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fc12 	bl	d48d4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4695 	.word	0x000d4695

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d2:	b538      	push	{r3, r4, r5, lr}
   d40d4:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d6:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40d8:	b128      	cbz	r0, d40e6 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40da:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40dc:	210c      	movs	r1, #12
   d40de:	f003 f8b4 	bl	d724a <_ZdlPvj>
            wakeupSource = next;
   d40e2:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e4:	e7f8      	b.n	d40d8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e6:	4620      	mov	r0, r4
   d40e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40ec <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40ec:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ee:	b510      	push	{r4, lr}
   d40f0:	4604      	mov	r4, r0
   d40f2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40f4:	f001 f8f8 	bl	d52e8 <_ZN5spark10LogManager8instanceEv>
   d40f8:	4621      	mov	r1, r4
   d40fa:	f001 fae8 	bl	d56ce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40fe:	f002 fba5 	bl	d684c <_Z16_fetch_usbserialv>
   d4102:	f002 fb97 	bl	d6834 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4106:	4620      	mov	r0, r4
   d4108:	4b04      	ldr	r3, [pc, #16]	; (d411c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d410a:	f840 3b04 	str.w	r3, [r0], #4
   d410e:	f001 f9cb 	bl	d54a8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4112:	4620      	mov	r0, r4
   d4114:	bd10      	pop	{r4, pc}
   d4116:	bf00      	nop
   d4118:	000d7da0 	.word	0x000d7da0
   d411c:	000d7d88 	.word	0x000d7d88

000d4120 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4120:	b510      	push	{r4, lr}
   d4122:	4604      	mov	r4, r0
    }
   d4124:	f7ff ffe2 	bl	d40ec <_ZN5spark16SerialLogHandlerD1Ev>
   d4128:	4620      	mov	r0, r4
   d412a:	2124      	movs	r1, #36	; 0x24
   d412c:	f003 f88d 	bl	d724a <_ZdlPvj>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}

000d4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4136:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4138:	4605      	mov	r5, r0
   d413a:	460f      	mov	r7, r1
   d413c:	4616      	mov	r6, r2
        if (valid_) {
   d413e:	b18b      	cbz	r3, d4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4140:	6803      	ldr	r3, [r0, #0]
   d4142:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4144:	b183      	cbz	r3, d4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4146:	889a      	ldrh	r2, [r3, #4]
   d4148:	2a01      	cmp	r2, #1
   d414a:	d006      	beq.n	d415a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d414c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d414e:	e7f9      	b.n	d4144 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4150:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4152:	b14b      	cbz	r3, d4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4154:	889a      	ldrh	r2, [r3, #4]
   d4156:	2a01      	cmp	r2, #1
   d4158:	d1fa      	bne.n	d4150 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d415a:	b12b      	cbz	r3, d4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d415c:	899a      	ldrh	r2, [r3, #12]
   d415e:	42ba      	cmp	r2, r7
   d4160:	d1f6      	bne.n	d4150 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4162:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4164:	4628      	mov	r0, r5
   d4166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4168:	490a      	ldr	r1, [pc, #40]	; (d4194 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d416a:	2010      	movs	r0, #16
   d416c:	f003 f86f 	bl	d724e <_ZnwjRKSt9nothrow_t>
   d4170:	4604      	mov	r4, r0
   d4172:	b168      	cbz	r0, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4174:	2210      	movs	r2, #16
   d4176:	2100      	movs	r1, #0
   d4178:	f003 fcc4 	bl	d7b04 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d417c:	4b06      	ldr	r3, [pc, #24]	; (d4198 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d417e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4180:	2301      	movs	r3, #1
   d4182:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4184:	692b      	ldr	r3, [r5, #16]
   d4186:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4188:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d418a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d418c:	612c      	str	r4, [r5, #16]
   d418e:	e7e9      	b.n	d4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4190:	7528      	strb	r0, [r5, #20]
                return *this;
   d4192:	e7e7      	b.n	d4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4194:	000d806d 	.word	0x000d806d
   d4198:	00030010 	.word	0x00030010

000d419c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d419c:	b40e      	push	{r1, r2, r3}
   d419e:	b510      	push	{r4, lr}
   d41a0:	b08d      	sub	sp, #52	; 0x34
   d41a2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d41a4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d41a6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d41aa:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41ac:	2300      	movs	r3, #0
   d41ae:	2020      	movs	r0, #32
   d41b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41b4:	e9cd 4200 	strd	r4, r2, [sp]
   d41b8:	201e      	movs	r0, #30
   d41ba:	aa04      	add	r2, sp, #16
   d41bc:	f000 fb9a 	bl	d48f4 <log_message_v>
}
   d41c0:	b00d      	add	sp, #52	; 0x34
   d41c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41c6:	b003      	add	sp, #12
   d41c8:	4770      	bx	lr

000d41ca <setup>:

//Decleration of functions~ tells the compiler which functions are available and how to use them
void PublishToGoogleSheet();

// setup() runs once, when the device is first turned on.
void setup() {
   d41ca:	b508      	push	{r3, lr}

  //Set the digital pins to input
  //note that analog pins don't need analog read
  pinMode(Pin_PIR, INPUT);
   d41cc:	2100      	movs	r1, #0
   d41ce:	2002      	movs	r0, #2
   d41d0:	f002 ff7a 	bl	d70c8 <pinMode>
  pinMode(Pin_Beacon, INPUT);


}
   d41d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(Pin_Beacon, INPUT);
   d41d8:	2100      	movs	r1, #0
   d41da:	2003      	movs	r0, #3
   d41dc:	f002 bf74 	b.w	d70c8 <pinMode>

000d41e0 <_Z20PublishToGoogleSheetv>:

}


//Publish to google sheets function
void PublishToGoogleSheet() {
   d41e0:	b510      	push	{r4, lr}
    char buf[128];
    snprintf(buf, sizeof(buf),"[%d,%d,%.2f]", PIR_cnt, Beacon_cnt, Batt_volt);
   d41e2:	4b1a      	ldr	r3, [pc, #104]	; (d424c <_Z20PublishToGoogleSheetv+0x6c>)
void PublishToGoogleSheet() {
   d41e4:	b0a6      	sub	sp, #152	; 0x98
    snprintf(buf, sizeof(buf),"[%d,%d,%.2f]", PIR_cnt, Beacon_cnt, Batt_volt);
   d41e6:	6818      	ldr	r0, [r3, #0]
   d41e8:	f003 f99c 	bl	d7524 <__aeabi_f2d>
   d41ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d41f0:	4b17      	ldr	r3, [pc, #92]	; (d4250 <_Z20PublishToGoogleSheetv+0x70>)
   d41f2:	4a18      	ldr	r2, [pc, #96]	; (d4254 <_Z20PublishToGoogleSheetv+0x74>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	9300      	str	r3, [sp, #0]
   d41f8:	4b17      	ldr	r3, [pc, #92]	; (d4258 <_Z20PublishToGoogleSheetv+0x78>)
   d41fa:	2180      	movs	r1, #128	; 0x80
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	a806      	add	r0, sp, #24
   d4200:	f000 fc7e 	bl	d4b00 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4204:	4b15      	ldr	r3, [pc, #84]	; (d425c <_Z20PublishToGoogleSheetv+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4206:	4916      	ldr	r1, [pc, #88]	; (d4260 <_Z20PublishToGoogleSheetv+0x80>)
   d4208:	781b      	ldrb	r3, [r3, #0]
   d420a:	f88d 3000 	strb.w	r3, [sp]
   d420e:	6809      	ldr	r1, [r1, #0]
   d4210:	233c      	movs	r3, #60	; 0x3c
   d4212:	aa06      	add	r2, sp, #24
   d4214:	a804      	add	r0, sp, #16
   d4216:	f002 f8cb 	bl	d63b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d421a:	9c05      	ldr	r4, [sp, #20]
   d421c:	b17c      	cbz	r4, d423e <_Z20PublishToGoogleSheetv+0x5e>
      if (--_M_use_count == 0)
   d421e:	6863      	ldr	r3, [r4, #4]
   d4220:	3b01      	subs	r3, #1
   d4222:	6063      	str	r3, [r4, #4]
   d4224:	b95b      	cbnz	r3, d423e <_Z20PublishToGoogleSheetv+0x5e>
          _M_dispose();
   d4226:	6823      	ldr	r3, [r4, #0]
   d4228:	4620      	mov	r0, r4
   d422a:	689b      	ldr	r3, [r3, #8]
   d422c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d422e:	68a3      	ldr	r3, [r4, #8]
   d4230:	3b01      	subs	r3, #1
   d4232:	60a3      	str	r3, [r4, #8]
   d4234:	b91b      	cbnz	r3, d423e <_Z20PublishToGoogleSheetv+0x5e>
            _M_destroy();
   d4236:	6823      	ldr	r3, [r4, #0]
   d4238:	4620      	mov	r0, r4
   d423a:	68db      	ldr	r3, [r3, #12]
   d423c:	4798      	blx	r3
    Particle.publish(eventName, buf, PRIVATE);
    Log.info("published: %s", buf);
   d423e:	4909      	ldr	r1, [pc, #36]	; (d4264 <_Z20PublishToGoogleSheetv+0x84>)
   d4240:	4809      	ldr	r0, [pc, #36]	; (d4268 <_Z20PublishToGoogleSheetv+0x88>)
   d4242:	aa06      	add	r2, sp, #24
   d4244:	f7ff ffaa 	bl	d419c <_ZNK5spark6Logger4infoEPKcz>
   d4248:	b026      	add	sp, #152	; 0x98
   d424a:	bd10      	pop	{r4, pc}
   d424c:	2003e570 	.word	0x2003e570
   d4250:	2003e574 	.word	0x2003e574
   d4254:	000d7d64 	.word	0x000d7d64
   d4258:	2003e578 	.word	0x2003e578
   d425c:	2003e57c 	.word	0x2003e57c
   d4260:	2003e4f4 	.word	0x2003e4f4
   d4264:	000d7d71 	.word	0x000d7d71
   d4268:	2003e5f4 	.word	0x2003e5f4
   d426c:	00000000 	.word	0x00000000

000d4270 <loop>:
void loop() {
   d4270:	b530      	push	{r4, r5, lr}
        if (valid_) {
   d4272:	4c5b      	ldr	r4, [pc, #364]	; (d43e0 <loop+0x170>)
   d4274:	7d23      	ldrb	r3, [r4, #20]
   d4276:	b085      	sub	sp, #20
   d4278:	b31b      	cbz	r3, d42c2 <loop+0x52>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d427a:	2302      	movs	r3, #2
   d427c:	7223      	strb	r3, [r4, #8]
            config_.flags |= f.value();
   d427e:	68e3      	ldr	r3, [r4, #12]
   d4280:	f043 0301 	orr.w	r3, r3, #1
   d4284:	60e3      	str	r3, [r4, #12]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4286:	6823      	ldr	r3, [r4, #0]
   d4288:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d428a:	b12b      	cbz	r3, d4298 <loop+0x28>
            if (start->type == type) {
   d428c:	889a      	ldrh	r2, [r3, #4]
   d428e:	2a04      	cmp	r2, #4
   d4290:	f000 809a 	beq.w	d43c8 <loop+0x158>
            start = start->next;
   d4294:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4296:	e7f8      	b.n	d428a <loop+0x1a>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4298:	4952      	ldr	r1, [pc, #328]	; (d43e4 <loop+0x174>)
   d429a:	2010      	movs	r0, #16
   d429c:	f002 ffd7 	bl	d724e <_ZnwjRKSt9nothrow_t>
   d42a0:	4605      	mov	r5, r0
   d42a2:	2800      	cmp	r0, #0
   d42a4:	f000 808e 	beq.w	d43c4 <loop+0x154>
   d42a8:	2210      	movs	r2, #16
   d42aa:	2100      	movs	r1, #0
   d42ac:	f003 fc2a 	bl	d7b04 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d42b0:	4b4d      	ldr	r3, [pc, #308]	; (d43e8 <loop+0x178>)
   d42b2:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d42b4:	2304      	movs	r3, #4
   d42b6:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d42b8:	6923      	ldr	r3, [r4, #16]
   d42ba:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d42bc:	4b4b      	ldr	r3, [pc, #300]	; (d43ec <loop+0x17c>)
   d42be:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d42c0:	6125      	str	r5, [r4, #16]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).flag(SystemSleepFlag::WAIT_CLOUD).duration(WRITE_DATA_MILLIS).gpio(Pin_PIR, RISING).gpio(Pin_Beacon, RISING); 
   d42c2:	2201      	movs	r2, #1
   d42c4:	2102      	movs	r1, #2
   d42c6:	4846      	ldr	r0, [pc, #280]	; (d43e0 <loop+0x170>)
   d42c8:	f7ff ff34 	bl	d4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d42cc:	2201      	movs	r2, #1
   d42ce:	2103      	movs	r1, #3
   d42d0:	f7ff ff30 	bl	d4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
    System.sleep(config);
   d42d4:	a801      	add	r0, sp, #4
   d42d6:	4942      	ldr	r1, [pc, #264]	; (d43e0 <loop+0x170>)
   d42d8:	f000 fcbe 	bl	d4c58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d42dc:	9801      	ldr	r0, [sp, #4]
   d42de:	b108      	cbz	r0, d42e4 <loop+0x74>
            free(wakeupSource_);
   d42e0:	f000 fbfe 	bl	d4ae0 <free>
    if (digitalRead(Pin_PIR)== HIGH){
   d42e4:	2002      	movs	r0, #2
   d42e6:	f002 ff00 	bl	d70ea <digitalRead>
   d42ea:	2801      	cmp	r0, #1
      PIR_cnt = PIR_cnt + 1;
   d42ec:	bf08      	it	eq
   d42ee:	4a40      	ldreq	r2, [pc, #256]	; (d43f0 <loop+0x180>)
    if (millis() - lastWrite > WRITE_DATA_MILLIS) {
   d42f0:	4c40      	ldr	r4, [pc, #256]	; (d43f4 <loop+0x184>)
      PIR_cnt = PIR_cnt + 1;
   d42f2:	bf08      	it	eq
   d42f4:	6813      	ldreq	r3, [r2, #0]
    if (digitalRead(Pin_Beacon)== HIGH){
   d42f6:	f04f 0003 	mov.w	r0, #3
      PIR_cnt = PIR_cnt + 1;
   d42fa:	bf04      	itt	eq
   d42fc:	3301      	addeq	r3, #1
   d42fe:	6013      	streq	r3, [r2, #0]
    if (digitalRead(Pin_Beacon)== HIGH){
   d4300:	f002 fef3 	bl	d70ea <digitalRead>
   d4304:	2801      	cmp	r0, #1
      Beacon_cnt = Beacon_cnt + 1;
   d4306:	bf01      	itttt	eq
   d4308:	4a3b      	ldreq	r2, [pc, #236]	; (d43f8 <loop+0x188>)
   d430a:	6813      	ldreq	r3, [r2, #0]
   d430c:	3301      	addeq	r3, #1
   d430e:	6013      	streq	r3, [r2, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4310:	f000 f9c8 	bl	d46a4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastWrite > WRITE_DATA_MILLIS) {
   d4314:	6822      	ldr	r2, [r4, #0]
   d4316:	1a80      	subs	r0, r0, r2
   d4318:	4a34      	ldr	r2, [pc, #208]	; (d43ec <loop+0x17c>)
   d431a:	4290      	cmp	r0, r2
   d431c:	d933      	bls.n	d4386 <loop+0x116>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d431e:	f000 fbb7 	bl	d4a90 <spark_cloud_flag_connected>
      if(Particle.connected() == false) {
   d4322:	b948      	cbnz	r0, d4338 <loop+0xc8>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4324:	f000 fbac 	bl	d4a80 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4328:	f000 fbb2 	bl	d4a90 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d432c:	b910      	cbnz	r0, d4334 <loop+0xc4>
            spark_process();
   d432e:	f000 fb9f 	bl	d4a70 <spark_process>
        while (_while() && !_condition()) {
   d4332:	e7f9      	b.n	d4328 <loop+0xb8>
   d4334:	f000 fbac 	bl	d4a90 <spark_cloud_flag_connected>
        Batt_read = analogRead(Pin_Battery);
   d4338:	2010      	movs	r0, #16
   d433a:	f002 fee9 	bl	d7110 <analogRead>
   d433e:	4b2f      	ldr	r3, [pc, #188]	; (d43fc <loop+0x18c>)
   d4340:	6018      	str	r0, [r3, #0]
        Batt_volt = (Batt_read*3.3/4095.0)*5.0; //multiply by 3.3/4095 to convert to voltage, mult. by 5 bc of 5 to 1 voltage divider
   d4342:	f003 f8dd 	bl	d7500 <__aeabi_i2d>
   d4346:	a322      	add	r3, pc, #136	; (adr r3, d43d0 <loop+0x160>)
   d4348:	e9d3 2300 	ldrd	r2, r3, [r3]
   d434c:	f003 f942 	bl	d75d4 <__aeabi_dmul>
   d4350:	a321      	add	r3, pc, #132	; (adr r3, d43d8 <loop+0x168>)
   d4352:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4356:	f003 fa67 	bl	d7828 <__aeabi_ddiv>
   d435a:	2200      	movs	r2, #0
   d435c:	4b28      	ldr	r3, [pc, #160]	; (d4400 <loop+0x190>)
   d435e:	f003 f939 	bl	d75d4 <__aeabi_dmul>
   d4362:	f003 fb49 	bl	d79f8 <__aeabi_d2f>
   d4366:	4b27      	ldr	r3, [pc, #156]	; (d4404 <loop+0x194>)
   d4368:	6018      	str	r0, [r3, #0]
        PublishToGoogleSheet();
   d436a:	f7ff ff39 	bl	d41e0 <_Z20PublishToGoogleSheetv>
        PIR_cnt = 0; 
   d436e:	4a20      	ldr	r2, [pc, #128]	; (d43f0 <loop+0x180>)
   d4370:	2300      	movs	r3, #0
   d4372:	6013      	str	r3, [r2, #0]
        Beacon_cnt = 0; 
   d4374:	4a20      	ldr	r2, [pc, #128]	; (d43f8 <loop+0x188>)

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   d4376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d437a:	6013      	str	r3, [r2, #0]
   d437c:	f001 fe20 	bl	d5fc0 <delay>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4380:	f000 f990 	bl	d46a4 <HAL_Timer_Get_Milli_Seconds>
        lastWrite = millis();
   d4384:	6020      	str	r0, [r4, #0]
    if(millis() - lastSync > ONE_DAY_MILLIS) {
   d4386:	4c20      	ldr	r4, [pc, #128]	; (d4408 <loop+0x198>)
   d4388:	f000 f98c 	bl	d46a4 <HAL_Timer_Get_Milli_Seconds>
   d438c:	6822      	ldr	r2, [r4, #0]
   d438e:	1a80      	subs	r0, r0, r2
   d4390:	4a1e      	ldr	r2, [pc, #120]	; (d440c <loop+0x19c>)
   d4392:	4290      	cmp	r0, r2
   d4394:	d914      	bls.n	d43c0 <loop+0x150>
   d4396:	f000 fb7b 	bl	d4a90 <spark_cloud_flag_connected>
      if(Particle.connected() == false) {
   d439a:	b948      	cbnz	r0, d43b0 <loop+0x140>
        spark_cloud_flag_connect();
   d439c:	f000 fb70 	bl	d4a80 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43a0:	f000 fb76 	bl	d4a90 <spark_cloud_flag_connected>
   d43a4:	b910      	cbnz	r0, d43ac <loop+0x13c>
            spark_process();
   d43a6:	f000 fb63 	bl	d4a70 <spark_process>
        while (_while() && !_condition()) {
   d43aa:	e7f9      	b.n	d43a0 <loop+0x130>
   d43ac:	f000 fb70 	bl	d4a90 <spark_cloud_flag_connected>
      Particle.publishVitals(); // publish vitals 1x day
   d43b0:	f04f 31ff 	mov.w	r1, #4294967295
   d43b4:	4816      	ldr	r0, [pc, #88]	; (d4410 <loop+0x1a0>)
   d43b6:	f001 ff16 	bl	d61e6 <_ZN10CloudClass13publishVitalsEm>
   d43ba:	f000 f973 	bl	d46a4 <HAL_Timer_Get_Milli_Seconds>
      lastSync = millis();//reset the lastsync
   d43be:	6020      	str	r0, [r4, #0]
}
   d43c0:	b005      	add	sp, #20
   d43c2:	bd30      	pop	{r4, r5, pc}
                valid_ = false;
   d43c4:	7520      	strb	r0, [r4, #20]
                return *this;
   d43c6:	e77c      	b.n	d42c2 <loop+0x52>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d43c8:	4a08      	ldr	r2, [pc, #32]	; (d43ec <loop+0x17c>)
   d43ca:	60da      	str	r2, [r3, #12]
                return *this;
   d43cc:	e779      	b.n	d42c2 <loop+0x52>
   d43ce:	bf00      	nop
   d43d0:	66666666 	.word	0x66666666
   d43d4:	400a6666 	.word	0x400a6666
   d43d8:	00000000 	.word	0x00000000
   d43dc:	40affe00 	.word	0x40affe00
   d43e0:	2003e580 	.word	0x2003e580
   d43e4:	000d806d 	.word	0x000d806d
   d43e8:	00030010 	.word	0x00030010
   d43ec:	001b7740 	.word	0x001b7740
   d43f0:	2003e578 	.word	0x2003e578
   d43f4:	2003e5a4 	.word	0x2003e5a4
   d43f8:	2003e574 	.word	0x2003e574
   d43fc:	2003e56c 	.word	0x2003e56c
   d4400:	40140000 	.word	0x40140000
   d4404:	2003e570 	.word	0x2003e570
   d4408:	2003e5a0 	.word	0x2003e5a0
   d440c:	05265c00 	.word	0x05265c00
   d4410:	2003e7bc 	.word	0x2003e7bc

000d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4414:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4416:	e9d0 5300 	ldrd	r5, r3, [r0]
   d441a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d441c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d441e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4422:	42ae      	cmp	r6, r5
   d4424:	d004      	beq.n	d4430 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4426:	4628      	mov	r0, r5
   d4428:	f000 fc98 	bl	d4d5c <_ZN6StringD1Ev>
   d442c:	3514      	adds	r5, #20
   d442e:	e7f8      	b.n	d4422 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4430:	6820      	ldr	r0, [r4, #0]
   d4432:	f000 fb55 	bl	d4ae0 <free>
    AllocatorT::free(data_);
}
   d4436:	4620      	mov	r0, r4
   d4438:	bd70      	pop	{r4, r5, r6, pc}

000d443a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d443a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d443e:	4604      	mov	r4, r0
   d4440:	460d      	mov	r5, r1
   d4442:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4444:	d916      	bls.n	d4474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4446:	4290      	cmp	r0, r2
   d4448:	d215      	bcs.n	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d444a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d444e:	1a75      	subs	r5, r6, r1
   d4450:	f1a1 0714 	sub.w	r7, r1, #20
   d4454:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4456:	42b7      	cmp	r7, r6
   d4458:	d01c      	beq.n	d4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d445a:	b12c      	cbz	r4, d4468 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d445c:	4631      	mov	r1, r6
   d445e:	4620      	mov	r0, r4
   d4460:	f000 fce4 	bl	d4e2c <_ZN6StringC1EOS_>
   d4464:	7c33      	ldrb	r3, [r6, #16]
   d4466:	7423      	strb	r3, [r4, #16]
   d4468:	4630      	mov	r0, r6
   d446a:	f000 fc77 	bl	d4d5c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d446e:	3e14      	subs	r6, #20
   d4470:	3c14      	subs	r4, #20
   d4472:	e7f0      	b.n	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4474:	d00e      	beq.n	d4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4476:	42b5      	cmp	r5, r6
   d4478:	d00c      	beq.n	d4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d447a:	b12c      	cbz	r4, d4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d447c:	4629      	mov	r1, r5
   d447e:	4620      	mov	r0, r4
   d4480:	f000 fcd4 	bl	d4e2c <_ZN6StringC1EOS_>
   d4484:	7c2b      	ldrb	r3, [r5, #16]
   d4486:	7423      	strb	r3, [r4, #16]
   d4488:	4628      	mov	r0, r5
   d448a:	f000 fc67 	bl	d4d5c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d448e:	3514      	adds	r5, #20
   d4490:	3414      	adds	r4, #20
   d4492:	e7f0      	b.n	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d449a:	2300      	movs	r3, #0
   d449c:	e9c0 3300 	strd	r3, r3, [r0]
   d44a0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44a2:	684f      	ldr	r7, [r1, #4]
   d44a4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44a6:	4604      	mov	r4, r0
   d44a8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44aa:	dd23      	ble.n	d44f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d44ac:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d44b0:	fb08 f007 	mul.w	r0, r8, r7
   d44b4:	f000 fb0c 	bl	d4ad0 <malloc>
            if (!d) {
   d44b8:	4605      	mov	r5, r0
   d44ba:	b1d8      	cbz	r0, d44f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d44bc:	e9d4 1200 	ldrd	r1, r2, [r4]
   d44c0:	fb08 1202 	mla	r2, r8, r2, r1
   d44c4:	f7ff ffb9 	bl	d443a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d44c8:	6820      	ldr	r0, [r4, #0]
   d44ca:	f000 fb09 	bl	d4ae0 <free>
        data_ = d;
   d44ce:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d44d0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44d2:	e9d6 7300 	ldrd	r7, r3, [r6]
   d44d6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d44da:	45b8      	cmp	r8, r7
   d44dc:	d008      	beq.n	d44f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d44de:	4639      	mov	r1, r7
   d44e0:	4628      	mov	r0, r5
   d44e2:	f000 fcbd 	bl	d4e60 <_ZN6StringC1ERKS_>
   d44e6:	7c3b      	ldrb	r3, [r7, #16]
   d44e8:	742b      	strb	r3, [r5, #16]
   d44ea:	3714      	adds	r7, #20
   d44ec:	3514      	adds	r5, #20
   d44ee:	e7f4      	b.n	d44da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d44f0:	6873      	ldr	r3, [r6, #4]
   d44f2:	6063      	str	r3, [r4, #4]
}
   d44f4:	4620      	mov	r0, r4
   d44f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d44fc <_GLOBAL__sub_I_PIR_cnt>:
   d44fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   d4500:	4b36      	ldr	r3, [pc, #216]	; (d45dc <_GLOBAL__sub_I_PIR_cnt+0xe0>)
        filter_(level, filters) {
   d4502:	4d37      	ldr	r5, [pc, #220]	; (d45e0 <_GLOBAL__sub_I_PIR_cnt+0xe4>)
   d4504:	2601      	movs	r6, #1
   d4506:	b08c      	sub	sp, #48	; 0x30
   d4508:	701e      	strb	r6, [r3, #0]
   d450a:	f000 f8cb 	bl	d46a4 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   d450e:	4b35      	ldr	r3, [pc, #212]	; (d45e4 <_GLOBAL__sub_I_PIR_cnt+0xe8>)
   d4510:	6018      	str	r0, [r3, #0]
   d4512:	f000 f8c7 	bl	d46a4 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastWrite = millis();
   d4516:	4b34      	ldr	r3, [pc, #208]	; (d45e8 <_GLOBAL__sub_I_PIR_cnt+0xec>)
        capacity_(0) {
   d4518:	2400      	movs	r4, #0
   d451a:	6018      	str	r0, [r3, #0]
SYSTEM_THREAD(ENABLED); //allows the code to run before connecting to the cloud and will run without cloud conncetion
   d451c:	2100      	movs	r1, #0
   d451e:	4630      	mov	r0, r6
   d4520:	f000 fa10 	bl	d4944 <system_thread_set_state>
   d4524:	e9cd 4400 	strd	r4, r4, [sp]
   d4528:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d452a:	f002 f98f 	bl	d684c <_Z16_fetch_usbserialv>
   d452e:	4669      	mov	r1, sp
   d4530:	4607      	mov	r7, r0
   d4532:	a803      	add	r0, sp, #12
   d4534:	f7ff ffaf 	bl	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4538:	46a8      	mov	r8, r5
        stream_(&stream) {
   d453a:	a903      	add	r1, sp, #12
   d453c:	a806      	add	r0, sp, #24
   d453e:	f7ff ffaa 	bl	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4542:	4b2a      	ldr	r3, [pc, #168]	; (d45ec <_GLOBAL__sub_I_PIR_cnt+0xf0>)
   d4544:	f848 3b04 	str.w	r3, [r8], #4
   d4548:	a906      	add	r1, sp, #24
   d454a:	a809      	add	r0, sp, #36	; 0x24
   d454c:	f7ff ffa3 	bl	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4550:	aa09      	add	r2, sp, #36	; 0x24
   d4552:	211e      	movs	r1, #30
   d4554:	4640      	mov	r0, r8
   d4556:	f001 fa0d 	bl	d5974 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d455a:	a809      	add	r0, sp, #36	; 0x24
   d455c:	f7ff ff5a 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4560:	a806      	add	r0, sp, #24
   d4562:	f7ff ff57 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4566:	4b22      	ldr	r3, [pc, #136]	; (d45f0 <_GLOBAL__sub_I_PIR_cnt+0xf4>)
   d4568:	602b      	str	r3, [r5, #0]
   d456a:	622f      	str	r7, [r5, #32]
   d456c:	a803      	add	r0, sp, #12
   d456e:	f7ff ff51 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4572:	4b20      	ldr	r3, [pc, #128]	; (d45f4 <_GLOBAL__sub_I_PIR_cnt+0xf8>)
   d4574:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4576:	f002 f969 	bl	d684c <_Z16_fetch_usbserialv>
   d457a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d457e:	f002 f955 	bl	d682c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4582:	f000 feb1 	bl	d52e8 <_ZN5spark10LogManager8instanceEv>
   d4586:	4629      	mov	r1, r5
   d4588:	f001 f986 	bl	d5898 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler; //
   d458c:	4668      	mov	r0, sp
   d458e:	f7ff ff41 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4592:	4a19      	ldr	r2, [pc, #100]	; (d45f8 <_GLOBAL__sub_I_PIR_cnt+0xfc>)
   d4594:	4919      	ldr	r1, [pc, #100]	; (d45fc <_GLOBAL__sub_I_PIR_cnt+0x100>)
   d4596:	4628      	mov	r0, r5
   d4598:	f002 fe52 	bl	d7240 <__aeabi_atexit>
        : config_(config) {
   d459c:	4818      	ldr	r0, [pc, #96]	; (d4600 <_GLOBAL__sub_I_PIR_cnt+0x104>)
FuelGauge fuel; //defines the fuel gauge class
   d459e:	4d19      	ldr	r5, [pc, #100]	; (d4604 <_GLOBAL__sub_I_PIR_cnt+0x108>)
              valid_(true) {
   d45a0:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d45a4:	4603      	mov	r3, r0
   d45a6:	1d01      	adds	r1, r0, #4
   d45a8:	f843 1b09 	str.w	r1, [r3], #9
              valid_(true) {
   d45ac:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d45ae:	4b16      	ldr	r3, [pc, #88]	; (d4608 <_GLOBAL__sub_I_PIR_cnt+0x10c>)
   d45b0:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config;
   d45b2:	4a11      	ldr	r2, [pc, #68]	; (d45f8 <_GLOBAL__sub_I_PIR_cnt+0xfc>)
   d45b4:	4915      	ldr	r1, [pc, #84]	; (d460c <_GLOBAL__sub_I_PIR_cnt+0x110>)
              valid_(true) {
   d45b6:	7506      	strb	r6, [r0, #20]
        config_.wakeup_sources = nullptr;
   d45b8:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d45bc:	7204      	strb	r4, [r0, #8]
   d45be:	f002 fe3f 	bl	d7240 <__aeabi_atexit>
FuelGauge fuel; //defines the fuel gauge class
   d45c2:	4621      	mov	r1, r4
   d45c4:	4628      	mov	r0, r5
   d45c6:	f001 fd1f 	bl	d6008 <_ZN9FuelGaugeC1Eb>
   d45ca:	4a0b      	ldr	r2, [pc, #44]	; (d45f8 <_GLOBAL__sub_I_PIR_cnt+0xfc>)
   d45cc:	4910      	ldr	r1, [pc, #64]	; (d4610 <_GLOBAL__sub_I_PIR_cnt+0x114>)
   d45ce:	4628      	mov	r0, r5
   d45d0:	f002 fe36 	bl	d7240 <__aeabi_atexit>
   d45d4:	b00c      	add	sp, #48	; 0x30
   d45d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d45da:	bf00      	nop
   d45dc:	2003e57c 	.word	0x2003e57c
   d45e0:	2003e5a8 	.word	0x2003e5a8
   d45e4:	2003e5a0 	.word	0x2003e5a0
   d45e8:	2003e5a4 	.word	0x2003e5a4
   d45ec:	000d7d88 	.word	0x000d7d88
   d45f0:	000d7ec0 	.word	0x000d7ec0
   d45f4:	000d7da0 	.word	0x000d7da0
   d45f8:	2003e568 	.word	0x2003e568
   d45fc:	000d40ed 	.word	0x000d40ed
   d4600:	2003e580 	.word	0x2003e580
   d4604:	2003e598 	.word	0x2003e598
   d4608:	00030010 	.word	0x00030010
   d460c:	000d40d3 	.word	0x000d40d3
   d4610:	000d6029 	.word	0x000d6029

000d4614 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <netdb_freeaddrinfo+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	689b      	ldr	r3, [r3, #8]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030268 	.word	0x00030268

000d4624 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <netdb_getaddrinfo+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	68db      	ldr	r3, [r3, #12]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030268 	.word	0x00030268

000d4634 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_Validate_Pin_Function+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	685b      	ldr	r3, [r3, #4]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003022c 	.word	0x0003022c

000d4644 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_Pin_Mode+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	689b      	ldr	r3, [r3, #8]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003022c 	.word	0x0003022c

000d4654 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_Get_Pin_Mode+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	68db      	ldr	r3, [r3, #12]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003022c 	.word	0x0003022c

000d4664 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_GPIO_Read+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	695b      	ldr	r3, [r3, #20]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003022c 	.word	0x0003022c

000d4674 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_adc_read+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003022c 	.word	0x0003022c

000d4684 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_RNG_GetRandomNumber+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	685b      	ldr	r3, [r3, #4]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030218 	.word	0x00030218

000d4694 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_Delay_Microseconds+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	68db      	ldr	r3, [r3, #12]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030218 	.word	0x00030218

000d46a4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	695b      	ldr	r3, [r3, #20]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030218 	.word	0x00030218

000d46b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <os_mutex_recursive_create+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030248 	.word	0x00030248

000d46c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <os_mutex_recursive_destroy+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030248 	.word	0x00030248

000d46d4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <os_mutex_recursive_lock+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030248 	.word	0x00030248

000d46e4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <os_mutex_recursive_unlock+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030248 	.word	0x00030248

000d46f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <inet_inet_ntop+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	695b      	ldr	r3, [r3, #20]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030264 	.word	0x00030264

000d4704 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_usart_init+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	681b      	ldr	r3, [r3, #0]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003023c 	.word	0x0003023c

000d4714 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <hal_usart_end+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	689b      	ldr	r3, [r3, #8]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003023c 	.word	0x0003023c

000d4724 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <hal_usart_write+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	68db      	ldr	r3, [r3, #12]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003023c 	.word	0x0003023c

000d4734 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <hal_usart_available+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	691b      	ldr	r3, [r3, #16]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003023c 	.word	0x0003023c

000d4744 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <hal_usart_read+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	695b      	ldr	r3, [r3, #20]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003023c 	.word	0x0003023c

000d4754 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <hal_usart_peek+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	699b      	ldr	r3, [r3, #24]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003023c 	.word	0x0003023c

000d4764 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <hal_usart_flush+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	69db      	ldr	r3, [r3, #28]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	0003023c 	.word	0x0003023c

000d4774 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <hal_usart_is_enabled+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6a1b      	ldr	r3, [r3, #32]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003023c 	.word	0x0003023c

000d4784 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <hal_usart_available_data_for_write+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	0003023c 	.word	0x0003023c

000d4794 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <hal_usart_begin_config+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003023c 	.word	0x0003023c

000d47a4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <hal_i2c_write+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6a1b      	ldr	r3, [r3, #32]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030228 	.word	0x00030228

000d47b4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <hal_i2c_available+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030228 	.word	0x00030228

000d47c4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <hal_i2c_read+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030228 	.word	0x00030228

000d47d4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <hal_i2c_peek+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030228 	.word	0x00030228

000d47e4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <hal_i2c_flush+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030228 	.word	0x00030228

000d47f4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <hal_i2c_is_enabled+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	00030228 	.word	0x00030228

000d4804 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <hal_i2c_init+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	00030228 	.word	0x00030228

000d4814 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <hal_i2c_lock+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	00030228 	.word	0x00030228

000d4824 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <hal_i2c_unlock+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	00030228 	.word	0x00030228

000d4834 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <hal_spi_init+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	69db      	ldr	r3, [r3, #28]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	00030230 	.word	0x00030230

000d4844 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <hal_spi_is_enabled+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6a1b      	ldr	r3, [r3, #32]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030230 	.word	0x00030230

000d4854 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <HAL_USB_USART_Init+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	681b      	ldr	r3, [r3, #0]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	0003024c 	.word	0x0003024c

000d4864 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <HAL_USB_USART_Begin+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	685b      	ldr	r3, [r3, #4]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	0003024c 	.word	0x0003024c

000d4874 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <HAL_USB_USART_End+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	689b      	ldr	r3, [r3, #8]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	0003024c 	.word	0x0003024c

000d4884 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <HAL_USB_USART_Available_Data+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	691b      	ldr	r3, [r3, #16]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	0003024c 	.word	0x0003024c

000d4894 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	695b      	ldr	r3, [r3, #20]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	0003024c 	.word	0x0003024c

000d48a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_USB_USART_Receive_Data+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	699b      	ldr	r3, [r3, #24]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	0003024c 	.word	0x0003024c

000d48b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_USB_USART_Send_Data+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	69db      	ldr	r3, [r3, #28]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	0003024c 	.word	0x0003024c

000d48c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_USB_USART_Flush_Data+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	6a1b      	ldr	r3, [r3, #32]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	0003024c 	.word	0x0003024c

000d48d4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <panic_+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030260 	.word	0x00030260

000d48e4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <log_message+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030260 	.word	0x00030260

000d48f4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <log_message_v+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030260 	.word	0x00030260

000d4904 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <log_level_name+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030260 	.word	0x00030260

000d4914 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <log_set_callbacks+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030260 	.word	0x00030260

000d4924 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <set_system_mode+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	685b      	ldr	r3, [r3, #4]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030220 	.word	0x00030220

000d4934 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <system_delay_ms+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	695b      	ldr	r3, [r3, #20]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030220 	.word	0x00030220

000d4944 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <system_thread_set_state+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030220 	.word	0x00030220

000d4954 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <application_thread_current+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030220 	.word	0x00030220

000d4964 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <application_thread_invoke+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030220 	.word	0x00030220

000d4974 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b03      	ldr	r3, [pc, #12]	; (d4984 <system_ctrl_set_app_request_handler+0x10>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d497e:	9301      	str	r3, [sp, #4]
   d4980:	bd08      	pop	{r3, pc}
   d4982:	0000      	.short	0x0000
   d4984:	00030220 	.word	0x00030220

000d4988 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b03      	ldr	r3, [pc, #12]	; (d4998 <system_ctrl_set_result+0x10>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4992:	9301      	str	r3, [sp, #4]
   d4994:	bd08      	pop	{r3, pc}
   d4996:	0000      	.short	0x0000
   d4998:	00030220 	.word	0x00030220

000d499c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b03      	ldr	r3, [pc, #12]	; (d49ac <system_sleep_ext+0x10>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d49a6:	9301      	str	r3, [sp, #4]
   d49a8:	bd08      	pop	{r3, pc}
   d49aa:	0000      	.short	0x0000
   d49ac:	00030220 	.word	0x00030220

000d49b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <network_connect+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	685b      	ldr	r3, [r3, #4]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030240 	.word	0x00030240

000d49c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <network_connecting+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	689b      	ldr	r3, [r3, #8]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030240 	.word	0x00030240

000d49d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <network_disconnect+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	68db      	ldr	r3, [r3, #12]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030240 	.word	0x00030240

000d49e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <network_ready+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	691b      	ldr	r3, [r3, #16]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030240 	.word	0x00030240

000d49f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <network_on+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	695b      	ldr	r3, [r3, #20]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030240 	.word	0x00030240

000d4a00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <network_off+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	699b      	ldr	r3, [r3, #24]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030240 	.word	0x00030240

000d4a10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <network_listen+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	69db      	ldr	r3, [r3, #28]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030240 	.word	0x00030240

000d4a20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <network_listening+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a1b      	ldr	r3, [r3, #32]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030240 	.word	0x00030240

000d4a30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_set_listen_timeout+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_get_listen_timeout+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_is_on+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_is_off+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <spark_process+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	689b      	ldr	r3, [r3, #8]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030244 	.word	0x00030244

000d4a80 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <spark_cloud_flag_connect+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	68db      	ldr	r3, [r3, #12]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030244 	.word	0x00030244

000d4a90 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <spark_cloud_flag_connected+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	695b      	ldr	r3, [r3, #20]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030244 	.word	0x00030244

000d4aa0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <spark_send_event+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6a1b      	ldr	r3, [r3, #32]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030244 	.word	0x00030244

000d4ab0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030244 	.word	0x00030244

000d4ac0 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <spark_publish_vitals+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030244 	.word	0x00030244

000d4ad0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <malloc+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	681b      	ldr	r3, [r3, #0]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003021c 	.word	0x0003021c

000d4ae0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <free+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	685b      	ldr	r3, [r3, #4]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003021c 	.word	0x0003021c

000d4af0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <realloc+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	689b      	ldr	r3, [r3, #8]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003021c 	.word	0x0003021c

000d4b00 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <snprintf+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	69db      	ldr	r3, [r3, #28]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003021c 	.word	0x0003021c

000d4b10 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <vsnprintf+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003021c 	.word	0x0003021c

000d4b20 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <abort+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003021c 	.word	0x0003021c

000d4b30 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <_malloc_r+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003021c 	.word	0x0003021c

000d4b40 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <newlib_impure_ptr_callback+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003021c 	.word	0x0003021c

000d4b50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b50:	2200      	movs	r2, #0
   d4b52:	6840      	ldr	r0, [r0, #4]
   d4b54:	4611      	mov	r1, r2
   d4b56:	f7ff bf63 	b.w	d4a20 <network_listening>

000d4b5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	6840      	ldr	r0, [r0, #4]
   d4b5e:	4611      	mov	r1, r2
   d4b60:	f7ff bf6e 	b.w	d4a40 <network_get_listen_timeout>

000d4b64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4b64:	6840      	ldr	r0, [r0, #4]
   d4b66:	2200      	movs	r2, #0
   d4b68:	f7ff bf62 	b.w	d4a30 <network_set_listen_timeout>

000d4b6c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b6c:	6840      	ldr	r0, [r0, #4]
   d4b6e:	2200      	movs	r2, #0
   d4b70:	f081 0101 	eor.w	r1, r1, #1
   d4b74:	f7ff bf4c 	b.w	d4a10 <network_listen>

000d4b78 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b78:	2300      	movs	r3, #0
   d4b7a:	6840      	ldr	r0, [r0, #4]
   d4b7c:	461a      	mov	r2, r3
   d4b7e:	4619      	mov	r1, r3
   d4b80:	f7ff bf3e 	b.w	d4a00 <network_off>

000d4b84 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b84:	2300      	movs	r3, #0
   d4b86:	6840      	ldr	r0, [r0, #4]
   d4b88:	461a      	mov	r2, r3
   d4b8a:	4619      	mov	r1, r3
   d4b8c:	f7ff bf30 	b.w	d49f0 <network_on>

000d4b90 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b90:	2200      	movs	r2, #0
   d4b92:	6840      	ldr	r0, [r0, #4]
   d4b94:	4611      	mov	r1, r2
   d4b96:	f7ff bf23 	b.w	d49e0 <network_ready>

000d4b9a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b9a:	2200      	movs	r2, #0
   d4b9c:	6840      	ldr	r0, [r0, #4]
   d4b9e:	4611      	mov	r1, r2
   d4ba0:	f7ff bf0e 	b.w	d49c0 <network_connecting>

000d4ba4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ba4:	6840      	ldr	r0, [r0, #4]
   d4ba6:	2200      	movs	r2, #0
   d4ba8:	2102      	movs	r1, #2
   d4baa:	f7ff bf11 	b.w	d49d0 <network_disconnect>

000d4bae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4bae:	2300      	movs	r3, #0
   d4bb0:	6840      	ldr	r0, [r0, #4]
   d4bb2:	461a      	mov	r2, r3
   d4bb4:	f7ff befc 	b.w	d49b0 <network_connect>

000d4bb8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4bb8:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4bba:	2203      	movs	r2, #3
   d4bbc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4bbe:	4a02      	ldr	r2, [pc, #8]	; (d4bc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4bc0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4bc2:	4770      	bx	lr
   d4bc4:	2003e5cc 	.word	0x2003e5cc
   d4bc8:	000d7dc4 	.word	0x000d7dc4

000d4bcc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4bcc:	b510      	push	{r4, lr}
   d4bce:	4604      	mov	r4, r0
   d4bd0:	4608      	mov	r0, r1
{
    _spi = spi;
   d4bd2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4bd4:	f7ff fe2e 	bl	d4834 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4bd8:	2300      	movs	r3, #0
   d4bda:	6063      	str	r3, [r4, #4]
}
   d4bdc:	4620      	mov	r0, r4
   d4bde:	bd10      	pop	{r4, pc}

000d4be0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4be0:	b510      	push	{r4, lr}
   d4be2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4be4:	6800      	ldr	r0, [r0, #0]
   d4be6:	b118      	cbz	r0, d4bf0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4be8:	f7ff ff7a 	bl	d4ae0 <free>
            wakeupSource_ = nullptr;
   d4bec:	2300      	movs	r3, #0
   d4bee:	6023      	str	r3, [r4, #0]
        }
    }
   d4bf0:	bd10      	pop	{r4, pc}

000d4bf2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4bf2:	b510      	push	{r4, lr}
   d4bf4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4bf6:	f7ff fff3 	bl	d4be0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	bd10      	pop	{r4, pc}

000d4bfe <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4bfe:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d4c00:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d4c04:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d4c06:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4c08:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d4c0a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d4c0e:	f8c0 2006 	str.w	r2, [r0, #6]
   d4c12:	889b      	ldrh	r3, [r3, #4]
   d4c14:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4c16:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4c18:	f7ff ffe2 	bl	d4be0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d4c1c:	682b      	ldr	r3, [r5, #0]
   d4c1e:	b113      	cbz	r3, d4c26 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d4c20:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d4c22:	2300      	movs	r3, #0
   d4c24:	602b      	str	r3, [r5, #0]
    }
   d4c26:	4620      	mov	r0, r4
   d4c28:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c2c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d4c2c:	b538      	push	{r3, r4, r5, lr}
   d4c2e:	460c      	mov	r4, r1
   d4c30:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d4c32:	f7ff ffd5 	bl	d4be0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d4c36:	b144      	cbz	r4, d4c4a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d4c38:	8820      	ldrh	r0, [r4, #0]
   d4c3a:	f7ff ff49 	bl	d4ad0 <malloc>
   d4c3e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4c40:	b128      	cbz	r0, d4c4e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d4c42:	8822      	ldrh	r2, [r4, #0]
   d4c44:	4621      	mov	r1, r4
   d4c46:	f002 ff35 	bl	d7ab4 <memcpy>
        return SYSTEM_ERROR_NONE;
   d4c4a:	2000      	movs	r0, #0
    }
   d4c4c:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d4c4e:	4801      	ldr	r0, [pc, #4]	; (d4c54 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d4c50:	e7fc      	b.n	d4c4c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d4c52:	bf00      	nop
   d4c54:	fffffefc 	.word	0xfffffefc

000d4c58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d4c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c5a:	4d2d      	ldr	r5, [pc, #180]	; (d4d10 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d4c5c:	7d0b      	ldrb	r3, [r1, #20]
   d4c5e:	4604      	mov	r4, r0
   d4c60:	b08b      	sub	sp, #44	; 0x2c
   d4c62:	4608      	mov	r0, r1
   d4c64:	1daf      	adds	r7, r5, #6
   d4c66:	2b00      	cmp	r3, #0
   d4c68:	d038      	beq.n	d4cdc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d4c6a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d4c6c:	791b      	ldrb	r3, [r3, #4]
   d4c6e:	2b00      	cmp	r3, #0
   d4c70:	d034      	beq.n	d4cdc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d4c72:	2200      	movs	r2, #0
    SleepResult() {}
   d4c74:	4b27      	ldr	r3, [pc, #156]	; (d4d14 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4c76:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d4c78:	a902      	add	r1, sp, #8
   d4c7a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d4c7c:	9202      	str	r2, [sp, #8]
   d4c7e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d4c82:	f88d 200e 	strb.w	r2, [sp, #14]
   d4c86:	f7ff fe89 	bl	d499c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d4c8a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d4c8e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d4c92:	b200      	sxth	r0, r0
   d4c94:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d4c98:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d4c9c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d4c9e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d4ca0:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4ca2:	4628      	mov	r0, r5
   d4ca4:	f7ff ffc2 	bl	d4c2c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d4ca8:	a802      	add	r0, sp, #8
   d4caa:	f7ff ff99 	bl	d4be0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d4cae:	2300      	movs	r3, #0
   d4cb0:	6023      	str	r3, [r4, #0]
   d4cb2:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4cb4:	71a3      	strb	r3, [r4, #6]
   d4cb6:	8123      	strh	r3, [r4, #8]
   d4cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4cbc:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d4cbe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d4cc2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d4cc4:	683b      	ldr	r3, [r7, #0]
   d4cc6:	f8c4 3006 	str.w	r3, [r4, #6]
   d4cca:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4ccc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d4cce:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	f7ff ffab 	bl	d4c2c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	b00b      	add	sp, #44	; 0x2c
   d4cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d4cdc:	2600      	movs	r6, #0
   d4cde:	2320      	movs	r3, #32
   d4ce0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d4ce4:	4b0c      	ldr	r3, [pc, #48]	; (d4d18 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d4ce6:	9300      	str	r3, [sp, #0]
   d4ce8:	490c      	ldr	r1, [pc, #48]	; (d4d1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d4cea:	4633      	mov	r3, r6
   d4cec:	aa02      	add	r2, sp, #8
   d4cee:	2032      	movs	r0, #50	; 0x32
   d4cf0:	f7ff fdf8 	bl	d48e4 <log_message>
    SleepResult() {}
   d4cf4:	4b07      	ldr	r3, [pc, #28]	; (d4d14 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4cf6:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d4cf8:	a902      	add	r1, sp, #8
        error_ = error;
   d4cfa:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d4cfe:	4804      	ldr	r0, [pc, #16]	; (d4d10 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d4d00:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d4d02:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d4d06:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4d0a:	f7ff ff78 	bl	d4bfe <_ZN17SystemSleepResultaSEOS_>
   d4d0e:	e7cb      	b.n	d4ca8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d4d10:	2003e5d4 	.word	0x2003e5d4
   d4d14:	ffff0000 	.word	0xffff0000
   d4d18:	000d7dff 	.word	0x000d7dff
   d4d1c:	000d7df8 	.word	0x000d7df8

000d4d20 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d20:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4d22:	4b09      	ldr	r3, [pc, #36]	; (d4d48 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4d24:	4c09      	ldr	r4, [pc, #36]	; (d4d4c <_GLOBAL__sub_I_System+0x2c>)
   d4d26:	2202      	movs	r2, #2
   d4d28:	2000      	movs	r0, #0
   d4d2a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4d2c:	4b08      	ldr	r3, [pc, #32]	; (d4d50 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4d2e:	6020      	str	r0, [r4, #0]
   d4d30:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4d32:	71a0      	strb	r0, [r4, #6]
   d4d34:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d36:	f7ff fdf5 	bl	d4924 <set_system_mode>
SystemClass System;
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	4a05      	ldr	r2, [pc, #20]	; (d4d54 <_GLOBAL__sub_I_System+0x34>)
   d4d3e:	4906      	ldr	r1, [pc, #24]	; (d4d58 <_GLOBAL__sub_I_System+0x38>)
   d4d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4d44:	f002 ba7c 	b.w	d7240 <__aeabi_atexit>
   d4d48:	2003e5e0 	.word	0x2003e5e0
   d4d4c:	2003e5d4 	.word	0x2003e5d4
   d4d50:	ffff0000 	.word	0xffff0000
   d4d54:	2003e568 	.word	0x2003e568
   d4d58:	000d4bf3 	.word	0x000d4bf3

000d4d5c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4d5c:	b510      	push	{r4, lr}
   d4d5e:	4604      	mov	r4, r0
{
	free(buffer);
   d4d60:	6800      	ldr	r0, [r0, #0]
   d4d62:	f7ff febd 	bl	d4ae0 <free>
}
   d4d66:	4620      	mov	r0, r4
   d4d68:	bd10      	pop	{r4, pc}

000d4d6a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4d6a:	b510      	push	{r4, lr}
   d4d6c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4d6e:	6800      	ldr	r0, [r0, #0]
   d4d70:	b108      	cbz	r0, d4d76 <_ZN6String10invalidateEv+0xc>
   d4d72:	f7ff feb5 	bl	d4ae0 <free>
	buffer = NULL;
   d4d76:	2300      	movs	r3, #0
	capacity = len = 0;
   d4d78:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4d7c:	6023      	str	r3, [r4, #0]
}
   d4d7e:	bd10      	pop	{r4, pc}

000d4d80 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4d80:	b538      	push	{r3, r4, r5, lr}
   d4d82:	4604      	mov	r4, r0
   d4d84:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4d86:	6800      	ldr	r0, [r0, #0]
   d4d88:	3101      	adds	r1, #1
   d4d8a:	f7ff feb1 	bl	d4af0 <realloc>
	if (newbuffer) {
   d4d8e:	b110      	cbz	r0, d4d96 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4d90:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4d94:	2001      	movs	r0, #1
	}
	return 0;
}
   d4d96:	bd38      	pop	{r3, r4, r5, pc}

000d4d98 <_ZN6String7reserveEj>:
{
   d4d98:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4d9a:	6803      	ldr	r3, [r0, #0]
{
   d4d9c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4d9e:	b123      	cbz	r3, d4daa <_ZN6String7reserveEj+0x12>
   d4da0:	6843      	ldr	r3, [r0, #4]
   d4da2:	428b      	cmp	r3, r1
   d4da4:	d301      	bcc.n	d4daa <_ZN6String7reserveEj+0x12>
   d4da6:	2001      	movs	r0, #1
}
   d4da8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4daa:	4620      	mov	r0, r4
   d4dac:	f7ff ffe8 	bl	d4d80 <_ZN6String12changeBufferEj>
   d4db0:	2800      	cmp	r0, #0
   d4db2:	d0f9      	beq.n	d4da8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4db4:	68a3      	ldr	r3, [r4, #8]
   d4db6:	2b00      	cmp	r3, #0
   d4db8:	d1f5      	bne.n	d4da6 <_ZN6String7reserveEj+0xe>
   d4dba:	6822      	ldr	r2, [r4, #0]
   d4dbc:	7013      	strb	r3, [r2, #0]
   d4dbe:	e7f2      	b.n	d4da6 <_ZN6String7reserveEj+0xe>

000d4dc0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4dc2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4dc4:	4611      	mov	r1, r2
   d4dc6:	9201      	str	r2, [sp, #4]
{
   d4dc8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4dca:	f7ff ffe5 	bl	d4d98 <_ZN6String7reserveEj>
   d4dce:	9a01      	ldr	r2, [sp, #4]
   d4dd0:	b928      	cbnz	r0, d4dde <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	f7ff ffc9 	bl	d4d6a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4dd8:	4620      	mov	r0, r4
   d4dda:	b003      	add	sp, #12
   d4ddc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4dde:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4de0:	4629      	mov	r1, r5
   d4de2:	6820      	ldr	r0, [r4, #0]
   d4de4:	f002 fe66 	bl	d7ab4 <memcpy>
	buffer[len] = 0;
   d4de8:	6822      	ldr	r2, [r4, #0]
   d4dea:	68a3      	ldr	r3, [r4, #8]
   d4dec:	2100      	movs	r1, #0
   d4dee:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4df0:	e7f2      	b.n	d4dd8 <_ZN6String4copyEPKcj+0x18>

000d4df2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4df2:	b538      	push	{r3, r4, r5, lr}
   d4df4:	4605      	mov	r5, r0
	if (buffer) {
   d4df6:	6800      	ldr	r0, [r0, #0]
{
   d4df8:	460c      	mov	r4, r1
	if (buffer) {
   d4dfa:	b168      	cbz	r0, d4e18 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4dfc:	686a      	ldr	r2, [r5, #4]
   d4dfe:	688b      	ldr	r3, [r1, #8]
   d4e00:	429a      	cmp	r2, r3
   d4e02:	d307      	bcc.n	d4e14 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4e04:	6809      	ldr	r1, [r1, #0]
   d4e06:	f002 feca 	bl	d7b9e <strcpy>
			len = rhs.len;
   d4e0a:	68a3      	ldr	r3, [r4, #8]
   d4e0c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4e0e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4e10:	60a3      	str	r3, [r4, #8]
}
   d4e12:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4e14:	f7ff fe64 	bl	d4ae0 <free>
	buffer = rhs.buffer;
   d4e18:	6823      	ldr	r3, [r4, #0]
   d4e1a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4e1c:	6863      	ldr	r3, [r4, #4]
   d4e1e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4e20:	68a3      	ldr	r3, [r4, #8]
   d4e22:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4e24:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4e26:	e9c4 3300 	strd	r3, r3, [r4]
   d4e2a:	e7f1      	b.n	d4e10 <_ZN6String4moveERS_+0x1e>

000d4e2c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4e2c:	b510      	push	{r4, lr}
	buffer = NULL;
   d4e2e:	2300      	movs	r3, #0
	capacity = 0;
   d4e30:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4e34:	4604      	mov	r4, r0
	len = 0;
   d4e36:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e38:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4e3a:	f7ff ffda 	bl	d4df2 <_ZN6String4moveERS_>
}
   d4e3e:	4620      	mov	r0, r4
   d4e40:	bd10      	pop	{r4, pc}

000d4e42 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4e42:	4288      	cmp	r0, r1
{
   d4e44:	b510      	push	{r4, lr}
   d4e46:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4e48:	d005      	beq.n	d4e56 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4e4a:	680b      	ldr	r3, [r1, #0]
   d4e4c:	b12b      	cbz	r3, d4e5a <_ZN6StringaSERKS_+0x18>
   d4e4e:	688a      	ldr	r2, [r1, #8]
   d4e50:	4619      	mov	r1, r3
   d4e52:	f7ff ffb5 	bl	d4dc0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4e56:	4620      	mov	r0, r4
   d4e58:	bd10      	pop	{r4, pc}
	else invalidate();
   d4e5a:	f7ff ff86 	bl	d4d6a <_ZN6String10invalidateEv>
   d4e5e:	e7fa      	b.n	d4e56 <_ZN6StringaSERKS_+0x14>

000d4e60 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4e60:	b510      	push	{r4, lr}
	buffer = NULL;
   d4e62:	2300      	movs	r3, #0
String::String(const String &value)
   d4e64:	4604      	mov	r4, r0
	capacity = 0;
   d4e66:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4e6a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e6c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4e6e:	f7ff ffe8 	bl	d4e42 <_ZN6StringaSERKS_>
}
   d4e72:	4620      	mov	r0, r4
   d4e74:	bd10      	pop	{r4, pc}

000d4e76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4e76:	b510      	push	{r4, lr}
          _M_dispose();
   d4e78:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4e7a:	4604      	mov	r4, r0
          _M_dispose();
   d4e7c:	689b      	ldr	r3, [r3, #8]
   d4e7e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e80:	68a3      	ldr	r3, [r4, #8]
   d4e82:	3b01      	subs	r3, #1
   d4e84:	60a3      	str	r3, [r4, #8]
   d4e86:	b92b      	cbnz	r3, d4e94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4e88:	6823      	ldr	r3, [r4, #0]
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	68db      	ldr	r3, [r3, #12]
    }
   d4e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4e92:	4718      	bx	r3
    }
   d4e94:	bd10      	pop	{r4, pc}

000d4e96 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4e96:	b510      	push	{r4, lr}
   d4e98:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4e9a:	6800      	ldr	r0, [r0, #0]
   d4e9c:	b108      	cbz	r0, d4ea2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4e9e:	f7ff fc11 	bl	d46c4 <os_mutex_recursive_destroy>
    }
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	bd10      	pop	{r4, pc}

000d4ea6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ea6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ea8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4eaa:	4604      	mov	r4, r0
      if (_M_manager)
   d4eac:	b113      	cbz	r3, d4eb4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4eae:	2203      	movs	r2, #3
   d4eb0:	4601      	mov	r1, r0
   d4eb2:	4798      	blx	r3
    }
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	bd10      	pop	{r4, pc}

000d4eb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4eb8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4eba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4ebe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4ec0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d4ec4:	42ae      	cmp	r6, r5
   d4ec6:	d004      	beq.n	d4ed2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d4ec8:	4628      	mov	r0, r5
   d4eca:	f7ff ff47 	bl	d4d5c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d4ece:	3510      	adds	r5, #16
   d4ed0:	e7f8      	b.n	d4ec4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d4ed2:	6820      	ldr	r0, [r4, #0]
   d4ed4:	f7ff fe04 	bl	d4ae0 <free>
    AllocatorT::free(data_);
}
   d4ed8:	4620      	mov	r0, r4
   d4eda:	bd70      	pop	{r4, r5, r6, pc}

000d4edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4edc:	680b      	ldr	r3, [r1, #0]
   d4ede:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4ee0:	b113      	cbz	r3, d4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4ee2:	685a      	ldr	r2, [r3, #4]
   d4ee4:	3201      	adds	r2, #1
   d4ee6:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4ee8:	4770      	bx	lr

000d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4eea:	b510      	push	{r4, lr}
   d4eec:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4eee:	6800      	ldr	r0, [r0, #0]
   d4ef0:	b128      	cbz	r0, d4efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4ef2:	6843      	ldr	r3, [r0, #4]
   d4ef4:	3b01      	subs	r3, #1
   d4ef6:	6043      	str	r3, [r0, #4]
   d4ef8:	b90b      	cbnz	r3, d4efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4efa:	f7ff ffbc 	bl	d4e76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4efe:	4620      	mov	r0, r4
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4f02:	b513      	push	{r0, r1, r4, lr}
   d4f04:	460b      	mov	r3, r1
   d4f06:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f08:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4f0c:	466c      	mov	r4, sp
   d4f0e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f12:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f16:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4f1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4f22:	b002      	add	sp, #8
   d4f24:	bd10      	pop	{r4, pc}
	...

000d4f28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4f28:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4f2a:	4c06      	ldr	r4, [pc, #24]	; (d4f44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f2c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4f2e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4f30:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4f32:	f7ff fbbf 	bl	d46b4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4f36:	4620      	mov	r0, r4
   d4f38:	4a03      	ldr	r2, [pc, #12]	; (d4f48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4f3a:	4904      	ldr	r1, [pc, #16]	; (d4f4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4f40:	f002 b97e 	b.w	d7240 <__aeabi_atexit>
   d4f44:	2003e5e4 	.word	0x2003e5e4
   d4f48:	2003e568 	.word	0x2003e568
   d4f4c:	000d4e97 	.word	0x000d4e97

000d4f50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f52:	4606      	mov	r6, r0
   d4f54:	460d      	mov	r5, r1
  size_t n = 0;
   d4f56:	188f      	adds	r7, r1, r2
   d4f58:	2400      	movs	r4, #0
  while (size--) {
   d4f5a:	42bd      	cmp	r5, r7
   d4f5c:	d00c      	beq.n	d4f78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4f5e:	6833      	ldr	r3, [r6, #0]
   d4f60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f64:	689b      	ldr	r3, [r3, #8]
   d4f66:	4630      	mov	r0, r6
   d4f68:	4798      	blx	r3
     if (chunk>=0)
   d4f6a:	1e03      	subs	r3, r0, #0
   d4f6c:	db01      	blt.n	d4f72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4f6e:	441c      	add	r4, r3
  while (size--) {
   d4f70:	e7f3      	b.n	d4f5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4f72:	2c00      	cmp	r4, #0
   d4f74:	bf08      	it	eq
   d4f76:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f78:	4620      	mov	r0, r4
   d4f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f7c:	b513      	push	{r0, r1, r4, lr}
   d4f7e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4f80:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4f82:	b159      	cbz	r1, d4f9c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4f84:	9101      	str	r1, [sp, #4]
   d4f86:	f002 fe30 	bl	d7bea <strlen>
   d4f8a:	6823      	ldr	r3, [r4, #0]
   d4f8c:	9901      	ldr	r1, [sp, #4]
   d4f8e:	68db      	ldr	r3, [r3, #12]
   d4f90:	4602      	mov	r2, r0
   d4f92:	4620      	mov	r0, r4
    }
   d4f94:	b002      	add	sp, #8
   d4f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4f9a:	4718      	bx	r3
    }
   d4f9c:	b002      	add	sp, #8
   d4f9e:	bd10      	pop	{r4, pc}

000d4fa0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4fa0:	6803      	ldr	r3, [r0, #0]
   d4fa2:	689b      	ldr	r3, [r3, #8]
   d4fa4:	4718      	bx	r3

000d4fa6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4fa6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4fa8:	210d      	movs	r1, #13
{
   d4faa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4fac:	f7ff fff8 	bl	d4fa0 <_ZN5Print5printEc>
  n += print('\n');
   d4fb0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4fb2:	4604      	mov	r4, r0
  n += print('\n');
   d4fb4:	4628      	mov	r0, r5
   d4fb6:	f7ff fff3 	bl	d4fa0 <_ZN5Print5printEc>
  return n;
}
   d4fba:	4420      	add	r0, r4
   d4fbc:	bd38      	pop	{r3, r4, r5, pc}

000d4fbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4fbe:	b530      	push	{r4, r5, lr}
   d4fc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4fc2:	2300      	movs	r3, #0
   d4fc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4fc8:	2a01      	cmp	r2, #1
   d4fca:	bf98      	it	ls
   d4fcc:	220a      	movls	r2, #10
   d4fce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4fd0:	460d      	mov	r5, r1
   d4fd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4fd6:	fb01 5312 	mls	r3, r1, r2, r5
   d4fda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4fde:	2b09      	cmp	r3, #9
   d4fe0:	bf94      	ite	ls
   d4fe2:	3330      	addls	r3, #48	; 0x30
   d4fe4:	3337      	addhi	r3, #55	; 0x37
   d4fe6:	b2db      	uxtb	r3, r3
  } while(n);
   d4fe8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4fea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4fee:	d9ef      	bls.n	d4fd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4ff0:	4621      	mov	r1, r4
   d4ff2:	f7ff ffc3 	bl	d4f7c <_ZN5Print5writeEPKc>
}
   d4ff6:	b00b      	add	sp, #44	; 0x2c
   d4ff8:	bd30      	pop	{r4, r5, pc}

000d4ffa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ffe:	b086      	sub	sp, #24
   d5000:	af00      	add	r7, sp, #0
   d5002:	4605      	mov	r5, r0
   d5004:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5006:	1d38      	adds	r0, r7, #4
   d5008:	2114      	movs	r1, #20
{
   d500a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d500c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d500e:	f7ff fd7f 	bl	d4b10 <vsnprintf>

    if (n<bufsize)
   d5012:	2813      	cmp	r0, #19
   d5014:	d80e      	bhi.n	d5034 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5016:	1d39      	adds	r1, r7, #4
   d5018:	4628      	mov	r0, r5
   d501a:	f7ff ffaf 	bl	d4f7c <_ZN5Print5writeEPKc>
   d501e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5020:	b11e      	cbz	r6, d502a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5022:	4628      	mov	r0, r5
   d5024:	f7ff ffbf 	bl	d4fa6 <_ZN5Print7printlnEv>
   d5028:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d502a:	4620      	mov	r0, r4
   d502c:	3718      	adds	r7, #24
   d502e:	46bd      	mov	sp, r7
   d5030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5034:	f100 0308 	add.w	r3, r0, #8
   d5038:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d503c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d503e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5042:	4622      	mov	r2, r4
   d5044:	1c41      	adds	r1, r0, #1
   d5046:	683b      	ldr	r3, [r7, #0]
   d5048:	4668      	mov	r0, sp
   d504a:	f7ff fd61 	bl	d4b10 <vsnprintf>
  return write(str);
   d504e:	4669      	mov	r1, sp
   d5050:	4628      	mov	r0, r5
   d5052:	f7ff ff93 	bl	d4f7c <_ZN5Print5writeEPKc>
   d5056:	4604      	mov	r4, r0
   d5058:	46c5      	mov	sp, r8
   d505a:	e7e1      	b.n	d5020 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d505c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d505c:	6880      	ldr	r0, [r0, #8]
   d505e:	6803      	ldr	r3, [r0, #0]
   d5060:	68db      	ldr	r3, [r3, #12]
   d5062:	4718      	bx	r3

000d5064 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d5064:	4770      	bx	lr

000d5066 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5066:	4608      	mov	r0, r1
   d5068:	b111      	cbz	r1, d5070 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d506a:	680b      	ldr	r3, [r1, #0]
   d506c:	685b      	ldr	r3, [r3, #4]
   d506e:	4718      	bx	r3
}
   d5070:	4770      	bx	lr

000d5072 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5072:	4770      	bx	lr

000d5074 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5074:	4770      	bx	lr

000d5076 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d5076:	4770      	bx	lr

000d5078 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5078:	b538      	push	{r3, r4, r5, lr}
   d507a:	4604      	mov	r4, r0
   d507c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d507e:	6800      	ldr	r0, [r0, #0]
   d5080:	212e      	movs	r1, #46	; 0x2e
   d5082:	f002 fd78 	bl	d7b76 <strchrnul>
    size = s - category;
   d5086:	6823      	ldr	r3, [r4, #0]
   d5088:	1ac3      	subs	r3, r0, r3
   d508a:	602b      	str	r3, [r5, #0]
    if (size) {
   d508c:	b123      	cbz	r3, d5098 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d508e:	7803      	ldrb	r3, [r0, #0]
   d5090:	b103      	cbz	r3, d5094 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5092:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   d5094:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5096:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d5098:	4618      	mov	r0, r3
   d509a:	bd38      	pop	{r3, r4, r5, pc}

000d509c <_ZN5spark16JSONStreamWriterD0Ev>:
   d509c:	b510      	push	{r4, lr}
   d509e:	210c      	movs	r1, #12
   d50a0:	4604      	mov	r4, r0
   d50a2:	f002 f8d2 	bl	d724a <_ZdlPvj>
   d50a6:	4620      	mov	r0, r4
   d50a8:	bd10      	pop	{r4, pc}

000d50aa <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d50aa:	b510      	push	{r4, lr}
   d50ac:	2104      	movs	r1, #4
   d50ae:	4604      	mov	r4, r0
   d50b0:	f002 f8cb 	bl	d724a <_ZdlPvj>
   d50b4:	4620      	mov	r0, r4
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d50b8:	b510      	push	{r4, lr}
   d50ba:	2104      	movs	r1, #4
   d50bc:	4604      	mov	r4, r0
   d50be:	f002 f8c4 	bl	d724a <_ZdlPvj>
   d50c2:	4620      	mov	r0, r4
   d50c4:	bd10      	pop	{r4, pc}

000d50c6 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d50c6:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d50c8:	f002 fd5f 	bl	d7b8a <strcmp>
}
   d50cc:	fab0 f080 	clz	r0, r0
   d50d0:	0940      	lsrs	r0, r0, #5
   d50d2:	bd08      	pop	{r3, pc}

000d50d4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d50d4:	b510      	push	{r4, lr}
   d50d6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d50d8:	f001 fbb8 	bl	d684c <_Z16_fetch_usbserialv>
   d50dc:	4284      	cmp	r4, r0
   d50de:	d010      	beq.n	d5102 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d50e0:	f001 fc88 	bl	d69f4 <_Z22__fetch_global_Serial1v>
   d50e4:	4284      	cmp	r4, r0
   d50e6:	d105      	bne.n	d50f4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d50e8:	f001 fc84 	bl	d69f4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d50ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d50f0:	f001 bc7d 	b.w	d69ee <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d50f4:	b12c      	cbz	r4, d5102 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d50f6:	6823      	ldr	r3, [r4, #0]
   d50f8:	4620      	mov	r0, r4
   d50fa:	685b      	ldr	r3, [r3, #4]
}
   d50fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5100:	4718      	bx	r3
   d5102:	bd10      	pop	{r4, pc}

000d5104 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5104:	b513      	push	{r0, r1, r4, lr}
   d5106:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d5108:	4608      	mov	r0, r1
   d510a:	9101      	str	r1, [sp, #4]
   d510c:	f002 fd6d 	bl	d7bea <strlen>
   d5110:	9901      	ldr	r1, [sp, #4]
   d5112:	4602      	mov	r2, r0
   d5114:	4620      	mov	r0, r4
}
   d5116:	b002      	add	sp, #8
   d5118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d511c:	f001 bf86 	b.w	d702c <_ZN5spark10JSONWriter5valueEPKcj>

000d5120 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d5120:	b513      	push	{r0, r1, r4, lr}
   d5122:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5124:	4608      	mov	r0, r1
   d5126:	9101      	str	r1, [sp, #4]
   d5128:	f002 fd5f 	bl	d7bea <strlen>
   d512c:	6823      	ldr	r3, [r4, #0]
   d512e:	9901      	ldr	r1, [sp, #4]
   d5130:	68db      	ldr	r3, [r3, #12]
   d5132:	4602      	mov	r2, r0
   d5134:	4620      	mov	r0, r4
}
   d5136:	b002      	add	sp, #8
   d5138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d513c:	4718      	bx	r3

000d513e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d513e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5140:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d5142:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d5146:	68db      	ldr	r3, [r3, #12]
   d5148:	2201      	movs	r2, #1
   d514a:	f10d 0107 	add.w	r1, sp, #7
   d514e:	4798      	blx	r3
}
   d5150:	b003      	add	sp, #12
   d5152:	f85d fb04 	ldr.w	pc, [sp], #4

000d5156 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5156:	b40e      	push	{r1, r2, r3}
   d5158:	b503      	push	{r0, r1, lr}
   d515a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d515c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d515e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d5162:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d5164:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d5166:	f7ff ff48 	bl	d4ffa <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d516a:	b002      	add	sp, #8
   d516c:	f85d eb04 	ldr.w	lr, [sp], #4
   d5170:	b003      	add	sp, #12
   d5172:	4770      	bx	lr

000d5174 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d5178:	e9d0 9500 	ldrd	r9, r5, [r0]
   d517c:	f04f 0814 	mov.w	r8, #20
   d5180:	fb08 f505 	mul.w	r5, r8, r5
   d5184:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5186:	10ab      	asrs	r3, r5, #2
   d5188:	4d18      	ldr	r5, [pc, #96]	; (d51ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d518a:	4617      	mov	r7, r2
   d518c:	435d      	muls	r5, r3
   d518e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5190:	2d00      	cmp	r5, #0
   d5192:	dd23      	ble.n	d51dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5194:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d5196:	fb08 f006 	mul.w	r0, r8, r6
   d519a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d519e:	463a      	mov	r2, r7
   d51a0:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d51a4:	5820      	ldr	r0, [r4, r0]
   d51a6:	9101      	str	r1, [sp, #4]
   d51a8:	455f      	cmp	r7, fp
   d51aa:	bf28      	it	cs
   d51ac:	465a      	movcs	r2, fp
   d51ae:	f002 fd24 	bl	d7bfa <strncmp>
                if (cmp == 0) {
   d51b2:	9901      	ldr	r1, [sp, #4]
   d51b4:	2301      	movs	r3, #1
   d51b6:	b978      	cbnz	r0, d51d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d51b8:	455f      	cmp	r7, fp
   d51ba:	d103      	bne.n	d51c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d51bc:	9a00      	ldr	r2, [sp, #0]
   d51be:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d51c0:	4635      	mov	r5, r6
   d51c2:	e7e5      	b.n	d5190 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d51c4:	bf8c      	ite	hi
   d51c6:	2001      	movhi	r0, #1
   d51c8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d51ca:	2800      	cmp	r0, #0
   d51cc:	d0f8      	beq.n	d51c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d51ce:	1bae      	subs	r6, r5, r6
	      ++__first;
   d51d0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d51d4:	3e01      	subs	r6, #1
   d51d6:	e7f3      	b.n	d51c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d51d8:	0fc0      	lsrs	r0, r0, #31
   d51da:	e7f6      	b.n	d51ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d51dc:	eba4 0409 	sub.w	r4, r4, r9
}
   d51e0:	4802      	ldr	r0, [pc, #8]	; (d51ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d51e2:	10a4      	asrs	r4, r4, #2
   d51e4:	4360      	muls	r0, r4
   d51e6:	b003      	add	sp, #12
   d51e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51ec:	cccccccd 	.word	0xcccccccd

000d51f0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d51f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d51f2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d51f4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d51f6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d51f8:	b30b      	cbz	r3, d523e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d51fa:	b301      	cbz	r1, d523e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d51fc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d51fe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d5202:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d5204:	a903      	add	r1, sp, #12
   d5206:	a801      	add	r0, sp, #4
   d5208:	f7ff ff36 	bl	d5078 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d520c:	4601      	mov	r1, r0
   d520e:	b1b0      	cbz	r0, d523e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5210:	f10d 030b 	add.w	r3, sp, #11
   d5214:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d5216:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d521a:	4620      	mov	r0, r4
   d521c:	f7ff ffaa 	bl	d5174 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5220:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5224:	b15b      	cbz	r3, d523e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d5226:	6824      	ldr	r4, [r4, #0]
   d5228:	2314      	movs	r3, #20
   d522a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d522e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d5232:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d5236:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5238:	bfa8      	it	ge
   d523a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d523c:	e7e2      	b.n	d5204 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d523e:	4630      	mov	r0, r6
   d5240:	b004      	add	sp, #16
   d5242:	bd70      	pop	{r4, r5, r6, pc}

000d5244 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5244:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5246:	4c0a      	ldr	r4, [pc, #40]	; (d5270 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5248:	7823      	ldrb	r3, [r4, #0]
   d524a:	f3bf 8f5b 	dmb	ish
   d524e:	07db      	lsls	r3, r3, #31
   d5250:	d40b      	bmi.n	d526a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d5252:	4620      	mov	r0, r4
   d5254:	f7fe ff30 	bl	d40b8 <__cxa_guard_acquire>
   d5258:	b138      	cbz	r0, d526a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d525a:	4620      	mov	r0, r4
   d525c:	f7fe ff31 	bl	d40c2 <__cxa_guard_release>
   d5260:	4a04      	ldr	r2, [pc, #16]	; (d5274 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5262:	4905      	ldr	r1, [pc, #20]	; (d5278 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5264:	4805      	ldr	r0, [pc, #20]	; (d527c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d5266:	f001 ffeb 	bl	d7240 <__aeabi_atexit>
}
   d526a:	4804      	ldr	r0, [pc, #16]	; (d527c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d526c:	bd10      	pop	{r4, pc}
   d526e:	bf00      	nop
   d5270:	2003e5ec 	.word	0x2003e5ec
   d5274:	2003e568 	.word	0x2003e568
   d5278:	000d5075 	.word	0x000d5075
   d527c:	2003e4f8 	.word	0x2003e4f8

000d5280 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5280:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5282:	4c0a      	ldr	r4, [pc, #40]	; (d52ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5284:	7823      	ldrb	r3, [r4, #0]
   d5286:	f3bf 8f5b 	dmb	ish
   d528a:	07db      	lsls	r3, r3, #31
   d528c:	d40b      	bmi.n	d52a6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d528e:	4620      	mov	r0, r4
   d5290:	f7fe ff12 	bl	d40b8 <__cxa_guard_acquire>
   d5294:	b138      	cbz	r0, d52a6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d5296:	4620      	mov	r0, r4
   d5298:	f7fe ff13 	bl	d40c2 <__cxa_guard_release>
   d529c:	4a04      	ldr	r2, [pc, #16]	; (d52b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d529e:	4905      	ldr	r1, [pc, #20]	; (d52b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d52a0:	4805      	ldr	r0, [pc, #20]	; (d52b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d52a2:	f001 ffcd 	bl	d7240 <__aeabi_atexit>
    return &factory;
}
   d52a6:	4804      	ldr	r0, [pc, #16]	; (d52b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d52a8:	bd10      	pop	{r4, pc}
   d52aa:	bf00      	nop
   d52ac:	2003e5f0 	.word	0x2003e5f0
   d52b0:	2003e568 	.word	0x2003e568
   d52b4:	000d5073 	.word	0x000d5073
   d52b8:	2003e4fc 	.word	0x2003e4fc

000d52bc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d52bc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d52be:	2500      	movs	r5, #0
   d52c0:	4604      	mov	r4, r0
   d52c2:	e9c0 5500 	strd	r5, r5, [r0]
   d52c6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d52ca:	6085      	str	r5, [r0, #8]
   d52cc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d52ce:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d52d2:	f7ff f9ef 	bl	d46b4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d52d6:	f7ff ffb5 	bl	d5244 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d52da:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d52dc:	f7ff ffd0 	bl	d5280 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d52e0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d52e2:	6220      	str	r0, [r4, #32]
}
   d52e4:	4620      	mov	r0, r4
   d52e6:	bd38      	pop	{r3, r4, r5, pc}

000d52e8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d52e8:	b510      	push	{r4, lr}
    static LogManager mgr;
   d52ea:	4c0b      	ldr	r4, [pc, #44]	; (d5318 <_ZN5spark10LogManager8instanceEv+0x30>)
   d52ec:	7823      	ldrb	r3, [r4, #0]
   d52ee:	f3bf 8f5b 	dmb	ish
   d52f2:	07db      	lsls	r3, r3, #31
   d52f4:	d40e      	bmi.n	d5314 <_ZN5spark10LogManager8instanceEv+0x2c>
   d52f6:	4620      	mov	r0, r4
   d52f8:	f7fe fede 	bl	d40b8 <__cxa_guard_acquire>
   d52fc:	b150      	cbz	r0, d5314 <_ZN5spark10LogManager8instanceEv+0x2c>
   d52fe:	4807      	ldr	r0, [pc, #28]	; (d531c <_ZN5spark10LogManager8instanceEv+0x34>)
   d5300:	f7ff ffdc 	bl	d52bc <_ZN5spark10LogManagerC1Ev>
   d5304:	4620      	mov	r0, r4
   d5306:	f7fe fedc 	bl	d40c2 <__cxa_guard_release>
   d530a:	4a05      	ldr	r2, [pc, #20]	; (d5320 <_ZN5spark10LogManager8instanceEv+0x38>)
   d530c:	4905      	ldr	r1, [pc, #20]	; (d5324 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d530e:	4803      	ldr	r0, [pc, #12]	; (d531c <_ZN5spark10LogManager8instanceEv+0x34>)
   d5310:	f001 ff96 	bl	d7240 <__aeabi_atexit>
    return &mgr;
}
   d5314:	4801      	ldr	r0, [pc, #4]	; (d531c <_ZN5spark10LogManager8instanceEv+0x34>)
   d5316:	bd10      	pop	{r4, pc}
   d5318:	2003e5e8 	.word	0x2003e5e8
   d531c:	2003e5f8 	.word	0x2003e5f8
   d5320:	2003e568 	.word	0x2003e568
   d5324:	000d5759 	.word	0x000d5759

000d5328 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5328:	4a02      	ldr	r2, [pc, #8]	; (d5334 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d532a:	4903      	ldr	r1, [pc, #12]	; (d5338 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d532c:	4803      	ldr	r0, [pc, #12]	; (d533c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d532e:	2300      	movs	r3, #0
   d5330:	f7ff baf0 	b.w	d4914 <log_set_callbacks>
   d5334:	000d5635 	.word	0x000d5635
   d5338:	000d55c1 	.word	0x000d55c1
   d533c:	000d5541 	.word	0x000d5541

000d5340 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5340:	2300      	movs	r3, #0
   d5342:	461a      	mov	r2, r3
   d5344:	4619      	mov	r1, r3
   d5346:	4618      	mov	r0, r3
   d5348:	f7ff bae4 	b.w	d4914 <log_set_callbacks>

000d534c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d534c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d534e:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5350:	f851 3b04 	ldr.w	r3, [r1], #4
   d5354:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5356:	4604      	mov	r4, r0
   d5358:	a801      	add	r0, sp, #4
   d535a:	f7ff fdbf 	bl	d4edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d535e:	466a      	mov	r2, sp
   d5360:	4629      	mov	r1, r5
   d5362:	4620      	mov	r0, r4
   d5364:	f001 fd0c 	bl	d6d80 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5368:	a801      	add	r0, sp, #4
   d536a:	f7ff fdbe 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d536e:	4620      	mov	r0, r4
   d5370:	b003      	add	sp, #12
   d5372:	bd30      	pop	{r4, r5, pc}

000d5374 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5374:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d5376:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5378:	f851 3b04 	ldr.w	r3, [r1], #4
   d537c:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d537e:	4604      	mov	r4, r0
   d5380:	a801      	add	r0, sp, #4
   d5382:	f7ff fdab 	bl	d4edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5386:	466a      	mov	r2, sp
   d5388:	4629      	mov	r1, r5
   d538a:	4620      	mov	r0, r4
   d538c:	f001 fd74 	bl	d6e78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5390:	a801      	add	r0, sp, #4
   d5392:	f7ff fdaa 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5396:	4620      	mov	r0, r4
   d5398:	b003      	add	sp, #12
   d539a:	bd30      	pop	{r4, r5, pc}

000d539c <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d539c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d539e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53a0:	f851 3b04 	ldr.w	r3, [r1], #4
   d53a4:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d53a6:	4604      	mov	r4, r0
   d53a8:	a801      	add	r0, sp, #4
   d53aa:	f7ff fd97 	bl	d4edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d53ae:	466a      	mov	r2, sp
   d53b0:	4629      	mov	r1, r5
   d53b2:	4620      	mov	r0, r4
   d53b4:	f001 fd3c 	bl	d6e30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d53b8:	a801      	add	r0, sp, #4
   d53ba:	f7ff fd96 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53be:	4620      	mov	r0, r4
   d53c0:	b003      	add	sp, #12
   d53c2:	bd30      	pop	{r4, r5, pc}

000d53c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d53c4:	b570      	push	{r4, r5, r6, lr}
   d53c6:	b08a      	sub	sp, #40	; 0x28
   d53c8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d53ca:	4601      	mov	r1, r0
   d53cc:	a804      	add	r0, sp, #16
   d53ce:	f7ff ffd1 	bl	d5374 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d53d2:	4e14      	ldr	r6, [pc, #80]	; (d5424 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d53d4:	a804      	add	r0, sp, #16
   d53d6:	f001 fd67 	bl	d6ea8 <_ZN5spark18JSONObjectIterator4nextEv>
   d53da:	b1e8      	cbz	r0, d5418 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d53dc:	a904      	add	r1, sp, #16
   d53de:	4668      	mov	r0, sp
   d53e0:	f7ff ffdc 	bl	d539c <_ZNK5spark18JSONObjectIterator4nameEv>
   d53e4:	9802      	ldr	r0, [sp, #8]
   d53e6:	4631      	mov	r1, r6
   d53e8:	f7ff fe6d 	bl	d50c6 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d53ec:	4604      	mov	r4, r0
   d53ee:	b110      	cbz	r0, d53f6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d53f0:	1e2c      	subs	r4, r5, #0
   d53f2:	bf18      	it	ne
   d53f4:	2401      	movne	r4, #1
   d53f6:	a801      	add	r0, sp, #4
   d53f8:	f7ff fd77 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53fc:	2c00      	cmp	r4, #0
   d53fe:	d0e9      	beq.n	d53d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d5400:	a904      	add	r1, sp, #16
   d5402:	4668      	mov	r0, sp
   d5404:	f7ff ffa2 	bl	d534c <_ZNK5spark18JSONObjectIterator5valueEv>
   d5408:	4668      	mov	r0, sp
   d540a:	f001 fcef 	bl	d6dec <_ZNK5spark9JSONValue5toIntEv>
   d540e:	6028      	str	r0, [r5, #0]
   d5410:	a801      	add	r0, sp, #4
   d5412:	f7ff fd6a 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5416:	e7dd      	b.n	d53d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d5418:	a805      	add	r0, sp, #20
   d541a:	f7ff fd66 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d541e:	b00a      	add	sp, #40	; 0x28
   d5420:	bd70      	pop	{r4, r5, r6, pc}
   d5422:	bf00      	nop
   d5424:	000d7e26 	.word	0x000d7e26

000d5428 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5428:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d542a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d542c:	4620      	mov	r0, r4
   d542e:	4912      	ldr	r1, [pc, #72]	; (d5478 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5430:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d5432:	f002 fbaa 	bl	d7b8a <strcmp>
   d5436:	b948      	cbnz	r0, d544c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d5438:	f001 fa08 	bl	d684c <_Z16_fetch_usbserialv>
   d543c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5440:	f001 f9f4 	bl	d682c <_ZN9USBSerial5beginEl>
        return &Serial;
   d5444:	f001 fa02 	bl	d684c <_Z16_fetch_usbserialv>
}
   d5448:	b003      	add	sp, #12
   d544a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d544c:	490b      	ldr	r1, [pc, #44]	; (d547c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d544e:	4620      	mov	r0, r4
   d5450:	f002 fb9b 	bl	d7b8a <strcmp>
   d5454:	b970      	cbnz	r0, d5474 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5456:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d545a:	a901      	add	r1, sp, #4
   d545c:	4628      	mov	r0, r5
        int baud = 9600;
   d545e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d5460:	f7ff ffb0 	bl	d53c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5464:	f001 fac6 	bl	d69f4 <_Z22__fetch_global_Serial1v>
   d5468:	9901      	ldr	r1, [sp, #4]
   d546a:	f001 fabd 	bl	d69e8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d546e:	f001 fac1 	bl	d69f4 <_Z22__fetch_global_Serial1v>
   d5472:	e7e9      	b.n	d5448 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5474:	2000      	movs	r0, #0
   d5476:	e7e7      	b.n	d5448 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d5478:	000d7e2b 	.word	0x000d7e2b
   d547c:	000d7e32 	.word	0x000d7e32

000d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5480:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5482:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5486:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5488:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d548a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d548e:	42ae      	cmp	r6, r5
   d5490:	d005      	beq.n	d549e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d5492:	f105 0008 	add.w	r0, r5, #8
   d5496:	f7ff fff3 	bl	d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d549a:	3514      	adds	r5, #20
   d549c:	e7f7      	b.n	d548e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d549e:	6820      	ldr	r0, [r4, #0]
   d54a0:	f7ff fb1e 	bl	d4ae0 <free>
}
   d54a4:	4620      	mov	r0, r4
   d54a6:	bd70      	pop	{r4, r5, r6, pc}

000d54a8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d54a8:	b510      	push	{r4, lr}
   d54aa:	4604      	mov	r4, r0
   d54ac:	300c      	adds	r0, #12
   d54ae:	f7ff ffe7 	bl	d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d54b2:	4620      	mov	r0, r4
   d54b4:	f7ff fd00 	bl	d4eb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d54b8:	4620      	mov	r0, r4
   d54ba:	bd10      	pop	{r4, pc}

000d54bc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d54bc:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d54be:	4b04      	ldr	r3, [pc, #16]	; (d54d0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d54c0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d54c2:	f840 3b04 	str.w	r3, [r0], #4
   d54c6:	f7ff ffef 	bl	d54a8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d54ca:	4620      	mov	r0, r4
   d54cc:	bd10      	pop	{r4, pc}
   d54ce:	bf00      	nop
   d54d0:	000d7d88 	.word	0x000d7d88

000d54d4 <_ZN5spark16StreamLogHandlerD0Ev>:
   d54d4:	b510      	push	{r4, lr}
   d54d6:	4604      	mov	r4, r0
   d54d8:	f7ff fff0 	bl	d54bc <_ZN5spark16StreamLogHandlerD1Ev>
   d54dc:	4620      	mov	r0, r4
   d54de:	2124      	movs	r1, #36	; 0x24
   d54e0:	f001 feb3 	bl	d724a <_ZdlPvj>
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d54e8:	b510      	push	{r4, lr}
   d54ea:	4b03      	ldr	r3, [pc, #12]	; (d54f8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d54ec:	6003      	str	r3, [r0, #0]
   d54ee:	4604      	mov	r4, r0
   d54f0:	f7ff ffe4 	bl	d54bc <_ZN5spark16StreamLogHandlerD1Ev>
   d54f4:	4620      	mov	r0, r4
   d54f6:	bd10      	pop	{r4, pc}
   d54f8:	000d7ed8 	.word	0x000d7ed8

000d54fc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d54fc:	b510      	push	{r4, lr}
   d54fe:	4604      	mov	r4, r0
   d5500:	f7ff fff2 	bl	d54e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5504:	4620      	mov	r0, r4
   d5506:	2124      	movs	r1, #36	; 0x24
   d5508:	f001 fe9f 	bl	d724a <_ZdlPvj>
   d550c:	4620      	mov	r0, r4
   d550e:	bd10      	pop	{r4, pc}

000d5510 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d5510:	2200      	movs	r2, #0
   d5512:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5516:	b510      	push	{r4, lr}
        capacity_(0) {
   d5518:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d551a:	680c      	ldr	r4, [r1, #0]
   d551c:	6004      	str	r4, [r0, #0]
   d551e:	684c      	ldr	r4, [r1, #4]
   d5520:	6044      	str	r4, [r0, #4]
   d5522:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5524:	600a      	str	r2, [r1, #0]
   d5526:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5528:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d552a:	608a      	str	r2, [r1, #8]
}
   d552c:	bd10      	pop	{r4, pc}

000d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d552e:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5530:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d5532:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5534:	6818      	ldr	r0, [r3, #0]
   d5536:	f7ff f8d5 	bl	d46e4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d553a:	4620      	mov	r0, r4
   d553c:	bd10      	pop	{r4, pc}
	...

000d5540 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5544:	b087      	sub	sp, #28
   d5546:	4680      	mov	r8, r0
   d5548:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d554a:	4b1c      	ldr	r3, [pc, #112]	; (d55bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d554c:	685b      	ldr	r3, [r3, #4]
   d554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5552:	4689      	mov	r9, r1
   d5554:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5556:	b96b      	cbnz	r3, d5574 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d5558:	f7ff fec6 	bl	d52e8 <_ZN5spark10LogManager8instanceEv>
   d555c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d555e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5562:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5564:	9305      	str	r3, [sp, #20]
   d5566:	f7ff f8b5 	bl	d46d4 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d556a:	7b23      	ldrb	r3, [r4, #12]
   d556c:	b12b      	cbz	r3, d557a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d556e:	a805      	add	r0, sp, #20
   d5570:	f7ff ffdd 	bl	d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5574:	b007      	add	sp, #28
   d5576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d557a:	2301      	movs	r3, #1
   d557c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d557e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5582:	fa5f f989 	uxtb.w	r9, r9
   d5586:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d558a:	45aa      	cmp	sl, r5
   d558c:	d012      	beq.n	d55b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d558e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5592:	4631      	mov	r1, r6
   d5594:	1d38      	adds	r0, r7, #4
   d5596:	f7ff fe2b 	bl	d51f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d559a:	4581      	cmp	r9, r0
   d559c:	d3f5      	bcc.n	d558a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d559e:	683b      	ldr	r3, [r7, #0]
   d55a0:	9a03      	ldr	r2, [sp, #12]
   d55a2:	9200      	str	r2, [sp, #0]
   d55a4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d55a8:	464a      	mov	r2, r9
   d55aa:	4633      	mov	r3, r6
   d55ac:	4641      	mov	r1, r8
   d55ae:	4638      	mov	r0, r7
   d55b0:	47d8      	blx	fp
   d55b2:	e7ea      	b.n	d558a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d55b4:	2300      	movs	r3, #0
   d55b6:	7323      	strb	r3, [r4, #12]
   d55b8:	e7d9      	b.n	d556e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d55ba:	bf00      	nop
   d55bc:	e000ed00 	.word	0xe000ed00

000d55c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d55c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55c4:	469b      	mov	fp, r3
   d55c6:	4b1a      	ldr	r3, [pc, #104]	; (d5630 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d55c8:	685b      	ldr	r3, [r3, #4]
   d55ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d55ce:	4680      	mov	r8, r0
   d55d0:	4689      	mov	r9, r1
   d55d2:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d55d4:	b96b      	cbnz	r3, d55f2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d55d6:	f7ff fe87 	bl	d52e8 <_ZN5spark10LogManager8instanceEv>
   d55da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d55dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d55e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d55e2:	9301      	str	r3, [sp, #4]
   d55e4:	f7ff f876 	bl	d46d4 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d55e8:	7b23      	ldrb	r3, [r4, #12]
   d55ea:	b12b      	cbz	r3, d55f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d55ec:	a801      	add	r0, sp, #4
   d55ee:	f7ff ff9e 	bl	d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d55f2:	b003      	add	sp, #12
   d55f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d55f8:	2301      	movs	r3, #1
   d55fa:	7323      	strb	r3, [r4, #12]
   d55fc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d5600:	b2f6      	uxtb	r6, r6
   d5602:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5606:	4555      	cmp	r5, sl
   d5608:	d00e      	beq.n	d5628 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d560a:	f855 7b04 	ldr.w	r7, [r5], #4
   d560e:	4659      	mov	r1, fp
   d5610:	1d38      	adds	r0, r7, #4
   d5612:	f7ff fded 	bl	d51f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5616:	4286      	cmp	r6, r0
   d5618:	d3f5      	bcc.n	d5606 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d561a:	683b      	ldr	r3, [r7, #0]
   d561c:	464a      	mov	r2, r9
   d561e:	68db      	ldr	r3, [r3, #12]
   d5620:	4641      	mov	r1, r8
   d5622:	4638      	mov	r0, r7
   d5624:	4798      	blx	r3
   d5626:	e7ee      	b.n	d5606 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d5628:	2300      	movs	r3, #0
   d562a:	7323      	strb	r3, [r4, #12]
   d562c:	e7de      	b.n	d55ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d562e:	bf00      	nop
   d5630:	e000ed00 	.word	0xe000ed00

000d5634 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5638:	4b16      	ldr	r3, [pc, #88]	; (d5694 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d563a:	685b      	ldr	r3, [r3, #4]
   d563c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5640:	4605      	mov	r5, r0
   d5642:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d5644:	bb1b      	cbnz	r3, d568e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d5646:	f7ff fe4f 	bl	d52e8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d564a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d564e:	4604      	mov	r4, r0
   d5650:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5652:	9301      	str	r3, [sp, #4]
   d5654:	f7ff f83e 	bl	d46d4 <os_mutex_recursive_lock>
   d5658:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d565c:	2446      	movs	r4, #70	; 0x46
   d565e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5662:	45b0      	cmp	r8, r6
   d5664:	d109      	bne.n	d567a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d5666:	a801      	add	r0, sp, #4
   d5668:	f7ff ff61 	bl	d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d566c:	42a5      	cmp	r5, r4
   d566e:	bfb4      	ite	lt
   d5670:	2000      	movlt	r0, #0
   d5672:	2001      	movge	r0, #1
}
   d5674:	b002      	add	sp, #8
   d5676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d567a:	f856 0b04 	ldr.w	r0, [r6], #4
   d567e:	4639      	mov	r1, r7
   d5680:	3004      	adds	r0, #4
   d5682:	f7ff fdb5 	bl	d51f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d5686:	4284      	cmp	r4, r0
   d5688:	bfa8      	it	ge
   d568a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d568c:	e7e9      	b.n	d5662 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d568e:	2000      	movs	r0, #0
   d5690:	e7f0      	b.n	d5674 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5692:	bf00      	nop
   d5694:	e000ed00 	.word	0xe000ed00

000d5698 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5698:	b570      	push	{r4, r5, r6, lr}
   d569a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d569c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d56a0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d56a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d56a6:	4282      	cmp	r2, r0
   d56a8:	d007      	beq.n	d56ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d56aa:	4601      	mov	r1, r0
            if (*p == value) {
   d56ac:	681d      	ldr	r5, [r3, #0]
   d56ae:	f851 6b04 	ldr.w	r6, [r1], #4
   d56b2:	42ae      	cmp	r6, r5
   d56b4:	d003      	beq.n	d56be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d56b6:	4608      	mov	r0, r1
   d56b8:	e7f5      	b.n	d56a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d56ba:	2000      	movs	r0, #0
}
   d56bc:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d56be:	1a52      	subs	r2, r2, r1
   d56c0:	f002 fa06 	bl	d7ad0 <memmove>
    --size_;
   d56c4:	6863      	ldr	r3, [r4, #4]
   d56c6:	3b01      	subs	r3, #1
   d56c8:	6063      	str	r3, [r4, #4]
    return true;
   d56ca:	2001      	movs	r0, #1
   d56cc:	e7f6      	b.n	d56bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d56ce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d56ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d56d0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d56d4:	4604      	mov	r4, r0
   d56d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d56d8:	9101      	str	r1, [sp, #4]
   d56da:	9303      	str	r3, [sp, #12]
   d56dc:	f7fe fffa 	bl	d46d4 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d56e0:	a901      	add	r1, sp, #4
   d56e2:	4620      	mov	r0, r4
   d56e4:	f7ff ffd8 	bl	d5698 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d56e8:	b118      	cbz	r0, d56f2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d56ea:	6863      	ldr	r3, [r4, #4]
   d56ec:	b90b      	cbnz	r3, d56f2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d56ee:	f7ff fe27 	bl	d5340 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d56f2:	a803      	add	r0, sp, #12
   d56f4:	f7ff ff1b 	bl	d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d56f8:	b004      	add	sp, #16
   d56fa:	bd10      	pop	{r4, pc}

000d56fc <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d56fc:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d56fe:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d5702:	2318      	movs	r3, #24
   d5704:	4604      	mov	r4, r0
   d5706:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d570a:	42ae      	cmp	r6, r5
   d570c:	d015      	beq.n	d573a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d570e:	f105 0110 	add.w	r1, r5, #16
   d5712:	4620      	mov	r0, r4
   d5714:	f7ff ffc0 	bl	d5698 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5718:	6863      	ldr	r3, [r4, #4]
   d571a:	b90b      	cbnz	r3, d5720 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d571c:	f7ff fe10 	bl	d5340 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d5720:	69e0      	ldr	r0, [r4, #28]
   d5722:	6929      	ldr	r1, [r5, #16]
   d5724:	6803      	ldr	r3, [r0, #0]
   d5726:	68db      	ldr	r3, [r3, #12]
   d5728:	4798      	blx	r3
        if (h.stream) {
   d572a:	6969      	ldr	r1, [r5, #20]
   d572c:	b119      	cbz	r1, d5736 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d572e:	6a20      	ldr	r0, [r4, #32]
   d5730:	6803      	ldr	r3, [r0, #0]
   d5732:	68db      	ldr	r3, [r3, #12]
   d5734:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d5736:	3518      	adds	r5, #24
   d5738:	e7e7      	b.n	d570a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d573a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d573e:	2618      	movs	r6, #24
   d5740:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5744:	42ae      	cmp	r6, r5
   d5746:	d004      	beq.n	d5752 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d5748:	4628      	mov	r0, r5
   d574a:	f7ff fb07 	bl	d4d5c <_ZN6StringD1Ev>
   d574e:	3518      	adds	r5, #24
   d5750:	e7f8      	b.n	d5744 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d5752:	2300      	movs	r3, #0
   d5754:	6163      	str	r3, [r4, #20]
}
   d5756:	bd70      	pop	{r4, r5, r6, pc}

000d5758 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d5758:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d575a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d575c:	f7ff fdf0 	bl	d5340 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5760:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d5764:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5766:	9301      	str	r3, [sp, #4]
   d5768:	f7fe ffb4 	bl	d46d4 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d576c:	4620      	mov	r0, r4
   d576e:	f7ff ffc5 	bl	d56fc <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5772:	a801      	add	r0, sp, #4
   d5774:	f7ff fedb 	bl	d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d5778:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d577a:	b108      	cbz	r0, d5780 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d577c:	f7fe ffa2 	bl	d46c4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5780:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5784:	2618      	movs	r6, #24
   d5786:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d578a:	42ae      	cmp	r6, r5
   d578c:	d004      	beq.n	d5798 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d578e:	4628      	mov	r0, r5
   d5790:	f7ff fae4 	bl	d4d5c <_ZN6StringD1Ev>
   d5794:	3518      	adds	r5, #24
   d5796:	e7f8      	b.n	d578a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d5798:	6920      	ldr	r0, [r4, #16]
   d579a:	f7ff f9a1 	bl	d4ae0 <free>
   d579e:	6820      	ldr	r0, [r4, #0]
   d57a0:	f7ff f99e 	bl	d4ae0 <free>
}
   d57a4:	4620      	mov	r0, r4
   d57a6:	b002      	add	sp, #8
   d57a8:	bd70      	pop	{r4, r5, r6, pc}

000d57aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d57aa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d57ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57ae:	4606      	mov	r6, r0
   d57b0:	460c      	mov	r4, r1
   d57b2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d57b4:	d927      	bls.n	d5806 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d57b6:	4290      	cmp	r0, r2
   d57b8:	d226      	bcs.n	d5808 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d57ba:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d57be:	1a6c      	subs	r4, r5, r1
   d57c0:	f1a1 0714 	sub.w	r7, r1, #20
   d57c4:	4404      	add	r4, r0
        capacity_(0) {
   d57c6:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d57c8:	42af      	cmp	r7, r5
   d57ca:	d03d      	beq.n	d5848 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d57cc:	b1a4      	cbz	r4, d57f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d57ce:	682b      	ldr	r3, [r5, #0]
   d57d0:	6023      	str	r3, [r4, #0]
   d57d2:	88ab      	ldrh	r3, [r5, #4]
   d57d4:	80a3      	strh	r3, [r4, #4]
   d57d6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d57da:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d57dc:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d57e0:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57e2:	68ab      	ldr	r3, [r5, #8]
   d57e4:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57e6:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57e8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d57ea:	68ea      	ldr	r2, [r5, #12]
   d57ec:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d57ee:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57f0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57f2:	692a      	ldr	r2, [r5, #16]
   d57f4:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d57f6:	612b      	str	r3, [r5, #16]
   d57f8:	f105 0008 	add.w	r0, r5, #8
   d57fc:	f7ff fe40 	bl	d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d5800:	3d14      	subs	r5, #20
   d5802:	3c14      	subs	r4, #20
   d5804:	e7e0      	b.n	d57c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d5806:	d01f      	beq.n	d5848 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5808:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d580a:	42ac      	cmp	r4, r5
   d580c:	d01c      	beq.n	d5848 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d580e:	b1a6      	cbz	r6, d583a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d5810:	6823      	ldr	r3, [r4, #0]
   d5812:	6033      	str	r3, [r6, #0]
   d5814:	88a3      	ldrh	r3, [r4, #4]
   d5816:	80b3      	strh	r3, [r6, #4]
   d5818:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d581c:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d581e:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d5822:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5824:	68a3      	ldr	r3, [r4, #8]
   d5826:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5828:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d582a:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d582c:	68e2      	ldr	r2, [r4, #12]
   d582e:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5830:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5832:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5834:	6922      	ldr	r2, [r4, #16]
   d5836:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5838:	6123      	str	r3, [r4, #16]
   d583a:	f104 0008 	add.w	r0, r4, #8
   d583e:	f7ff fe1f 	bl	d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5842:	3414      	adds	r4, #20
   d5844:	3614      	adds	r6, #20
   d5846:	e7e0      	b.n	d580a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d5848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d584a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d584a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d584c:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5850:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5852:	4604      	mov	r4, r0
   d5854:	460e      	mov	r6, r1
   d5856:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5858:	db0d      	blt.n	d5876 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d585a:	3501      	adds	r5, #1
        if (n > 0) {
   d585c:	2d00      	cmp	r5, #0
   d585e:	6800      	ldr	r0, [r0, #0]
   d5860:	dd04      	ble.n	d586c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5862:	00a9      	lsls	r1, r5, #2
   d5864:	f7ff f944 	bl	d4af0 <realloc>
            if (!d) {
   d5868:	b918      	cbnz	r0, d5872 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d586a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d586c:	f7ff f938 	bl	d4ae0 <free>
        T* d = nullptr;
   d5870:	2000      	movs	r0, #0
        data_ = d;
   d5872:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5874:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d5876:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5878:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d587a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d587e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5880:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5884:	1d08      	adds	r0, r1, #4
   d5886:	f002 f923 	bl	d7ad0 <memmove>
    new(p) T(std::move(value));
   d588a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d588e:	6863      	ldr	r3, [r4, #4]
   d5890:	3301      	adds	r3, #1
   d5892:	6063      	str	r3, [r4, #4]
    return true;
   d5894:	2001      	movs	r0, #1
   d5896:	e7e8      	b.n	d586a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d5898 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5898:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d589a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d589e:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d58a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d58a2:	9301      	str	r3, [sp, #4]
   d58a4:	460d      	mov	r5, r1
   d58a6:	f7fe ff15 	bl	d46d4 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d58aa:	e9d4 3100 	ldrd	r3, r1, [r4]
   d58ae:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d58b2:	4283      	cmp	r3, r0
   d58b4:	461a      	mov	r2, r3
   d58b6:	d00b      	beq.n	d58d0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d58b8:	6812      	ldr	r2, [r2, #0]
   d58ba:	42aa      	cmp	r2, r5
   d58bc:	f103 0304 	add.w	r3, r3, #4
   d58c0:	d1f7      	bne.n	d58b2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d58c2:	a801      	add	r0, sp, #4
   d58c4:	f7ff fe33 	bl	d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d58c8:	2500      	movs	r5, #0
}
   d58ca:	4628      	mov	r0, r5
   d58cc:	b003      	add	sp, #12
   d58ce:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d58d0:	462a      	mov	r2, r5
   d58d2:	4620      	mov	r0, r4
   d58d4:	f7ff ffb9 	bl	d584a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d58d8:	4605      	mov	r5, r0
   d58da:	2800      	cmp	r0, #0
   d58dc:	d0f1      	beq.n	d58c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d58de:	6863      	ldr	r3, [r4, #4]
   d58e0:	2b01      	cmp	r3, #1
   d58e2:	d101      	bne.n	d58e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d58e4:	f7ff fd20 	bl	d5328 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d58e8:	a801      	add	r0, sp, #4
   d58ea:	f7ff fe20 	bl	d552e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d58ee:	e7ec      	b.n	d58ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d58f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d58f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d58f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58f4:	4604      	mov	r4, r0
   d58f6:	460d      	mov	r5, r1
   d58f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d58fa:	d914      	bls.n	d5926 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d58fc:	4290      	cmp	r0, r2
   d58fe:	d213      	bcs.n	d5928 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d5900:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d5904:	1a75      	subs	r5, r6, r1
   d5906:	f1a1 0710 	sub.w	r7, r1, #16
   d590a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d590c:	42b7      	cmp	r7, r6
   d590e:	d018      	beq.n	d5942 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5910:	b11c      	cbz	r4, d591a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5912:	4631      	mov	r1, r6
   d5914:	4620      	mov	r0, r4
   d5916:	f7ff fa89 	bl	d4e2c <_ZN6StringC1EOS_>
                end->~T();
   d591a:	4630      	mov	r0, r6
   d591c:	f7ff fa1e 	bl	d4d5c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5920:	3e10      	subs	r6, #16
   d5922:	3c10      	subs	r4, #16
   d5924:	e7f2      	b.n	d590c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5926:	d00c      	beq.n	d5942 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5928:	42b5      	cmp	r5, r6
   d592a:	d00a      	beq.n	d5942 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d592c:	b11c      	cbz	r4, d5936 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d592e:	4629      	mov	r1, r5
   d5930:	4620      	mov	r0, r4
   d5932:	f7ff fa7b 	bl	d4e2c <_ZN6StringC1EOS_>
                p->~T();
   d5936:	4628      	mov	r0, r5
   d5938:	f7ff fa10 	bl	d4d5c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d593c:	3510      	adds	r5, #16
   d593e:	3410      	adds	r4, #16
   d5940:	e7f2      	b.n	d5928 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5944 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5944:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5946:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5948:	4605      	mov	r5, r0
        if (n > 0) {
   d594a:	dd11      	ble.n	d5970 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d594c:	0130      	lsls	r0, r6, #4
   d594e:	f7ff f8bf 	bl	d4ad0 <malloc>
            if (!d) {
   d5952:	4604      	mov	r4, r0
   d5954:	b158      	cbz	r0, d596e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5956:	e9d5 1200 	ldrd	r1, r2, [r5]
   d595a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d595e:	f7ff ffc7 	bl	d58f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5962:	6828      	ldr	r0, [r5, #0]
   d5964:	f7ff f8bc 	bl	d4ae0 <free>
        data_ = d;
   d5968:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d596a:	60ae      	str	r6, [r5, #8]
        return true;
   d596c:	2001      	movs	r0, #1
    }
   d596e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5970:	2400      	movs	r4, #0
   d5972:	e7f6      	b.n	d5962 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5974 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5978:	4691      	mov	r9, r2
   d597a:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d597c:	2300      	movs	r3, #0
   d597e:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5980:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5984:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5986:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5988:	4299      	cmp	r1, r3
        capacity_(0) {
   d598a:	e9c0 3300 	strd	r3, r3, [r0]
   d598e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5992:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5996:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d599a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d599c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d599e:	dc23      	bgt.n	d59e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d59a0:	e9d9 5700 	ldrd	r5, r7, [r9]
   d59a4:	2314      	movs	r3, #20
   d59a6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d59aa:	42af      	cmp	r7, r5
   d59ac:	d03b      	beq.n	d5a26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d59ae:	4629      	mov	r1, r5
   d59b0:	a80d      	add	r0, sp, #52	; 0x34
   d59b2:	f7ff fa3b 	bl	d4e2c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d59b6:	a90d      	add	r1, sp, #52	; 0x34
   d59b8:	a811      	add	r0, sp, #68	; 0x44
   d59ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d59bc:	f7ff fa36 	bl	d4e2c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d59c0:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d59c4:	4299      	cmp	r1, r3
   d59c6:	da1b      	bge.n	d5a00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d59c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d59ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d59cc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d59d0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d59d4:	4631      	mov	r1, r6
   d59d6:	f106 0010 	add.w	r0, r6, #16
   d59da:	f7ff ff89 	bl	d58f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d59de:	b9ee      	cbnz	r6, d5a1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d59e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d59e2:	3301      	adds	r3, #1
   d59e4:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d59e6:	e011      	b.n	d5a0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d59e8:	a80a      	add	r0, sp, #40	; 0x28
   d59ea:	f7ff ffab 	bl	d5944 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d59ee:	2800      	cmp	r0, #0
   d59f0:	d1d6      	bne.n	d59a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d59f2:	a80a      	add	r0, sp, #40	; 0x28
   d59f4:	f7ff fa60 	bl	d4eb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d59f8:	4620      	mov	r0, r4
   d59fa:	b017      	add	sp, #92	; 0x5c
   d59fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a00:	3101      	adds	r1, #1
   d5a02:	a80a      	add	r0, sp, #40	; 0x28
   d5a04:	f7ff ff9e 	bl	d5944 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5a08:	2800      	cmp	r0, #0
   d5a0a:	d1dd      	bne.n	d59c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d5a0c:	a811      	add	r0, sp, #68	; 0x44
   d5a0e:	f7ff f9a5 	bl	d4d5c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d5a12:	a80d      	add	r0, sp, #52	; 0x34
   d5a14:	f7ff f9a2 	bl	d4d5c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5a18:	3514      	adds	r5, #20
   d5a1a:	e7c6      	b.n	d59aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5a1c:	a911      	add	r1, sp, #68	; 0x44
   d5a1e:	4630      	mov	r0, r6
   d5a20:	f7ff fa04 	bl	d4e2c <_ZN6StringC1EOS_>
   d5a24:	e7dc      	b.n	d59e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d5a26:	2600      	movs	r6, #0
   d5a28:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5a2c:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5a2e:	4637      	mov	r7, r6
   d5a30:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5a34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5a38:	429e      	cmp	r6, r3
   d5a3a:	f280 8097 	bge.w	d5b6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5a3e:	0133      	lsls	r3, r6, #4
   d5a40:	58d3      	ldr	r3, [r2, r3]
   d5a42:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5a44:	b90b      	cbnz	r3, d5a4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d5a46:	3601      	adds	r6, #1
   d5a48:	e7f4      	b.n	d5a34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d5a4a:	fb0a f306 	mul.w	r3, sl, r6
   d5a4e:	9709      	str	r7, [sp, #36]	; 0x24
   d5a50:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5a52:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5a54:	a909      	add	r1, sp, #36	; 0x24
   d5a56:	a808      	add	r0, sp, #32
   d5a58:	f7ff fb0e 	bl	d5078 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5a5c:	4683      	mov	fp, r0
   d5a5e:	2800      	cmp	r0, #0
   d5a60:	d0f1      	beq.n	d5a46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5a62:	4601      	mov	r1, r0
   d5a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5a66:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5a6a:	f10d 031f 	add.w	r3, sp, #31
   d5a6e:	4628      	mov	r0, r5
   d5a70:	f7ff fb80 	bl	d5174 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5a74:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5a78:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5a7a:	f1b8 0f00 	cmp.w	r8, #0
   d5a7e:	d166      	bne.n	d5b4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5a80:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5a84:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5a88:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5a90:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5a94:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5a98:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a9c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5aa0:	4293      	cmp	r3, r2
   d5aa2:	db1a      	blt.n	d5ada <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5aa4:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5aa8:	f1bb 0f00 	cmp.w	fp, #0
   d5aac:	dd4a      	ble.n	d5b44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5aae:	fb0a f00b 	mul.w	r0, sl, fp
   d5ab2:	f7ff f80d 	bl	d4ad0 <malloc>
            if (!d) {
   d5ab6:	9004      	str	r0, [sp, #16]
   d5ab8:	2800      	cmp	r0, #0
   d5aba:	d045      	beq.n	d5b48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5abc:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5ac0:	fb0a 1202 	mla	r2, sl, r2, r1
   d5ac4:	f7ff fe71 	bl	d57aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5ac8:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5aca:	6828      	ldr	r0, [r5, #0]
   d5acc:	9304      	str	r3, [sp, #16]
   d5ace:	f7ff f807 	bl	d4ae0 <free>
        data_ = d;
   d5ad2:	9b04      	ldr	r3, [sp, #16]
   d5ad4:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5ad6:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5ada:	9b01      	ldr	r3, [sp, #4]
   d5adc:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5ae0:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5ae2:	fb0a f303 	mul.w	r3, sl, r3
   d5ae6:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d5aea:	f101 0014 	add.w	r0, r1, #20
   d5aee:	fb0a b202 	mla	r2, sl, r2, fp
   d5af2:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5af4:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5af6:	f7ff fe58 	bl	d57aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5afa:	9904      	ldr	r1, [sp, #16]
   d5afc:	b1a9      	cbz	r1, d5b2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d5afe:	9b05      	ldr	r3, [sp, #20]
   d5b00:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5b02:	f84b 2003 	str.w	r2, [fp, r3]
   d5b06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5b0a:	808b      	strh	r3, [r1, #4]
   d5b0c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5b10:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5b12:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5b16:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5b1a:	608b      	str	r3, [r1, #8]
   d5b1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5b1e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5b20:	60cb      	str	r3, [r1, #12]
   d5b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5b24:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5b26:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b28:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d5b2a:	686b      	ldr	r3, [r5, #4]
   d5b2c:	3301      	adds	r3, #1
   d5b2e:	606b      	str	r3, [r5, #4]
   d5b30:	a813      	add	r0, sp, #76	; 0x4c
   d5b32:	f7ff fca5 	bl	d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5b36:	f1b8 0f00 	cmp.w	r8, #0
   d5b3a:	d008      	beq.n	d5b4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5b3c:	a80d      	add	r0, sp, #52	; 0x34
   d5b3e:	f7ff fc9f 	bl	d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5b42:	e756      	b.n	d59f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5b44:	4643      	mov	r3, r8
   d5b46:	e7c0      	b.n	d5aca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5b48:	f04f 0801 	mov.w	r8, #1
   d5b4c:	e7f0      	b.n	d5b30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5b4e:	9b01      	ldr	r3, [sp, #4]
   d5b50:	682d      	ldr	r5, [r5, #0]
   d5b52:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5b56:	9b08      	ldr	r3, [sp, #32]
   d5b58:	781b      	ldrb	r3, [r3, #0]
   d5b5a:	b92b      	cbnz	r3, d5b68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5b5c:	f8d9 3000 	ldr.w	r3, [r9]
   d5b60:	9a02      	ldr	r2, [sp, #8]
   d5b62:	4413      	add	r3, r2
   d5b64:	7c1b      	ldrb	r3, [r3, #16]
   d5b66:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5b68:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5b6a:	e773      	b.n	d5a54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b6c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5b6e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b70:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5b72:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b74:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b76:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5b78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5b7a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b7c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5b7e:	60a2      	str	r2, [r4, #8]
   d5b80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5b82:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b84:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5b86:	60e2      	str	r2, [r4, #12]
   d5b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5b8a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b8c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5b8e:	6122      	str	r2, [r4, #16]
   d5b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5b92:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5b94:	9b03      	ldr	r3, [sp, #12]
   d5b96:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5b98:	6162      	str	r2, [r4, #20]
   d5b9a:	7623      	strb	r3, [r4, #24]
   d5b9c:	e7ce      	b.n	d5b3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5ba0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5ba2:	4605      	mov	r5, r0
   d5ba4:	4b09      	ldr	r3, [pc, #36]	; (d5bcc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5ba6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5baa:	4604      	mov	r4, r0
   d5bac:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5bae:	a801      	add	r0, sp, #4
   d5bb0:	4611      	mov	r1, r2
   d5bb2:	f7fe fc70 	bl	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5bb6:	aa01      	add	r2, sp, #4
   d5bb8:	4631      	mov	r1, r6
   d5bba:	4628      	mov	r0, r5
   d5bbc:	f7ff feda 	bl	d5974 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5bc0:	a801      	add	r0, sp, #4
   d5bc2:	f7fe fc27 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	b004      	add	sp, #16
   d5bca:	bd70      	pop	{r4, r5, r6, pc}
   d5bcc:	000d7d88 	.word	0x000d7d88

000d5bd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bd2:	460f      	mov	r7, r1
   d5bd4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5bd6:	4926      	ldr	r1, [pc, #152]	; (d5c70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5bd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5bda:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5bdc:	4616      	mov	r6, r2
   d5bde:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5be0:	f001 ffd3 	bl	d7b8a <strcmp>
   d5be4:	bb00      	cbnz	r0, d5c28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5be6:	b1e4      	cbz	r4, d5c22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5be8:	4629      	mov	r1, r5
   d5bea:	4668      	mov	r0, sp
   d5bec:	f7ff fc90 	bl	d5510 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5bf0:	4920      	ldr	r1, [pc, #128]	; (d5c74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5bf2:	2024      	movs	r0, #36	; 0x24
   d5bf4:	f001 fb2b 	bl	d724e <_ZnwjRKSt9nothrow_t>
   d5bf8:	4605      	mov	r5, r0
   d5bfa:	b170      	cbz	r0, d5c1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5bfc:	4669      	mov	r1, sp
   d5bfe:	a803      	add	r0, sp, #12
   d5c00:	f7fe fc49 	bl	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5c04:	aa03      	add	r2, sp, #12
   d5c06:	4631      	mov	r1, r6
   d5c08:	4628      	mov	r0, r5
   d5c0a:	f7ff ffc9 	bl	d5ba0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5c0e:	a803      	add	r0, sp, #12
   d5c10:	f7fe fc00 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5c14:	4b18      	ldr	r3, [pc, #96]	; (d5c78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5c16:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5c18:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5c1a:	4668      	mov	r0, sp
   d5c1c:	f7fe fbfa 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5c20:	462c      	mov	r4, r5
}
   d5c22:	4620      	mov	r0, r4
   d5c24:	b007      	add	sp, #28
   d5c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5c28:	4914      	ldr	r1, [pc, #80]	; (d5c7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5c2a:	4638      	mov	r0, r7
   d5c2c:	f001 ffad 	bl	d7b8a <strcmp>
   d5c30:	b9e0      	cbnz	r0, d5c6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5c32:	2c00      	cmp	r4, #0
   d5c34:	d0f5      	beq.n	d5c22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5c36:	4629      	mov	r1, r5
   d5c38:	4668      	mov	r0, sp
   d5c3a:	f7ff fc69 	bl	d5510 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5c3e:	490d      	ldr	r1, [pc, #52]	; (d5c74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5c40:	2024      	movs	r0, #36	; 0x24
   d5c42:	f001 fb04 	bl	d724e <_ZnwjRKSt9nothrow_t>
   d5c46:	4605      	mov	r5, r0
   d5c48:	2800      	cmp	r0, #0
   d5c4a:	d0e6      	beq.n	d5c1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5c4c:	4669      	mov	r1, sp
   d5c4e:	a803      	add	r0, sp, #12
   d5c50:	f7fe fc21 	bl	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5c54:	aa03      	add	r2, sp, #12
   d5c56:	4631      	mov	r1, r6
   d5c58:	4628      	mov	r0, r5
   d5c5a:	f7ff ffa1 	bl	d5ba0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5c5e:	a803      	add	r0, sp, #12
   d5c60:	f7fe fbd8 	bl	d4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5c64:	4b06      	ldr	r3, [pc, #24]	; (d5c80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5c66:	602b      	str	r3, [r5, #0]
   d5c68:	622c      	str	r4, [r5, #32]
}
   d5c6a:	e7d6      	b.n	d5c1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5c6c:	2400      	movs	r4, #0
   d5c6e:	e7d8      	b.n	d5c22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5c70:	000d7e3a 	.word	0x000d7e3a
   d5c74:	000d806d 	.word	0x000d806d
   d5c78:	000d7ed8 	.word	0x000d7ed8
   d5c7c:	000d7e3e 	.word	0x000d7e3e
   d5c80:	000d7ec0 	.word	0x000d7ec0

000d5c84 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5c84:	4b01      	ldr	r3, [pc, #4]	; (d5c8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c86:	4a02      	ldr	r2, [pc, #8]	; (d5c90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c88:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5c8a:	4770      	bx	lr
   d5c8c:	2003e5f4 	.word	0x2003e5f4
   d5c90:	000d7e4f 	.word	0x000d7e4f

000d5c94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c98:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5c9a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5c9e:	4604      	mov	r4, r0
   d5ca0:	460e      	mov	r6, r1
   d5ca2:	4617      	mov	r7, r2
   d5ca4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5ca6:	f000 fdd1 	bl	d684c <_Z16_fetch_usbserialv>
   d5caa:	4581      	cmp	r9, r0
   d5cac:	d04c      	beq.n	d5d48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5cae:	792b      	ldrb	r3, [r5, #4]
   d5cb0:	0719      	lsls	r1, r3, #28
   d5cb2:	d504      	bpl.n	d5cbe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5cb4:	696a      	ldr	r2, [r5, #20]
   d5cb6:	4954      	ldr	r1, [pc, #336]	; (d5e08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5cb8:	4620      	mov	r0, r4
   d5cba:	f7ff fa4c 	bl	d5156 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5cbe:	f1b8 0f00 	cmp.w	r8, #0
   d5cc2:	d00d      	beq.n	d5ce0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5cc4:	215b      	movs	r1, #91	; 0x5b
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	f7ff fa39 	bl	d513e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5ccc:	4641      	mov	r1, r8
   d5cce:	4620      	mov	r0, r4
   d5cd0:	f7ff fa26 	bl	d5120 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5cd4:	6823      	ldr	r3, [r4, #0]
   d5cd6:	494d      	ldr	r1, [pc, #308]	; (d5e0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5cd8:	68db      	ldr	r3, [r3, #12]
   d5cda:	2202      	movs	r2, #2
   d5cdc:	4620      	mov	r0, r4
   d5cde:	4798      	blx	r3
    if (attr.has_file) {
   d5ce0:	792b      	ldrb	r3, [r5, #4]
   d5ce2:	07da      	lsls	r2, r3, #31
   d5ce4:	d523      	bpl.n	d5d2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5ce6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5cea:	212f      	movs	r1, #47	; 0x2f
   d5cec:	4640      	mov	r0, r8
   d5cee:	f001 ff96 	bl	d7c1e <strrchr>
    if (s1) {
   d5cf2:	b108      	cbz	r0, d5cf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5cf4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5cf8:	4641      	mov	r1, r8
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	f7ff fa10 	bl	d5120 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5d00:	792b      	ldrb	r3, [r5, #4]
   d5d02:	079b      	lsls	r3, r3, #30
   d5d04:	d508      	bpl.n	d5d18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5d06:	213a      	movs	r1, #58	; 0x3a
   d5d08:	4620      	mov	r0, r4
   d5d0a:	f7ff fa18 	bl	d513e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5d0e:	68ea      	ldr	r2, [r5, #12]
   d5d10:	493f      	ldr	r1, [pc, #252]	; (d5e10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5d12:	4620      	mov	r0, r4
   d5d14:	f7ff fa1f 	bl	d5156 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5d18:	792a      	ldrb	r2, [r5, #4]
   d5d1a:	6823      	ldr	r3, [r4, #0]
   d5d1c:	f012 0f04 	tst.w	r2, #4
   d5d20:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5d22:	bf14      	ite	ne
   d5d24:	493b      	ldrne	r1, [pc, #236]	; (d5e14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5d26:	493c      	ldreq	r1, [pc, #240]	; (d5e18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5d28:	2202      	movs	r2, #2
            write(": ", 2);
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	4798      	blx	r3
    if (attr.has_function) {
   d5d2e:	792b      	ldrb	r3, [r5, #4]
   d5d30:	0758      	lsls	r0, r3, #29
   d5d32:	d51d      	bpl.n	d5d70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5d34:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5d36:	460b      	mov	r3, r1
   d5d38:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5d3a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5d3e:	b160      	cbz	r0, d5d5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5d40:	2820      	cmp	r0, #32
   d5d42:	d108      	bne.n	d5d56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5d44:	4619      	mov	r1, r3
   d5d46:	e7f7      	b.n	d5d38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5d48:	4834      	ldr	r0, [pc, #208]	; (d5e1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5d4a:	f000 ff18 	bl	d6b7e <_ZN5spark12NetworkClass9listeningEv>
   d5d4e:	2800      	cmp	r0, #0
   d5d50:	d0ad      	beq.n	d5cae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5d56:	2828      	cmp	r0, #40	; 0x28
   d5d58:	d1ee      	bne.n	d5d38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5d5a:	6823      	ldr	r3, [r4, #0]
   d5d5c:	1a52      	subs	r2, r2, r1
   d5d5e:	68db      	ldr	r3, [r3, #12]
   d5d60:	4620      	mov	r0, r4
   d5d62:	4798      	blx	r3
        write("(): ", 4);
   d5d64:	6823      	ldr	r3, [r4, #0]
   d5d66:	492e      	ldr	r1, [pc, #184]	; (d5e20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5d68:	68db      	ldr	r3, [r3, #12]
   d5d6a:	2204      	movs	r2, #4
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5d70:	2100      	movs	r1, #0
   d5d72:	4638      	mov	r0, r7
   d5d74:	f7fe fdc6 	bl	d4904 <log_level_name>
   d5d78:	4601      	mov	r1, r0
    write(s);
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	f7ff f9d0 	bl	d5120 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5d80:	6823      	ldr	r3, [r4, #0]
   d5d82:	4925      	ldr	r1, [pc, #148]	; (d5e18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5d84:	68db      	ldr	r3, [r3, #12]
   d5d86:	2202      	movs	r2, #2
   d5d88:	4620      	mov	r0, r4
   d5d8a:	4798      	blx	r3
    if (msg) {
   d5d8c:	b11e      	cbz	r6, d5d96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5d8e:	4631      	mov	r1, r6
   d5d90:	4620      	mov	r0, r4
   d5d92:	f7ff f9c5 	bl	d5120 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5d96:	792b      	ldrb	r3, [r5, #4]
   d5d98:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5d9c:	d02c      	beq.n	d5df8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5d9e:	6823      	ldr	r3, [r4, #0]
   d5da0:	4920      	ldr	r1, [pc, #128]	; (d5e24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5da2:	68db      	ldr	r3, [r3, #12]
   d5da4:	2202      	movs	r2, #2
   d5da6:	4620      	mov	r0, r4
   d5da8:	4798      	blx	r3
        if (attr.has_code) {
   d5daa:	792b      	ldrb	r3, [r5, #4]
   d5dac:	06d9      	lsls	r1, r3, #27
   d5dae:	d50a      	bpl.n	d5dc6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5db0:	6823      	ldr	r3, [r4, #0]
   d5db2:	491d      	ldr	r1, [pc, #116]	; (d5e28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5db4:	68db      	ldr	r3, [r3, #12]
   d5db6:	2207      	movs	r2, #7
   d5db8:	4620      	mov	r0, r4
   d5dba:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5dbc:	69aa      	ldr	r2, [r5, #24]
   d5dbe:	491b      	ldr	r1, [pc, #108]	; (d5e2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5dc0:	4620      	mov	r0, r4
   d5dc2:	f7ff f9c8 	bl	d5156 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5dc6:	792b      	ldrb	r3, [r5, #4]
   d5dc8:	069a      	lsls	r2, r3, #26
   d5dca:	d511      	bpl.n	d5df0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5dcc:	06db      	lsls	r3, r3, #27
   d5dce:	d505      	bpl.n	d5ddc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5dd0:	6823      	ldr	r3, [r4, #0]
   d5dd2:	4910      	ldr	r1, [pc, #64]	; (d5e14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5dd4:	68db      	ldr	r3, [r3, #12]
   d5dd6:	2202      	movs	r2, #2
   d5dd8:	4620      	mov	r0, r4
   d5dda:	4798      	blx	r3
            write("details = ", 10);
   d5ddc:	6823      	ldr	r3, [r4, #0]
   d5dde:	4914      	ldr	r1, [pc, #80]	; (d5e30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5de0:	68db      	ldr	r3, [r3, #12]
   d5de2:	4620      	mov	r0, r4
   d5de4:	220a      	movs	r2, #10
   d5de6:	4798      	blx	r3
            write(attr.details);
   d5de8:	69e9      	ldr	r1, [r5, #28]
   d5dea:	4620      	mov	r0, r4
   d5dec:	f7ff f998 	bl	d5120 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5df0:	215d      	movs	r1, #93	; 0x5d
   d5df2:	4620      	mov	r0, r4
   d5df4:	f7ff f9a3 	bl	d513e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5df8:	6823      	ldr	r3, [r4, #0]
   d5dfa:	490e      	ldr	r1, [pc, #56]	; (d5e34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5dfc:	68db      	ldr	r3, [r3, #12]
   d5dfe:	4620      	mov	r0, r4
   d5e00:	2202      	movs	r2, #2
}
   d5e02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5e06:	4718      	bx	r3
   d5e08:	000d7e53 	.word	0x000d7e53
   d5e0c:	000d7e5a 	.word	0x000d7e5a
   d5e10:	000d7e5d 	.word	0x000d7e5d
   d5e14:	000d7e60 	.word	0x000d7e60
   d5e18:	000d7e65 	.word	0x000d7e65
   d5e1c:	2003e7a4 	.word	0x2003e7a4
   d5e20:	000d7e63 	.word	0x000d7e63
   d5e24:	000d7e68 	.word	0x000d7e68
   d5e28:	000d7e6b 	.word	0x000d7e6b
   d5e2c:	000d7e73 	.word	0x000d7e73
   d5e30:	000d7e76 	.word	0x000d7e76
   d5e34:	000d7e81 	.word	0x000d7e81

000d5e38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e3c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5e3e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5e42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5e44:	4605      	mov	r5, r0
   d5e46:	460f      	mov	r7, r1
   d5e48:	4690      	mov	r8, r2
   d5e4a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5e4c:	f000 fcfe 	bl	d684c <_Z16_fetch_usbserialv>
   d5e50:	4581      	cmp	r9, r0
   d5e52:	d105      	bne.n	d5e60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5e54:	4849      	ldr	r0, [pc, #292]	; (d5f7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5e56:	f000 fe92 	bl	d6b7e <_ZN5spark12NetworkClass9listeningEv>
   d5e5a:	2800      	cmp	r0, #0
   d5e5c:	f040 808a 	bne.w	d5f74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5e60:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5e62:	4a47      	ldr	r2, [pc, #284]	; (d5f80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5e64:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5e66:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5e6a:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5e6c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5e6e:	f88d 9008 	strb.w	r9, [sp, #8]
   d5e72:	f001 f842 	bl	d6efa <_ZN5spark10JSONWriter11beginObjectEv>
   d5e76:	4649      	mov	r1, r9
   d5e78:	4640      	mov	r0, r8
   d5e7a:	f7fe fd43 	bl	d4904 <log_level_name>
    json.name("l", 1).value(s);
   d5e7e:	4941      	ldr	r1, [pc, #260]	; (d5f84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5e80:	4680      	mov	r8, r0
   d5e82:	2201      	movs	r2, #1
   d5e84:	a801      	add	r0, sp, #4
   d5e86:	f001 f8c1 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5e8a:	4641      	mov	r1, r8
   d5e8c:	f7ff f93a 	bl	d5104 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5e90:	b13f      	cbz	r7, d5ea2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5e92:	493d      	ldr	r1, [pc, #244]	; (d5f88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5e94:	2201      	movs	r2, #1
   d5e96:	a801      	add	r0, sp, #4
   d5e98:	f001 f8b8 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5e9c:	4639      	mov	r1, r7
   d5e9e:	f7ff f931 	bl	d5104 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5ea2:	b13e      	cbz	r6, d5eb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5ea4:	4939      	ldr	r1, [pc, #228]	; (d5f8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5ea6:	2201      	movs	r2, #1
   d5ea8:	a801      	add	r0, sp, #4
   d5eaa:	f001 f8af 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5eae:	4631      	mov	r1, r6
   d5eb0:	f7ff f928 	bl	d5104 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5eb4:	7923      	ldrb	r3, [r4, #4]
   d5eb6:	07df      	lsls	r7, r3, #31
   d5eb8:	d50e      	bpl.n	d5ed8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5eba:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5ebc:	212f      	movs	r1, #47	; 0x2f
   d5ebe:	4630      	mov	r0, r6
   d5ec0:	f001 fead 	bl	d7c1e <strrchr>
    if (s1) {
   d5ec4:	b100      	cbz	r0, d5ec8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5ec6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5ec8:	4931      	ldr	r1, [pc, #196]	; (d5f90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5eca:	2201      	movs	r2, #1
   d5ecc:	a801      	add	r0, sp, #4
   d5ece:	f001 f89d 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5ed2:	4631      	mov	r1, r6
   d5ed4:	f7ff f916 	bl	d5104 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5ed8:	7923      	ldrb	r3, [r4, #4]
   d5eda:	079e      	lsls	r6, r3, #30
   d5edc:	d507      	bpl.n	d5eee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5ede:	492d      	ldr	r1, [pc, #180]	; (d5f94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5ee0:	2202      	movs	r2, #2
   d5ee2:	a801      	add	r0, sp, #4
   d5ee4:	f001 f892 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5ee8:	68e1      	ldr	r1, [r4, #12]
   d5eea:	f001 f813 	bl	d6f14 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5eee:	7923      	ldrb	r3, [r4, #4]
   d5ef0:	0758      	lsls	r0, r3, #29
   d5ef2:	d514      	bpl.n	d5f1e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5ef4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5ef6:	4633      	mov	r3, r6
   d5ef8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5efa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5efe:	b12a      	cbz	r2, d5f0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5f00:	2a20      	cmp	r2, #32
   d5f02:	d101      	bne.n	d5f08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5f04:	461e      	mov	r6, r3
   d5f06:	e7f7      	b.n	d5ef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5f08:	2a28      	cmp	r2, #40	; 0x28
   d5f0a:	d1f5      	bne.n	d5ef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5f0c:	4922      	ldr	r1, [pc, #136]	; (d5f98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5f0e:	2202      	movs	r2, #2
   d5f10:	a801      	add	r0, sp, #4
   d5f12:	f001 f87b 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f16:	1bba      	subs	r2, r7, r6
   d5f18:	4631      	mov	r1, r6
   d5f1a:	f001 f887 	bl	d702c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5f1e:	7923      	ldrb	r3, [r4, #4]
   d5f20:	0719      	lsls	r1, r3, #28
   d5f22:	d507      	bpl.n	d5f34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5f24:	491d      	ldr	r1, [pc, #116]	; (d5f9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5f26:	2201      	movs	r2, #1
   d5f28:	a801      	add	r0, sp, #4
   d5f2a:	f001 f86f 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f2e:	6961      	ldr	r1, [r4, #20]
   d5f30:	f001 f802 	bl	d6f38 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5f34:	7923      	ldrb	r3, [r4, #4]
   d5f36:	06da      	lsls	r2, r3, #27
   d5f38:	d508      	bpl.n	d5f4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5f3a:	2204      	movs	r2, #4
   d5f3c:	4918      	ldr	r1, [pc, #96]	; (d5fa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5f3e:	eb0d 0002 	add.w	r0, sp, r2
   d5f42:	f001 f863 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f46:	69a1      	ldr	r1, [r4, #24]
   d5f48:	f000 ffe4 	bl	d6f14 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5f4c:	7923      	ldrb	r3, [r4, #4]
   d5f4e:	069b      	lsls	r3, r3, #26
   d5f50:	d507      	bpl.n	d5f62 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5f52:	4914      	ldr	r1, [pc, #80]	; (d5fa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5f54:	2206      	movs	r2, #6
   d5f56:	a801      	add	r0, sp, #4
   d5f58:	f001 f858 	bl	d700c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f5c:	69e1      	ldr	r1, [r4, #28]
   d5f5e:	f7ff f8d1 	bl	d5104 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5f62:	a801      	add	r0, sp, #4
   d5f64:	f000 ffb3 	bl	d6ece <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5f68:	6a28      	ldr	r0, [r5, #32]
   d5f6a:	490f      	ldr	r1, [pc, #60]	; (d5fa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5f6c:	6803      	ldr	r3, [r0, #0]
   d5f6e:	2202      	movs	r2, #2
   d5f70:	68db      	ldr	r3, [r3, #12]
   d5f72:	4798      	blx	r3
}
   d5f74:	b005      	add	sp, #20
   d5f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5f7a:	bf00      	nop
   d5f7c:	2003e7a4 	.word	0x2003e7a4
   d5f80:	000d7ea8 	.word	0x000d7ea8
   d5f84:	000d7e30 	.word	0x000d7e30
   d5f88:	000d7e84 	.word	0x000d7e84
   d5f8c:	000d7e86 	.word	0x000d7e86
   d5f90:	000d7e88 	.word	0x000d7e88
   d5f94:	000d7e8a 	.word	0x000d7e8a
   d5f98:	000d7e8d 	.word	0x000d7e8d
   d5f9c:	000d7e90 	.word	0x000d7e90
   d5fa0:	000d7e92 	.word	0x000d7e92
   d5fa4:	000d7e97 	.word	0x000d7e97
   d5fa8:	000d7e81 	.word	0x000d7e81

000d5fac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5fac:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5fae:	681a      	ldr	r2, [r3, #0]
   d5fb0:	4b02      	ldr	r3, [pc, #8]	; (d5fbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5fb2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5fb4:	4770      	bx	lr
   d5fb6:	bf00      	nop
   d5fb8:	2003e500 	.word	0x2003e500
   d5fbc:	2003e620 	.word	0x2003e620

000d5fc0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5fc0:	2100      	movs	r1, #0
   d5fc2:	f7fe bcb7 	b.w	d4934 <system_delay_ms>

000d5fc6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5fc6:	b510      	push	{r4, lr}
   d5fc8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fca:	f7fe ff6c 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
   d5fce:	4620      	mov	r0, r4
   d5fd0:	bd10      	pop	{r4, pc}
	...

000d5fd4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5fd4:	4803      	ldr	r0, [pc, #12]	; (d5fe4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5fd6:	4a04      	ldr	r2, [pc, #16]	; (d5fe8 <_GLOBAL__sub_I_RGB+0x14>)
   d5fd8:	4904      	ldr	r1, [pc, #16]	; (d5fec <_GLOBAL__sub_I_RGB+0x18>)
   d5fda:	2300      	movs	r3, #0
   d5fdc:	6083      	str	r3, [r0, #8]
   d5fde:	f001 b92f 	b.w	d7240 <__aeabi_atexit>
   d5fe2:	bf00      	nop
   d5fe4:	2003e624 	.word	0x2003e624
   d5fe8:	2003e568 	.word	0x2003e568
   d5fec:	000d5fc7 	.word	0x000d5fc7

000d5ff0 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d5ff0:	6800      	ldr	r0, [r0, #0]
   d5ff2:	f000 bd7b 	b.w	d6aec <_ZN7TwoWire4lockEv>

000d5ff6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d5ff6:	b510      	push	{r4, lr}
   d5ff8:	4604      	mov	r4, r0
      lock_(_lock) {
   d5ffa:	6001      	str	r1, [r0, #0]
   d5ffc:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d5ffe:	b10a      	cbz	r2, d6004 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6000:	f7ff fff6 	bl	d5ff0 <_ZN9FuelGauge4lockEv>
}
   d6004:	4620      	mov	r0, r4
   d6006:	bd10      	pop	{r4, pc}

000d6008 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d6008:	b513      	push	{r0, r1, r4, lr}
   d600a:	4604      	mov	r4, r0
   d600c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d600e:	f001 f8ef 	bl	d71f0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d6012:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d6014:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d6016:	4620      	mov	r0, r4
   d6018:	f7ff ffed 	bl	d5ff6 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d601c:	4620      	mov	r0, r4
   d601e:	b002      	add	sp, #8
   d6020:	bd10      	pop	{r4, pc}

000d6022 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d6022:	6800      	ldr	r0, [r0, #0]
   d6024:	f000 bd6b 	b.w	d6afe <_ZN7TwoWire6unlockEv>

000d6028 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d6028:	b510      	push	{r4, lr}
    if (lock_) {
   d602a:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d602c:	4604      	mov	r4, r0
    if (lock_) {
   d602e:	b10b      	cbz	r3, d6034 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6030:	f7ff fff7 	bl	d6022 <_ZN9FuelGauge6unlockEv>
}
   d6034:	4620      	mov	r0, r4
   d6036:	bd10      	pop	{r4, pc}

000d6038 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6038:	4b01      	ldr	r3, [pc, #4]	; (d6040 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d603a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d603c:	4770      	bx	lr
   d603e:	bf00      	nop
   d6040:	2003e504 	.word	0x2003e504

000d6044 <serialEventRun>:
{
   d6044:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6046:	4b0b      	ldr	r3, [pc, #44]	; (d6074 <serialEventRun+0x30>)
   d6048:	b143      	cbz	r3, d605c <serialEventRun+0x18>
   d604a:	f000 fbff 	bl	d684c <_Z16_fetch_usbserialv>
   d604e:	6803      	ldr	r3, [r0, #0]
   d6050:	691b      	ldr	r3, [r3, #16]
   d6052:	4798      	blx	r3
   d6054:	2800      	cmp	r0, #0
   d6056:	dd01      	ble.n	d605c <serialEventRun+0x18>
        serialEvent();
   d6058:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d605c:	4b06      	ldr	r3, [pc, #24]	; (d6078 <serialEventRun+0x34>)
   d605e:	b143      	cbz	r3, d6072 <serialEventRun+0x2e>
   d6060:	f000 fcc8 	bl	d69f4 <_Z22__fetch_global_Serial1v>
   d6064:	6803      	ldr	r3, [r0, #0]
   d6066:	691b      	ldr	r3, [r3, #16]
   d6068:	4798      	blx	r3
   d606a:	2800      	cmp	r0, #0
   d606c:	dd01      	ble.n	d6072 <serialEventRun+0x2e>
        serialEvent1();
   d606e:	f3af 8000 	nop.w
}
   d6072:	bd08      	pop	{r3, pc}
	...

000d607c <_post_loop>:
{
   d607c:	b508      	push	{r3, lr}
	serialEventRun();
   d607e:	f7ff ffe1 	bl	d6044 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6082:	f7fe fb0f 	bl	d46a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6086:	4b01      	ldr	r3, [pc, #4]	; (d608c <_post_loop+0x10>)
   d6088:	6018      	str	r0, [r3, #0]
}
   d608a:	bd08      	pop	{r3, pc}
   d608c:	2003e7b8 	.word	0x2003e7b8

000d6090 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6090:	4802      	ldr	r0, [pc, #8]	; (d609c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6092:	4a03      	ldr	r2, [pc, #12]	; (d60a0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6094:	4903      	ldr	r1, [pc, #12]	; (d60a4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6096:	1a12      	subs	r2, r2, r0
   d6098:	f001 bd0c 	b.w	d7ab4 <memcpy>
   d609c:	2003f400 	.word	0x2003f400
   d60a0:	2003f404 	.word	0x2003f404
   d60a4:	000d81a0 	.word	0x000d81a0

000d60a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d60a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d60aa:	2300      	movs	r3, #0
   d60ac:	9300      	str	r3, [sp, #0]
   d60ae:	461a      	mov	r2, r3
   d60b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d60b4:	f7fe fc68 	bl	d4988 <system_ctrl_set_result>
}
   d60b8:	b003      	add	sp, #12
   d60ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d60c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d60c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d60c2:	8843      	ldrh	r3, [r0, #2]
   d60c4:	2b0a      	cmp	r3, #10
   d60c6:	d008      	beq.n	d60da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d60c8:	2b50      	cmp	r3, #80	; 0x50
   d60ca:	d10b      	bne.n	d60e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d60cc:	4b09      	ldr	r3, [pc, #36]	; (d60f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d60ce:	681b      	ldr	r3, [r3, #0]
   d60d0:	b14b      	cbz	r3, d60e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d60d2:	b003      	add	sp, #12
   d60d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d60d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d60da:	f7ff ffe5 	bl	d60a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d60de:	b003      	add	sp, #12
   d60e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d60e4:	2300      	movs	r3, #0
   d60e6:	9300      	str	r3, [sp, #0]
   d60e8:	461a      	mov	r2, r3
   d60ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d60ee:	f7fe fc4b 	bl	d4988 <system_ctrl_set_result>
}
   d60f2:	e7f4      	b.n	d60de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d60f4:	2003e638 	.word	0x2003e638

000d60f8 <module_user_init_hook>:
{
   d60f8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60fa:	4c12      	ldr	r4, [pc, #72]	; (d6144 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d60fc:	4812      	ldr	r0, [pc, #72]	; (d6148 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60fe:	4d13      	ldr	r5, [pc, #76]	; (d614c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6100:	2100      	movs	r1, #0
   d6102:	f7fe fd1d 	bl	d4b40 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6106:	6823      	ldr	r3, [r4, #0]
   d6108:	42ab      	cmp	r3, r5
   d610a:	4b11      	ldr	r3, [pc, #68]	; (d6150 <module_user_init_hook+0x58>)
   d610c:	bf0c      	ite	eq
   d610e:	2201      	moveq	r2, #1
   d6110:	2200      	movne	r2, #0
   d6112:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6114:	d002      	beq.n	d611c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6116:	f7ff ffbb 	bl	d6090 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d611a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d611c:	f7fe fab2 	bl	d4684 <HAL_RNG_GetRandomNumber>
   d6120:	4604      	mov	r4, r0
    srand(seed);
   d6122:	f001 fcf7 	bl	d7b14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6126:	4b0b      	ldr	r3, [pc, #44]	; (d6154 <module_user_init_hook+0x5c>)
   d6128:	b113      	cbz	r3, d6130 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d612a:	4620      	mov	r0, r4
   d612c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6130:	2100      	movs	r1, #0
   d6132:	4808      	ldr	r0, [pc, #32]	; (d6154 <module_user_init_hook+0x5c>)
   d6134:	f7fe fcbc 	bl	d4ab0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d613c:	4806      	ldr	r0, [pc, #24]	; (d6158 <module_user_init_hook+0x60>)
   d613e:	2100      	movs	r1, #0
   d6140:	f7fe bc18 	b.w	d4974 <system_ctrl_set_app_request_handler>
   d6144:	2003f400 	.word	0x2003f400
   d6148:	000d6039 	.word	0x000d6039
   d614c:	9a271c1e 	.word	0x9a271c1e
   d6150:	2003e634 	.word	0x2003e634
   d6154:	00000000 	.word	0x00000000
   d6158:	000d60c1 	.word	0x000d60c1

000d615c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d615c:	4770      	bx	lr

000d615e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d615e:	2000      	movs	r0, #0
   d6160:	4770      	bx	lr

000d6162 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6162:	b510      	push	{r4, lr}
   d6164:	2110      	movs	r1, #16
   d6166:	4604      	mov	r4, r0
   d6168:	f001 f86f 	bl	d724a <_ZdlPvj>
   d616c:	4620      	mov	r0, r4
   d616e:	bd10      	pop	{r4, pc}

000d6170 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6170:	b508      	push	{r3, lr}
      { delete this; }
   d6172:	f7ff fff6 	bl	d6162 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6176:	bd08      	pop	{r3, pc}

000d6178 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6178:	b530      	push	{r4, r5, lr}
        type_(type) {
   d617a:	2200      	movs	r2, #0
   d617c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6180:	6002      	str	r2, [r0, #0]
   d6182:	8084      	strh	r4, [r0, #4]
   d6184:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6186:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6188:	680c      	ldr	r4, [r1, #0]
   d618a:	8085      	strh	r5, [r0, #4]
   d618c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d618e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6190:	bd30      	pop	{r4, r5, pc}

000d6192 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6192:	b510      	push	{r4, lr}
   d6194:	4604      	mov	r4, r0
    free((void*)msg_);
   d6196:	6800      	ldr	r0, [r0, #0]
   d6198:	f7fe fca2 	bl	d4ae0 <free>
}
   d619c:	4620      	mov	r0, r4
   d619e:	bd10      	pop	{r4, pc}

000d61a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d61a0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d61a2:	68c4      	ldr	r4, [r0, #12]
   d61a4:	b1f4      	cbz	r4, d61e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d61a6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d61a8:	2b02      	cmp	r3, #2
   d61aa:	d103      	bne.n	d61b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d61ac:	f104 000c 	add.w	r0, r4, #12
   d61b0:	f7ff ffef 	bl	d6192 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d61b4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d61b6:	b135      	cbz	r5, d61c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d61b8:	4628      	mov	r0, r5
   d61ba:	f7fe fe74 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
   d61be:	2110      	movs	r1, #16
   d61c0:	4628      	mov	r0, r5
   d61c2:	f001 f842 	bl	d724a <_ZdlPvj>
   d61c6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d61c8:	b135      	cbz	r5, d61d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d61ca:	4628      	mov	r0, r5
   d61cc:	f7fe fe6b 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
   d61d0:	2110      	movs	r1, #16
   d61d2:	4628      	mov	r0, r5
   d61d4:	f001 f839 	bl	d724a <_ZdlPvj>
   d61d8:	4620      	mov	r0, r4
   d61da:	2114      	movs	r1, #20
   d61dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d61e0:	f001 b833 	b.w	d724a <_ZdlPvj>
   d61e4:	bd38      	pop	{r3, r4, r5, pc}

000d61e6 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d61e6:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d61e8:	2100      	movs	r1, #0
   d61ea:	f7fe bc69 	b.w	d4ac0 <spark_publish_vitals>

000d61ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d61ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61f0:	460e      	mov	r6, r1
   d61f2:	4604      	mov	r4, r0
   d61f4:	f856 3b04 	ldr.w	r3, [r6], #4
   d61f8:	9300      	str	r3, [sp, #0]
   d61fa:	460d      	mov	r5, r1
   d61fc:	a801      	add	r0, sp, #4
   d61fe:	4631      	mov	r1, r6
   d6200:	f7fe fe6c 	bl	d4edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6204:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6206:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6208:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d620a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d620c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d620e:	2300      	movs	r3, #0
   d6210:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6212:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6214:	f7fe fe69 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6218:	4630      	mov	r0, r6
   d621a:	f7fe fe66 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d621e:	4628      	mov	r0, r5
   d6220:	2108      	movs	r1, #8
   d6222:	f001 f812 	bl	d724a <_ZdlPvj>
        return p;
    }
   d6226:	4620      	mov	r0, r4
   d6228:	b002      	add	sp, #8
   d622a:	bd70      	pop	{r4, r5, r6, pc}

000d622c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d622c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d622e:	b510      	push	{r4, lr}
      if (_M_empty())
   d6230:	b90a      	cbnz	r2, d6236 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6232:	f001 f810 	bl	d7256 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d6236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d623a:	68c3      	ldr	r3, [r0, #12]
   d623c:	4718      	bx	r3

000d623e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d623e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6240:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6242:	f100 0110 	add.w	r1, r0, #16
   d6246:	f7ff fff1 	bl	d622c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d624a:	bd08      	pop	{r3, pc}

000d624c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d624c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d624e:	b510      	push	{r4, lr}
      if (_M_empty())
   d6250:	b90a      	cbnz	r2, d6256 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6252:	f001 f800 	bl	d7256 <_ZSt25__throw_bad_function_callv>
    }
   d6256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d625a:	68c3      	ldr	r3, [r0, #12]
   d625c:	4718      	bx	r3

000d625e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d625e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6260:	6800      	ldr	r0, [r0, #0]
   d6262:	f100 0110 	add.w	r1, r0, #16
   d6266:	f7ff fff1 	bl	d624c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d626a:	bd08      	pop	{r3, pc}

000d626c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d626c:	b538      	push	{r3, r4, r5, lr}
   d626e:	2300      	movs	r3, #0
   d6270:	4604      	mov	r4, r0
   d6272:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6274:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6276:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6278:	f7fd ff0d 	bl	d4096 <_Znwj>
   d627c:	b128      	cbz	r0, d628a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d627e:	2301      	movs	r3, #1
   d6280:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6284:	4b02      	ldr	r3, [pc, #8]	; (d6290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6286:	6003      	str	r3, [r0, #0]
   d6288:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d628a:	6020      	str	r0, [r4, #0]
	}
   d628c:	4620      	mov	r0, r4
   d628e:	bd38      	pop	{r3, r4, r5, pc}
   d6290:	000d7f3c 	.word	0x000d7f3c

000d6294 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6294:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6296:	2300      	movs	r3, #0
   d6298:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d629a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d629c:	4604      	mov	r4, r0
   d629e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d62a0:	b12b      	cbz	r3, d62ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d62a2:	2202      	movs	r2, #2
   d62a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d62a6:	68eb      	ldr	r3, [r5, #12]
   d62a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d62aa:	68ab      	ldr	r3, [r5, #8]
   d62ac:	60a3      	str	r3, [r4, #8]
    }
   d62ae:	4620      	mov	r0, r4
   d62b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d62b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62b6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d62b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d62ba:	4668      	mov	r0, sp
   d62bc:	f7ff ff5c 	bl	d6178 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d62c0:	f04f 0302 	mov.w	r3, #2
   d62c4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d62c8:	2a00      	cmp	r2, #0
   d62ca:	d103      	bne.n	d62d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d62cc:	e8c4 3f41 	strexb	r1, r3, [r4]
   d62d0:	2900      	cmp	r1, #0
   d62d2:	d1f7      	bne.n	d62c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d62d4:	d125      	bne.n	d6322 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d62d6:	f104 050c 	add.w	r5, r4, #12
   d62da:	4669      	mov	r1, sp
   d62dc:	4628      	mov	r0, r5
   d62de:	f7ff ff4b 	bl	d6178 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d62e2:	f3bf 8f5b 	dmb	ish
   d62e6:	2301      	movs	r3, #1
   d62e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d62ea:	2000      	movs	r0, #0
   d62ec:	f104 0308 	add.w	r3, r4, #8
   d62f0:	f3bf 8f5b 	dmb	ish
   d62f4:	e853 6f00 	ldrex	r6, [r3]
   d62f8:	e843 0200 	strex	r2, r0, [r3]
   d62fc:	2a00      	cmp	r2, #0
   d62fe:	d1f9      	bne.n	d62f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6300:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6304:	b16e      	cbz	r6, d6322 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6306:	f7fe fb25 	bl	d4954 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d630a:	b178      	cbz	r0, d632c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d630c:	4629      	mov	r1, r5
   d630e:	4630      	mov	r0, r6
   d6310:	f7ff ff8c 	bl	d622c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6314:	4630      	mov	r0, r6
   d6316:	f7fe fdc6 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d631a:	2110      	movs	r1, #16
   d631c:	4630      	mov	r0, r6
   d631e:	f000 ff94 	bl	d724a <_ZdlPvj>
        p_->setError(std::move(error));
   d6322:	4668      	mov	r0, sp
   d6324:	f7ff ff35 	bl	d6192 <_ZN8particle5ErrorD1Ev>
    }
   d6328:	b009      	add	sp, #36	; 0x24
   d632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d632c:	4631      	mov	r1, r6
   d632e:	a802      	add	r0, sp, #8
   d6330:	f7ff ffb0 	bl	d6294 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6334:	68e0      	ldr	r0, [r4, #12]
   d6336:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d633a:	b108      	cbz	r0, d6340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d633c:	f001 fc38 	bl	d7bb0 <strdup>
        type_(type) {
   d6340:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6342:	2010      	movs	r0, #16
   d6344:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6348:	f7fd fea5 	bl	d4096 <_Znwj>
   d634c:	4605      	mov	r5, r0
   d634e:	b1e8      	cbz	r0, d638c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6350:	2700      	movs	r7, #0
   d6352:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6354:	2018      	movs	r0, #24
   d6356:	f7fd fe9e 	bl	d4096 <_Znwj>
   d635a:	4604      	mov	r4, r0
   d635c:	b188      	cbz	r0, d6382 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d635e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6360:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6362:	a802      	add	r0, sp, #8
   d6364:	f7fe fdcd 	bl	d4f02 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6368:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d636a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d636c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d636e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6370:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6372:	a906      	add	r1, sp, #24
   d6374:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6376:	60e3      	str	r3, [r4, #12]
   d6378:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d637c:	9205      	str	r2, [sp, #20]
   d637e:	f7ff fefb 	bl	d6178 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6382:	4b08      	ldr	r3, [pc, #32]	; (d63a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6384:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6386:	4b08      	ldr	r3, [pc, #32]	; (d63a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6388:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d638a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d638c:	a806      	add	r0, sp, #24
   d638e:	f7ff ff00 	bl	d6192 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6392:	a802      	add	r0, sp, #8
   d6394:	f7fe fd87 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6398:	2200      	movs	r2, #0
   d639a:	4629      	mov	r1, r5
   d639c:	4803      	ldr	r0, [pc, #12]	; (d63ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d639e:	f7fe fae1 	bl	d4964 <application_thread_invoke>
   d63a2:	e7b7      	b.n	d6314 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d63a4:	000d623f 	.word	0x000d623f
   d63a8:	000d64d5 	.word	0x000d64d5
   d63ac:	000d6a49 	.word	0x000d6a49

000d63b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d63b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d63b4:	b08a      	sub	sp, #40	; 0x28
   d63b6:	4605      	mov	r5, r0
   d63b8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d63bc:	460c      	mov	r4, r1
   d63be:	4617      	mov	r7, r2
   d63c0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d63c2:	f7fe fb65 	bl	d4a90 <spark_cloud_flag_connected>
   d63c6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d63c8:	4682      	mov	sl, r0
   d63ca:	bb38      	cbnz	r0, d641c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d63cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d63d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d63d2:	a905      	add	r1, sp, #20
   d63d4:	4630      	mov	r0, r6
   d63d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d63da:	f7ff fecd 	bl	d6178 <_ZN8particle5ErrorC1EOS0_>
   d63de:	2014      	movs	r0, #20
   d63e0:	f7fd fe59 	bl	d4096 <_Znwj>
   d63e4:	4604      	mov	r4, r0
   d63e6:	b148      	cbz	r0, d63fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d63e8:	2302      	movs	r3, #2
   d63ea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63ec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d63ee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63f2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d63f4:	4631      	mov	r1, r6
   d63f6:	300c      	adds	r0, #12
   d63f8:	f7ff febe 	bl	d6178 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d63fc:	4628      	mov	r0, r5
	: __shared_count(__p)
   d63fe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6400:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6404:	f7ff ff32 	bl	d626c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6408:	4630      	mov	r0, r6
   d640a:	f7ff fec2 	bl	d6192 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d640e:	a805      	add	r0, sp, #20
   d6410:	f7ff febf 	bl	d6192 <_ZN8particle5ErrorD1Ev>
}
   d6414:	4628      	mov	r0, r5
   d6416:	b00a      	add	sp, #40	; 0x28
   d6418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d641c:	230c      	movs	r3, #12
   d641e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6422:	2014      	movs	r0, #20
   d6424:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6428:	9307      	str	r3, [sp, #28]
   d642a:	f7fd fe34 	bl	d4096 <_Znwj>
   d642e:	4601      	mov	r1, r0
   d6430:	b128      	cbz	r0, d643e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6432:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6436:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d643a:	f880 a001 	strb.w	sl, [r0, #1]
   d643e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6440:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6442:	f7ff ff13 	bl	d626c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6446:	4b22      	ldr	r3, [pc, #136]	; (d64d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6448:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d644a:	2008      	movs	r0, #8
   d644c:	f7fd fe23 	bl	d4096 <_Znwj>
   d6450:	4682      	mov	sl, r0
   d6452:	b128      	cbz	r0, d6460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6454:	9b03      	ldr	r3, [sp, #12]
   d6456:	f840 3b04 	str.w	r3, [r0], #4
   d645a:	a904      	add	r1, sp, #16
   d645c:	f7fe fd3e 	bl	d4edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6460:	9600      	str	r6, [sp, #0]
   d6462:	fa5f f389 	uxtb.w	r3, r9
   d6466:	4642      	mov	r2, r8
   d6468:	4639      	mov	r1, r7
   d646a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d646c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6470:	f7fe fb16 	bl	d4aa0 <spark_send_event>
   d6474:	b9b8      	cbnz	r0, d64a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6476:	9b03      	ldr	r3, [sp, #12]
   d6478:	785b      	ldrb	r3, [r3, #1]
   d647a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d647e:	b993      	cbnz	r3, d64a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6480:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6484:	a905      	add	r1, sp, #20
   d6486:	a803      	add	r0, sp, #12
   d6488:	9205      	str	r2, [sp, #20]
   d648a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d648e:	f7ff ff11 	bl	d62b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6492:	a805      	add	r0, sp, #20
   d6494:	f7ff fe7d 	bl	d6192 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6498:	a805      	add	r0, sp, #20
   d649a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d649c:	f7ff fea7 	bl	d61ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d64a0:	a806      	add	r0, sp, #24
   d64a2:	f7fe fd22 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64a6:	9b03      	ldr	r3, [sp, #12]
   d64a8:	9305      	str	r3, [sp, #20]
   d64aa:	a904      	add	r1, sp, #16
   d64ac:	a806      	add	r0, sp, #24
   d64ae:	f7fe fd15 	bl	d4edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64b2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64b4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64b6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d64b8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d64ba:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d64bc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d64be:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d64c0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d64c2:	f7fe fd12 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64c6:	a804      	add	r0, sp, #16
   d64c8:	f7fe fd0f 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d64cc:	e7a2      	b.n	d6414 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d64ce:	bf00      	nop
   d64d0:	000d6599 	.word	0x000d6599

000d64d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d64d4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d64d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64d8:	4605      	mov	r5, r0
	  switch (__op)
   d64da:	d007      	beq.n	d64ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d64dc:	2a03      	cmp	r2, #3
   d64de:	d018      	beq.n	d6512 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d64e0:	2a01      	cmp	r2, #1
   d64e2:	d101      	bne.n	d64e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d64e4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d64e6:	6003      	str	r3, [r0, #0]
	}
   d64e8:	2000      	movs	r0, #0
   d64ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d64ec:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d64ee:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d64f0:	f7fd fdd1 	bl	d4096 <_Znwj>
   d64f4:	4604      	mov	r4, r0
   d64f6:	b150      	cbz	r0, d650e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d64f8:	4631      	mov	r1, r6
   d64fa:	f7ff fecb 	bl	d6294 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d64fe:	6930      	ldr	r0, [r6, #16]
   d6500:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6504:	b108      	cbz	r0, d650a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6506:	f001 fb53 	bl	d7bb0 <strdup>
        type_(type) {
   d650a:	6120      	str	r0, [r4, #16]
   d650c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d650e:	602c      	str	r4, [r5, #0]
	}
   d6510:	e7ea      	b.n	d64e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6512:	6804      	ldr	r4, [r0, #0]
   d6514:	2c00      	cmp	r4, #0
   d6516:	d0e7      	beq.n	d64e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6518:	f104 0010 	add.w	r0, r4, #16
   d651c:	f7ff fe39 	bl	d6192 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6520:	4620      	mov	r0, r4
   d6522:	f7fe fcc0 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6526:	2118      	movs	r1, #24
   d6528:	4620      	mov	r0, r4
   d652a:	f000 fe8e 	bl	d724a <_ZdlPvj>
   d652e:	e7db      	b.n	d64e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6530 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6530:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6532:	2300      	movs	r3, #0
   d6534:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6536:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6538:	4604      	mov	r4, r0
   d653a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d653c:	b12b      	cbz	r3, d654a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d653e:	2202      	movs	r2, #2
   d6540:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6542:	68eb      	ldr	r3, [r5, #12]
   d6544:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6546:	68ab      	ldr	r3, [r5, #8]
   d6548:	60a3      	str	r3, [r4, #8]
    }
   d654a:	4620      	mov	r0, r4
   d654c:	bd38      	pop	{r3, r4, r5, pc}

000d654e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d654e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6550:	b570      	push	{r4, r5, r6, lr}
   d6552:	4604      	mov	r4, r0
	  switch (__op)
   d6554:	d007      	beq.n	d6566 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6556:	2a03      	cmp	r2, #3
   d6558:	d012      	beq.n	d6580 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d655a:	2a01      	cmp	r2, #1
   d655c:	d101      	bne.n	d6562 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d655e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6560:	6003      	str	r3, [r0, #0]
	}
   d6562:	2000      	movs	r0, #0
   d6564:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6566:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6568:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d656a:	f7fd fd94 	bl	d4096 <_Znwj>
   d656e:	4605      	mov	r5, r0
   d6570:	b120      	cbz	r0, d657c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6572:	4631      	mov	r1, r6
   d6574:	f7ff ffdc 	bl	d6530 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6578:	7c33      	ldrb	r3, [r6, #16]
   d657a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d657c:	6025      	str	r5, [r4, #0]
	}
   d657e:	e7f0      	b.n	d6562 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6580:	6804      	ldr	r4, [r0, #0]
   d6582:	2c00      	cmp	r4, #0
   d6584:	d0ed      	beq.n	d6562 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6586:	4620      	mov	r0, r4
   d6588:	f7fe fc8d 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d658c:	2114      	movs	r1, #20
   d658e:	4620      	mov	r0, r4
   d6590:	f000 fe5b 	bl	d724a <_ZdlPvj>
   d6594:	e7e5      	b.n	d6562 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6598:	b5f0      	push	{r4, r5, r6, r7, lr}
   d659a:	b089      	sub	sp, #36	; 0x24
   d659c:	4604      	mov	r4, r0
   d659e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d65a0:	a801      	add	r0, sp, #4
   d65a2:	4611      	mov	r1, r2
   d65a4:	f7ff fe23 	bl	d61ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d65a8:	b1a4      	cbz	r4, d65d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d65aa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d65ac:	b11d      	cbz	r5, d65b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d65ae:	4628      	mov	r0, r5
   d65b0:	f001 fafe 	bl	d7bb0 <strdup>
   d65b4:	4605      	mov	r5, r0
   d65b6:	a801      	add	r0, sp, #4
   d65b8:	a903      	add	r1, sp, #12
        type_(type) {
   d65ba:	9503      	str	r5, [sp, #12]
   d65bc:	f8ad 4010 	strh.w	r4, [sp, #16]
   d65c0:	f7ff fe78 	bl	d62b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d65c4:	a803      	add	r0, sp, #12
   d65c6:	f7ff fde4 	bl	d6192 <_ZN8particle5ErrorD1Ev>
   d65ca:	a802      	add	r0, sp, #8
   d65cc:	f7fe fc8d 	bl	d4eea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65d0:	b009      	add	sp, #36	; 0x24
   d65d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d65d4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d65d6:	2301      	movs	r3, #1
   d65d8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d65dc:	2a00      	cmp	r2, #0
   d65de:	d103      	bne.n	d65e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d65e0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d65e4:	2900      	cmp	r1, #0
   d65e6:	d1f7      	bne.n	d65d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d65e8:	d1ef      	bne.n	d65ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d65ea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d65ec:	f3bf 8f5b 	dmb	ish
   d65f0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d65f2:	1d2b      	adds	r3, r5, #4
   d65f4:	f3bf 8f5b 	dmb	ish
   d65f8:	e853 6f00 	ldrex	r6, [r3]
   d65fc:	e843 4200 	strex	r2, r4, [r3]
   d6600:	2a00      	cmp	r2, #0
   d6602:	d1f9      	bne.n	d65f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6604:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6608:	2e00      	cmp	r6, #0
   d660a:	d0de      	beq.n	d65ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d660c:	4620      	mov	r0, r4
   d660e:	f7fe f9a1 	bl	d4954 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6612:	4607      	mov	r7, r0
   d6614:	b160      	cbz	r0, d6630 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6616:	f105 010c 	add.w	r1, r5, #12
   d661a:	4630      	mov	r0, r6
   d661c:	f7ff fe16 	bl	d624c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6620:	4630      	mov	r0, r6
   d6622:	f7fe fc40 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6626:	2110      	movs	r1, #16
   d6628:	4630      	mov	r0, r6
   d662a:	f000 fe0e 	bl	d724a <_ZdlPvj>
   d662e:	e7cc      	b.n	d65ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6630:	4631      	mov	r1, r6
   d6632:	a803      	add	r0, sp, #12
   d6634:	f7ff ff7c 	bl	d6530 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6638:	7b2b      	ldrb	r3, [r5, #12]
   d663a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d663e:	2010      	movs	r0, #16
   d6640:	f7fd fd29 	bl	d4096 <_Znwj>
   d6644:	4605      	mov	r5, r0
   d6646:	b1d0      	cbz	r0, d667e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6648:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d664a:	2014      	movs	r0, #20
   d664c:	f7fd fd23 	bl	d4096 <_Znwj>
   d6650:	4604      	mov	r4, r0
   d6652:	b178      	cbz	r0, d6674 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6654:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6656:	4601      	mov	r1, r0
   d6658:	a803      	add	r0, sp, #12
   d665a:	f7fe fc52 	bl	d4f02 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d665e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6660:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6662:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6664:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6666:	9205      	str	r2, [sp, #20]
   d6668:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d666a:	60e3      	str	r3, [r4, #12]
   d666c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6670:	9206      	str	r2, [sp, #24]
   d6672:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6674:	4b06      	ldr	r3, [pc, #24]	; (d6690 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6676:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6678:	4b06      	ldr	r3, [pc, #24]	; (d6694 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d667a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d667c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d667e:	a803      	add	r0, sp, #12
   d6680:	f7fe fc11 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6684:	2200      	movs	r2, #0
   d6686:	4629      	mov	r1, r5
   d6688:	4803      	ldr	r0, [pc, #12]	; (d6698 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d668a:	f7fe f96b 	bl	d4964 <application_thread_invoke>
   d668e:	e7c7      	b.n	d6620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6690:	000d625f 	.word	0x000d625f
   d6694:	000d654f 	.word	0x000d654f
   d6698:	000d6a49 	.word	0x000d6a49

000d669c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d669c:	4770      	bx	lr

000d669e <_ZN9IPAddressD0Ev>:
   d669e:	b510      	push	{r4, lr}
   d66a0:	2118      	movs	r1, #24
   d66a2:	4604      	mov	r4, r0
   d66a4:	f000 fdd1 	bl	d724a <_ZdlPvj>
   d66a8:	4620      	mov	r0, r4
   d66aa:	bd10      	pop	{r4, pc}

000d66ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d66ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d66ae:	7d03      	ldrb	r3, [r0, #20]
   d66b0:	2b06      	cmp	r3, #6
{
   d66b2:	b08d      	sub	sp, #52	; 0x34
   d66b4:	460e      	mov	r6, r1
   d66b6:	f100 0704 	add.w	r7, r0, #4
   d66ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d66be:	d012      	beq.n	d66e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d66c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d66c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d66c8:	220a      	movs	r2, #10
   d66ca:	4630      	mov	r0, r6
   d66cc:	f7fe fc77 	bl	d4fbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d66d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d66d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d66d4:	d019      	beq.n	d670a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d66d6:	2c00      	cmp	r4, #0
   d66d8:	d0f4      	beq.n	d66c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d66da:	212e      	movs	r1, #46	; 0x2e
   d66dc:	4630      	mov	r0, r6
   d66de:	f7fe fc5f 	bl	d4fa0 <_ZN5Print5printEc>
   d66e2:	4404      	add	r4, r0
   d66e4:	e7ee      	b.n	d66c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d66e6:	232f      	movs	r3, #47	; 0x2f
   d66e8:	466a      	mov	r2, sp
   d66ea:	4639      	mov	r1, r7
   d66ec:	200a      	movs	r0, #10
		buf[0] = 0;
   d66ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d66f2:	f7fd ffff 	bl	d46f4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d66f6:	4668      	mov	r0, sp
   d66f8:	f001 fa77 	bl	d7bea <strlen>
   d66fc:	6833      	ldr	r3, [r6, #0]
   d66fe:	4602      	mov	r2, r0
   d6700:	68db      	ldr	r3, [r3, #12]
   d6702:	4669      	mov	r1, sp
   d6704:	4630      	mov	r0, r6
   d6706:	4798      	blx	r3
   d6708:	4604      	mov	r4, r0
    }
    return n;
}
   d670a:	4620      	mov	r0, r4
   d670c:	b00d      	add	sp, #52	; 0x34
   d670e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6710 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6710:	b510      	push	{r4, lr}
   d6712:	4b05      	ldr	r3, [pc, #20]	; (d6728 <_ZN9IPAddressC1Ev+0x18>)
   d6714:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6716:	2211      	movs	r2, #17
   d6718:	f840 3b04 	str.w	r3, [r0], #4
   d671c:	2100      	movs	r1, #0
   d671e:	f001 f9f1 	bl	d7b04 <memset>
}
   d6722:	4620      	mov	r0, r4
   d6724:	bd10      	pop	{r4, pc}
   d6726:	bf00      	nop
   d6728:	000d7f58 	.word	0x000d7f58

000d672c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d672c:	4603      	mov	r3, r0
   d672e:	4a07      	ldr	r2, [pc, #28]	; (d674c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6730:	b510      	push	{r4, lr}
   d6732:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6736:	f101 0210 	add.w	r2, r1, #16
   d673a:	f851 4b04 	ldr.w	r4, [r1], #4
   d673e:	f843 4b04 	str.w	r4, [r3], #4
   d6742:	4291      	cmp	r1, r2
   d6744:	d1f9      	bne.n	d673a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6746:	780a      	ldrb	r2, [r1, #0]
   d6748:	701a      	strb	r2, [r3, #0]
}
   d674a:	bd10      	pop	{r4, pc}
   d674c:	000d7f58 	.word	0x000d7f58

000d6750 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6750:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6752:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6756:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d675a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d675e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6762:	2304      	movs	r3, #4
   d6764:	6041      	str	r1, [r0, #4]
   d6766:	7503      	strb	r3, [r0, #20]
}
   d6768:	bd10      	pop	{r4, pc}
	...

000d676c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d676c:	b513      	push	{r0, r1, r4, lr}
   d676e:	4b05      	ldr	r3, [pc, #20]	; (d6784 <_ZN9IPAddressC1EPKh+0x18>)
   d6770:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6772:	78cb      	ldrb	r3, [r1, #3]
   d6774:	9300      	str	r3, [sp, #0]
   d6776:	788b      	ldrb	r3, [r1, #2]
   d6778:	784a      	ldrb	r2, [r1, #1]
   d677a:	7809      	ldrb	r1, [r1, #0]
   d677c:	f7ff ffe8 	bl	d6750 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6780:	b002      	add	sp, #8
   d6782:	bd10      	pop	{r4, pc}
   d6784:	000d7f58 	.word	0x000d7f58

000d6788 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6788:	7441      	strb	r1, [r0, #17]
}
   d678a:	4770      	bx	lr

000d678c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d678c:	4770      	bx	lr

000d678e <_ZN9USBSerial4readEv>:
{
   d678e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6790:	2100      	movs	r1, #0
   d6792:	7c00      	ldrb	r0, [r0, #16]
   d6794:	f7fe f886 	bl	d48a4 <HAL_USB_USART_Receive_Data>
}
   d6798:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d679c:	bd08      	pop	{r3, pc}

000d679e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d679e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d67a0:	2101      	movs	r1, #1
   d67a2:	7c00      	ldrb	r0, [r0, #16]
   d67a4:	f7fe f87e 	bl	d48a4 <HAL_USB_USART_Receive_Data>
}
   d67a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d67ac:	bd08      	pop	{r3, pc}

000d67ae <_ZN9USBSerial17availableForWriteEv>:
{
   d67ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d67b0:	7c00      	ldrb	r0, [r0, #16]
   d67b2:	f7fe f86f 	bl	d4894 <HAL_USB_USART_Available_Data_For_Write>
}
   d67b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67ba:	bd08      	pop	{r3, pc}

000d67bc <_ZN9USBSerial9availableEv>:
{
   d67bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d67be:	7c00      	ldrb	r0, [r0, #16]
   d67c0:	f7fe f860 	bl	d4884 <HAL_USB_USART_Available_Data>
}
   d67c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67c8:	bd08      	pop	{r3, pc}

000d67ca <_ZN9USBSerial5writeEh>:
{
   d67ca:	b513      	push	{r0, r1, r4, lr}
   d67cc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d67ce:	7c00      	ldrb	r0, [r0, #16]
{
   d67d0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d67d2:	f7fe f85f 	bl	d4894 <HAL_USB_USART_Available_Data_For_Write>
   d67d6:	2800      	cmp	r0, #0
   d67d8:	9901      	ldr	r1, [sp, #4]
   d67da:	dc01      	bgt.n	d67e0 <_ZN9USBSerial5writeEh+0x16>
   d67dc:	7c60      	ldrb	r0, [r4, #17]
   d67de:	b120      	cbz	r0, d67ea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d67e0:	7c20      	ldrb	r0, [r4, #16]
   d67e2:	f7fe f867 	bl	d48b4 <HAL_USB_USART_Send_Data>
   d67e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d67ea:	b002      	add	sp, #8
   d67ec:	bd10      	pop	{r4, pc}

000d67ee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d67ee:	7c00      	ldrb	r0, [r0, #16]
   d67f0:	f7fe b868 	b.w	d48c4 <HAL_USB_USART_Flush_Data>

000d67f4 <_ZN9USBSerialD0Ev>:
   d67f4:	b510      	push	{r4, lr}
   d67f6:	2114      	movs	r1, #20
   d67f8:	4604      	mov	r4, r0
   d67fa:	f000 fd26 	bl	d724a <_ZdlPvj>
   d67fe:	4620      	mov	r0, r4
   d6800:	bd10      	pop	{r4, pc}
	...

000d6804 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6804:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d680a:	4604      	mov	r4, r0
   d680c:	4608      	mov	r0, r1
   d680e:	2100      	movs	r1, #0
   d6810:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6814:	4b04      	ldr	r3, [pc, #16]	; (d6828 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6816:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6818:	2301      	movs	r3, #1
  _serial = serial;
   d681a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d681c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d681e:	4611      	mov	r1, r2
   d6820:	f7fe f818 	bl	d4854 <HAL_USB_USART_Init>
}
   d6824:	4620      	mov	r0, r4
   d6826:	bd10      	pop	{r4, pc}
   d6828:	000d7f6c 	.word	0x000d7f6c

000d682c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d682c:	7c00      	ldrb	r0, [r0, #16]
   d682e:	2200      	movs	r2, #0
   d6830:	f7fe b818 	b.w	d4864 <HAL_USB_USART_Begin>

000d6834 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d6834:	7c00      	ldrb	r0, [r0, #16]
   d6836:	f7fe b81d 	b.w	d4874 <HAL_USB_USART_End>

000d683a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d683a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d683c:	2214      	movs	r2, #20
{
   d683e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6840:	2100      	movs	r1, #0
   d6842:	f001 f95f 	bl	d7b04 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6846:	4620      	mov	r0, r4
   d6848:	bd10      	pop	{r4, pc}
	...

000d684c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d684c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d684e:	4c10      	ldr	r4, [pc, #64]	; (d6890 <_Z16_fetch_usbserialv+0x44>)
{
   d6850:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6852:	a803      	add	r0, sp, #12
   d6854:	f7ff fff1 	bl	d683a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6858:	7821      	ldrb	r1, [r4, #0]
   d685a:	f3bf 8f5b 	dmb	ish
   d685e:	f011 0101 	ands.w	r1, r1, #1
   d6862:	d111      	bne.n	d6888 <_Z16_fetch_usbserialv+0x3c>
   d6864:	4620      	mov	r0, r4
   d6866:	9101      	str	r1, [sp, #4]
   d6868:	f7fd fc26 	bl	d40b8 <__cxa_guard_acquire>
   d686c:	9901      	ldr	r1, [sp, #4]
   d686e:	b158      	cbz	r0, d6888 <_Z16_fetch_usbserialv+0x3c>
   d6870:	aa03      	add	r2, sp, #12
   d6872:	4808      	ldr	r0, [pc, #32]	; (d6894 <_Z16_fetch_usbserialv+0x48>)
   d6874:	f7ff ffc6 	bl	d6804 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6878:	4620      	mov	r0, r4
   d687a:	f7fd fc22 	bl	d40c2 <__cxa_guard_release>
   d687e:	4a06      	ldr	r2, [pc, #24]	; (d6898 <_Z16_fetch_usbserialv+0x4c>)
   d6880:	4906      	ldr	r1, [pc, #24]	; (d689c <_Z16_fetch_usbserialv+0x50>)
   d6882:	4804      	ldr	r0, [pc, #16]	; (d6894 <_Z16_fetch_usbserialv+0x48>)
   d6884:	f000 fcdc 	bl	d7240 <__aeabi_atexit>
	return _usbserial;
}
   d6888:	4802      	ldr	r0, [pc, #8]	; (d6894 <_Z16_fetch_usbserialv+0x48>)
   d688a:	b008      	add	sp, #32
   d688c:	bd10      	pop	{r4, pc}
   d688e:	bf00      	nop
   d6890:	2003e63c 	.word	0x2003e63c
   d6894:	2003e640 	.word	0x2003e640
   d6898:	2003e568 	.word	0x2003e568
   d689c:	000d678d 	.word	0x000d678d

000d68a0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d68a0:	2200      	movs	r2, #0
   d68a2:	6840      	ldr	r0, [r0, #4]
   d68a4:	4611      	mov	r1, r2
   d68a6:	f7fe b89b 	b.w	d49e0 <network_ready>

000d68aa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d68aa:	2200      	movs	r2, #0
   d68ac:	6840      	ldr	r0, [r0, #4]
   d68ae:	4611      	mov	r1, r2
   d68b0:	f7fe b8b6 	b.w	d4a20 <network_listening>

000d68b4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d68b4:	2200      	movs	r2, #0
   d68b6:	6840      	ldr	r0, [r0, #4]
   d68b8:	4611      	mov	r1, r2
   d68ba:	f7fe b8c1 	b.w	d4a40 <network_get_listen_timeout>

000d68be <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d68be:	6840      	ldr	r0, [r0, #4]
   d68c0:	2200      	movs	r2, #0
   d68c2:	f7fe b8b5 	b.w	d4a30 <network_set_listen_timeout>

000d68c6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d68c6:	6840      	ldr	r0, [r0, #4]
   d68c8:	2200      	movs	r2, #0
   d68ca:	f081 0101 	eor.w	r1, r1, #1
   d68ce:	f7fe b89f 	b.w	d4a10 <network_listen>

000d68d2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d68d2:	2300      	movs	r3, #0
   d68d4:	6840      	ldr	r0, [r0, #4]
   d68d6:	461a      	mov	r2, r3
   d68d8:	4619      	mov	r1, r3
   d68da:	f7fe b891 	b.w	d4a00 <network_off>

000d68de <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d68de:	2300      	movs	r3, #0
   d68e0:	6840      	ldr	r0, [r0, #4]
   d68e2:	461a      	mov	r2, r3
   d68e4:	4619      	mov	r1, r3
   d68e6:	f7fe b883 	b.w	d49f0 <network_on>

000d68ea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d68ea:	2200      	movs	r2, #0
   d68ec:	6840      	ldr	r0, [r0, #4]
   d68ee:	4611      	mov	r1, r2
   d68f0:	f7fe b866 	b.w	d49c0 <network_connecting>

000d68f4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	2200      	movs	r2, #0
   d68f8:	2102      	movs	r1, #2
   d68fa:	f7fe b869 	b.w	d49d0 <network_disconnect>

000d68fe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d68fe:	2300      	movs	r3, #0
   d6900:	6840      	ldr	r0, [r0, #4]
   d6902:	461a      	mov	r2, r3
   d6904:	f7fe b854 	b.w	d49b0 <network_connect>

000d6908 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6908:	4b08      	ldr	r3, [pc, #32]	; (d692c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d690a:	b510      	push	{r4, lr}
   d690c:	2428      	movs	r4, #40	; 0x28
   d690e:	4622      	mov	r2, r4
   d6910:	4618      	mov	r0, r3
   d6912:	2100      	movs	r1, #0
   d6914:	f001 f8f6 	bl	d7b04 <memset>
   d6918:	4b05      	ldr	r3, [pc, #20]	; (d6930 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d691a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d691c:	f04f 32ff 	mov.w	r2, #4294967295
   d6920:	6042      	str	r2, [r0, #4]
   d6922:	2204      	movs	r2, #4
   d6924:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6926:	4a03      	ldr	r2, [pc, #12]	; (d6934 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6928:	601a      	str	r2, [r3, #0]
   d692a:	bd10      	pop	{r4, pc}
   d692c:	2003e65c 	.word	0x2003e65c
   d6930:	2003e654 	.word	0x2003e654
   d6934:	000d7f9c 	.word	0x000d7f9c

000d6938 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6938:	4770      	bx	lr

000d693a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d693a:	7441      	strb	r1, [r0, #17]
}
   d693c:	4770      	bx	lr

000d693e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d693e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6940:	7c00      	ldrb	r0, [r0, #16]
   d6942:	f7fd ff1f 	bl	d4784 <hal_usart_available_data_for_write>
}
   d6946:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d694a:	bd08      	pop	{r3, pc}

000d694c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d694c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d694e:	7c00      	ldrb	r0, [r0, #16]
   d6950:	f7fd fef0 	bl	d4734 <hal_usart_available>
}
   d6954:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6958:	bd08      	pop	{r3, pc}

000d695a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d695a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d695c:	7c00      	ldrb	r0, [r0, #16]
   d695e:	f7fd fef9 	bl	d4754 <hal_usart_peek>
}
   d6962:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6966:	bd08      	pop	{r3, pc}

000d6968 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6968:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d696a:	7c00      	ldrb	r0, [r0, #16]
   d696c:	f7fd feea 	bl	d4744 <hal_usart_read>
}
   d6970:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6974:	bd08      	pop	{r3, pc}

000d6976 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6976:	7c00      	ldrb	r0, [r0, #16]
   d6978:	f7fd bef4 	b.w	d4764 <hal_usart_flush>

000d697c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d697c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d697e:	7c45      	ldrb	r5, [r0, #17]
{
   d6980:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6982:	b12d      	cbz	r5, d6990 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6984:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6986:	b003      	add	sp, #12
   d6988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d698c:	f7fd beca 	b.w	d4724 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6990:	7c00      	ldrb	r0, [r0, #16]
   d6992:	9101      	str	r1, [sp, #4]
   d6994:	f7fd fef6 	bl	d4784 <hal_usart_available_data_for_write>
   d6998:	2800      	cmp	r0, #0
   d699a:	9901      	ldr	r1, [sp, #4]
   d699c:	dcf2      	bgt.n	d6984 <_ZN11USARTSerial5writeEh+0x8>
}
   d699e:	4628      	mov	r0, r5
   d69a0:	b003      	add	sp, #12
   d69a2:	bd30      	pop	{r4, r5, pc}

000d69a4 <_ZN11USARTSerialD0Ev>:
   d69a4:	b510      	push	{r4, lr}
   d69a6:	2114      	movs	r1, #20
   d69a8:	4604      	mov	r4, r0
   d69aa:	f000 fc4e 	bl	d724a <_ZdlPvj>
   d69ae:	4620      	mov	r0, r4
   d69b0:	bd10      	pop	{r4, pc}
	...

000d69b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d69b4:	b510      	push	{r4, lr}
   d69b6:	f04f 0c00 	mov.w	ip, #0
   d69ba:	4604      	mov	r4, r0
   d69bc:	4608      	mov	r0, r1
   d69be:	4611      	mov	r1, r2
   d69c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69c4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d69c8:	4a04      	ldr	r2, [pc, #16]	; (d69dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d69ca:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d69cc:	2201      	movs	r2, #1
  _serial = serial;
   d69ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d69d0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d69d2:	461a      	mov	r2, r3
   d69d4:	f7fd fe96 	bl	d4704 <hal_usart_init>
}
   d69d8:	4620      	mov	r0, r4
   d69da:	bd10      	pop	{r4, pc}
   d69dc:	000d7fd8 	.word	0x000d7fd8

000d69e0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d69e0:	7c00      	ldrb	r0, [r0, #16]
   d69e2:	2300      	movs	r3, #0
   d69e4:	f7fd bed6 	b.w	d4794 <hal_usart_begin_config>

000d69e8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d69e8:	2200      	movs	r2, #0
   d69ea:	f7ff bff9 	b.w	d69e0 <_ZN11USARTSerial5beginEmm>

000d69ee <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d69ee:	7c00      	ldrb	r0, [r0, #16]
   d69f0:	f7fd be90 	b.w	d4714 <hal_usart_end>

000d69f4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d69f4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d69f6:	4c0e      	ldr	r4, [pc, #56]	; (d6a30 <_Z22__fetch_global_Serial1v+0x3c>)
   d69f8:	7821      	ldrb	r1, [r4, #0]
   d69fa:	f3bf 8f5b 	dmb	ish
   d69fe:	f011 0101 	ands.w	r1, r1, #1
   d6a02:	d112      	bne.n	d6a2a <_Z22__fetch_global_Serial1v+0x36>
   d6a04:	4620      	mov	r0, r4
   d6a06:	9101      	str	r1, [sp, #4]
   d6a08:	f7fd fb56 	bl	d40b8 <__cxa_guard_acquire>
   d6a0c:	9901      	ldr	r1, [sp, #4]
   d6a0e:	b160      	cbz	r0, d6a2a <_Z22__fetch_global_Serial1v+0x36>
   d6a10:	4a08      	ldr	r2, [pc, #32]	; (d6a34 <_Z22__fetch_global_Serial1v+0x40>)
   d6a12:	4b09      	ldr	r3, [pc, #36]	; (d6a38 <_Z22__fetch_global_Serial1v+0x44>)
   d6a14:	4809      	ldr	r0, [pc, #36]	; (d6a3c <_Z22__fetch_global_Serial1v+0x48>)
   d6a16:	f7ff ffcd 	bl	d69b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6a1a:	4620      	mov	r0, r4
   d6a1c:	f7fd fb51 	bl	d40c2 <__cxa_guard_release>
   d6a20:	4a07      	ldr	r2, [pc, #28]	; (d6a40 <_Z22__fetch_global_Serial1v+0x4c>)
   d6a22:	4908      	ldr	r1, [pc, #32]	; (d6a44 <_Z22__fetch_global_Serial1v+0x50>)
   d6a24:	4805      	ldr	r0, [pc, #20]	; (d6a3c <_Z22__fetch_global_Serial1v+0x48>)
   d6a26:	f000 fc0b 	bl	d7240 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6a2a:	4804      	ldr	r0, [pc, #16]	; (d6a3c <_Z22__fetch_global_Serial1v+0x48>)
   d6a2c:	b002      	add	sp, #8
   d6a2e:	bd10      	pop	{r4, pc}
   d6a30:	2003e684 	.word	0x2003e684
   d6a34:	2003e688 	.word	0x2003e688
   d6a38:	2003e70c 	.word	0x2003e70c
   d6a3c:	2003e790 	.word	0x2003e790
   d6a40:	2003e568 	.word	0x2003e568
   d6a44:	000d6939 	.word	0x000d6939

000d6a48 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6a48:	b510      	push	{r4, lr}
      if (_M_empty())
   d6a4a:	6883      	ldr	r3, [r0, #8]
   d6a4c:	4604      	mov	r4, r0
   d6a4e:	b90b      	cbnz	r3, d6a54 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6a50:	f000 fc01 	bl	d7256 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a54:	68c3      	ldr	r3, [r0, #12]
   d6a56:	4798      	blx	r3
      if (_M_manager)
   d6a58:	68a3      	ldr	r3, [r4, #8]
   d6a5a:	b11b      	cbz	r3, d6a64 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a5c:	2203      	movs	r2, #3
   d6a5e:	4621      	mov	r1, r4
   d6a60:	4620      	mov	r0, r4
   d6a62:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6a64:	4620      	mov	r0, r4
   d6a66:	2110      	movs	r1, #16
}
   d6a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6a6c:	f000 bbed 	b.w	d724a <_ZdlPvj>

000d6a70 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6a70:	4770      	bx	lr

000d6a72 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a74:	4606      	mov	r6, r0
   d6a76:	4615      	mov	r5, r2
   d6a78:	460c      	mov	r4, r1
   d6a7a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a7c:	42bc      	cmp	r4, r7
   d6a7e:	d006      	beq.n	d6a8e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a80:	6833      	ldr	r3, [r6, #0]
   d6a82:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a86:	689b      	ldr	r3, [r3, #8]
   d6a88:	4630      	mov	r0, r6
   d6a8a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6a8c:	e7f6      	b.n	d6a7c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6a8e:	4628      	mov	r0, r5
   d6a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a92 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6a92:	7c00      	ldrb	r0, [r0, #16]
   d6a94:	2200      	movs	r2, #0
   d6a96:	f7fd be85 	b.w	d47a4 <hal_i2c_write>

000d6a9a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6a9a:	7c00      	ldrb	r0, [r0, #16]
   d6a9c:	2100      	movs	r1, #0
   d6a9e:	f7fd be89 	b.w	d47b4 <hal_i2c_available>

000d6aa2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6aa2:	7c00      	ldrb	r0, [r0, #16]
   d6aa4:	2100      	movs	r1, #0
   d6aa6:	f7fd be8d 	b.w	d47c4 <hal_i2c_read>

000d6aaa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6aaa:	7c00      	ldrb	r0, [r0, #16]
   d6aac:	2100      	movs	r1, #0
   d6aae:	f7fd be91 	b.w	d47d4 <hal_i2c_peek>

000d6ab2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6ab2:	7c00      	ldrb	r0, [r0, #16]
   d6ab4:	2100      	movs	r1, #0
   d6ab6:	f7fd be95 	b.w	d47e4 <hal_i2c_flush>

000d6aba <_ZN7TwoWireD0Ev>:
   d6aba:	b510      	push	{r4, lr}
   d6abc:	2114      	movs	r1, #20
   d6abe:	4604      	mov	r4, r0
   d6ac0:	f000 fbc3 	bl	d724a <_ZdlPvj>
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	bd10      	pop	{r4, pc}

000d6ac8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6ac8:	b510      	push	{r4, lr}
   d6aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ace:	4604      	mov	r4, r0
   d6ad0:	4608      	mov	r0, r1
   d6ad2:	2100      	movs	r1, #0
   d6ad4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6ad8:	4b03      	ldr	r3, [pc, #12]	; (d6ae8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6ada:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6adc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6ade:	4611      	mov	r1, r2
   d6ae0:	f7fd fe90 	bl	d4804 <hal_i2c_init>
}
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	bd10      	pop	{r4, pc}
   d6ae8:	000d8008 	.word	0x000d8008

000d6aec <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6aec:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d6aee:	2100      	movs	r1, #0
   d6af0:	7c00      	ldrb	r0, [r0, #16]
   d6af2:	f7fd fe8f 	bl	d4814 <hal_i2c_lock>
}
   d6af6:	fab0 f080 	clz	r0, r0
   d6afa:	0940      	lsrs	r0, r0, #5
   d6afc:	bd08      	pop	{r3, pc}

000d6afe <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6afe:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d6b00:	2100      	movs	r1, #0
   d6b02:	7c00      	ldrb	r0, [r0, #16]
   d6b04:	f7fd fe8e 	bl	d4824 <hal_i2c_unlock>
}
   d6b08:	fab0 f080 	clz	r0, r0
   d6b0c:	0940      	lsrs	r0, r0, #5
   d6b0e:	bd08      	pop	{r3, pc}

000d6b10 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b10:	2300      	movs	r3, #0
   d6b12:	6840      	ldr	r0, [r0, #4]
   d6b14:	461a      	mov	r2, r3
   d6b16:	f7fd bf4b 	b.w	d49b0 <network_connect>

000d6b1a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b1a:	6840      	ldr	r0, [r0, #4]
   d6b1c:	2200      	movs	r2, #0
   d6b1e:	2102      	movs	r1, #2
   d6b20:	f7fd bf56 	b.w	d49d0 <network_disconnect>

000d6b24 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b24:	2200      	movs	r2, #0
   d6b26:	6840      	ldr	r0, [r0, #4]
   d6b28:	4611      	mov	r1, r2
   d6b2a:	f7fd bf49 	b.w	d49c0 <network_connecting>

000d6b2e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b2e:	2200      	movs	r2, #0
   d6b30:	6840      	ldr	r0, [r0, #4]
   d6b32:	4611      	mov	r1, r2
   d6b34:	f7fd bf54 	b.w	d49e0 <network_ready>

000d6b38 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b38:	2300      	movs	r3, #0
   d6b3a:	6840      	ldr	r0, [r0, #4]
   d6b3c:	461a      	mov	r2, r3
   d6b3e:	4619      	mov	r1, r3
   d6b40:	f7fd bf56 	b.w	d49f0 <network_on>

000d6b44 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b44:	2300      	movs	r3, #0
   d6b46:	6840      	ldr	r0, [r0, #4]
   d6b48:	461a      	mov	r2, r3
   d6b4a:	4619      	mov	r1, r3
   d6b4c:	f7fd bf58 	b.w	d4a00 <network_off>

000d6b50 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6b50:	6840      	ldr	r0, [r0, #4]
   d6b52:	2100      	movs	r1, #0
   d6b54:	f7fd bf7c 	b.w	d4a50 <network_is_on>

000d6b58 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6b58:	6840      	ldr	r0, [r0, #4]
   d6b5a:	2100      	movs	r1, #0
   d6b5c:	f7fd bf80 	b.w	d4a60 <network_is_off>

000d6b60 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b60:	6840      	ldr	r0, [r0, #4]
   d6b62:	2200      	movs	r2, #0
   d6b64:	f081 0101 	eor.w	r1, r1, #1
   d6b68:	f7fd bf52 	b.w	d4a10 <network_listen>

000d6b6c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b6c:	6840      	ldr	r0, [r0, #4]
   d6b6e:	2200      	movs	r2, #0
   d6b70:	f7fd bf5e 	b.w	d4a30 <network_set_listen_timeout>

000d6b74 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b74:	2200      	movs	r2, #0
   d6b76:	6840      	ldr	r0, [r0, #4]
   d6b78:	4611      	mov	r1, r2
   d6b7a:	f7fd bf61 	b.w	d4a40 <network_get_listen_timeout>

000d6b7e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b7e:	2200      	movs	r2, #0
   d6b80:	6840      	ldr	r0, [r0, #4]
   d6b82:	4611      	mov	r1, r2
   d6b84:	f7fd bf4c 	b.w	d4a20 <network_listening>

000d6b88 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b8c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6b8e:	b095      	sub	sp, #84	; 0x54
   d6b90:	4616      	mov	r6, r2
   d6b92:	460d      	mov	r5, r1
   d6b94:	4607      	mov	r7, r0
    IPAddress addr;
   d6b96:	f7ff fdbb 	bl	d6710 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6b9a:	4621      	mov	r1, r4
   d6b9c:	2218      	movs	r2, #24
   d6b9e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6ba0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6ba2:	f000 ffaf 	bl	d7b04 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6ba6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6ba8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6bac:	4621      	mov	r1, r4
   d6bae:	466b      	mov	r3, sp
   d6bb0:	aa0c      	add	r2, sp, #48	; 0x30
   d6bb2:	4630      	mov	r0, r6
   d6bb4:	f7fd fd36 	bl	d4624 <netdb_getaddrinfo>
    if (!r) {
   d6bb8:	4604      	mov	r4, r0
   d6bba:	2800      	cmp	r0, #0
   d6bbc:	d14c      	bne.n	d6c58 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bbe:	4602      	mov	r2, r0
   d6bc0:	2101      	movs	r1, #1
   d6bc2:	6868      	ldr	r0, [r5, #4]
   d6bc4:	f7fd ff0c 	bl	d49e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bc8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bcc:	4622      	mov	r2, r4
   d6bce:	6868      	ldr	r0, [r5, #4]
   d6bd0:	f7fd ff06 	bl	d49e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bd4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bd6:	4681      	mov	r9, r0
        bool ok = false;
   d6bd8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bda:	2e00      	cmp	r6, #0
   d6bdc:	d03c      	beq.n	d6c58 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6bde:	2900      	cmp	r1, #0
   d6be0:	d13a      	bne.n	d6c58 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6be2:	6873      	ldr	r3, [r6, #4]
   d6be4:	2b02      	cmp	r3, #2
   d6be6:	d003      	beq.n	d6bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6be8:	2b0a      	cmp	r3, #10
   d6bea:	d011      	beq.n	d6c10 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bec:	69f6      	ldr	r6, [r6, #28]
   d6bee:	e7f4      	b.n	d6bda <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6bf0:	f1b8 0f00 	cmp.w	r8, #0
   d6bf4:	d00a      	beq.n	d6c0c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6bf6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6bf8:	a806      	add	r0, sp, #24
   d6bfa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6bfc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6bfe:	f7ff fdb5 	bl	d676c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c04:	1d3c      	adds	r4, r7, #4
   d6c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c08:	682b      	ldr	r3, [r5, #0]
   d6c0a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6c0c:	4641      	mov	r1, r8
   d6c0e:	e7ed      	b.n	d6bec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c10:	f1b9 0f00 	cmp.w	r9, #0
   d6c14:	d101      	bne.n	d6c1a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6c16:	4649      	mov	r1, r9
   d6c18:	e7e8      	b.n	d6bec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c1a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c1c:	2210      	movs	r2, #16
   d6c1e:	a801      	add	r0, sp, #4
   d6c20:	f000 ff70 	bl	d7b04 <memset>
                    a.v = 6;
   d6c24:	2306      	movs	r3, #6
   d6c26:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c2a:	ad01      	add	r5, sp, #4
   d6c2c:	f104 0308 	add.w	r3, r4, #8
   d6c30:	3418      	adds	r4, #24
   d6c32:	6818      	ldr	r0, [r3, #0]
   d6c34:	6859      	ldr	r1, [r3, #4]
   d6c36:	462a      	mov	r2, r5
   d6c38:	c203      	stmia	r2!, {r0, r1}
   d6c3a:	3308      	adds	r3, #8
   d6c3c:	42a3      	cmp	r3, r4
   d6c3e:	4615      	mov	r5, r2
   d6c40:	d1f7      	bne.n	d6c32 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6c42:	a901      	add	r1, sp, #4
   d6c44:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6c46:	ad07      	add	r5, sp, #28
   d6c48:	f7ff fd70 	bl	d672c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c4e:	1d3c      	adds	r4, r7, #4
   d6c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c52:	682b      	ldr	r3, [r5, #0]
   d6c54:	7023      	strb	r3, [r4, #0]
   d6c56:	e7de      	b.n	d6c16 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6c58:	9800      	ldr	r0, [sp, #0]
   d6c5a:	f7fd fcdb 	bl	d4614 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6c5e:	4638      	mov	r0, r7
   d6c60:	b015      	add	sp, #84	; 0x54
   d6c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6c68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c68:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c6a:	4a03      	ldr	r2, [pc, #12]	; (d6c78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c6c:	601a      	str	r2, [r3, #0]
   d6c6e:	2200      	movs	r2, #0
   d6c70:	605a      	str	r2, [r3, #4]

} // spark
   d6c72:	4770      	bx	lr
   d6c74:	2003e7a4 	.word	0x2003e7a4
   d6c78:	000d8030 	.word	0x000d8030

000d6c7c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6c7c:	f100 0310 	add.w	r3, r0, #16
   d6c80:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6c82:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6c86:	2901      	cmp	r1, #1
   d6c88:	4618      	mov	r0, r3
   d6c8a:	d108      	bne.n	d6c9e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6c8c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6c90:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6c94:	3a01      	subs	r2, #1
   d6c96:	f103 0310 	add.w	r3, r3, #16
   d6c9a:	d1f2      	bne.n	d6c82 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6c9c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6c9e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6ca0:	bf04      	itt	eq
   d6ca2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6ca6:	1852      	addeq	r2, r2, r1
   d6ca8:	e7f4      	b.n	d6c94 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6caa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6caa:	b40e      	push	{r1, r2, r3}
   d6cac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6cae:	b088      	sub	sp, #32
   d6cb0:	af00      	add	r7, sp, #0
   d6cb2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6cb6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6cb8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6cbc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6cbe:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6cc0:	462b      	mov	r3, r5
   d6cc2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6cc4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6cc6:	f7fd ff23 	bl	d4b10 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6cca:	280f      	cmp	r0, #15
   d6ccc:	687a      	ldr	r2, [r7, #4]
   d6cce:	d91a      	bls.n	d6d06 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6cd0:	f100 0308 	add.w	r3, r0, #8
   d6cd4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6cd8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6cda:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6cde:	1c41      	adds	r1, r0, #1
   d6ce0:	462b      	mov	r3, r5
   d6ce2:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6ce4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6ce6:	f7fd ff13 	bl	d4b10 <vsnprintf>
        if (n > 0) {
   d6cea:	1e02      	subs	r2, r0, #0
   d6cec:	dd04      	ble.n	d6cf8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6cee:	6823      	ldr	r3, [r4, #0]
   d6cf0:	4669      	mov	r1, sp
   d6cf2:	689b      	ldr	r3, [r3, #8]
   d6cf4:	4620      	mov	r0, r4
   d6cf6:	4798      	blx	r3
   d6cf8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6cfa:	3720      	adds	r7, #32
   d6cfc:	46bd      	mov	sp, r7
   d6cfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6d02:	b003      	add	sp, #12
   d6d04:	4770      	bx	lr
    } else if (n > 0) {
   d6d06:	2800      	cmp	r0, #0
   d6d08:	d0f7      	beq.n	d6cfa <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6d0a:	6823      	ldr	r3, [r4, #0]
   d6d0c:	4602      	mov	r2, r0
   d6d0e:	689b      	ldr	r3, [r3, #8]
   d6d10:	f107 0110 	add.w	r1, r7, #16
   d6d14:	4620      	mov	r0, r4
   d6d16:	4798      	blx	r3
}
   d6d18:	e7ef      	b.n	d6cfa <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6d1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d1a:	b510      	push	{r4, lr}
          _M_dispose();
   d6d1c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d1e:	4604      	mov	r4, r0
          _M_dispose();
   d6d20:	689b      	ldr	r3, [r3, #8]
   d6d22:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6d24:	68a3      	ldr	r3, [r4, #8]
   d6d26:	3b01      	subs	r3, #1
   d6d28:	60a3      	str	r3, [r4, #8]
   d6d2a:	b92b      	cbnz	r3, d6d38 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6d2c:	6823      	ldr	r3, [r4, #0]
   d6d2e:	4620      	mov	r0, r4
   d6d30:	68db      	ldr	r3, [r3, #12]
    }
   d6d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6d36:	4718      	bx	r3
    }
   d6d38:	bd10      	pop	{r4, pc}

000d6d3a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d6d3a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6d3c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6d3e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6d42:	689b      	ldr	r3, [r3, #8]
   d6d44:	2201      	movs	r2, #1
   d6d46:	f10d 0107 	add.w	r1, sp, #7
   d6d4a:	4798      	blx	r3
}
   d6d4c:	b003      	add	sp, #12
   d6d4e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6d52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6d52:	b538      	push	{r3, r4, r5, lr}
   d6d54:	680b      	ldr	r3, [r1, #0]
   d6d56:	6003      	str	r3, [r0, #0]
   d6d58:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6d5a:	6843      	ldr	r3, [r0, #4]
   d6d5c:	429d      	cmp	r5, r3
    class __shared_ptr
   d6d5e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6d60:	d00c      	beq.n	d6d7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6d62:	b115      	cbz	r5, d6d6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6d64:	686b      	ldr	r3, [r5, #4]
   d6d66:	3301      	adds	r3, #1
   d6d68:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6d6a:	6860      	ldr	r0, [r4, #4]
   d6d6c:	b128      	cbz	r0, d6d7a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6d6e:	6843      	ldr	r3, [r0, #4]
   d6d70:	3b01      	subs	r3, #1
   d6d72:	6043      	str	r3, [r0, #4]
   d6d74:	b90b      	cbnz	r3, d6d7a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6d76:	f7ff ffd0 	bl	d6d1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6d7a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	bd38      	pop	{r3, r4, r5, pc}

000d6d80 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6d80:	460b      	mov	r3, r1
   d6d82:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6d84:	2200      	movs	r2, #0
   d6d86:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6d88:	e9c0 2200 	strd	r2, r2, [r0]
   d6d8c:	4604      	mov	r4, r0
        t_ = t;
   d6d8e:	6083      	str	r3, [r0, #8]
    if (t) {
   d6d90:	b90b      	cbnz	r3, d6d96 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6d92:	4620      	mov	r0, r4
   d6d94:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6d96:	f7ff ffdc 	bl	d6d52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6d9a:	e7fa      	b.n	d6d92 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6d9c <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6d9c:	6883      	ldr	r3, [r0, #8]
   d6d9e:	b1eb      	cbz	r3, d6ddc <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6da0:	781a      	ldrb	r2, [r3, #0]
   d6da2:	2a03      	cmp	r2, #3
   d6da4:	d81a      	bhi.n	d6ddc <_ZNK5spark9JSONValue4typeEv+0x40>
   d6da6:	e8df f002 	tbb	[pc, r2]
   d6daa:	1704      	.short	0x1704
   d6dac:	1b02      	.short	0x1b02
   d6dae:	2005      	movs	r0, #5
   d6db0:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6db2:	6802      	ldr	r2, [r0, #0]
   d6db4:	685b      	ldr	r3, [r3, #4]
   d6db6:	6852      	ldr	r2, [r2, #4]
   d6db8:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6dba:	282d      	cmp	r0, #45	; 0x2d
   d6dbc:	d012      	beq.n	d6de4 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6dbe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6dc2:	2b09      	cmp	r3, #9
   d6dc4:	d90e      	bls.n	d6de4 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6dc6:	2874      	cmp	r0, #116	; 0x74
   d6dc8:	d00e      	beq.n	d6de8 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6dca:	2866      	cmp	r0, #102	; 0x66
   d6dcc:	d00c      	beq.n	d6de8 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6dce:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6dd2:	4258      	negs	r0, r3
   d6dd4:	4158      	adcs	r0, r3
   d6dd6:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6dd8:	2006      	movs	r0, #6
   d6dda:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6ddc:	2000      	movs	r0, #0
   d6dde:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6de0:	2004      	movs	r0, #4
   d6de2:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6de4:	2003      	movs	r0, #3
   d6de6:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6de8:	2002      	movs	r0, #2
}
   d6dea:	4770      	bx	lr

000d6dec <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6dec:	b510      	push	{r4, lr}
   d6dee:	4604      	mov	r4, r0
    switch (type()) {
   d6df0:	f7ff ffd4 	bl	d6d9c <_ZNK5spark9JSONValue4typeEv>
   d6df4:	2802      	cmp	r0, #2
   d6df6:	d00e      	beq.n	d6e16 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6df8:	1ec3      	subs	r3, r0, #3
   d6dfa:	b2db      	uxtb	r3, r3
   d6dfc:	2b01      	cmp	r3, #1
   d6dfe:	d814      	bhi.n	d6e2a <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6e00:	6822      	ldr	r2, [r4, #0]
   d6e02:	68a3      	ldr	r3, [r4, #8]
   d6e04:	6850      	ldr	r0, [r2, #4]
   d6e06:	685b      	ldr	r3, [r3, #4]
}
   d6e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6e0c:	220a      	movs	r2, #10
   d6e0e:	2100      	movs	r1, #0
   d6e10:	4418      	add	r0, r3
   d6e12:	f000 bf93 	b.w	d7d3c <strtol>
        const char* const s = d_->json + t_->start;
   d6e16:	6822      	ldr	r2, [r4, #0]
   d6e18:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6e1a:	6852      	ldr	r2, [r2, #4]
   d6e1c:	685b      	ldr	r3, [r3, #4]
   d6e1e:	5cd0      	ldrb	r0, [r2, r3]
   d6e20:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6e24:	4258      	negs	r0, r3
   d6e26:	4158      	adcs	r0, r3
}
   d6e28:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6e2a:	2000      	movs	r0, #0
   d6e2c:	e7fc      	b.n	d6e28 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d6e30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6e30:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6e32:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6e34:	e9c0 3300 	strd	r3, r3, [r0]
   d6e38:	4604      	mov	r4, r0
        n_(0) {
   d6e3a:	480e      	ldr	r0, [pc, #56]	; (d6e74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6e3c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6e40:	b1a9      	cbz	r1, d6e6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6e42:	780b      	ldrb	r3, [r1, #0]
   d6e44:	2b03      	cmp	r3, #3
   d6e46:	d006      	beq.n	d6e56 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6e48:	b98b      	cbnz	r3, d6e6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6e4a:	6813      	ldr	r3, [r2, #0]
   d6e4c:	6858      	ldr	r0, [r3, #4]
   d6e4e:	684b      	ldr	r3, [r1, #4]
   d6e50:	5cc3      	ldrb	r3, [r0, r3]
   d6e52:	2b6e      	cmp	r3, #110	; 0x6e
   d6e54:	d007      	beq.n	d6e66 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6e56:	6813      	ldr	r3, [r2, #0]
   d6e58:	684d      	ldr	r5, [r1, #4]
   d6e5a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6e5c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6e5e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6e60:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6e62:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6e64:	60e3      	str	r3, [r4, #12]
   d6e66:	4611      	mov	r1, r2
   d6e68:	4620      	mov	r0, r4
   d6e6a:	f7ff ff72 	bl	d6d52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6e6e:	4620      	mov	r0, r4
   d6e70:	bd38      	pop	{r3, r4, r5, pc}
   d6e72:	bf00      	nop
   d6e74:	000d7e83 	.word	0x000d7e83

000d6e78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6e78:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6e7a:	2500      	movs	r5, #0
   d6e7c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6e7e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6e82:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6e86:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6e8a:	4604      	mov	r4, r0
   d6e8c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6e8e:	b14b      	cbz	r3, d6ea4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6e90:	781a      	ldrb	r2, [r3, #0]
   d6e92:	2a01      	cmp	r2, #1
   d6e94:	d106      	bne.n	d6ea4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6e96:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6e9a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6e9c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6e9e:	6143      	str	r3, [r0, #20]
   d6ea0:	f7ff ff57 	bl	d6d52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	bd38      	pop	{r3, r4, r5, pc}

000d6ea8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6ea8:	b510      	push	{r4, lr}
    if (!n_) {
   d6eaa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6eac:	4604      	mov	r4, r0
    if (!n_) {
   d6eae:	b163      	cbz	r3, d6eca <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6eb0:	6880      	ldr	r0, [r0, #8]
   d6eb2:	60e0      	str	r0, [r4, #12]
    --n_;
   d6eb4:	3b01      	subs	r3, #1
    ++t_;
   d6eb6:	3010      	adds	r0, #16
   d6eb8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6eba:	6120      	str	r0, [r4, #16]
    --n_;
   d6ebc:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6ebe:	b113      	cbz	r3, d6ec6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6ec0:	f7ff fedc 	bl	d6c7c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6ec4:	60a0      	str	r0, [r4, #8]
    return true;
   d6ec6:	2001      	movs	r0, #1
   d6ec8:	e000      	b.n	d6ecc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6eca:	4618      	mov	r0, r3
}
   d6ecc:	bd10      	pop	{r4, pc}

000d6ece <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6ece:	b510      	push	{r4, lr}
    write('}');
   d6ed0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6ed2:	4604      	mov	r4, r0
    write('}');
   d6ed4:	f7ff ff31 	bl	d6d3a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6ed8:	2301      	movs	r3, #1
   d6eda:	7123      	strb	r3, [r4, #4]
}
   d6edc:	4620      	mov	r0, r4
   d6ede:	bd10      	pop	{r4, pc}

000d6ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6ee0:	b508      	push	{r3, lr}
    switch (state_) {
   d6ee2:	7903      	ldrb	r3, [r0, #4]
   d6ee4:	2b01      	cmp	r3, #1
   d6ee6:	d002      	beq.n	d6eee <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6ee8:	2b02      	cmp	r3, #2
   d6eea:	d004      	beq.n	d6ef6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6eec:	bd08      	pop	{r3, pc}
        write(',');
   d6eee:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6ef0:	f7ff ff23 	bl	d6d3a <_ZN5spark10JSONWriter5writeEc>
}
   d6ef4:	e7fa      	b.n	d6eec <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6ef6:	213a      	movs	r1, #58	; 0x3a
   d6ef8:	e7fa      	b.n	d6ef0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6efa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6efa:	b510      	push	{r4, lr}
   d6efc:	4604      	mov	r4, r0
    writeSeparator();
   d6efe:	f7ff ffef 	bl	d6ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6f02:	4620      	mov	r0, r4
   d6f04:	217b      	movs	r1, #123	; 0x7b
   d6f06:	f7ff ff18 	bl	d6d3a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6f0a:	2300      	movs	r3, #0
   d6f0c:	7123      	strb	r3, [r4, #4]
}
   d6f0e:	4620      	mov	r0, r4
   d6f10:	bd10      	pop	{r4, pc}
	...

000d6f14 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6f14:	b513      	push	{r0, r1, r4, lr}
   d6f16:	4604      	mov	r4, r0
   d6f18:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6f1a:	f7ff ffe1 	bl	d6ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6f1e:	6823      	ldr	r3, [r4, #0]
   d6f20:	9a01      	ldr	r2, [sp, #4]
   d6f22:	68db      	ldr	r3, [r3, #12]
   d6f24:	4903      	ldr	r1, [pc, #12]	; (d6f34 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6f26:	4620      	mov	r0, r4
   d6f28:	4798      	blx	r3
    state_ = NEXT;
   d6f2a:	2301      	movs	r3, #1
}
   d6f2c:	4620      	mov	r0, r4
    state_ = NEXT;
   d6f2e:	7123      	strb	r3, [r4, #4]
}
   d6f30:	b002      	add	sp, #8
   d6f32:	bd10      	pop	{r4, pc}
   d6f34:	000d7e5d 	.word	0x000d7e5d

000d6f38 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6f38:	b513      	push	{r0, r1, r4, lr}
   d6f3a:	4604      	mov	r4, r0
   d6f3c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6f3e:	f7ff ffcf 	bl	d6ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6f42:	6823      	ldr	r3, [r4, #0]
   d6f44:	9a01      	ldr	r2, [sp, #4]
   d6f46:	68db      	ldr	r3, [r3, #12]
   d6f48:	4903      	ldr	r1, [pc, #12]	; (d6f58 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	4798      	blx	r3
    state_ = NEXT;
   d6f4e:	2301      	movs	r3, #1
}
   d6f50:	4620      	mov	r0, r4
    state_ = NEXT;
   d6f52:	7123      	strb	r3, [r4, #4]
}
   d6f54:	b002      	add	sp, #8
   d6f56:	bd10      	pop	{r4, pc}
   d6f58:	000d8064 	.word	0x000d8064

000d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f60:	460d      	mov	r5, r1
   d6f62:	4617      	mov	r7, r2
    write('"');
   d6f64:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6f66:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d7008 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6f6a:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6f6c:	442f      	add	r7, r5
    write('"');
   d6f6e:	f7ff fee4 	bl	d6d3a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6f72:	4629      	mov	r1, r5
    while (s != end) {
   d6f74:	42bd      	cmp	r5, r7
   d6f76:	462a      	mov	r2, r5
   d6f78:	d038      	beq.n	d6fec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6f7a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6f7e:	2e22      	cmp	r6, #34	; 0x22
   d6f80:	d003      	beq.n	d6f8a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6f82:	2e5c      	cmp	r6, #92	; 0x5c
   d6f84:	d001      	beq.n	d6f8a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6f86:	2e1f      	cmp	r6, #31
   d6f88:	d8f4      	bhi.n	d6f74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6f8a:	6823      	ldr	r3, [r4, #0]
   d6f8c:	1a52      	subs	r2, r2, r1
   d6f8e:	689b      	ldr	r3, [r3, #8]
   d6f90:	4620      	mov	r0, r4
   d6f92:	4798      	blx	r3
            write('\\');
   d6f94:	215c      	movs	r1, #92	; 0x5c
   d6f96:	4620      	mov	r0, r4
   d6f98:	f7ff fecf 	bl	d6d3a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6f9c:	2e0d      	cmp	r6, #13
   d6f9e:	d80a      	bhi.n	d6fb6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6fa0:	2e07      	cmp	r6, #7
   d6fa2:	d91c      	bls.n	d6fde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6fa4:	f1a6 0308 	sub.w	r3, r6, #8
   d6fa8:	2b05      	cmp	r3, #5
   d6faa:	d818      	bhi.n	d6fde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6fac:	e8df f003 	tbb	[pc, r3]
   d6fb0:	17110f0d 	.word	0x17110f0d
   d6fb4:	1513      	.short	0x1513
   d6fb6:	2e22      	cmp	r6, #34	; 0x22
   d6fb8:	d001      	beq.n	d6fbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6fba:	2e5c      	cmp	r6, #92	; 0x5c
   d6fbc:	d10f      	bne.n	d6fde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6fbe:	4631      	mov	r1, r6
                write('b');
   d6fc0:	4620      	mov	r0, r4
   d6fc2:	f7ff feba 	bl	d6d3a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6fc6:	4629      	mov	r1, r5
    while (s != end) {
   d6fc8:	e7d4      	b.n	d6f74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6fca:	2162      	movs	r1, #98	; 0x62
   d6fcc:	e7f8      	b.n	d6fc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6fce:	2174      	movs	r1, #116	; 0x74
   d6fd0:	e7f6      	b.n	d6fc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6fd2:	216e      	movs	r1, #110	; 0x6e
   d6fd4:	e7f4      	b.n	d6fc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6fd6:	2166      	movs	r1, #102	; 0x66
   d6fd8:	e7f2      	b.n	d6fc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6fda:	2172      	movs	r1, #114	; 0x72
   d6fdc:	e7f0      	b.n	d6fc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6fde:	6823      	ldr	r3, [r4, #0]
   d6fe0:	4632      	mov	r2, r6
   d6fe2:	68db      	ldr	r3, [r3, #12]
   d6fe4:	4641      	mov	r1, r8
   d6fe6:	4620      	mov	r0, r4
   d6fe8:	4798      	blx	r3
                break;
   d6fea:	e7ec      	b.n	d6fc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6fec:	428d      	cmp	r5, r1
   d6fee:	d004      	beq.n	d6ffa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6ff0:	6823      	ldr	r3, [r4, #0]
   d6ff2:	1a6a      	subs	r2, r5, r1
   d6ff4:	689b      	ldr	r3, [r3, #8]
   d6ff6:	4620      	mov	r0, r4
   d6ff8:	4798      	blx	r3
    }
    write('"');
   d6ffa:	2122      	movs	r1, #34	; 0x22
   d6ffc:	4620      	mov	r0, r4
   d6ffe:	f7ff fe9c 	bl	d6d3a <_ZN5spark10JSONWriter5writeEc>
}
   d7002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7006:	bf00      	nop
   d7008:	000d8067 	.word	0x000d8067

000d700c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d700c:	b513      	push	{r0, r1, r4, lr}
   d700e:	4604      	mov	r4, r0
   d7010:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7014:	f7ff ff64 	bl	d6ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d7018:	4620      	mov	r0, r4
   d701a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d701e:	f7ff ff9d 	bl	d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d7022:	2302      	movs	r3, #2
}
   d7024:	4620      	mov	r0, r4
    state_ = VALUE;
   d7026:	7123      	strb	r3, [r4, #4]
}
   d7028:	b002      	add	sp, #8
   d702a:	bd10      	pop	{r4, pc}

000d702c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d702c:	b513      	push	{r0, r1, r4, lr}
   d702e:	4604      	mov	r4, r0
   d7030:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7034:	f7ff ff54 	bl	d6ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d7038:	4620      	mov	r0, r4
   d703a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d703e:	f7ff ff8d 	bl	d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d7042:	2301      	movs	r3, #1
}
   d7044:	4620      	mov	r0, r4
    state_ = NEXT;
   d7046:	7123      	strb	r3, [r4, #4]
}
   d7048:	b002      	add	sp, #8
   d704a:	bd10      	pop	{r4, pc}

000d704c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d704c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d704e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7050:	d902      	bls.n	d7058 <pinAvailable+0xc>
    return false;
   d7052:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7054:	b002      	add	sp, #8
   d7056:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7058:	f1a0 030b 	sub.w	r3, r0, #11
   d705c:	2b02      	cmp	r3, #2
   d705e:	d81a      	bhi.n	d7096 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7060:	4c17      	ldr	r4, [pc, #92]	; (d70c0 <pinAvailable+0x74>)
   d7062:	7821      	ldrb	r1, [r4, #0]
   d7064:	f3bf 8f5b 	dmb	ish
   d7068:	f011 0101 	ands.w	r1, r1, #1
   d706c:	d10b      	bne.n	d7086 <pinAvailable+0x3a>
   d706e:	4620      	mov	r0, r4
   d7070:	9101      	str	r1, [sp, #4]
   d7072:	f7fd f821 	bl	d40b8 <__cxa_guard_acquire>
   d7076:	9901      	ldr	r1, [sp, #4]
   d7078:	b128      	cbz	r0, d7086 <pinAvailable+0x3a>
   d707a:	4812      	ldr	r0, [pc, #72]	; (d70c4 <pinAvailable+0x78>)
   d707c:	f7fd fda6 	bl	d4bcc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7080:	4620      	mov	r0, r4
   d7082:	f7fd f81e 	bl	d40c2 <__cxa_guard_release>
   d7086:	4b0f      	ldr	r3, [pc, #60]	; (d70c4 <pinAvailable+0x78>)
   d7088:	7818      	ldrb	r0, [r3, #0]
   d708a:	f7fd fbdb 	bl	d4844 <hal_spi_is_enabled>
   d708e:	2800      	cmp	r0, #0
   d7090:	d1df      	bne.n	d7052 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7092:	2001      	movs	r0, #1
   d7094:	e7de      	b.n	d7054 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7096:	2801      	cmp	r0, #1
   d7098:	d809      	bhi.n	d70ae <pinAvailable+0x62>
   d709a:	f000 f881 	bl	d71a0 <_Z19__fetch_global_Wirev>
   d709e:	2100      	movs	r1, #0
   d70a0:	7c00      	ldrb	r0, [r0, #16]
   d70a2:	f7fd fba7 	bl	d47f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d70a6:	f080 0001 	eor.w	r0, r0, #1
   d70aa:	b2c0      	uxtb	r0, r0
   d70ac:	e7d2      	b.n	d7054 <pinAvailable+0x8>
   d70ae:	3809      	subs	r0, #9
   d70b0:	2801      	cmp	r0, #1
   d70b2:	d8ee      	bhi.n	d7092 <pinAvailable+0x46>
   d70b4:	f7ff fc9e 	bl	d69f4 <_Z22__fetch_global_Serial1v>
   d70b8:	7c00      	ldrb	r0, [r0, #16]
   d70ba:	f7fd fb5b 	bl	d4774 <hal_usart_is_enabled>
   d70be:	e7f2      	b.n	d70a6 <pinAvailable+0x5a>
   d70c0:	2003e7ac 	.word	0x2003e7ac
   d70c4:	2003e7b0 	.word	0x2003e7b0

000d70c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70c8:	2823      	cmp	r0, #35	; 0x23
{
   d70ca:	b538      	push	{r3, r4, r5, lr}
   d70cc:	4604      	mov	r4, r0
   d70ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70d0:	d80a      	bhi.n	d70e8 <pinMode+0x20>
   d70d2:	29ff      	cmp	r1, #255	; 0xff
   d70d4:	d008      	beq.n	d70e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d70d6:	f7ff ffb9 	bl	d704c <pinAvailable>
   d70da:	b128      	cbz	r0, d70e8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d70dc:	4629      	mov	r1, r5
   d70de:	4620      	mov	r0, r4
}
   d70e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d70e4:	f7fd baae 	b.w	d4644 <HAL_Pin_Mode>
}
   d70e8:	bd38      	pop	{r3, r4, r5, pc}

000d70ea <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d70ea:	b510      	push	{r4, lr}
   d70ec:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d70ee:	f7fd fab1 	bl	d4654 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d70f2:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d70f4:	b2db      	uxtb	r3, r3
   d70f6:	2b01      	cmp	r3, #1
   d70f8:	d908      	bls.n	d710c <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d70fa:	4620      	mov	r0, r4
   d70fc:	f7ff ffa6 	bl	d704c <pinAvailable>
   d7100:	b120      	cbz	r0, d710c <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7102:	4620      	mov	r0, r4
}
   d7104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7108:	f7fd baac 	b.w	d4664 <HAL_GPIO_Read>
}
   d710c:	2000      	movs	r0, #0
   d710e:	bd10      	pop	{r4, pc}

000d7110 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7110:	280d      	cmp	r0, #13
{
   d7112:	b510      	push	{r4, lr}
   d7114:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7116:	bf9c      	itt	ls
   d7118:	340e      	addls	r4, #14
   d711a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d711c:	4620      	mov	r0, r4
   d711e:	f7ff ff95 	bl	d704c <pinAvailable>
   d7122:	b150      	cbz	r0, d713a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7124:	2103      	movs	r1, #3
   d7126:	4620      	mov	r0, r4
   d7128:	f7fd fa84 	bl	d4634 <HAL_Validate_Pin_Function>
   d712c:	2803      	cmp	r0, #3
   d712e:	d104      	bne.n	d713a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7130:	4620      	mov	r0, r4
}
   d7132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7136:	f7fd ba9d 	b.w	d4674 <hal_adc_read>
}
   d713a:	2000      	movs	r0, #0
   d713c:	bd10      	pop	{r4, pc}
	...

000d7140 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7140:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7142:	2300      	movs	r3, #0
   d7144:	2520      	movs	r5, #32
   d7146:	8043      	strh	r3, [r0, #2]
   d7148:	2314      	movs	r3, #20
{
   d714a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d714c:	8003      	strh	r3, [r0, #0]
   d714e:	6085      	str	r5, [r0, #8]
   d7150:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7152:	4906      	ldr	r1, [pc, #24]	; (d716c <_Z17acquireWireBufferv+0x2c>)
   d7154:	4628      	mov	r0, r5
   d7156:	f000 f87c 	bl	d7252 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d715a:	4904      	ldr	r1, [pc, #16]	; (d716c <_Z17acquireWireBufferv+0x2c>)
	};
   d715c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d715e:	4628      	mov	r0, r5
   d7160:	f000 f877 	bl	d7252 <_ZnajRKSt9nothrow_t>
	};
   d7164:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7166:	4620      	mov	r0, r4
   d7168:	bd38      	pop	{r3, r4, r5, pc}
   d716a:	bf00      	nop
   d716c:	000d806d 	.word	0x000d806d

000d7170 <_Z18acquireWire1Bufferv>:
   d7170:	b538      	push	{r3, r4, r5, lr}
   d7172:	2300      	movs	r3, #0
   d7174:	2520      	movs	r5, #32
   d7176:	8043      	strh	r3, [r0, #2]
   d7178:	2314      	movs	r3, #20
   d717a:	4604      	mov	r4, r0
   d717c:	8003      	strh	r3, [r0, #0]
   d717e:	6085      	str	r5, [r0, #8]
   d7180:	6105      	str	r5, [r0, #16]
   d7182:	4906      	ldr	r1, [pc, #24]	; (d719c <_Z18acquireWire1Bufferv+0x2c>)
   d7184:	4628      	mov	r0, r5
   d7186:	f000 f864 	bl	d7252 <_ZnajRKSt9nothrow_t>
   d718a:	4904      	ldr	r1, [pc, #16]	; (d719c <_Z18acquireWire1Bufferv+0x2c>)
   d718c:	6060      	str	r0, [r4, #4]
   d718e:	4628      	mov	r0, r5
   d7190:	f000 f85f 	bl	d7252 <_ZnajRKSt9nothrow_t>
   d7194:	60e0      	str	r0, [r4, #12]
   d7196:	4620      	mov	r0, r4
   d7198:	bd38      	pop	{r3, r4, r5, pc}
   d719a:	bf00      	nop
   d719c:	000d806d 	.word	0x000d806d

000d71a0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d71a0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d71a2:	4d0f      	ldr	r5, [pc, #60]	; (d71e0 <_Z19__fetch_global_Wirev+0x40>)
   d71a4:	7829      	ldrb	r1, [r5, #0]
   d71a6:	f3bf 8f5b 	dmb	ish
   d71aa:	f011 0401 	ands.w	r4, r1, #1
{
   d71ae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d71b0:	d113      	bne.n	d71da <_Z19__fetch_global_Wirev+0x3a>
   d71b2:	4628      	mov	r0, r5
   d71b4:	f7fc ff80 	bl	d40b8 <__cxa_guard_acquire>
   d71b8:	b178      	cbz	r0, d71da <_Z19__fetch_global_Wirev+0x3a>
   d71ba:	a801      	add	r0, sp, #4
   d71bc:	f7ff ffc0 	bl	d7140 <_Z17acquireWireBufferv>
   d71c0:	aa01      	add	r2, sp, #4
   d71c2:	4621      	mov	r1, r4
   d71c4:	4807      	ldr	r0, [pc, #28]	; (d71e4 <_Z19__fetch_global_Wirev+0x44>)
   d71c6:	f7ff fc7f 	bl	d6ac8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d71ca:	4628      	mov	r0, r5
   d71cc:	f7fc ff79 	bl	d40c2 <__cxa_guard_release>
   d71d0:	4a05      	ldr	r2, [pc, #20]	; (d71e8 <_Z19__fetch_global_Wirev+0x48>)
   d71d2:	4906      	ldr	r1, [pc, #24]	; (d71ec <_Z19__fetch_global_Wirev+0x4c>)
   d71d4:	4803      	ldr	r0, [pc, #12]	; (d71e4 <_Z19__fetch_global_Wirev+0x44>)
   d71d6:	f000 f833 	bl	d7240 <__aeabi_atexit>
	return wire;
}
   d71da:	4802      	ldr	r0, [pc, #8]	; (d71e4 <_Z19__fetch_global_Wirev+0x44>)
   d71dc:	b007      	add	sp, #28
   d71de:	bd30      	pop	{r4, r5, pc}
   d71e0:	2003e7c0 	.word	0x2003e7c0
   d71e4:	2003e7c8 	.word	0x2003e7c8
   d71e8:	2003e568 	.word	0x2003e568
   d71ec:	000d6a71 	.word	0x000d6a71

000d71f0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d71f0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d71f2:	4c0f      	ldr	r4, [pc, #60]	; (d7230 <_Z20__fetch_global_Wire1v+0x40>)
   d71f4:	7823      	ldrb	r3, [r4, #0]
   d71f6:	f3bf 8f5b 	dmb	ish
   d71fa:	07db      	lsls	r3, r3, #31
{
   d71fc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d71fe:	d413      	bmi.n	d7228 <_Z20__fetch_global_Wire1v+0x38>
   d7200:	4620      	mov	r0, r4
   d7202:	f7fc ff59 	bl	d40b8 <__cxa_guard_acquire>
   d7206:	b178      	cbz	r0, d7228 <_Z20__fetch_global_Wire1v+0x38>
   d7208:	a801      	add	r0, sp, #4
   d720a:	f7ff ffb1 	bl	d7170 <_Z18acquireWire1Bufferv>
   d720e:	aa01      	add	r2, sp, #4
   d7210:	2101      	movs	r1, #1
   d7212:	4808      	ldr	r0, [pc, #32]	; (d7234 <_Z20__fetch_global_Wire1v+0x44>)
   d7214:	f7ff fc58 	bl	d6ac8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7218:	4620      	mov	r0, r4
   d721a:	f7fc ff52 	bl	d40c2 <__cxa_guard_release>
   d721e:	4a06      	ldr	r2, [pc, #24]	; (d7238 <_Z20__fetch_global_Wire1v+0x48>)
   d7220:	4906      	ldr	r1, [pc, #24]	; (d723c <_Z20__fetch_global_Wire1v+0x4c>)
   d7222:	4804      	ldr	r0, [pc, #16]	; (d7234 <_Z20__fetch_global_Wire1v+0x44>)
   d7224:	f000 f80c 	bl	d7240 <__aeabi_atexit>
	return wire;
}
   d7228:	4802      	ldr	r0, [pc, #8]	; (d7234 <_Z20__fetch_global_Wire1v+0x44>)
   d722a:	b006      	add	sp, #24
   d722c:	bd10      	pop	{r4, pc}
   d722e:	bf00      	nop
   d7230:	2003e7c4 	.word	0x2003e7c4
   d7234:	2003e7dc 	.word	0x2003e7dc
   d7238:	2003e568 	.word	0x2003e568
   d723c:	000d6a71 	.word	0x000d6a71

000d7240 <__aeabi_atexit>:
   d7240:	460b      	mov	r3, r1
   d7242:	4601      	mov	r1, r0
   d7244:	4618      	mov	r0, r3
   d7246:	f000 bc27 	b.w	d7a98 <__cxa_atexit>

000d724a <_ZdlPvj>:
   d724a:	f7fc bf28 	b.w	d409e <_ZdlPv>

000d724e <_ZnwjRKSt9nothrow_t>:
   d724e:	f7fc bf22 	b.w	d4096 <_Znwj>

000d7252 <_ZnajRKSt9nothrow_t>:
   d7252:	f7fc bf22 	b.w	d409a <_Znaj>

000d7256 <_ZSt25__throw_bad_function_callv>:
   d7256:	b508      	push	{r3, lr}
   d7258:	f7fd fc62 	bl	d4b20 <abort>

000d725c <__aeabi_drsub>:
   d725c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7260:	e002      	b.n	d7268 <__adddf3>
   d7262:	bf00      	nop

000d7264 <__aeabi_dsub>:
   d7264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7268 <__adddf3>:
   d7268:	b530      	push	{r4, r5, lr}
   d726a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d726e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7272:	ea94 0f05 	teq	r4, r5
   d7276:	bf08      	it	eq
   d7278:	ea90 0f02 	teqeq	r0, r2
   d727c:	bf1f      	itttt	ne
   d727e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7282:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7286:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d728a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d728e:	f000 80e2 	beq.w	d7456 <__adddf3+0x1ee>
   d7292:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7296:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d729a:	bfb8      	it	lt
   d729c:	426d      	neglt	r5, r5
   d729e:	dd0c      	ble.n	d72ba <__adddf3+0x52>
   d72a0:	442c      	add	r4, r5
   d72a2:	ea80 0202 	eor.w	r2, r0, r2
   d72a6:	ea81 0303 	eor.w	r3, r1, r3
   d72aa:	ea82 0000 	eor.w	r0, r2, r0
   d72ae:	ea83 0101 	eor.w	r1, r3, r1
   d72b2:	ea80 0202 	eor.w	r2, r0, r2
   d72b6:	ea81 0303 	eor.w	r3, r1, r3
   d72ba:	2d36      	cmp	r5, #54	; 0x36
   d72bc:	bf88      	it	hi
   d72be:	bd30      	pophi	{r4, r5, pc}
   d72c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d72c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d72c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d72cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d72d0:	d002      	beq.n	d72d8 <__adddf3+0x70>
   d72d2:	4240      	negs	r0, r0
   d72d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d72d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d72dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d72e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d72e4:	d002      	beq.n	d72ec <__adddf3+0x84>
   d72e6:	4252      	negs	r2, r2
   d72e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d72ec:	ea94 0f05 	teq	r4, r5
   d72f0:	f000 80a7 	beq.w	d7442 <__adddf3+0x1da>
   d72f4:	f1a4 0401 	sub.w	r4, r4, #1
   d72f8:	f1d5 0e20 	rsbs	lr, r5, #32
   d72fc:	db0d      	blt.n	d731a <__adddf3+0xb2>
   d72fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7302:	fa22 f205 	lsr.w	r2, r2, r5
   d7306:	1880      	adds	r0, r0, r2
   d7308:	f141 0100 	adc.w	r1, r1, #0
   d730c:	fa03 f20e 	lsl.w	r2, r3, lr
   d7310:	1880      	adds	r0, r0, r2
   d7312:	fa43 f305 	asr.w	r3, r3, r5
   d7316:	4159      	adcs	r1, r3
   d7318:	e00e      	b.n	d7338 <__adddf3+0xd0>
   d731a:	f1a5 0520 	sub.w	r5, r5, #32
   d731e:	f10e 0e20 	add.w	lr, lr, #32
   d7322:	2a01      	cmp	r2, #1
   d7324:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7328:	bf28      	it	cs
   d732a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d732e:	fa43 f305 	asr.w	r3, r3, r5
   d7332:	18c0      	adds	r0, r0, r3
   d7334:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d733c:	d507      	bpl.n	d734e <__adddf3+0xe6>
   d733e:	f04f 0e00 	mov.w	lr, #0
   d7342:	f1dc 0c00 	rsbs	ip, ip, #0
   d7346:	eb7e 0000 	sbcs.w	r0, lr, r0
   d734a:	eb6e 0101 	sbc.w	r1, lr, r1
   d734e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7352:	d31b      	bcc.n	d738c <__adddf3+0x124>
   d7354:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7358:	d30c      	bcc.n	d7374 <__adddf3+0x10c>
   d735a:	0849      	lsrs	r1, r1, #1
   d735c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7360:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7364:	f104 0401 	add.w	r4, r4, #1
   d7368:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d736c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7370:	f080 809a 	bcs.w	d74a8 <__adddf3+0x240>
   d7374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7378:	bf08      	it	eq
   d737a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d737e:	f150 0000 	adcs.w	r0, r0, #0
   d7382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7386:	ea41 0105 	orr.w	r1, r1, r5
   d738a:	bd30      	pop	{r4, r5, pc}
   d738c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7390:	4140      	adcs	r0, r0
   d7392:	eb41 0101 	adc.w	r1, r1, r1
   d7396:	3c01      	subs	r4, #1
   d7398:	bf28      	it	cs
   d739a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d739e:	d2e9      	bcs.n	d7374 <__adddf3+0x10c>
   d73a0:	f091 0f00 	teq	r1, #0
   d73a4:	bf04      	itt	eq
   d73a6:	4601      	moveq	r1, r0
   d73a8:	2000      	moveq	r0, #0
   d73aa:	fab1 f381 	clz	r3, r1
   d73ae:	bf08      	it	eq
   d73b0:	3320      	addeq	r3, #32
   d73b2:	f1a3 030b 	sub.w	r3, r3, #11
   d73b6:	f1b3 0220 	subs.w	r2, r3, #32
   d73ba:	da0c      	bge.n	d73d6 <__adddf3+0x16e>
   d73bc:	320c      	adds	r2, #12
   d73be:	dd08      	ble.n	d73d2 <__adddf3+0x16a>
   d73c0:	f102 0c14 	add.w	ip, r2, #20
   d73c4:	f1c2 020c 	rsb	r2, r2, #12
   d73c8:	fa01 f00c 	lsl.w	r0, r1, ip
   d73cc:	fa21 f102 	lsr.w	r1, r1, r2
   d73d0:	e00c      	b.n	d73ec <__adddf3+0x184>
   d73d2:	f102 0214 	add.w	r2, r2, #20
   d73d6:	bfd8      	it	le
   d73d8:	f1c2 0c20 	rsble	ip, r2, #32
   d73dc:	fa01 f102 	lsl.w	r1, r1, r2
   d73e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d73e4:	bfdc      	itt	le
   d73e6:	ea41 010c 	orrle.w	r1, r1, ip
   d73ea:	4090      	lslle	r0, r2
   d73ec:	1ae4      	subs	r4, r4, r3
   d73ee:	bfa2      	ittt	ge
   d73f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d73f4:	4329      	orrge	r1, r5
   d73f6:	bd30      	popge	{r4, r5, pc}
   d73f8:	ea6f 0404 	mvn.w	r4, r4
   d73fc:	3c1f      	subs	r4, #31
   d73fe:	da1c      	bge.n	d743a <__adddf3+0x1d2>
   d7400:	340c      	adds	r4, #12
   d7402:	dc0e      	bgt.n	d7422 <__adddf3+0x1ba>
   d7404:	f104 0414 	add.w	r4, r4, #20
   d7408:	f1c4 0220 	rsb	r2, r4, #32
   d740c:	fa20 f004 	lsr.w	r0, r0, r4
   d7410:	fa01 f302 	lsl.w	r3, r1, r2
   d7414:	ea40 0003 	orr.w	r0, r0, r3
   d7418:	fa21 f304 	lsr.w	r3, r1, r4
   d741c:	ea45 0103 	orr.w	r1, r5, r3
   d7420:	bd30      	pop	{r4, r5, pc}
   d7422:	f1c4 040c 	rsb	r4, r4, #12
   d7426:	f1c4 0220 	rsb	r2, r4, #32
   d742a:	fa20 f002 	lsr.w	r0, r0, r2
   d742e:	fa01 f304 	lsl.w	r3, r1, r4
   d7432:	ea40 0003 	orr.w	r0, r0, r3
   d7436:	4629      	mov	r1, r5
   d7438:	bd30      	pop	{r4, r5, pc}
   d743a:	fa21 f004 	lsr.w	r0, r1, r4
   d743e:	4629      	mov	r1, r5
   d7440:	bd30      	pop	{r4, r5, pc}
   d7442:	f094 0f00 	teq	r4, #0
   d7446:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d744a:	bf06      	itte	eq
   d744c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7450:	3401      	addeq	r4, #1
   d7452:	3d01      	subne	r5, #1
   d7454:	e74e      	b.n	d72f4 <__adddf3+0x8c>
   d7456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d745a:	bf18      	it	ne
   d745c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7460:	d029      	beq.n	d74b6 <__adddf3+0x24e>
   d7462:	ea94 0f05 	teq	r4, r5
   d7466:	bf08      	it	eq
   d7468:	ea90 0f02 	teqeq	r0, r2
   d746c:	d005      	beq.n	d747a <__adddf3+0x212>
   d746e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7472:	bf04      	itt	eq
   d7474:	4619      	moveq	r1, r3
   d7476:	4610      	moveq	r0, r2
   d7478:	bd30      	pop	{r4, r5, pc}
   d747a:	ea91 0f03 	teq	r1, r3
   d747e:	bf1e      	ittt	ne
   d7480:	2100      	movne	r1, #0
   d7482:	2000      	movne	r0, #0
   d7484:	bd30      	popne	{r4, r5, pc}
   d7486:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d748a:	d105      	bne.n	d7498 <__adddf3+0x230>
   d748c:	0040      	lsls	r0, r0, #1
   d748e:	4149      	adcs	r1, r1
   d7490:	bf28      	it	cs
   d7492:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7496:	bd30      	pop	{r4, r5, pc}
   d7498:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d749c:	bf3c      	itt	cc
   d749e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d74a2:	bd30      	popcc	{r4, r5, pc}
   d74a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d74a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d74ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d74b0:	f04f 0000 	mov.w	r0, #0
   d74b4:	bd30      	pop	{r4, r5, pc}
   d74b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d74ba:	bf1a      	itte	ne
   d74bc:	4619      	movne	r1, r3
   d74be:	4610      	movne	r0, r2
   d74c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d74c4:	bf1c      	itt	ne
   d74c6:	460b      	movne	r3, r1
   d74c8:	4602      	movne	r2, r0
   d74ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d74ce:	bf06      	itte	eq
   d74d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d74d4:	ea91 0f03 	teqeq	r1, r3
   d74d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d74dc:	bd30      	pop	{r4, r5, pc}
   d74de:	bf00      	nop

000d74e0 <__aeabi_ui2d>:
   d74e0:	f090 0f00 	teq	r0, #0
   d74e4:	bf04      	itt	eq
   d74e6:	2100      	moveq	r1, #0
   d74e8:	4770      	bxeq	lr
   d74ea:	b530      	push	{r4, r5, lr}
   d74ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d74f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d74f4:	f04f 0500 	mov.w	r5, #0
   d74f8:	f04f 0100 	mov.w	r1, #0
   d74fc:	e750      	b.n	d73a0 <__adddf3+0x138>
   d74fe:	bf00      	nop

000d7500 <__aeabi_i2d>:
   d7500:	f090 0f00 	teq	r0, #0
   d7504:	bf04      	itt	eq
   d7506:	2100      	moveq	r1, #0
   d7508:	4770      	bxeq	lr
   d750a:	b530      	push	{r4, r5, lr}
   d750c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7510:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7514:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7518:	bf48      	it	mi
   d751a:	4240      	negmi	r0, r0
   d751c:	f04f 0100 	mov.w	r1, #0
   d7520:	e73e      	b.n	d73a0 <__adddf3+0x138>
   d7522:	bf00      	nop

000d7524 <__aeabi_f2d>:
   d7524:	0042      	lsls	r2, r0, #1
   d7526:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d752a:	ea4f 0131 	mov.w	r1, r1, rrx
   d752e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7532:	bf1f      	itttt	ne
   d7534:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7538:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d753c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7540:	4770      	bxne	lr
   d7542:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7546:	bf08      	it	eq
   d7548:	4770      	bxeq	lr
   d754a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d754e:	bf04      	itt	eq
   d7550:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7554:	4770      	bxeq	lr
   d7556:	b530      	push	{r4, r5, lr}
   d7558:	f44f 7460 	mov.w	r4, #896	; 0x380
   d755c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7560:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7564:	e71c      	b.n	d73a0 <__adddf3+0x138>
   d7566:	bf00      	nop

000d7568 <__aeabi_ul2d>:
   d7568:	ea50 0201 	orrs.w	r2, r0, r1
   d756c:	bf08      	it	eq
   d756e:	4770      	bxeq	lr
   d7570:	b530      	push	{r4, r5, lr}
   d7572:	f04f 0500 	mov.w	r5, #0
   d7576:	e00a      	b.n	d758e <__aeabi_l2d+0x16>

000d7578 <__aeabi_l2d>:
   d7578:	ea50 0201 	orrs.w	r2, r0, r1
   d757c:	bf08      	it	eq
   d757e:	4770      	bxeq	lr
   d7580:	b530      	push	{r4, r5, lr}
   d7582:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7586:	d502      	bpl.n	d758e <__aeabi_l2d+0x16>
   d7588:	4240      	negs	r0, r0
   d758a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d758e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7592:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7596:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d759a:	f43f aed8 	beq.w	d734e <__adddf3+0xe6>
   d759e:	f04f 0203 	mov.w	r2, #3
   d75a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d75a6:	bf18      	it	ne
   d75a8:	3203      	addne	r2, #3
   d75aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d75ae:	bf18      	it	ne
   d75b0:	3203      	addne	r2, #3
   d75b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d75b6:	f1c2 0320 	rsb	r3, r2, #32
   d75ba:	fa00 fc03 	lsl.w	ip, r0, r3
   d75be:	fa20 f002 	lsr.w	r0, r0, r2
   d75c2:	fa01 fe03 	lsl.w	lr, r1, r3
   d75c6:	ea40 000e 	orr.w	r0, r0, lr
   d75ca:	fa21 f102 	lsr.w	r1, r1, r2
   d75ce:	4414      	add	r4, r2
   d75d0:	e6bd      	b.n	d734e <__adddf3+0xe6>
   d75d2:	bf00      	nop

000d75d4 <__aeabi_dmul>:
   d75d4:	b570      	push	{r4, r5, r6, lr}
   d75d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d75da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d75de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d75e2:	bf1d      	ittte	ne
   d75e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d75e8:	ea94 0f0c 	teqne	r4, ip
   d75ec:	ea95 0f0c 	teqne	r5, ip
   d75f0:	f000 f8de 	bleq	d77b0 <__aeabi_dmul+0x1dc>
   d75f4:	442c      	add	r4, r5
   d75f6:	ea81 0603 	eor.w	r6, r1, r3
   d75fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d75fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7602:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7606:	bf18      	it	ne
   d7608:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d760c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7614:	d038      	beq.n	d7688 <__aeabi_dmul+0xb4>
   d7616:	fba0 ce02 	umull	ip, lr, r0, r2
   d761a:	f04f 0500 	mov.w	r5, #0
   d761e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7622:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7626:	fbe0 e503 	umlal	lr, r5, r0, r3
   d762a:	f04f 0600 	mov.w	r6, #0
   d762e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7632:	f09c 0f00 	teq	ip, #0
   d7636:	bf18      	it	ne
   d7638:	f04e 0e01 	orrne.w	lr, lr, #1
   d763c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7640:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7644:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7648:	d204      	bcs.n	d7654 <__aeabi_dmul+0x80>
   d764a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d764e:	416d      	adcs	r5, r5
   d7650:	eb46 0606 	adc.w	r6, r6, r6
   d7654:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7658:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d765c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7660:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7664:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7668:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d766c:	bf88      	it	hi
   d766e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7672:	d81e      	bhi.n	d76b2 <__aeabi_dmul+0xde>
   d7674:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7678:	bf08      	it	eq
   d767a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d767e:	f150 0000 	adcs.w	r0, r0, #0
   d7682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7686:	bd70      	pop	{r4, r5, r6, pc}
   d7688:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d768c:	ea46 0101 	orr.w	r1, r6, r1
   d7690:	ea40 0002 	orr.w	r0, r0, r2
   d7694:	ea81 0103 	eor.w	r1, r1, r3
   d7698:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d769c:	bfc2      	ittt	gt
   d769e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d76a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d76a6:	bd70      	popgt	{r4, r5, r6, pc}
   d76a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d76ac:	f04f 0e00 	mov.w	lr, #0
   d76b0:	3c01      	subs	r4, #1
   d76b2:	f300 80ab 	bgt.w	d780c <__aeabi_dmul+0x238>
   d76b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d76ba:	bfde      	ittt	le
   d76bc:	2000      	movle	r0, #0
   d76be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d76c2:	bd70      	pople	{r4, r5, r6, pc}
   d76c4:	f1c4 0400 	rsb	r4, r4, #0
   d76c8:	3c20      	subs	r4, #32
   d76ca:	da35      	bge.n	d7738 <__aeabi_dmul+0x164>
   d76cc:	340c      	adds	r4, #12
   d76ce:	dc1b      	bgt.n	d7708 <__aeabi_dmul+0x134>
   d76d0:	f104 0414 	add.w	r4, r4, #20
   d76d4:	f1c4 0520 	rsb	r5, r4, #32
   d76d8:	fa00 f305 	lsl.w	r3, r0, r5
   d76dc:	fa20 f004 	lsr.w	r0, r0, r4
   d76e0:	fa01 f205 	lsl.w	r2, r1, r5
   d76e4:	ea40 0002 	orr.w	r0, r0, r2
   d76e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d76ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d76f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d76f4:	fa21 f604 	lsr.w	r6, r1, r4
   d76f8:	eb42 0106 	adc.w	r1, r2, r6
   d76fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7700:	bf08      	it	eq
   d7702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7706:	bd70      	pop	{r4, r5, r6, pc}
   d7708:	f1c4 040c 	rsb	r4, r4, #12
   d770c:	f1c4 0520 	rsb	r5, r4, #32
   d7710:	fa00 f304 	lsl.w	r3, r0, r4
   d7714:	fa20 f005 	lsr.w	r0, r0, r5
   d7718:	fa01 f204 	lsl.w	r2, r1, r4
   d771c:	ea40 0002 	orr.w	r0, r0, r2
   d7720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7728:	f141 0100 	adc.w	r1, r1, #0
   d772c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7730:	bf08      	it	eq
   d7732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7736:	bd70      	pop	{r4, r5, r6, pc}
   d7738:	f1c4 0520 	rsb	r5, r4, #32
   d773c:	fa00 f205 	lsl.w	r2, r0, r5
   d7740:	ea4e 0e02 	orr.w	lr, lr, r2
   d7744:	fa20 f304 	lsr.w	r3, r0, r4
   d7748:	fa01 f205 	lsl.w	r2, r1, r5
   d774c:	ea43 0302 	orr.w	r3, r3, r2
   d7750:	fa21 f004 	lsr.w	r0, r1, r4
   d7754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7758:	fa21 f204 	lsr.w	r2, r1, r4
   d775c:	ea20 0002 	bic.w	r0, r0, r2
   d7760:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7768:	bf08      	it	eq
   d776a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d776e:	bd70      	pop	{r4, r5, r6, pc}
   d7770:	f094 0f00 	teq	r4, #0
   d7774:	d10f      	bne.n	d7796 <__aeabi_dmul+0x1c2>
   d7776:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d777a:	0040      	lsls	r0, r0, #1
   d777c:	eb41 0101 	adc.w	r1, r1, r1
   d7780:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7784:	bf08      	it	eq
   d7786:	3c01      	subeq	r4, #1
   d7788:	d0f7      	beq.n	d777a <__aeabi_dmul+0x1a6>
   d778a:	ea41 0106 	orr.w	r1, r1, r6
   d778e:	f095 0f00 	teq	r5, #0
   d7792:	bf18      	it	ne
   d7794:	4770      	bxne	lr
   d7796:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d779a:	0052      	lsls	r2, r2, #1
   d779c:	eb43 0303 	adc.w	r3, r3, r3
   d77a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d77a4:	bf08      	it	eq
   d77a6:	3d01      	subeq	r5, #1
   d77a8:	d0f7      	beq.n	d779a <__aeabi_dmul+0x1c6>
   d77aa:	ea43 0306 	orr.w	r3, r3, r6
   d77ae:	4770      	bx	lr
   d77b0:	ea94 0f0c 	teq	r4, ip
   d77b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d77b8:	bf18      	it	ne
   d77ba:	ea95 0f0c 	teqne	r5, ip
   d77be:	d00c      	beq.n	d77da <__aeabi_dmul+0x206>
   d77c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d77c4:	bf18      	it	ne
   d77c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d77ca:	d1d1      	bne.n	d7770 <__aeabi_dmul+0x19c>
   d77cc:	ea81 0103 	eor.w	r1, r1, r3
   d77d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d77d4:	f04f 0000 	mov.w	r0, #0
   d77d8:	bd70      	pop	{r4, r5, r6, pc}
   d77da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d77de:	bf06      	itte	eq
   d77e0:	4610      	moveq	r0, r2
   d77e2:	4619      	moveq	r1, r3
   d77e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d77e8:	d019      	beq.n	d781e <__aeabi_dmul+0x24a>
   d77ea:	ea94 0f0c 	teq	r4, ip
   d77ee:	d102      	bne.n	d77f6 <__aeabi_dmul+0x222>
   d77f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d77f4:	d113      	bne.n	d781e <__aeabi_dmul+0x24a>
   d77f6:	ea95 0f0c 	teq	r5, ip
   d77fa:	d105      	bne.n	d7808 <__aeabi_dmul+0x234>
   d77fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7800:	bf1c      	itt	ne
   d7802:	4610      	movne	r0, r2
   d7804:	4619      	movne	r1, r3
   d7806:	d10a      	bne.n	d781e <__aeabi_dmul+0x24a>
   d7808:	ea81 0103 	eor.w	r1, r1, r3
   d780c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7810:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7814:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7818:	f04f 0000 	mov.w	r0, #0
   d781c:	bd70      	pop	{r4, r5, r6, pc}
   d781e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7822:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7826:	bd70      	pop	{r4, r5, r6, pc}

000d7828 <__aeabi_ddiv>:
   d7828:	b570      	push	{r4, r5, r6, lr}
   d782a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d782e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7836:	bf1d      	ittte	ne
   d7838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d783c:	ea94 0f0c 	teqne	r4, ip
   d7840:	ea95 0f0c 	teqne	r5, ip
   d7844:	f000 f8a7 	bleq	d7996 <__aeabi_ddiv+0x16e>
   d7848:	eba4 0405 	sub.w	r4, r4, r5
   d784c:	ea81 0e03 	eor.w	lr, r1, r3
   d7850:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7854:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7858:	f000 8088 	beq.w	d796c <__aeabi_ddiv+0x144>
   d785c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7860:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7864:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7868:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d786c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7870:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7874:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7878:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d787c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7880:	429d      	cmp	r5, r3
   d7882:	bf08      	it	eq
   d7884:	4296      	cmpeq	r6, r2
   d7886:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d788a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d788e:	d202      	bcs.n	d7896 <__aeabi_ddiv+0x6e>
   d7890:	085b      	lsrs	r3, r3, #1
   d7892:	ea4f 0232 	mov.w	r2, r2, rrx
   d7896:	1ab6      	subs	r6, r6, r2
   d7898:	eb65 0503 	sbc.w	r5, r5, r3
   d789c:	085b      	lsrs	r3, r3, #1
   d789e:	ea4f 0232 	mov.w	r2, r2, rrx
   d78a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d78a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d78aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d78ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d78b2:	bf22      	ittt	cs
   d78b4:	1ab6      	subcs	r6, r6, r2
   d78b6:	4675      	movcs	r5, lr
   d78b8:	ea40 000c 	orrcs.w	r0, r0, ip
   d78bc:	085b      	lsrs	r3, r3, #1
   d78be:	ea4f 0232 	mov.w	r2, r2, rrx
   d78c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d78c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d78ca:	bf22      	ittt	cs
   d78cc:	1ab6      	subcs	r6, r6, r2
   d78ce:	4675      	movcs	r5, lr
   d78d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d78d4:	085b      	lsrs	r3, r3, #1
   d78d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d78da:	ebb6 0e02 	subs.w	lr, r6, r2
   d78de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d78e2:	bf22      	ittt	cs
   d78e4:	1ab6      	subcs	r6, r6, r2
   d78e6:	4675      	movcs	r5, lr
   d78e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d78ec:	085b      	lsrs	r3, r3, #1
   d78ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d78f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d78f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d78fa:	bf22      	ittt	cs
   d78fc:	1ab6      	subcs	r6, r6, r2
   d78fe:	4675      	movcs	r5, lr
   d7900:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7904:	ea55 0e06 	orrs.w	lr, r5, r6
   d7908:	d018      	beq.n	d793c <__aeabi_ddiv+0x114>
   d790a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d790e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7912:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7916:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d791a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d791e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7922:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7926:	d1c0      	bne.n	d78aa <__aeabi_ddiv+0x82>
   d7928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d792c:	d10b      	bne.n	d7946 <__aeabi_ddiv+0x11e>
   d792e:	ea41 0100 	orr.w	r1, r1, r0
   d7932:	f04f 0000 	mov.w	r0, #0
   d7936:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d793a:	e7b6      	b.n	d78aa <__aeabi_ddiv+0x82>
   d793c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7940:	bf04      	itt	eq
   d7942:	4301      	orreq	r1, r0
   d7944:	2000      	moveq	r0, #0
   d7946:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d794a:	bf88      	it	hi
   d794c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7950:	f63f aeaf 	bhi.w	d76b2 <__aeabi_dmul+0xde>
   d7954:	ebb5 0c03 	subs.w	ip, r5, r3
   d7958:	bf04      	itt	eq
   d795a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d795e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7962:	f150 0000 	adcs.w	r0, r0, #0
   d7966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d796a:	bd70      	pop	{r4, r5, r6, pc}
   d796c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7970:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7974:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7978:	bfc2      	ittt	gt
   d797a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d797e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7982:	bd70      	popgt	{r4, r5, r6, pc}
   d7984:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7988:	f04f 0e00 	mov.w	lr, #0
   d798c:	3c01      	subs	r4, #1
   d798e:	e690      	b.n	d76b2 <__aeabi_dmul+0xde>
   d7990:	ea45 0e06 	orr.w	lr, r5, r6
   d7994:	e68d      	b.n	d76b2 <__aeabi_dmul+0xde>
   d7996:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d799a:	ea94 0f0c 	teq	r4, ip
   d799e:	bf08      	it	eq
   d79a0:	ea95 0f0c 	teqeq	r5, ip
   d79a4:	f43f af3b 	beq.w	d781e <__aeabi_dmul+0x24a>
   d79a8:	ea94 0f0c 	teq	r4, ip
   d79ac:	d10a      	bne.n	d79c4 <__aeabi_ddiv+0x19c>
   d79ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d79b2:	f47f af34 	bne.w	d781e <__aeabi_dmul+0x24a>
   d79b6:	ea95 0f0c 	teq	r5, ip
   d79ba:	f47f af25 	bne.w	d7808 <__aeabi_dmul+0x234>
   d79be:	4610      	mov	r0, r2
   d79c0:	4619      	mov	r1, r3
   d79c2:	e72c      	b.n	d781e <__aeabi_dmul+0x24a>
   d79c4:	ea95 0f0c 	teq	r5, ip
   d79c8:	d106      	bne.n	d79d8 <__aeabi_ddiv+0x1b0>
   d79ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d79ce:	f43f aefd 	beq.w	d77cc <__aeabi_dmul+0x1f8>
   d79d2:	4610      	mov	r0, r2
   d79d4:	4619      	mov	r1, r3
   d79d6:	e722      	b.n	d781e <__aeabi_dmul+0x24a>
   d79d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d79dc:	bf18      	it	ne
   d79de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d79e2:	f47f aec5 	bne.w	d7770 <__aeabi_dmul+0x19c>
   d79e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d79ea:	f47f af0d 	bne.w	d7808 <__aeabi_dmul+0x234>
   d79ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d79f2:	f47f aeeb 	bne.w	d77cc <__aeabi_dmul+0x1f8>
   d79f6:	e712      	b.n	d781e <__aeabi_dmul+0x24a>

000d79f8 <__aeabi_d2f>:
   d79f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d79fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7a00:	bf24      	itt	cs
   d7a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7a0a:	d90d      	bls.n	d7a28 <__aeabi_d2f+0x30>
   d7a0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7a18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7a20:	bf08      	it	eq
   d7a22:	f020 0001 	biceq.w	r0, r0, #1
   d7a26:	4770      	bx	lr
   d7a28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7a2c:	d121      	bne.n	d7a72 <__aeabi_d2f+0x7a>
   d7a2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7a32:	bfbc      	itt	lt
   d7a34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7a38:	4770      	bxlt	lr
   d7a3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7a42:	f1c2 0218 	rsb	r2, r2, #24
   d7a46:	f1c2 0c20 	rsb	ip, r2, #32
   d7a4a:	fa10 f30c 	lsls.w	r3, r0, ip
   d7a4e:	fa20 f002 	lsr.w	r0, r0, r2
   d7a52:	bf18      	it	ne
   d7a54:	f040 0001 	orrne.w	r0, r0, #1
   d7a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7a60:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7a64:	ea40 000c 	orr.w	r0, r0, ip
   d7a68:	fa23 f302 	lsr.w	r3, r3, r2
   d7a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7a70:	e7cc      	b.n	d7a0c <__aeabi_d2f+0x14>
   d7a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7a76:	d107      	bne.n	d7a88 <__aeabi_d2f+0x90>
   d7a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7a7c:	bf1e      	ittt	ne
   d7a7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7a82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7a86:	4770      	bxne	lr
   d7a88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7a90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7a94:	4770      	bx	lr
   d7a96:	bf00      	nop

000d7a98 <__cxa_atexit>:
   d7a98:	b510      	push	{r4, lr}
   d7a9a:	4c05      	ldr	r4, [pc, #20]	; (d7ab0 <__cxa_atexit+0x18>)
   d7a9c:	4613      	mov	r3, r2
   d7a9e:	b12c      	cbz	r4, d7aac <__cxa_atexit+0x14>
   d7aa0:	460a      	mov	r2, r1
   d7aa2:	4601      	mov	r1, r0
   d7aa4:	2002      	movs	r0, #2
   d7aa6:	f3af 8000 	nop.w
   d7aaa:	bd10      	pop	{r4, pc}
   d7aac:	4620      	mov	r0, r4
   d7aae:	e7fc      	b.n	d7aaa <__cxa_atexit+0x12>
   d7ab0:	00000000 	.word	0x00000000

000d7ab4 <memcpy>:
   d7ab4:	440a      	add	r2, r1
   d7ab6:	4291      	cmp	r1, r2
   d7ab8:	f100 33ff 	add.w	r3, r0, #4294967295
   d7abc:	d100      	bne.n	d7ac0 <memcpy+0xc>
   d7abe:	4770      	bx	lr
   d7ac0:	b510      	push	{r4, lr}
   d7ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7aca:	4291      	cmp	r1, r2
   d7acc:	d1f9      	bne.n	d7ac2 <memcpy+0xe>
   d7ace:	bd10      	pop	{r4, pc}

000d7ad0 <memmove>:
   d7ad0:	4288      	cmp	r0, r1
   d7ad2:	b510      	push	{r4, lr}
   d7ad4:	eb01 0402 	add.w	r4, r1, r2
   d7ad8:	d902      	bls.n	d7ae0 <memmove+0x10>
   d7ada:	4284      	cmp	r4, r0
   d7adc:	4623      	mov	r3, r4
   d7ade:	d807      	bhi.n	d7af0 <memmove+0x20>
   d7ae0:	1e43      	subs	r3, r0, #1
   d7ae2:	42a1      	cmp	r1, r4
   d7ae4:	d008      	beq.n	d7af8 <memmove+0x28>
   d7ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7aea:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7aee:	e7f8      	b.n	d7ae2 <memmove+0x12>
   d7af0:	4402      	add	r2, r0
   d7af2:	4601      	mov	r1, r0
   d7af4:	428a      	cmp	r2, r1
   d7af6:	d100      	bne.n	d7afa <memmove+0x2a>
   d7af8:	bd10      	pop	{r4, pc}
   d7afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7b02:	e7f7      	b.n	d7af4 <memmove+0x24>

000d7b04 <memset>:
   d7b04:	4402      	add	r2, r0
   d7b06:	4603      	mov	r3, r0
   d7b08:	4293      	cmp	r3, r2
   d7b0a:	d100      	bne.n	d7b0e <memset+0xa>
   d7b0c:	4770      	bx	lr
   d7b0e:	f803 1b01 	strb.w	r1, [r3], #1
   d7b12:	e7f9      	b.n	d7b08 <memset+0x4>

000d7b14 <srand>:
   d7b14:	b538      	push	{r3, r4, r5, lr}
   d7b16:	4b0d      	ldr	r3, [pc, #52]	; (d7b4c <srand+0x38>)
   d7b18:	681d      	ldr	r5, [r3, #0]
   d7b1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7b1c:	4604      	mov	r4, r0
   d7b1e:	b97b      	cbnz	r3, d7b40 <srand+0x2c>
   d7b20:	2018      	movs	r0, #24
   d7b22:	f7fc ffd5 	bl	d4ad0 <malloc>
   d7b26:	4a0a      	ldr	r2, [pc, #40]	; (d7b50 <srand+0x3c>)
   d7b28:	4b0a      	ldr	r3, [pc, #40]	; (d7b54 <srand+0x40>)
   d7b2a:	63a8      	str	r0, [r5, #56]	; 0x38
   d7b2c:	e9c0 2300 	strd	r2, r3, [r0]
   d7b30:	4b09      	ldr	r3, [pc, #36]	; (d7b58 <srand+0x44>)
   d7b32:	6083      	str	r3, [r0, #8]
   d7b34:	230b      	movs	r3, #11
   d7b36:	8183      	strh	r3, [r0, #12]
   d7b38:	2201      	movs	r2, #1
   d7b3a:	2300      	movs	r3, #0
   d7b3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7b40:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7b42:	2200      	movs	r2, #0
   d7b44:	611c      	str	r4, [r3, #16]
   d7b46:	615a      	str	r2, [r3, #20]
   d7b48:	bd38      	pop	{r3, r4, r5, pc}
   d7b4a:	bf00      	nop
   d7b4c:	2003e504 	.word	0x2003e504
   d7b50:	abcd330e 	.word	0xabcd330e
   d7b54:	e66d1234 	.word	0xe66d1234
   d7b58:	0005deec 	.word	0x0005deec

000d7b5c <strchr>:
   d7b5c:	b2c9      	uxtb	r1, r1
   d7b5e:	4603      	mov	r3, r0
   d7b60:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7b64:	b11a      	cbz	r2, d7b6e <strchr+0x12>
   d7b66:	428a      	cmp	r2, r1
   d7b68:	d1f9      	bne.n	d7b5e <strchr+0x2>
   d7b6a:	4618      	mov	r0, r3
   d7b6c:	4770      	bx	lr
   d7b6e:	2900      	cmp	r1, #0
   d7b70:	bf18      	it	ne
   d7b72:	2300      	movne	r3, #0
   d7b74:	e7f9      	b.n	d7b6a <strchr+0xe>

000d7b76 <strchrnul>:
   d7b76:	b510      	push	{r4, lr}
   d7b78:	4604      	mov	r4, r0
   d7b7a:	f7ff ffef 	bl	d7b5c <strchr>
   d7b7e:	b918      	cbnz	r0, d7b88 <strchrnul+0x12>
   d7b80:	4620      	mov	r0, r4
   d7b82:	f000 f832 	bl	d7bea <strlen>
   d7b86:	4420      	add	r0, r4
   d7b88:	bd10      	pop	{r4, pc}

000d7b8a <strcmp>:
   d7b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7b92:	2a01      	cmp	r2, #1
   d7b94:	bf28      	it	cs
   d7b96:	429a      	cmpcs	r2, r3
   d7b98:	d0f7      	beq.n	d7b8a <strcmp>
   d7b9a:	1ad0      	subs	r0, r2, r3
   d7b9c:	4770      	bx	lr

000d7b9e <strcpy>:
   d7b9e:	4603      	mov	r3, r0
   d7ba0:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7ba4:	f803 2b01 	strb.w	r2, [r3], #1
   d7ba8:	2a00      	cmp	r2, #0
   d7baa:	d1f9      	bne.n	d7ba0 <strcpy+0x2>
   d7bac:	4770      	bx	lr
	...

000d7bb0 <strdup>:
   d7bb0:	4b02      	ldr	r3, [pc, #8]	; (d7bbc <strdup+0xc>)
   d7bb2:	4601      	mov	r1, r0
   d7bb4:	6818      	ldr	r0, [r3, #0]
   d7bb6:	f000 b803 	b.w	d7bc0 <_strdup_r>
   d7bba:	bf00      	nop
   d7bbc:	2003e504 	.word	0x2003e504

000d7bc0 <_strdup_r>:
   d7bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7bc2:	4604      	mov	r4, r0
   d7bc4:	4608      	mov	r0, r1
   d7bc6:	460d      	mov	r5, r1
   d7bc8:	f000 f80f 	bl	d7bea <strlen>
   d7bcc:	1c42      	adds	r2, r0, #1
   d7bce:	4611      	mov	r1, r2
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	9201      	str	r2, [sp, #4]
   d7bd4:	f7fc ffac 	bl	d4b30 <_malloc_r>
   d7bd8:	4604      	mov	r4, r0
   d7bda:	b118      	cbz	r0, d7be4 <_strdup_r+0x24>
   d7bdc:	9a01      	ldr	r2, [sp, #4]
   d7bde:	4629      	mov	r1, r5
   d7be0:	f7ff ff68 	bl	d7ab4 <memcpy>
   d7be4:	4620      	mov	r0, r4
   d7be6:	b003      	add	sp, #12
   d7be8:	bd30      	pop	{r4, r5, pc}

000d7bea <strlen>:
   d7bea:	4603      	mov	r3, r0
   d7bec:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7bf0:	2a00      	cmp	r2, #0
   d7bf2:	d1fb      	bne.n	d7bec <strlen+0x2>
   d7bf4:	1a18      	subs	r0, r3, r0
   d7bf6:	3801      	subs	r0, #1
   d7bf8:	4770      	bx	lr

000d7bfa <strncmp>:
   d7bfa:	b510      	push	{r4, lr}
   d7bfc:	b16a      	cbz	r2, d7c1a <strncmp+0x20>
   d7bfe:	3901      	subs	r1, #1
   d7c00:	1884      	adds	r4, r0, r2
   d7c02:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7c06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d7c0a:	4293      	cmp	r3, r2
   d7c0c:	d103      	bne.n	d7c16 <strncmp+0x1c>
   d7c0e:	42a0      	cmp	r0, r4
   d7c10:	d001      	beq.n	d7c16 <strncmp+0x1c>
   d7c12:	2b00      	cmp	r3, #0
   d7c14:	d1f5      	bne.n	d7c02 <strncmp+0x8>
   d7c16:	1a98      	subs	r0, r3, r2
   d7c18:	bd10      	pop	{r4, pc}
   d7c1a:	4610      	mov	r0, r2
   d7c1c:	e7fc      	b.n	d7c18 <strncmp+0x1e>

000d7c1e <strrchr>:
   d7c1e:	b538      	push	{r3, r4, r5, lr}
   d7c20:	4603      	mov	r3, r0
   d7c22:	460c      	mov	r4, r1
   d7c24:	b969      	cbnz	r1, d7c42 <strrchr+0x24>
   d7c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7c2a:	f7ff bf97 	b.w	d7b5c <strchr>
   d7c2e:	1c43      	adds	r3, r0, #1
   d7c30:	4605      	mov	r5, r0
   d7c32:	4621      	mov	r1, r4
   d7c34:	4618      	mov	r0, r3
   d7c36:	f7ff ff91 	bl	d7b5c <strchr>
   d7c3a:	2800      	cmp	r0, #0
   d7c3c:	d1f7      	bne.n	d7c2e <strrchr+0x10>
   d7c3e:	4628      	mov	r0, r5
   d7c40:	bd38      	pop	{r3, r4, r5, pc}
   d7c42:	2500      	movs	r5, #0
   d7c44:	e7f5      	b.n	d7c32 <strrchr+0x14>
	...

000d7c48 <_strtol_l.isra.0>:
   d7c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c4c:	4e3a      	ldr	r6, [pc, #232]	; (d7d38 <_strtol_l.isra.0+0xf0>)
   d7c4e:	4686      	mov	lr, r0
   d7c50:	468c      	mov	ip, r1
   d7c52:	4660      	mov	r0, ip
   d7c54:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7c58:	5da5      	ldrb	r5, [r4, r6]
   d7c5a:	f015 0508 	ands.w	r5, r5, #8
   d7c5e:	d1f8      	bne.n	d7c52 <_strtol_l.isra.0+0xa>
   d7c60:	2c2d      	cmp	r4, #45	; 0x2d
   d7c62:	d133      	bne.n	d7ccc <_strtol_l.isra.0+0x84>
   d7c64:	f89c 4000 	ldrb.w	r4, [ip]
   d7c68:	f04f 0801 	mov.w	r8, #1
   d7c6c:	f100 0c02 	add.w	ip, r0, #2
   d7c70:	2b00      	cmp	r3, #0
   d7c72:	d05c      	beq.n	d7d2e <_strtol_l.isra.0+0xe6>
   d7c74:	2b10      	cmp	r3, #16
   d7c76:	d10c      	bne.n	d7c92 <_strtol_l.isra.0+0x4a>
   d7c78:	2c30      	cmp	r4, #48	; 0x30
   d7c7a:	d10a      	bne.n	d7c92 <_strtol_l.isra.0+0x4a>
   d7c7c:	f89c 0000 	ldrb.w	r0, [ip]
   d7c80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7c84:	2858      	cmp	r0, #88	; 0x58
   d7c86:	d14d      	bne.n	d7d24 <_strtol_l.isra.0+0xdc>
   d7c88:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7c8c:	2310      	movs	r3, #16
   d7c8e:	f10c 0c02 	add.w	ip, ip, #2
   d7c92:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7c96:	3f01      	subs	r7, #1
   d7c98:	2600      	movs	r6, #0
   d7c9a:	fbb7 f9f3 	udiv	r9, r7, r3
   d7c9e:	4630      	mov	r0, r6
   d7ca0:	fb03 7a19 	mls	sl, r3, r9, r7
   d7ca4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7ca8:	2d09      	cmp	r5, #9
   d7caa:	d818      	bhi.n	d7cde <_strtol_l.isra.0+0x96>
   d7cac:	462c      	mov	r4, r5
   d7cae:	42a3      	cmp	r3, r4
   d7cb0:	dd24      	ble.n	d7cfc <_strtol_l.isra.0+0xb4>
   d7cb2:	1c75      	adds	r5, r6, #1
   d7cb4:	d007      	beq.n	d7cc6 <_strtol_l.isra.0+0x7e>
   d7cb6:	4581      	cmp	r9, r0
   d7cb8:	d31d      	bcc.n	d7cf6 <_strtol_l.isra.0+0xae>
   d7cba:	d101      	bne.n	d7cc0 <_strtol_l.isra.0+0x78>
   d7cbc:	45a2      	cmp	sl, r4
   d7cbe:	db1a      	blt.n	d7cf6 <_strtol_l.isra.0+0xae>
   d7cc0:	fb00 4003 	mla	r0, r0, r3, r4
   d7cc4:	2601      	movs	r6, #1
   d7cc6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7cca:	e7eb      	b.n	d7ca4 <_strtol_l.isra.0+0x5c>
   d7ccc:	2c2b      	cmp	r4, #43	; 0x2b
   d7cce:	bf08      	it	eq
   d7cd0:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7cd4:	46a8      	mov	r8, r5
   d7cd6:	bf08      	it	eq
   d7cd8:	f100 0c02 	addeq.w	ip, r0, #2
   d7cdc:	e7c8      	b.n	d7c70 <_strtol_l.isra.0+0x28>
   d7cde:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7ce2:	2d19      	cmp	r5, #25
   d7ce4:	d801      	bhi.n	d7cea <_strtol_l.isra.0+0xa2>
   d7ce6:	3c37      	subs	r4, #55	; 0x37
   d7ce8:	e7e1      	b.n	d7cae <_strtol_l.isra.0+0x66>
   d7cea:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7cee:	2d19      	cmp	r5, #25
   d7cf0:	d804      	bhi.n	d7cfc <_strtol_l.isra.0+0xb4>
   d7cf2:	3c57      	subs	r4, #87	; 0x57
   d7cf4:	e7db      	b.n	d7cae <_strtol_l.isra.0+0x66>
   d7cf6:	f04f 36ff 	mov.w	r6, #4294967295
   d7cfa:	e7e4      	b.n	d7cc6 <_strtol_l.isra.0+0x7e>
   d7cfc:	1c73      	adds	r3, r6, #1
   d7cfe:	d106      	bne.n	d7d0e <_strtol_l.isra.0+0xc6>
   d7d00:	2322      	movs	r3, #34	; 0x22
   d7d02:	f8ce 3000 	str.w	r3, [lr]
   d7d06:	4638      	mov	r0, r7
   d7d08:	b942      	cbnz	r2, d7d1c <_strtol_l.isra.0+0xd4>
   d7d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d0e:	f1b8 0f00 	cmp.w	r8, #0
   d7d12:	d000      	beq.n	d7d16 <_strtol_l.isra.0+0xce>
   d7d14:	4240      	negs	r0, r0
   d7d16:	2a00      	cmp	r2, #0
   d7d18:	d0f7      	beq.n	d7d0a <_strtol_l.isra.0+0xc2>
   d7d1a:	b10e      	cbz	r6, d7d20 <_strtol_l.isra.0+0xd8>
   d7d1c:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7d20:	6011      	str	r1, [r2, #0]
   d7d22:	e7f2      	b.n	d7d0a <_strtol_l.isra.0+0xc2>
   d7d24:	2430      	movs	r4, #48	; 0x30
   d7d26:	2b00      	cmp	r3, #0
   d7d28:	d1b3      	bne.n	d7c92 <_strtol_l.isra.0+0x4a>
   d7d2a:	2308      	movs	r3, #8
   d7d2c:	e7b1      	b.n	d7c92 <_strtol_l.isra.0+0x4a>
   d7d2e:	2c30      	cmp	r4, #48	; 0x30
   d7d30:	d0a4      	beq.n	d7c7c <_strtol_l.isra.0+0x34>
   d7d32:	230a      	movs	r3, #10
   d7d34:	e7ad      	b.n	d7c92 <_strtol_l.isra.0+0x4a>
   d7d36:	bf00      	nop
   d7d38:	000d806f 	.word	0x000d806f

000d7d3c <strtol>:
   d7d3c:	4613      	mov	r3, r2
   d7d3e:	460a      	mov	r2, r1
   d7d40:	4601      	mov	r1, r0
   d7d42:	4802      	ldr	r0, [pc, #8]	; (d7d4c <strtol+0x10>)
   d7d44:	6800      	ldr	r0, [r0, #0]
   d7d46:	f7ff bf7f 	b.w	d7c48 <_strtol_l.isra.0>
   d7d4a:	bf00      	nop
   d7d4c:	2003e504 	.word	0x2003e504

000d7d50 <dynalib_user>:
   d7d50:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d7d60:	00000000 2c64255b 252c6425 5d66322e     ....[%d,%d,%.2f]
   d7d70:	62757000 6873696c 203a6465 00007325     .published: %s..

000d7d80 <_ZTVN5spark10LogHandlerE>:
	...
   d7d90:	000d40a5 000d40c9                       .@...@..

000d7d98 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7da0:	000d40ed 000d4121 000d5c95 000d40cb     .@..!A...\...@..
   d7db0:	65656873 73655474 00003174              sheetTest1..

000d7dbc <_ZTVN5spark13EthernetClassE>:
	...
   d7dc4:	000d4baf 000d4ba5 000d4b9b 000d4b91     .K...K...K...K..
   d7dd4:	000d4b85 000d4b79 000d6b51 000d6b59     .K..yK..Qk..Yk..
   d7de4:	000d4b6d 000d4b65 000d4b5b 000d4b51     mK..eK..[K..QK..
   d7df4:	000d6b89 69726977 5300676e 65747379     .k..wiring.Syste
   d7e04:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   d7e14:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   d7e24:	6162002e 53006475 61697265 6553006c     ..baud.Serial.Se
   d7e34:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   d7e44:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d7e54:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d7e64:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d7e74:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d7e84:	0063006d 6e6c0066 006e6600 6f630074     m.c.f.ln.fn.t.co
   d7e94:	64006564 69617465 0000006c              de.detail...

000d7ea0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7ea8:	000d5077 000d509d 000d505d 000d6cab     wP...P..]P...l..

000d7eb8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7ec0:	000d54bd 000d54d5 000d5c95 000d40cb     .T...T...\...@..

000d7ed0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7ed8:	000d54e9 000d54fd 000d5e39 000d5065     .T...T..9^..eP..

000d7ee8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7ef0:	000d5075 000d50ab 000d5bd1 000d5067     uP...P...[..gP..

000d7f00 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7f08:	000d5073 000d50b9 000d5429 000d50d5     sP...P..)T...P..
   d7f18:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d7f28:	007a2553 74637361 00656d69              S%z.asctime.

000d7f34 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7f3c:	000d615d 000d6163 000d61a1 000d6171     ]a..ca...a..qa..
   d7f4c:	000d615f                                _a..

000d7f50 <_ZTV9IPAddress>:
	...
   d7f58:	000d66ad 000d669d 000d669f              .f...f...f..

000d7f64 <_ZTV9USBSerial>:
	...
   d7f6c:	000d678d 000d67f5 000d67cb 000d4f51     .g...g...g..QO..
   d7f7c:	000d67bd 000d678f 000d679f 000d67ef     .g...g...g...g..
   d7f8c:	000d67af 000d6789                       .g...g..

000d7f94 <_ZTVN5spark13CellularClassE>:
	...
   d7f9c:	000d68ff 000d68f5 000d68eb 000d68a1     .h...h...h...h..
   d7fac:	000d68df 000d68d3 000d6b51 000d6b59     .h...h..Qk..Yk..
   d7fbc:	000d68c7 000d68bf 000d68b5 000d68ab     .h...h...h...h..
   d7fcc:	000d6b89                                .k..

000d7fd0 <_ZTV11USARTSerial>:
	...
   d7fd8:	000d6939 000d69a5 000d697d 000d4f51     9i...i..}i..QO..
   d7fe8:	000d694d 000d6969 000d695b 000d6977     Mi..ii..[i..wi..
   d7ff8:	000d693b 000d693f                       ;i..?i..

000d8000 <_ZTV7TwoWire>:
	...
   d8008:	000d6a71 000d6abb 000d6a93 000d6a73     qj...j...j..sj..
   d8018:	000d6a9b 000d6aa3 000d6aab 000d6ab3     .j...j...j...j..

000d8028 <_ZTVN5spark12NetworkClassE>:
	...
   d8030:	000d6b11 000d6b1b 000d6b25 000d6b2f     .k...k..%k../k..
   d8040:	000d6b39 000d6b45 000d6b51 000d6b59     9k..Ek..Qk..Yk..
   d8050:	000d6b61 000d6b6d 000d6b75 000d6b7f     ak..mk..uk...k..
   d8060:	000d6b89 75007525 78343025               .k..%u.u%04x.

000d806d <_ZSt7nothrow>:
	...

000d806e <_ctype_>:
   d806e:	20202000 20202020 28282020 20282828     .         ((((( 
   d807e:	20202020 20202020 20202020 20202020                     
   d808e:	10108820 10101010 10101010 10101010      ...............
   d809e:	04040410 04040404 10040404 10101010     ................
   d80ae:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d80be:	01010101 01010101 01010101 10101010     ................
   d80ce:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d80de:	02020202 02020202 02020202 10101010     ................
   d80ee:	00000020 00000000 00000000 00000000      ...............
	...

000d816f <link_const_variable_data_end>:
	...

000d8170 <link_constructors_location>:
   d8170:	000d44fd 	.word	0x000d44fd
   d8174:	000d4bb9 	.word	0x000d4bb9
   d8178:	000d4d21 	.word	0x000d4d21
   d817c:	000d4f29 	.word	0x000d4f29
   d8180:	000d5c85 	.word	0x000d5c85
   d8184:	000d5fad 	.word	0x000d5fad
   d8188:	000d5fd5 	.word	0x000d5fd5
   d818c:	000d6909 	.word	0x000d6909
   d8190:	000d6c69 	.word	0x000d6c69

000d8194 <link_constructors_end>:
	...
