
c:/Users/tjmor/OneDrive/Documents/Particle_projects/RADAR_PIR_BCA_V3/Radar_PIR_BCA_V3/target/3.0.0/boron/Radar_PIR_BCA_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003904  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7920  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e50c  000d7924  0001e50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000270  2003e580  2003e580  0002e580  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7998  000d7998  00027998  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d79c0  000d79c0  000279c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001682b0  00000000  00000000  000279c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015be1  00000000  00000000  0018fc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00037335  00000000  00000000  001a5855  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002bd0  00000000  00000000  001dcb8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000099e8  00000000  00000000  001df75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003656c  00000000  00000000  001e9142  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00039458  00000000  00000000  0021f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012b836  00000000  00000000  00258b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007b20  00000000  00000000  0038433c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f903 	bl	d7238 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f925 	bl	d7288 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e50c 	.word	0x2003e50c
   d4048:	000d7924 	.word	0x000d7924
   d404c:	2003e580 	.word	0x2003e580
   d4050:	2003e580 	.word	0x2003e580
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f895 	bl	d618c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d78fc 	.word	0x000d78fc
   d407c:	000d7920 	.word	0x000d7920

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8c7 	b.w	d4212 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f931 	bl	d42ec <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b83f 	b.w	d6110 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bd59 	b.w	d4b48 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bd57 	b.w	d4b48 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bd5d 	b.w	d4b58 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fc50 	bl	d494c <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d472d 	.word	0x000d472d

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3

000d40ce <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40ce:	b538      	push	{r3, r4, r5, lr}
   d40d0:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d2:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40d4:	b128      	cbz	r0, d40e2 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40d6:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40d8:	210c      	movs	r1, #12
   d40da:	f003 f896 	bl	d720a <_ZdlPvj>
            wakeupSource = next;
   d40de:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e0:	e7f8      	b.n	d40d4 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e2:	4620      	mov	r0, r4
   d40e4:	bd38      	pop	{r3, r4, r5, pc}

000d40e6 <_ZN11SystemClass18waitConditionWhileIZ4loopEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.0>:


    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
   d40e6:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40e8:	f000 fcfe 	bl	d4ae8 <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   d40ec:	b910      	cbnz	r0, d40f4 <_ZN11SystemClass18waitConditionWhileIZ4loopEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.0+0xe>
            spark_process();
   d40ee:	f000 fceb 	bl	d4ac8 <spark_process>
        while (_while() && !_condition()) {
   d40f2:	e7f9      	b.n	d40e8 <_ZN11SystemClass18waitConditionWhileIZ4loopEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.0+0x2>
        }
        return _condition();
    }
   d40f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40f8:	f000 bcf6 	b.w	d4ae8 <spark_cloud_flag_connected>

000d40fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d40fc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40fe:	2000      	movs	r0, #0
   d4100:	f000 fd0a 	bl	d4b18 <spark_sync_time_pending>
   d4104:	b128      	cbz	r0, d4112 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4106:	f000 fcef 	bl	d4ae8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d410a:	f080 0001 	eor.w	r0, r0, #1
   d410e:	b2c0      	uxtb	r0, r0
    }
   d4110:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4112:	2001      	movs	r0, #1
   d4114:	e7fc      	b.n	d4110 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d4118 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4118:	4b0a      	ldr	r3, [pc, #40]	; (d4144 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d411a:	b510      	push	{r4, lr}
   d411c:	4604      	mov	r4, r0
   d411e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4120:	f001 f954 	bl	d53cc <_ZN5spark10LogManager8instanceEv>
   d4124:	4621      	mov	r1, r4
   d4126:	f001 fb44 	bl	d57b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d412a:	f002 fbd9 	bl	d68e0 <_Z16_fetch_usbserialv>
   d412e:	f002 fbcb 	bl	d68c8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4132:	4620      	mov	r0, r4
   d4134:	4b04      	ldr	r3, [pc, #16]	; (d4148 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4136:	f840 3b04 	str.w	r3, [r0], #4
   d413a:	f001 fa27 	bl	d558c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d413e:	4620      	mov	r0, r4
   d4140:	bd10      	pop	{r4, pc}
   d4142:	bf00      	nop
   d4144:	000d7524 	.word	0x000d7524
   d4148:	000d750c 	.word	0x000d750c

000d414c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
    }
   d4150:	f7ff ffe2 	bl	d4118 <_ZN5spark16SerialLogHandlerD1Ev>
   d4154:	4620      	mov	r0, r4
   d4156:	2124      	movs	r1, #36	; 0x24
   d4158:	f003 f857 	bl	d720a <_ZdlPvj>
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}

000d4160 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>:
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4160:	68c0      	ldr	r0, [r0, #12]
        if (!start) {
   d4162:	b120      	cbz	r0, d416e <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0+0xe>
            if (start->type == type) {
   d4164:	8883      	ldrh	r3, [r0, #4]
   d4166:	428b      	cmp	r3, r1
   d4168:	d001      	beq.n	d416e <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0+0xe>
            start = start->next;
   d416a:	6880      	ldr	r0, [r0, #8]
        while (start) {
   d416c:	e7f9      	b.n	d4162 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0+0x2>
    }
   d416e:	4770      	bx	lr

000d4170 <_ZN11SystemClassD1Ev>:
class SystemClass {
   d4170:	b510      	push	{r4, lr}
   d4172:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4174:	6800      	ldr	r0, [r0, #0]
   d4176:	b108      	cbz	r0, d417c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4178:	f000 fcee 	bl	d4b58 <free>
class SystemClass {
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4182:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4184:	4605      	mov	r5, r0
   d4186:	460f      	mov	r7, r1
   d4188:	4616      	mov	r6, r2
        if (valid_) {
   d418a:	b143      	cbz	r3, d419e <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d418c:	6800      	ldr	r0, [r0, #0]
   d418e:	2101      	movs	r1, #1
   d4190:	f7ff ffe6 	bl	d4160 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>
            while (wakeup) {
   d4194:	b158      	cbz	r0, d41ae <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x2e>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d4196:	8983      	ldrh	r3, [r0, #12]
   d4198:	42bb      	cmp	r3, r7
   d419a:	d102      	bne.n	d41a2 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x22>
                    gpioWakeup->mode = mode;
   d419c:	7386      	strb	r6, [r0, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d419e:	4628      	mov	r0, r5
   d41a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41a2:	6880      	ldr	r0, [r0, #8]
        if (!start) {
   d41a4:	b118      	cbz	r0, d41ae <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x2e>
            if (start->type == type) {
   d41a6:	8883      	ldrh	r3, [r0, #4]
   d41a8:	2b01      	cmp	r3, #1
   d41aa:	d1fa      	bne.n	d41a2 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x22>
   d41ac:	e7f2      	b.n	d4194 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41ae:	490b      	ldr	r1, [pc, #44]	; (d41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>)
   d41b0:	2010      	movs	r0, #16
   d41b2:	f003 f82c 	bl	d720e <_ZnwjRKSt9nothrow_t>
   d41b6:	4604      	mov	r4, r0
   d41b8:	b168      	cbz	r0, d41d6 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x56>
   d41ba:	2210      	movs	r2, #16
   d41bc:	2100      	movs	r1, #0
   d41be:	f003 f863 	bl	d7288 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41c2:	4b07      	ldr	r3, [pc, #28]	; (d41e0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d41c4:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41c6:	2301      	movs	r3, #1
   d41c8:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41ca:	692b      	ldr	r3, [r5, #16]
   d41cc:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d41ce:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d41d0:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41d2:	612c      	str	r4, [r5, #16]
   d41d4:	e7e3      	b.n	d419e <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1e>
                valid_ = false;
   d41d6:	7528      	strb	r0, [r5, #20]
                return *this;
   d41d8:	e7e1      	b.n	d419e <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1e>
   d41da:	bf00      	nop
   d41dc:	000d77f9 	.word	0x000d77f9
   d41e0:	00030010 	.word	0x00030010

000d41e4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41e4:	b40e      	push	{r1, r2, r3}
   d41e6:	b510      	push	{r4, lr}
   d41e8:	b08d      	sub	sp, #52	; 0x34
   d41ea:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d41ec:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d41ee:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d41f2:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41f4:	2300      	movs	r3, #0
   d41f6:	2020      	movs	r0, #32
   d41f8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41fc:	e9cd 4200 	strd	r4, r2, [sp]
   d4200:	201e      	movs	r0, #30
   d4202:	aa04      	add	r2, sp, #16
   d4204:	f000 fbb2 	bl	d496c <log_message_v>
}
   d4208:	b00d      	add	sp, #52	; 0x34
   d420a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d420e:	b003      	add	sp, #12
   d4210:	4770      	bx	lr

000d4212 <setup>:
const char *RadarEvent = "RadarEvent";
//Decleration of functions~ tells the compiler which functions are available and how to use them
void PublishToGoogleSheet();

// setup() runs once, when the device is first turned on.
void setup() {
   d4212:	b508      	push	{r3, lr}
    
  //Make variable public

  //Set the digital pins to input
  pinMode(Pin_Radar, INPUT);
   d4214:	2100      	movs	r1, #0
   d4216:	2002      	movs	r0, #2
   d4218:	f002 ff8e 	bl	d7138 <pinMode>
  pinMode(Pin_PIR, INPUT);
   d421c:	2100      	movs	r1, #0
   d421e:	2003      	movs	r0, #3
   d4220:	f002 ff8a 	bl	d7138 <pinMode>
  pinMode(Pin_Beacon, INPUT);

  //Set battery volt monitor input
 // pinMode(A1, INPUT);
  
}
   d4224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(Pin_Beacon, INPUT);
   d4228:	2100      	movs	r1, #0
   d422a:	2004      	movs	r0, #4
   d422c:	f002 bf84 	b.w	d7138 <pinMode>

000d4230 <_Z20PublishToGoogleSheetv>:

}


//Publish to google sheets function
void PublishToGoogleSheet() {
   d4230:	b570      	push	{r4, r5, r6, lr}
    char buf[128];
    
    String Radar_str = String::format("%d", Radar_cnt);
   d4232:	4c25      	ldr	r4, [pc, #148]	; (d42c8 <_Z20PublishToGoogleSheetv+0x98>)
    String PIR_str = String::format("%d", PIR_cnt);
   d4234:	4d25      	ldr	r5, [pc, #148]	; (d42cc <_Z20PublishToGoogleSheetv+0x9c>)
    String Radar_str = String::format("%d", Radar_cnt);
   d4236:	6822      	ldr	r2, [r4, #0]
   d4238:	4925      	ldr	r1, [pc, #148]	; (d42d0 <_Z20PublishToGoogleSheetv+0xa0>)
    String Beacon_str = String::format("%d", Beacon_cnt);
   d423a:	4e26      	ldr	r6, [pc, #152]	; (d42d4 <_Z20PublishToGoogleSheetv+0xa4>)
void PublishToGoogleSheet() {
   d423c:	b0b0      	sub	sp, #192	; 0xc0
    String Radar_str = String::format("%d", Radar_cnt);
   d423e:	a804      	add	r0, sp, #16
   d4240:	f000 fe64 	bl	d4f0c <_ZN6String6formatEPKcz>
    String PIR_str = String::format("%d", PIR_cnt);
   d4244:	682a      	ldr	r2, [r5, #0]
   d4246:	4922      	ldr	r1, [pc, #136]	; (d42d0 <_Z20PublishToGoogleSheetv+0xa0>)
   d4248:	a808      	add	r0, sp, #32
   d424a:	f000 fe5f 	bl	d4f0c <_ZN6String6formatEPKcz>
    String Beacon_str = String::format("%d", Beacon_cnt);
   d424e:	6832      	ldr	r2, [r6, #0]
   d4250:	491f      	ldr	r1, [pc, #124]	; (d42d0 <_Z20PublishToGoogleSheetv+0xa0>)
   d4252:	a80c      	add	r0, sp, #48	; 0x30
   d4254:	f000 fe5a 	bl	d4f0c <_ZN6String6formatEPKcz>
    snprintf(buf, sizeof(buf), "[%d,%d,%d]", Radar_cnt, PIR_cnt, Beacon_cnt);
   d4258:	6833      	ldr	r3, [r6, #0]
   d425a:	9301      	str	r3, [sp, #4]
   d425c:	682b      	ldr	r3, [r5, #0]
   d425e:	9300      	str	r3, [sp, #0]
   d4260:	6823      	ldr	r3, [r4, #0]
   d4262:	4a1d      	ldr	r2, [pc, #116]	; (d42d8 <_Z20PublishToGoogleSheetv+0xa8>)
   d4264:	2180      	movs	r1, #128	; 0x80
   d4266:	a810      	add	r0, sp, #64	; 0x40
   d4268:	f000 fc86 	bl	d4b78 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d426c:	4b1b      	ldr	r3, [pc, #108]	; (d42dc <_Z20PublishToGoogleSheetv+0xac>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d426e:	491c      	ldr	r1, [pc, #112]	; (d42e0 <_Z20PublishToGoogleSheetv+0xb0>)
   d4270:	781b      	ldrb	r3, [r3, #0]
   d4272:	f88d 3000 	strb.w	r3, [sp]
   d4276:	6809      	ldr	r1, [r1, #0]
   d4278:	233c      	movs	r3, #60	; 0x3c
   d427a:	aa10      	add	r2, sp, #64	; 0x40
   d427c:	a802      	add	r0, sp, #8
   d427e:	f002 f8e1 	bl	d6444 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4282:	9c03      	ldr	r4, [sp, #12]
   d4284:	b17c      	cbz	r4, d42a6 <_Z20PublishToGoogleSheetv+0x76>
      if (--_M_use_count == 0)
   d4286:	6863      	ldr	r3, [r4, #4]
   d4288:	3b01      	subs	r3, #1
   d428a:	6063      	str	r3, [r4, #4]
   d428c:	b95b      	cbnz	r3, d42a6 <_Z20PublishToGoogleSheetv+0x76>
          _M_dispose();
   d428e:	6823      	ldr	r3, [r4, #0]
   d4290:	4620      	mov	r0, r4
   d4292:	689b      	ldr	r3, [r3, #8]
   d4294:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4296:	68a3      	ldr	r3, [r4, #8]
   d4298:	3b01      	subs	r3, #1
   d429a:	60a3      	str	r3, [r4, #8]
   d429c:	b91b      	cbnz	r3, d42a6 <_Z20PublishToGoogleSheetv+0x76>
            _M_destroy();
   d429e:	6823      	ldr	r3, [r4, #0]
   d42a0:	4620      	mov	r0, r4
   d42a2:	68db      	ldr	r3, [r3, #12]
   d42a4:	4798      	blx	r3

    Particle.publish(eventName, buf, PRIVATE);
    Log.info("published: %s", buf);
   d42a6:	490f      	ldr	r1, [pc, #60]	; (d42e4 <_Z20PublishToGoogleSheetv+0xb4>)
   d42a8:	480f      	ldr	r0, [pc, #60]	; (d42e8 <_Z20PublishToGoogleSheetv+0xb8>)
   d42aa:	aa10      	add	r2, sp, #64	; 0x40
   d42ac:	f7ff ff9a 	bl	d41e4 <_ZNK5spark6Logger4infoEPKcz>
    String Beacon_str = String::format("%d", Beacon_cnt);
   d42b0:	a80c      	add	r0, sp, #48	; 0x30
   d42b2:	f000 fd89 	bl	d4dc8 <_ZN6StringD1Ev>
    String PIR_str = String::format("%d", PIR_cnt);
   d42b6:	a808      	add	r0, sp, #32
   d42b8:	f000 fd86 	bl	d4dc8 <_ZN6StringD1Ev>
    String Radar_str = String::format("%d", Radar_cnt);
   d42bc:	a804      	add	r0, sp, #16
   d42be:	f000 fd83 	bl	d4dc8 <_ZN6StringD1Ev>
   d42c2:	b030      	add	sp, #192	; 0xc0
   d42c4:	bd70      	pop	{r4, r5, r6, pc}
   d42c6:	bf00      	nop
   d42c8:	2003e58c 	.word	0x2003e58c
   d42cc:	2003e588 	.word	0x2003e588
   d42d0:	000d74e8 	.word	0x000d74e8
   d42d4:	2003e584 	.word	0x2003e584
   d42d8:	000d74eb 	.word	0x000d74eb
   d42dc:	2003e59c 	.word	0x2003e59c
   d42e0:	2003e50c 	.word	0x2003e50c
   d42e4:	000d74f6 	.word	0x000d74f6
   d42e8:	2003e60c 	.word	0x2003e60c

000d42ec <loop>:
void loop() {
   d42ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42ee:	f000 fbfb 	bl	d4ae8 <spark_cloud_flag_connected>
    if(Particle.connected() == false) {
   d42f2:	b918      	cbnz	r0, d42fc <loop+0x10>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d42f4:	f000 fbf0 	bl	d4ad8 <spark_cloud_flag_connect>

    template<typename Condition>
    static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
   d42f8:	f7ff fef5 	bl	d40e6 <_ZN11SystemClass18waitConditionWhileIZ4loopEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.0>
        if (valid_) {
   d42fc:	4c65      	ldr	r4, [pc, #404]	; (d4494 <loop+0x1a8>)
   d42fe:	7d23      	ldrb	r3, [r4, #20]
   d4300:	2b00      	cmp	r3, #0
   d4302:	d047      	beq.n	d4394 <loop+0xa8>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4304:	2303      	movs	r3, #3
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
   d4306:	6820      	ldr	r0, [r4, #0]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4308:	7223      	strb	r3, [r4, #8]
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
   d430a:	210e      	movs	r1, #14
   d430c:	f7ff ff28 	bl	d4160 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>
            while (wakeup) {
   d4310:	b330      	cbz	r0, d4360 <loop+0x74>
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   d4312:	7b03      	ldrb	r3, [r0, #12]
   d4314:	2b04      	cmp	r3, #4
   d4316:	d11d      	bne.n	d4354 <loop+0x68>
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d4318:	6820      	ldr	r0, [r4, #0]
   d431a:	2104      	movs	r1, #4
   d431c:	f7ff ff20 	bl	d4160 <_ZNK8particle30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t.isra.0>
            if (wakeup) {
   d4320:	4606      	mov	r6, r0
   d4322:	2800      	cmp	r0, #0
   d4324:	f040 80a4 	bne.w	d4470 <loop+0x184>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4328:	495b      	ldr	r1, [pc, #364]	; (d4498 <loop+0x1ac>)
   d432a:	2010      	movs	r0, #16
   d432c:	f002 ff6f 	bl	d720e <_ZnwjRKSt9nothrow_t>
   d4330:	4605      	mov	r5, r0
   d4332:	2800      	cmp	r0, #0
   d4334:	f000 80ab 	beq.w	d448e <loop+0x1a2>
   d4338:	2210      	movs	r2, #16
   d433a:	4631      	mov	r1, r6
   d433c:	f002 ffa4 	bl	d7288 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4340:	4b56      	ldr	r3, [pc, #344]	; (d449c <loop+0x1b0>)
   d4342:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4344:	2304      	movs	r3, #4
   d4346:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4348:	6923      	ldr	r3, [r4, #16]
   d434a:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d434c:	4b54      	ldr	r3, [pc, #336]	; (d44a0 <loop+0x1b4>)
   d434e:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4350:	6125      	str	r5, [r4, #16]
   d4352:	e01f      	b.n	d4394 <loop+0xa8>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d4354:	6880      	ldr	r0, [r0, #8]
        if (!start) {
   d4356:	b118      	cbz	r0, d4360 <loop+0x74>
            if (start->type == type) {
   d4358:	8883      	ldrh	r3, [r0, #4]
   d435a:	2b0e      	cmp	r3, #14
   d435c:	d1fa      	bne.n	d4354 <loop+0x68>
   d435e:	e7d7      	b.n	d4310 <loop+0x24>
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d4360:	494d      	ldr	r1, [pc, #308]	; (d4498 <loop+0x1ac>)
   d4362:	2014      	movs	r0, #20
   d4364:	f002 ff53 	bl	d720e <_ZnwjRKSt9nothrow_t>
   d4368:	4605      	mov	r5, r0
   d436a:	2800      	cmp	r0, #0
   d436c:	f000 808f 	beq.w	d448e <loop+0x1a2>
   d4370:	2214      	movs	r2, #20
   d4372:	2100      	movs	r1, #0
   d4374:	f002 ff88 	bl	d7288 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4378:	4b48      	ldr	r3, [pc, #288]	; (d449c <loop+0x1b0>)
   d437a:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d437c:	230e      	movs	r3, #14
   d437e:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4380:	6923      	ldr	r3, [r4, #16]
   d4382:	60ab      	str	r3, [r5, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d4384:	2304      	movs	r3, #4
   d4386:	732b      	strb	r3, [r5, #12]
            wakeupSource->flags = flags.value();
   d4388:	2300      	movs	r3, #0
   d438a:	81eb      	strh	r3, [r5, #14]
        if (valid_) {
   d438c:	7d23      	ldrb	r3, [r4, #20]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d438e:	6125      	str	r5, [r4, #16]
        if (valid_) {
   d4390:	2b00      	cmp	r3, #0
   d4392:	d1c1      	bne.n	d4318 <loop+0x2c>
    config.mode(SystemSleepMode::HIBERNATE).network(NETWORK_INTERFACE_CELLULAR).duration(900s).gpio(Pin_Radar, RISING).gpio(Pin_PIR, RISING).gpio(Pin_Beacon, RISING); 
   d4394:	2201      	movs	r2, #1
   d4396:	2102      	movs	r1, #2
   d4398:	483e      	ldr	r0, [pc, #248]	; (d4494 <loop+0x1a8>)
   d439a:	f7ff fef1 	bl	d4180 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d439e:	2201      	movs	r2, #1
   d43a0:	2103      	movs	r1, #3
   d43a2:	f7ff feed 	bl	d4180 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d43a6:	2201      	movs	r2, #1
   d43a8:	2104      	movs	r1, #4
   d43aa:	f7ff fee9 	bl	d4180 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
    System.sleep(config);
   d43ae:	a801      	add	r0, sp, #4
   d43b0:	4938      	ldr	r1, [pc, #224]	; (d4494 <loop+0x1a8>)
   d43b2:	f000 fc87 	bl	d4cc4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d43b6:	9801      	ldr	r0, [sp, #4]
   d43b8:	b108      	cbz	r0, d43be <loop+0xd2>
            free(wakeupSource_);
   d43ba:	f000 fbcd 	bl	d4b58 <free>
    if (digitalRead(Pin_Radar)== HIGH)
   d43be:	2002      	movs	r0, #2
   d43c0:	f002 fecb 	bl	d715a <digitalRead>
   d43c4:	2801      	cmp	r0, #1
      Radar_cnt= Radar_cnt+1;
   d43c6:	bf08      	it	eq
   d43c8:	4a36      	ldreq	r2, [pc, #216]	; (d44a4 <loop+0x1b8>)
    if (millis() - lastWrite > WRITE_DATA_MILLIS) {
   d43ca:	4c37      	ldr	r4, [pc, #220]	; (d44a8 <loop+0x1bc>)
      Radar_cnt= Radar_cnt+1;
   d43cc:	bf08      	it	eq
   d43ce:	6813      	ldreq	r3, [r2, #0]
    if (digitalRead(Pin_PIR)== HIGH)
   d43d0:	f04f 0003 	mov.w	r0, #3
      Radar_cnt= Radar_cnt+1;
   d43d4:	bf04      	itt	eq
   d43d6:	3301      	addeq	r3, #1
   d43d8:	6013      	streq	r3, [r2, #0]
    if (digitalRead(Pin_PIR)== HIGH)
   d43da:	f002 febe 	bl	d715a <digitalRead>
   d43de:	2801      	cmp	r0, #1
      PIR_cnt= PIR_cnt+1;
   d43e0:	bf04      	itt	eq
   d43e2:	4a32      	ldreq	r2, [pc, #200]	; (d44ac <loop+0x1c0>)
   d43e4:	6813      	ldreq	r3, [r2, #0]
    if (digitalRead(Pin_Beacon)== HIGH)
   d43e6:	f04f 0004 	mov.w	r0, #4
      PIR_cnt= PIR_cnt+1;
   d43ea:	bf04      	itt	eq
   d43ec:	3301      	addeq	r3, #1
   d43ee:	6013      	streq	r3, [r2, #0]
    if (digitalRead(Pin_Beacon)== HIGH)
   d43f0:	f002 feb3 	bl	d715a <digitalRead>
   d43f4:	2801      	cmp	r0, #1
      Beacon_cnt= Beacon_cnt+1;
   d43f6:	bf01      	itttt	eq
   d43f8:	4a2d      	ldreq	r2, [pc, #180]	; (d44b0 <loop+0x1c4>)
   d43fa:	6813      	ldreq	r3, [r2, #0]
   d43fc:	3301      	addeq	r3, #1
   d43fe:	6013      	streq	r3, [r2, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4400:	f000 f99c 	bl	d473c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastWrite > WRITE_DATA_MILLIS) {
   d4404:	6822      	ldr	r2, [r4, #0]
   d4406:	1a80      	subs	r0, r0, r2
   d4408:	4a2a      	ldr	r2, [pc, #168]	; (d44b4 <loop+0x1c8>)
   d440a:	4290      	cmp	r0, r2
   d440c:	d912      	bls.n	d4434 <loop+0x148>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d440e:	f000 fb6b 	bl	d4ae8 <spark_cloud_flag_connected>
        if(Particle.connected() == false) {
   d4412:	b918      	cbnz	r0, d441c <loop+0x130>
        spark_cloud_flag_connect();
   d4414:	f000 fb60 	bl	d4ad8 <spark_cloud_flag_connect>
        return waitConditionWhile(_condition, []{ return true; });
   d4418:	f7ff fe65 	bl	d40e6 <_ZN11SystemClass18waitConditionWhileIZ4loopEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.0>
        PublishToGoogleSheet();
   d441c:	f7ff ff08 	bl	d4230 <_Z20PublishToGoogleSheetv>
        Radar_cnt = 0; 
   d4420:	4a20      	ldr	r2, [pc, #128]	; (d44a4 <loop+0x1b8>)
   d4422:	2300      	movs	r3, #0
   d4424:	6013      	str	r3, [r2, #0]
        PIR_cnt = 0; 
   d4426:	4a21      	ldr	r2, [pc, #132]	; (d44ac <loop+0x1c0>)
   d4428:	6013      	str	r3, [r2, #0]
        Beacon_cnt = 0; 
   d442a:	4a21      	ldr	r2, [pc, #132]	; (d44b0 <loop+0x1c4>)
   d442c:	6013      	str	r3, [r2, #0]
   d442e:	f000 f985 	bl	d473c <HAL_Timer_Get_Milli_Seconds>
        lastWrite = millis();
   d4432:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4434:	f000 fb58 	bl	d4ae8 <spark_cloud_flag_connected>
    if(Particle.connected() && millis() - lastSync > ONE_DAY_MILLIS) {
   d4438:	b338      	cbz	r0, d448a <loop+0x19e>
   d443a:	4c1f      	ldr	r4, [pc, #124]	; (d44b8 <loop+0x1cc>)
   d443c:	f000 f97e 	bl	d473c <HAL_Timer_Get_Milli_Seconds>
   d4440:	6822      	ldr	r2, [r4, #0]
   d4442:	1a80      	subs	r0, r0, r2
   d4444:	4a1d      	ldr	r2, [pc, #116]	; (d44bc <loop+0x1d0>)
   d4446:	4290      	cmp	r0, r2
   d4448:	d91f      	bls.n	d448a <loop+0x19e>
   d444a:	f000 fb4d 	bl	d4ae8 <spark_cloud_flag_connected>
      if(Particle.connected() == false) {
   d444e:	b918      	cbnz	r0, d4458 <loop+0x16c>
        spark_cloud_flag_connect();
   d4450:	f000 fb42 	bl	d4ad8 <spark_cloud_flag_connect>
   d4454:	f7ff fe47 	bl	d40e6 <_ZN11SystemClass18waitConditionWhileIZ4loopEUlvE0_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4458:	f000 fb46 	bl	d4ae8 <spark_cloud_flag_connected>
        if (!connected()) {
   d445c:	b110      	cbz	r0, d4464 <loop+0x178>
        return spark_sync_time(NULL);
   d445e:	2000      	movs	r0, #0
   d4460:	f000 fb52 	bl	d4b08 <spark_sync_time>
      waitUntil(Particle.syncTimeDone);
   d4464:	f7ff fe4a 	bl	d40fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   d4468:	b928      	cbnz	r0, d4476 <loop+0x18a>
            spark_process();
   d446a:	f000 fb2d 	bl	d4ac8 <spark_process>
        while (_while() && !_condition()) {
   d446e:	e7f9      	b.n	d4464 <loop+0x178>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4470:	4b0b      	ldr	r3, [pc, #44]	; (d44a0 <loop+0x1b4>)
   d4472:	60c3      	str	r3, [r0, #12]
                return *this;
   d4474:	e78e      	b.n	d4394 <loop+0xa8>
   d4476:	f7ff fe41 	bl	d40fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
      Particle.publishVitals(); // publish vitals 1x day
   d447a:	f04f 31ff 	mov.w	r1, #4294967295
   d447e:	4810      	ldr	r0, [pc, #64]	; (d44c0 <loop+0x1d4>)
   d4480:	f001 fefb 	bl	d627a <_ZN10CloudClass13publishVitalsEm>
   d4484:	f000 f95a 	bl	d473c <HAL_Timer_Get_Milli_Seconds>
      lastSync = millis();//reset the lastsync
   d4488:	6020      	str	r0, [r4, #0]
}
   d448a:	b004      	add	sp, #16
   d448c:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d448e:	7525      	strb	r5, [r4, #20]
                return *this;
   d4490:	e780      	b.n	d4394 <loop+0xa8>
   d4492:	bf00      	nop
   d4494:	2003e5a0 	.word	0x2003e5a0
   d4498:	000d77f9 	.word	0x000d77f9
   d449c:	00030010 	.word	0x00030010
   d44a0:	000dbba0 	.word	0x000dbba0
   d44a4:	2003e58c 	.word	0x2003e58c
   d44a8:	2003e5bc 	.word	0x2003e5bc
   d44ac:	2003e588 	.word	0x2003e588
   d44b0:	2003e584 	.word	0x2003e584
   d44b4:	000493e0 	.word	0x000493e0
   d44b8:	2003e5b8 	.word	0x2003e5b8
   d44bc:	0036ee80 	.word	0x0036ee80
   d44c0:	2003e7d4 	.word	0x2003e7d4

000d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d44c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d44c6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d44ca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d44cc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d44ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d44d2:	42ae      	cmp	r6, r5
   d44d4:	d004      	beq.n	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d44d6:	4628      	mov	r0, r5
   d44d8:	f000 fc76 	bl	d4dc8 <_ZN6StringD1Ev>
   d44dc:	3514      	adds	r5, #20
   d44de:	e7f8      	b.n	d44d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d44e0:	6820      	ldr	r0, [r4, #0]
   d44e2:	f000 fb39 	bl	d4b58 <free>
    AllocatorT::free(data_);
}
   d44e6:	4620      	mov	r0, r4
   d44e8:	bd70      	pop	{r4, r5, r6, pc}

000d44ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d44ea:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d44ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44ee:	4604      	mov	r4, r0
   d44f0:	460d      	mov	r5, r1
   d44f2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d44f4:	d916      	bls.n	d4524 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d44f6:	4290      	cmp	r0, r2
   d44f8:	d215      	bcs.n	d4526 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d44fa:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d44fe:	1a75      	subs	r5, r6, r1
   d4500:	f1a1 0714 	sub.w	r7, r1, #20
   d4504:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4506:	42b7      	cmp	r7, r6
   d4508:	d01c      	beq.n	d4544 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d450a:	b12c      	cbz	r4, d4518 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d450c:	4631      	mov	r1, r6
   d450e:	4620      	mov	r0, r4
   d4510:	f000 fcd6 	bl	d4ec0 <_ZN6StringC1EOS_>
   d4514:	7c33      	ldrb	r3, [r6, #16]
   d4516:	7423      	strb	r3, [r4, #16]
   d4518:	4630      	mov	r0, r6
   d451a:	f000 fc55 	bl	d4dc8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d451e:	3e14      	subs	r6, #20
   d4520:	3c14      	subs	r4, #20
   d4522:	e7f0      	b.n	d4506 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4524:	d00e      	beq.n	d4544 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4526:	42b5      	cmp	r5, r6
   d4528:	d00c      	beq.n	d4544 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d452a:	b12c      	cbz	r4, d4538 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d452c:	4629      	mov	r1, r5
   d452e:	4620      	mov	r0, r4
   d4530:	f000 fcc6 	bl	d4ec0 <_ZN6StringC1EOS_>
   d4534:	7c2b      	ldrb	r3, [r5, #16]
   d4536:	7423      	strb	r3, [r4, #16]
   d4538:	4628      	mov	r0, r5
   d453a:	f000 fc45 	bl	d4dc8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d453e:	3514      	adds	r5, #20
   d4540:	3414      	adds	r4, #20
   d4542:	e7f0      	b.n	d4526 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d454a:	2300      	movs	r3, #0
   d454c:	e9c0 3300 	strd	r3, r3, [r0]
   d4550:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4552:	684f      	ldr	r7, [r1, #4]
   d4554:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4556:	4604      	mov	r4, r0
   d4558:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d455a:	dd23      	ble.n	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d455c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4560:	fb08 f007 	mul.w	r0, r8, r7
   d4564:	f000 faf0 	bl	d4b48 <malloc>
            if (!d) {
   d4568:	4605      	mov	r5, r0
   d456a:	b1d8      	cbz	r0, d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d456c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4570:	fb08 1202 	mla	r2, r8, r2, r1
   d4574:	f7ff ffb9 	bl	d44ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4578:	6820      	ldr	r0, [r4, #0]
   d457a:	f000 faed 	bl	d4b58 <free>
        data_ = d;
   d457e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4580:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4582:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4586:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d458a:	45b8      	cmp	r8, r7
   d458c:	d008      	beq.n	d45a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d458e:	4639      	mov	r1, r7
   d4590:	4628      	mov	r0, r5
   d4592:	f000 fcaf 	bl	d4ef4 <_ZN6StringC1ERKS_>
   d4596:	7c3b      	ldrb	r3, [r7, #16]
   d4598:	742b      	strb	r3, [r5, #16]
   d459a:	3714      	adds	r7, #20
   d459c:	3514      	adds	r5, #20
   d459e:	e7f4      	b.n	d458a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d45a0:	6873      	ldr	r3, [r6, #4]
   d45a2:	6063      	str	r3, [r4, #4]
}
   d45a4:	4620      	mov	r0, r4
   d45a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d45ac <_GLOBAL__sub_I_Radar_cnt>:
   d45ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        val_(val) {
   d45b0:	4b37      	ldr	r3, [pc, #220]	; (d4690 <_GLOBAL__sub_I_Radar_cnt+0xe4>)
              error_(SYSTEM_ERROR_NONE) {
   d45b2:	4d38      	ldr	r5, [pc, #224]	; (d4694 <_GLOBAL__sub_I_Radar_cnt+0xe8>)
SYSTEM_MODE(AUTOMATIC) 
   d45b4:	4e38      	ldr	r6, [pc, #224]	; (d4698 <_GLOBAL__sub_I_Radar_cnt+0xec>)
   d45b6:	2701      	movs	r7, #1
   d45b8:	b08d      	sub	sp, #52	; 0x34
   d45ba:	701f      	strb	r7, [r3, #0]
   d45bc:	f000 f8be 	bl	d473c <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   d45c0:	4b36      	ldr	r3, [pc, #216]	; (d469c <_GLOBAL__sub_I_Radar_cnt+0xf0>)
   d45c2:	6018      	str	r0, [r3, #0]
   d45c4:	f000 f8ba 	bl	d473c <HAL_Timer_Get_Milli_Seconds>
unsigned long lastWrite = millis();
   d45c8:	4b35      	ldr	r3, [pc, #212]	; (d46a0 <_GLOBAL__sub_I_Radar_cnt+0xf4>)
   d45ca:	2400      	movs	r4, #0
   d45cc:	6018      	str	r0, [r3, #0]
    SleepResult() {}
   d45ce:	4b35      	ldr	r3, [pc, #212]	; (d46a4 <_GLOBAL__sub_I_Radar_cnt+0xf8>)
   d45d0:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d45d2:	602c      	str	r4, [r5, #0]
   d45d4:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d45d6:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d45d8:	4638      	mov	r0, r7
   d45da:	f000 f9df 	bl	d499c <set_system_mode>
SYSTEM_MODE(AUTOMATIC) 
   d45de:	4632      	mov	r2, r6
   d45e0:	4931      	ldr	r1, [pc, #196]	; (d46a8 <_GLOBAL__sub_I_Radar_cnt+0xfc>)
   d45e2:	4628      	mov	r0, r5
   d45e4:	f002 fe0c 	bl	d7200 <__aeabi_atexit>
        capacity_(0) {
   d45e8:	e9cd 4400 	strd	r4, r4, [sp]
   d45ec:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d45ee:	f002 f977 	bl	d68e0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d45f2:	4d2e      	ldr	r5, [pc, #184]	; (d46ac <_GLOBAL__sub_I_Radar_cnt+0x100>)
   d45f4:	4680      	mov	r8, r0
   d45f6:	4669      	mov	r1, sp
   d45f8:	a803      	add	r0, sp, #12
   d45fa:	f7ff ffa4 	bl	d4546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d45fe:	46a9      	mov	r9, r5
        stream_(&stream) {
   d4600:	a903      	add	r1, sp, #12
   d4602:	a806      	add	r0, sp, #24
   d4604:	f7ff ff9f 	bl	d4546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4608:	4b29      	ldr	r3, [pc, #164]	; (d46b0 <_GLOBAL__sub_I_Radar_cnt+0x104>)
   d460a:	f849 3b04 	str.w	r3, [r9], #4
   d460e:	a906      	add	r1, sp, #24
   d4610:	a809      	add	r0, sp, #36	; 0x24
   d4612:	f7ff ff98 	bl	d4546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4616:	aa09      	add	r2, sp, #36	; 0x24
   d4618:	211e      	movs	r1, #30
   d461a:	4648      	mov	r0, r9
   d461c:	f001 fa1c 	bl	d5a58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4620:	a809      	add	r0, sp, #36	; 0x24
   d4622:	f7ff ff4f 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4626:	a806      	add	r0, sp, #24
   d4628:	f7ff ff4c 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d462c:	4b21      	ldr	r3, [pc, #132]	; (d46b4 <_GLOBAL__sub_I_Radar_cnt+0x108>)
   d462e:	602b      	str	r3, [r5, #0]
   d4630:	f8c5 8020 	str.w	r8, [r5, #32]
   d4634:	a803      	add	r0, sp, #12
   d4636:	f7ff ff45 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d463a:	4b1f      	ldr	r3, [pc, #124]	; (d46b8 <_GLOBAL__sub_I_Radar_cnt+0x10c>)
   d463c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d463e:	f002 f94f 	bl	d68e0 <_Z16_fetch_usbserialv>
   d4642:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4646:	f002 f93b 	bl	d68c0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d464a:	f000 febf 	bl	d53cc <_ZN5spark10LogManager8instanceEv>
   d464e:	4629      	mov	r1, r5
   d4650:	f001 f994 	bl	d597c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler; //
   d4654:	4668      	mov	r0, sp
   d4656:	f7ff ff35 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d465a:	4632      	mov	r2, r6
   d465c:	4917      	ldr	r1, [pc, #92]	; (d46bc <_GLOBAL__sub_I_Radar_cnt+0x110>)
   d465e:	4628      	mov	r0, r5
   d4660:	f002 fdce 	bl	d7200 <__aeabi_atexit>
        : config_(config) {
   d4664:	4816      	ldr	r0, [pc, #88]	; (d46c0 <_GLOBAL__sub_I_Radar_cnt+0x114>)
SystemSleepConfiguration config;
   d4666:	4917      	ldr	r1, [pc, #92]	; (d46c4 <_GLOBAL__sub_I_Radar_cnt+0x118>)
              valid_(true) {
   d4668:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d466c:	4603      	mov	r3, r0
   d466e:	1d02      	adds	r2, r0, #4
   d4670:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d4674:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d4676:	4b14      	ldr	r3, [pc, #80]	; (d46c8 <_GLOBAL__sub_I_Radar_cnt+0x11c>)
              valid_(true) {
   d4678:	7507      	strb	r7, [r0, #20]
        config_.wakeup_sources = nullptr;
   d467a:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d467e:	6043      	str	r3, [r0, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4680:	7204      	strb	r4, [r0, #8]
   d4682:	4632      	mov	r2, r6
   d4684:	f002 fdbc 	bl	d7200 <__aeabi_atexit>
   d4688:	b00d      	add	sp, #52	; 0x34
   d468a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d468e:	bf00      	nop
   d4690:	2003e59c 	.word	0x2003e59c
   d4694:	2003e590 	.word	0x2003e590
   d4698:	2003e580 	.word	0x2003e580
   d469c:	2003e5b8 	.word	0x2003e5b8
   d46a0:	2003e5bc 	.word	0x2003e5bc
   d46a4:	ffff0000 	.word	0xffff0000
   d46a8:	000d4171 	.word	0x000d4171
   d46ac:	2003e5c0 	.word	0x2003e5c0
   d46b0:	000d750c 	.word	0x000d750c
   d46b4:	000d764c 	.word	0x000d764c
   d46b8:	000d7524 	.word	0x000d7524
   d46bc:	000d4119 	.word	0x000d4119
   d46c0:	2003e5a0 	.word	0x2003e5a0
   d46c4:	000d40cf 	.word	0x000d40cf
   d46c8:	00030010 	.word	0x00030010

000d46cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <netdb_freeaddrinfo+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	689b      	ldr	r3, [r3, #8]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030268 	.word	0x00030268

000d46dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <netdb_getaddrinfo+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	68db      	ldr	r3, [r3, #12]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030268 	.word	0x00030268

000d46ec <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_Pin_Mode+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	689b      	ldr	r3, [r3, #8]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	0003022c 	.word	0x0003022c

000d46fc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_Get_Pin_Mode+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	68db      	ldr	r3, [r3, #12]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	0003022c 	.word	0x0003022c

000d470c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <HAL_GPIO_Read+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	695b      	ldr	r3, [r3, #20]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	0003022c 	.word	0x0003022c

000d471c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <HAL_RNG_GetRandomNumber+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	685b      	ldr	r3, [r3, #4]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030218 	.word	0x00030218

000d472c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <HAL_Delay_Microseconds+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	68db      	ldr	r3, [r3, #12]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030218 	.word	0x00030218

000d473c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	695b      	ldr	r3, [r3, #20]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030218 	.word	0x00030218

000d474c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <os_mutex_recursive_create+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030248 	.word	0x00030248

000d475c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <os_mutex_recursive_destroy+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030248 	.word	0x00030248

000d476c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <os_mutex_recursive_lock+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030248 	.word	0x00030248

000d477c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <os_mutex_recursive_unlock+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030248 	.word	0x00030248

000d478c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <inet_inet_ntop+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	695b      	ldr	r3, [r3, #20]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030264 	.word	0x00030264

000d479c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <hal_usart_init+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	681b      	ldr	r3, [r3, #0]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003023c 	.word	0x0003023c

000d47ac <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <hal_usart_end+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	689b      	ldr	r3, [r3, #8]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003023c 	.word	0x0003023c

000d47bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <hal_usart_write+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	68db      	ldr	r3, [r3, #12]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003023c 	.word	0x0003023c

000d47cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <hal_usart_available+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	691b      	ldr	r3, [r3, #16]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	0003023c 	.word	0x0003023c

000d47dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <hal_usart_read+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	695b      	ldr	r3, [r3, #20]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	0003023c 	.word	0x0003023c

000d47ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <hal_usart_peek+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	699b      	ldr	r3, [r3, #24]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	0003023c 	.word	0x0003023c

000d47fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <hal_usart_flush+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	69db      	ldr	r3, [r3, #28]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	0003023c 	.word	0x0003023c

000d480c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <hal_usart_is_enabled+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6a1b      	ldr	r3, [r3, #32]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	0003023c 	.word	0x0003023c

000d481c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <hal_usart_available_data_for_write+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	0003023c 	.word	0x0003023c

000d482c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <hal_usart_begin_config+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003023c 	.word	0x0003023c

000d483c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <hal_i2c_write+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6a1b      	ldr	r3, [r3, #32]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030228 	.word	0x00030228

000d484c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <hal_i2c_available+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030228 	.word	0x00030228

000d485c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <hal_i2c_read+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030228 	.word	0x00030228

000d486c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <hal_i2c_peek+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030228 	.word	0x00030228

000d487c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <hal_i2c_flush+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030228 	.word	0x00030228

000d488c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <hal_i2c_is_enabled+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030228 	.word	0x00030228

000d489c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <hal_i2c_init+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030228 	.word	0x00030228

000d48ac <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <hal_spi_init+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	69db      	ldr	r3, [r3, #28]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030230 	.word	0x00030230

000d48bc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <hal_spi_is_enabled+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6a1b      	ldr	r3, [r3, #32]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030230 	.word	0x00030230

000d48cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_USB_USART_Init+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	681b      	ldr	r3, [r3, #0]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003024c 	.word	0x0003024c

000d48dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <HAL_USB_USART_Begin+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	685b      	ldr	r3, [r3, #4]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	0003024c 	.word	0x0003024c

000d48ec <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <HAL_USB_USART_End+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	689b      	ldr	r3, [r3, #8]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	0003024c 	.word	0x0003024c

000d48fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <HAL_USB_USART_Available_Data+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	691b      	ldr	r3, [r3, #16]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	0003024c 	.word	0x0003024c

000d490c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	695b      	ldr	r3, [r3, #20]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	0003024c 	.word	0x0003024c

000d491c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <HAL_USB_USART_Receive_Data+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	699b      	ldr	r3, [r3, #24]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	0003024c 	.word	0x0003024c

000d492c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <HAL_USB_USART_Send_Data+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	69db      	ldr	r3, [r3, #28]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	0003024c 	.word	0x0003024c

000d493c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <HAL_USB_USART_Flush_Data+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6a1b      	ldr	r3, [r3, #32]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	0003024c 	.word	0x0003024c

000d494c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <panic_+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030260 	.word	0x00030260

000d495c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <log_message+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030260 	.word	0x00030260

000d496c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <log_message_v+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030260 	.word	0x00030260

000d497c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <log_level_name+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030260 	.word	0x00030260

000d498c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <log_set_callbacks+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030260 	.word	0x00030260

000d499c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <set_system_mode+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	685b      	ldr	r3, [r3, #4]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030220 	.word	0x00030220

000d49ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <application_thread_current+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030220 	.word	0x00030220

000d49bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <application_thread_invoke+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030220 	.word	0x00030220

000d49cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b03      	ldr	r3, [pc, #12]	; (d49dc <system_ctrl_set_app_request_handler+0x10>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49d6:	9301      	str	r3, [sp, #4]
   d49d8:	bd08      	pop	{r3, pc}
   d49da:	0000      	.short	0x0000
   d49dc:	00030220 	.word	0x00030220

000d49e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b03      	ldr	r3, [pc, #12]	; (d49f0 <system_ctrl_set_result+0x10>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49ea:	9301      	str	r3, [sp, #4]
   d49ec:	bd08      	pop	{r3, pc}
   d49ee:	0000      	.short	0x0000
   d49f0:	00030220 	.word	0x00030220

000d49f4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b03      	ldr	r3, [pc, #12]	; (d4a04 <system_sleep_ext+0x10>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d49fe:	9301      	str	r3, [sp, #4]
   d4a00:	bd08      	pop	{r3, pc}
   d4a02:	0000      	.short	0x0000
   d4a04:	00030220 	.word	0x00030220

000d4a08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <network_connect+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	685b      	ldr	r3, [r3, #4]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030240 	.word	0x00030240

000d4a18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <network_connecting+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	689b      	ldr	r3, [r3, #8]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030240 	.word	0x00030240

000d4a28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <network_disconnect+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	68db      	ldr	r3, [r3, #12]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030240 	.word	0x00030240

000d4a38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <network_ready+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	691b      	ldr	r3, [r3, #16]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030240 	.word	0x00030240

000d4a48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <network_on+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	695b      	ldr	r3, [r3, #20]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030240 	.word	0x00030240

000d4a58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <network_off+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	699b      	ldr	r3, [r3, #24]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030240 	.word	0x00030240

000d4a68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <network_listen+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	69db      	ldr	r3, [r3, #28]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030240 	.word	0x00030240

000d4a78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <network_listening+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	6a1b      	ldr	r3, [r3, #32]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	00030240 	.word	0x00030240

000d4a88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <network_set_listen_timeout+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030240 	.word	0x00030240

000d4a98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <network_get_listen_timeout+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030240 	.word	0x00030240

000d4aa8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <network_is_on+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	00030240 	.word	0x00030240

000d4ab8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <network_is_off+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	00030240 	.word	0x00030240

000d4ac8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <spark_process+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	689b      	ldr	r3, [r3, #8]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	00030244 	.word	0x00030244

000d4ad8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <spark_cloud_flag_connect+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	68db      	ldr	r3, [r3, #12]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	00030244 	.word	0x00030244

000d4ae8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <spark_cloud_flag_connected+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	695b      	ldr	r3, [r3, #20]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	00030244 	.word	0x00030244

000d4af8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <spark_send_event+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6a1b      	ldr	r3, [r3, #32]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	00030244 	.word	0x00030244

000d4b08 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <spark_sync_time+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	00030244 	.word	0x00030244

000d4b18 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <spark_sync_time_pending+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	00030244 	.word	0x00030244

000d4b28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	00030244 	.word	0x00030244

000d4b38 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <spark_publish_vitals+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	00030244 	.word	0x00030244

000d4b48 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <malloc+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	681b      	ldr	r3, [r3, #0]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	0003021c 	.word	0x0003021c

000d4b58 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <free+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	685b      	ldr	r3, [r3, #4]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003021c 	.word	0x0003021c

000d4b68 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <realloc+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	689b      	ldr	r3, [r3, #8]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	0003021c 	.word	0x0003021c

000d4b78 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <snprintf+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	69db      	ldr	r3, [r3, #28]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	0003021c 	.word	0x0003021c

000d4b88 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <vsnprintf+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	0003021c 	.word	0x0003021c

000d4b98 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <abort+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	0003021c 	.word	0x0003021c

000d4ba8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <_malloc_r+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	0003021c 	.word	0x0003021c

000d4bb8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <newlib_impure_ptr_callback+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	0003021c 	.word	0x0003021c

000d4bc8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4bc8:	2200      	movs	r2, #0
   d4bca:	6840      	ldr	r0, [r0, #4]
   d4bcc:	4611      	mov	r1, r2
   d4bce:	f7ff bf53 	b.w	d4a78 <network_listening>

000d4bd2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4bd2:	2200      	movs	r2, #0
   d4bd4:	6840      	ldr	r0, [r0, #4]
   d4bd6:	4611      	mov	r1, r2
   d4bd8:	f7ff bf5e 	b.w	d4a98 <network_get_listen_timeout>

000d4bdc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4bdc:	6840      	ldr	r0, [r0, #4]
   d4bde:	2200      	movs	r2, #0
   d4be0:	f7ff bf52 	b.w	d4a88 <network_set_listen_timeout>

000d4be4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4be4:	6840      	ldr	r0, [r0, #4]
   d4be6:	2200      	movs	r2, #0
   d4be8:	f081 0101 	eor.w	r1, r1, #1
   d4bec:	f7ff bf3c 	b.w	d4a68 <network_listen>

000d4bf0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4bf0:	2300      	movs	r3, #0
   d4bf2:	6840      	ldr	r0, [r0, #4]
   d4bf4:	461a      	mov	r2, r3
   d4bf6:	4619      	mov	r1, r3
   d4bf8:	f7ff bf2e 	b.w	d4a58 <network_off>

000d4bfc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4bfc:	2300      	movs	r3, #0
   d4bfe:	6840      	ldr	r0, [r0, #4]
   d4c00:	461a      	mov	r2, r3
   d4c02:	4619      	mov	r1, r3
   d4c04:	f7ff bf20 	b.w	d4a48 <network_on>

000d4c08 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c08:	2200      	movs	r2, #0
   d4c0a:	6840      	ldr	r0, [r0, #4]
   d4c0c:	4611      	mov	r1, r2
   d4c0e:	f7ff bf13 	b.w	d4a38 <network_ready>

000d4c12 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4c12:	2200      	movs	r2, #0
   d4c14:	6840      	ldr	r0, [r0, #4]
   d4c16:	4611      	mov	r1, r2
   d4c18:	f7ff befe 	b.w	d4a18 <network_connecting>

000d4c1c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c1c:	6840      	ldr	r0, [r0, #4]
   d4c1e:	2200      	movs	r2, #0
   d4c20:	2102      	movs	r1, #2
   d4c22:	f7ff bf01 	b.w	d4a28 <network_disconnect>

000d4c26 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4c26:	2300      	movs	r3, #0
   d4c28:	6840      	ldr	r0, [r0, #4]
   d4c2a:	461a      	mov	r2, r3
   d4c2c:	f7ff beec 	b.w	d4a08 <network_connect>

000d4c30 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c30:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4c32:	2203      	movs	r2, #3
   d4c34:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c36:	4a02      	ldr	r2, [pc, #8]	; (d4c40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c38:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4c3a:	4770      	bx	lr
   d4c3c:	2003e5e4 	.word	0x2003e5e4
   d4c40:	000d7554 	.word	0x000d7554

000d4c44 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4c44:	b510      	push	{r4, lr}
   d4c46:	4604      	mov	r4, r0
   d4c48:	4608      	mov	r0, r1
{
    _spi = spi;
   d4c4a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4c4c:	f7ff fe2e 	bl	d48ac <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4c50:	2300      	movs	r3, #0
   d4c52:	6063      	str	r3, [r4, #4]
}
   d4c54:	4620      	mov	r0, r4
   d4c56:	bd10      	pop	{r4, pc}

000d4c58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4c58:	b510      	push	{r4, lr}
   d4c5a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4c5c:	6800      	ldr	r0, [r0, #0]
   d4c5e:	b118      	cbz	r0, d4c68 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4c60:	f7ff ff7a 	bl	d4b58 <free>
            wakeupSource_ = nullptr;
   d4c64:	2300      	movs	r3, #0
   d4c66:	6023      	str	r3, [r4, #0]
        }
    }
   d4c68:	bd10      	pop	{r4, pc}

000d4c6a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4c6a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d4c6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d4c70:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d4c72:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4c74:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d4c76:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d4c7a:	f8c0 2006 	str.w	r2, [r0, #6]
   d4c7e:	889b      	ldrh	r3, [r3, #4]
   d4c80:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4c82:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4c84:	f7ff ffe8 	bl	d4c58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d4c88:	682b      	ldr	r3, [r5, #0]
   d4c8a:	b113      	cbz	r3, d4c92 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d4c8c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d4c8e:	2300      	movs	r3, #0
   d4c90:	602b      	str	r3, [r5, #0]
    }
   d4c92:	4620      	mov	r0, r4
   d4c94:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d4c98:	b538      	push	{r3, r4, r5, lr}
   d4c9a:	460c      	mov	r4, r1
   d4c9c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d4c9e:	f7ff ffdb 	bl	d4c58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d4ca2:	b144      	cbz	r4, d4cb6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d4ca4:	8820      	ldrh	r0, [r4, #0]
   d4ca6:	f7ff ff4f 	bl	d4b48 <malloc>
   d4caa:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4cac:	b128      	cbz	r0, d4cba <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d4cae:	8822      	ldrh	r2, [r4, #0]
   d4cb0:	4621      	mov	r1, r4
   d4cb2:	f002 fac1 	bl	d7238 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d4cb6:	2000      	movs	r0, #0
    }
   d4cb8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d4cba:	4801      	ldr	r0, [pc, #4]	; (d4cc0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d4cbc:	e7fc      	b.n	d4cb8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d4cbe:	bf00      	nop
   d4cc0:	fffffefc 	.word	0xfffffefc

000d4cc4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d4cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cc6:	4d2d      	ldr	r5, [pc, #180]	; (d4d7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d4cc8:	7d0b      	ldrb	r3, [r1, #20]
   d4cca:	4604      	mov	r4, r0
   d4ccc:	b08b      	sub	sp, #44	; 0x2c
   d4cce:	4608      	mov	r0, r1
   d4cd0:	1daf      	adds	r7, r5, #6
   d4cd2:	2b00      	cmp	r3, #0
   d4cd4:	d038      	beq.n	d4d48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d4cd6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d4cd8:	791b      	ldrb	r3, [r3, #4]
   d4cda:	2b00      	cmp	r3, #0
   d4cdc:	d034      	beq.n	d4d48 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d4cde:	2200      	movs	r2, #0
    SleepResult() {}
   d4ce0:	4b27      	ldr	r3, [pc, #156]	; (d4d80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4ce2:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d4ce4:	a902      	add	r1, sp, #8
   d4ce6:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d4ce8:	9202      	str	r2, [sp, #8]
   d4cea:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d4cee:	f88d 200e 	strb.w	r2, [sp, #14]
   d4cf2:	f7ff fe7f 	bl	d49f4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d4cf6:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d4cfa:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d4cfe:	b200      	sxth	r0, r0
   d4d00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d4d04:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d4d08:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d4d0a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d4d0c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4d0e:	4628      	mov	r0, r5
   d4d10:	f7ff ffc2 	bl	d4c98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d4d14:	a802      	add	r0, sp, #8
   d4d16:	f7ff ff9f 	bl	d4c58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d4d1a:	2300      	movs	r3, #0
   d4d1c:	6023      	str	r3, [r4, #0]
   d4d1e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4d20:	71a3      	strb	r3, [r4, #6]
   d4d22:	8123      	strh	r3, [r4, #8]
   d4d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4d28:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d4d2a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d4d2e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d4d30:	683b      	ldr	r3, [r7, #0]
   d4d32:	f8c4 3006 	str.w	r3, [r4, #6]
   d4d36:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4d38:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d4d3a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	f7ff ffab 	bl	d4c98 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d4d42:	4620      	mov	r0, r4
   d4d44:	b00b      	add	sp, #44	; 0x2c
   d4d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d4d48:	2600      	movs	r6, #0
   d4d4a:	2320      	movs	r3, #32
   d4d4c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d4d50:	4b0c      	ldr	r3, [pc, #48]	; (d4d84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d4d52:	9300      	str	r3, [sp, #0]
   d4d54:	490c      	ldr	r1, [pc, #48]	; (d4d88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d4d56:	4633      	mov	r3, r6
   d4d58:	aa02      	add	r2, sp, #8
   d4d5a:	2032      	movs	r0, #50	; 0x32
   d4d5c:	f7ff fdfe 	bl	d495c <log_message>
    SleepResult() {}
   d4d60:	4b07      	ldr	r3, [pc, #28]	; (d4d80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4d62:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d4d64:	a902      	add	r1, sp, #8
        error_ = error;
   d4d66:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d4d6a:	4804      	ldr	r0, [pc, #16]	; (d4d7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d4d6c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d4d6e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d4d72:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4d76:	f7ff ff78 	bl	d4c6a <_ZN17SystemSleepResultaSEOS_>
   d4d7a:	e7cb      	b.n	d4d14 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d4d7c:	2003e5ec 	.word	0x2003e5ec
   d4d80:	ffff0000 	.word	0xffff0000
   d4d84:	000d758f 	.word	0x000d758f
   d4d88:	000d7588 	.word	0x000d7588

000d4d8c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d8c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4d8e:	4b09      	ldr	r3, [pc, #36]	; (d4db4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4d90:	4c09      	ldr	r4, [pc, #36]	; (d4db8 <_GLOBAL__sub_I_System+0x2c>)
   d4d92:	2202      	movs	r2, #2
   d4d94:	2000      	movs	r0, #0
   d4d96:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4d98:	4b08      	ldr	r3, [pc, #32]	; (d4dbc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4d9a:	6020      	str	r0, [r4, #0]
   d4d9c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4d9e:	71a0      	strb	r0, [r4, #6]
   d4da0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4da2:	f7ff fdfb 	bl	d499c <set_system_mode>
SystemClass System;
   d4da6:	4620      	mov	r0, r4
   d4da8:	4a05      	ldr	r2, [pc, #20]	; (d4dc0 <_GLOBAL__sub_I_System+0x34>)
   d4daa:	4906      	ldr	r1, [pc, #24]	; (d4dc4 <_GLOBAL__sub_I_System+0x38>)
   d4dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4db0:	f002 ba26 	b.w	d7200 <__aeabi_atexit>
   d4db4:	2003e5f8 	.word	0x2003e5f8
   d4db8:	2003e5ec 	.word	0x2003e5ec
   d4dbc:	ffff0000 	.word	0xffff0000
   d4dc0:	2003e580 	.word	0x2003e580
   d4dc4:	000d4171 	.word	0x000d4171

000d4dc8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4dc8:	b510      	push	{r4, lr}
   d4dca:	4604      	mov	r4, r0
{
	free(buffer);
   d4dcc:	6800      	ldr	r0, [r0, #0]
   d4dce:	f7ff fec3 	bl	d4b58 <free>
}
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	bd10      	pop	{r4, pc}

000d4dd6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4dd6:	b510      	push	{r4, lr}
   d4dd8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4dda:	6800      	ldr	r0, [r0, #0]
   d4ddc:	b108      	cbz	r0, d4de2 <_ZN6String10invalidateEv+0xc>
   d4dde:	f7ff febb 	bl	d4b58 <free>
	buffer = NULL;
   d4de2:	2300      	movs	r3, #0
	capacity = len = 0;
   d4de4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4de8:	6023      	str	r3, [r4, #0]
}
   d4dea:	bd10      	pop	{r4, pc}

000d4dec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4dec:	b538      	push	{r3, r4, r5, lr}
   d4dee:	4604      	mov	r4, r0
   d4df0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4df2:	6800      	ldr	r0, [r0, #0]
   d4df4:	3101      	adds	r1, #1
   d4df6:	f7ff feb7 	bl	d4b68 <realloc>
	if (newbuffer) {
   d4dfa:	b110      	cbz	r0, d4e02 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4dfc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4e00:	2001      	movs	r0, #1
	}
	return 0;
}
   d4e02:	bd38      	pop	{r3, r4, r5, pc}

000d4e04 <_ZN6String7reserveEj>:
{
   d4e04:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4e06:	6803      	ldr	r3, [r0, #0]
{
   d4e08:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4e0a:	b123      	cbz	r3, d4e16 <_ZN6String7reserveEj+0x12>
   d4e0c:	6843      	ldr	r3, [r0, #4]
   d4e0e:	428b      	cmp	r3, r1
   d4e10:	d301      	bcc.n	d4e16 <_ZN6String7reserveEj+0x12>
   d4e12:	2001      	movs	r0, #1
}
   d4e14:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4e16:	4620      	mov	r0, r4
   d4e18:	f7ff ffe8 	bl	d4dec <_ZN6String12changeBufferEj>
   d4e1c:	2800      	cmp	r0, #0
   d4e1e:	d0f9      	beq.n	d4e14 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4e20:	68a3      	ldr	r3, [r4, #8]
   d4e22:	2b00      	cmp	r3, #0
   d4e24:	d1f5      	bne.n	d4e12 <_ZN6String7reserveEj+0xe>
   d4e26:	6822      	ldr	r2, [r4, #0]
   d4e28:	7013      	strb	r3, [r2, #0]
   d4e2a:	e7f2      	b.n	d4e12 <_ZN6String7reserveEj+0xe>

000d4e2c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4e2e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4e30:	4611      	mov	r1, r2
   d4e32:	9201      	str	r2, [sp, #4]
{
   d4e34:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4e36:	f7ff ffe5 	bl	d4e04 <_ZN6String7reserveEj>
   d4e3a:	9a01      	ldr	r2, [sp, #4]
   d4e3c:	b928      	cbnz	r0, d4e4a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4e3e:	4620      	mov	r0, r4
   d4e40:	f7ff ffc9 	bl	d4dd6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4e44:	4620      	mov	r0, r4
   d4e46:	b003      	add	sp, #12
   d4e48:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4e4a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4e4c:	4629      	mov	r1, r5
   d4e4e:	6820      	ldr	r0, [r4, #0]
   d4e50:	f002 f9f2 	bl	d7238 <memcpy>
	buffer[len] = 0;
   d4e54:	6822      	ldr	r2, [r4, #0]
   d4e56:	68a3      	ldr	r3, [r4, #8]
   d4e58:	2100      	movs	r1, #0
   d4e5a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4e5c:	e7f2      	b.n	d4e44 <_ZN6String4copyEPKcj+0x18>

000d4e5e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4e5e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4e60:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4e62:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4e66:	4604      	mov	r4, r0
	len = 0;
   d4e68:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e6a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4e6c:	b141      	cbz	r1, d4e80 <_ZN6StringC1EPKc+0x22>
   d4e6e:	4608      	mov	r0, r1
   d4e70:	9101      	str	r1, [sp, #4]
   d4e72:	f002 fa7c 	bl	d736e <strlen>
   d4e76:	9901      	ldr	r1, [sp, #4]
   d4e78:	4602      	mov	r2, r0
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	f7ff ffd6 	bl	d4e2c <_ZN6String4copyEPKcj>
}
   d4e80:	4620      	mov	r0, r4
   d4e82:	b002      	add	sp, #8
   d4e84:	bd10      	pop	{r4, pc}

000d4e86 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4e86:	b538      	push	{r3, r4, r5, lr}
   d4e88:	4605      	mov	r5, r0
	if (buffer) {
   d4e8a:	6800      	ldr	r0, [r0, #0]
{
   d4e8c:	460c      	mov	r4, r1
	if (buffer) {
   d4e8e:	b168      	cbz	r0, d4eac <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4e90:	686a      	ldr	r2, [r5, #4]
   d4e92:	688b      	ldr	r3, [r1, #8]
   d4e94:	429a      	cmp	r2, r3
   d4e96:	d307      	bcc.n	d4ea8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4e98:	6809      	ldr	r1, [r1, #0]
   d4e9a:	f002 fa42 	bl	d7322 <strcpy>
			len = rhs.len;
   d4e9e:	68a3      	ldr	r3, [r4, #8]
   d4ea0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4ea2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4ea4:	60a3      	str	r3, [r4, #8]
}
   d4ea6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4ea8:	f7ff fe56 	bl	d4b58 <free>
	buffer = rhs.buffer;
   d4eac:	6823      	ldr	r3, [r4, #0]
   d4eae:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4eb0:	6863      	ldr	r3, [r4, #4]
   d4eb2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4eb4:	68a3      	ldr	r3, [r4, #8]
   d4eb6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4eb8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4eba:	e9c4 3300 	strd	r3, r3, [r4]
   d4ebe:	e7f1      	b.n	d4ea4 <_ZN6String4moveERS_+0x1e>

000d4ec0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4ec0:	b510      	push	{r4, lr}
	buffer = NULL;
   d4ec2:	2300      	movs	r3, #0
	capacity = 0;
   d4ec4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4ec8:	4604      	mov	r4, r0
	len = 0;
   d4eca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ecc:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4ece:	f7ff ffda 	bl	d4e86 <_ZN6String4moveERS_>
}
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	bd10      	pop	{r4, pc}

000d4ed6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4ed6:	4288      	cmp	r0, r1
{
   d4ed8:	b510      	push	{r4, lr}
   d4eda:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4edc:	d005      	beq.n	d4eea <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4ede:	680b      	ldr	r3, [r1, #0]
   d4ee0:	b12b      	cbz	r3, d4eee <_ZN6StringaSERKS_+0x18>
   d4ee2:	688a      	ldr	r2, [r1, #8]
   d4ee4:	4619      	mov	r1, r3
   d4ee6:	f7ff ffa1 	bl	d4e2c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4eea:	4620      	mov	r0, r4
   d4eec:	bd10      	pop	{r4, pc}
	else invalidate();
   d4eee:	f7ff ff72 	bl	d4dd6 <_ZN6String10invalidateEv>
   d4ef2:	e7fa      	b.n	d4eea <_ZN6StringaSERKS_+0x14>

000d4ef4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4ef4:	b510      	push	{r4, lr}
	buffer = NULL;
   d4ef6:	2300      	movs	r3, #0
String::String(const String &value)
   d4ef8:	4604      	mov	r4, r0
	capacity = 0;
   d4efa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4efe:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4f00:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4f02:	f7ff ffe8 	bl	d4ed6 <_ZN6StringaSERKS_>
}
   d4f06:	4620      	mov	r0, r4
   d4f08:	bd10      	pop	{r4, pc}
	...

000d4f0c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d4f0c:	b40e      	push	{r1, r2, r3}
   d4f0e:	b570      	push	{r4, r5, r6, lr}
   d4f10:	b087      	sub	sp, #28
   d4f12:	ad0b      	add	r5, sp, #44	; 0x2c
   d4f14:	4604      	mov	r4, r0
   d4f16:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4f1a:	9201      	str	r2, [sp, #4]
   d4f1c:	462b      	mov	r3, r5
   d4f1e:	2105      	movs	r1, #5
   d4f20:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d4f22:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4f24:	f7ff fe30 	bl	d4b88 <vsnprintf>
    va_end(marker);

    String result;
   d4f28:	490b      	ldr	r1, [pc, #44]	; (d4f58 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4f2a:	4606      	mov	r6, r0
    String result;
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f7ff ff96 	bl	d4e5e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d4f32:	4631      	mov	r1, r6
   d4f34:	4620      	mov	r0, r4
   d4f36:	f7ff ff65 	bl	d4e04 <_ZN6String7reserveEj>
    if (result.buffer) {
   d4f3a:	6820      	ldr	r0, [r4, #0]
   d4f3c:	b130      	cbz	r0, d4f4c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d4f3e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d4f40:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d4f42:	462b      	mov	r3, r5
   d4f44:	1c71      	adds	r1, r6, #1
   d4f46:	f7ff fe1f 	bl	d4b88 <vsnprintf>
        va_end(marker);
        result.len = n;
   d4f4a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	b007      	add	sp, #28
   d4f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4f54:	b003      	add	sp, #12
   d4f56:	4770      	bx	lr
   d4f58:	000d7610 	.word	0x000d7610

000d4f5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f5c:	b510      	push	{r4, lr}
          _M_dispose();
   d4f5e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f60:	4604      	mov	r4, r0
          _M_dispose();
   d4f62:	689b      	ldr	r3, [r3, #8]
   d4f64:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f66:	68a3      	ldr	r3, [r4, #8]
   d4f68:	3b01      	subs	r3, #1
   d4f6a:	60a3      	str	r3, [r4, #8]
   d4f6c:	b92b      	cbnz	r3, d4f7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4f6e:	6823      	ldr	r3, [r4, #0]
   d4f70:	4620      	mov	r0, r4
   d4f72:	68db      	ldr	r3, [r3, #12]
    }
   d4f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4f78:	4718      	bx	r3
    }
   d4f7a:	bd10      	pop	{r4, pc}

000d4f7c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f7c:	b510      	push	{r4, lr}
   d4f7e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f80:	6800      	ldr	r0, [r0, #0]
   d4f82:	b108      	cbz	r0, d4f88 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f84:	f7ff fbea 	bl	d475c <os_mutex_recursive_destroy>
    }
   d4f88:	4620      	mov	r0, r4
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f8c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f8e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4f90:	4604      	mov	r4, r0
      if (_M_manager)
   d4f92:	b113      	cbz	r3, d4f9a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f94:	2203      	movs	r2, #3
   d4f96:	4601      	mov	r1, r0
   d4f98:	4798      	blx	r3
    }
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	bd10      	pop	{r4, pc}

000d4f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4f9e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4fa0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4fa4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4fa6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d4faa:	42ae      	cmp	r6, r5
   d4fac:	d004      	beq.n	d4fb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d4fae:	4628      	mov	r0, r5
   d4fb0:	f7ff ff0a 	bl	d4dc8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d4fb4:	3510      	adds	r5, #16
   d4fb6:	e7f8      	b.n	d4faa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d4fb8:	6820      	ldr	r0, [r4, #0]
   d4fba:	f7ff fdcd 	bl	d4b58 <free>
    AllocatorT::free(data_);
}
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	bd70      	pop	{r4, r5, r6, pc}

000d4fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4fc2:	680b      	ldr	r3, [r1, #0]
   d4fc4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4fc6:	b113      	cbz	r3, d4fce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4fc8:	685a      	ldr	r2, [r3, #4]
   d4fca:	3201      	adds	r2, #1
   d4fcc:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4fce:	4770      	bx	lr

000d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4fd0:	b510      	push	{r4, lr}
   d4fd2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4fd4:	6800      	ldr	r0, [r0, #0]
   d4fd6:	b128      	cbz	r0, d4fe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4fd8:	6843      	ldr	r3, [r0, #4]
   d4fda:	3b01      	subs	r3, #1
   d4fdc:	6043      	str	r3, [r0, #4]
   d4fde:	b90b      	cbnz	r3, d4fe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4fe0:	f7ff ffbc 	bl	d4f5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	bd10      	pop	{r4, pc}

000d4fe8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4fe8:	b513      	push	{r0, r1, r4, lr}
   d4fea:	460b      	mov	r3, r1
   d4fec:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fee:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4ff2:	466c      	mov	r4, sp
   d4ff4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ff8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ffc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5000:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5004:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5008:	b002      	add	sp, #8
   d500a:	bd10      	pop	{r4, pc}

000d500c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d500c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d500e:	4c06      	ldr	r4, [pc, #24]	; (d5028 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5010:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5012:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5014:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5016:	f7ff fb99 	bl	d474c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d501a:	4620      	mov	r0, r4
   d501c:	4a03      	ldr	r2, [pc, #12]	; (d502c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d501e:	4904      	ldr	r1, [pc, #16]	; (d5030 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5024:	f002 b8ec 	b.w	d7200 <__aeabi_atexit>
   d5028:	2003e5fc 	.word	0x2003e5fc
   d502c:	2003e580 	.word	0x2003e580
   d5030:	000d4f7d 	.word	0x000d4f7d

000d5034 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5036:	4606      	mov	r6, r0
   d5038:	460d      	mov	r5, r1
  size_t n = 0;
   d503a:	188f      	adds	r7, r1, r2
   d503c:	2400      	movs	r4, #0
  while (size--) {
   d503e:	42bd      	cmp	r5, r7
   d5040:	d00c      	beq.n	d505c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5042:	6833      	ldr	r3, [r6, #0]
   d5044:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5048:	689b      	ldr	r3, [r3, #8]
   d504a:	4630      	mov	r0, r6
   d504c:	4798      	blx	r3
     if (chunk>=0)
   d504e:	1e03      	subs	r3, r0, #0
   d5050:	db01      	blt.n	d5056 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5052:	441c      	add	r4, r3
  while (size--) {
   d5054:	e7f3      	b.n	d503e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5056:	2c00      	cmp	r4, #0
   d5058:	bf08      	it	eq
   d505a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d505c:	4620      	mov	r0, r4
   d505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5060 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5060:	b513      	push	{r0, r1, r4, lr}
   d5062:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5064:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5066:	b159      	cbz	r1, d5080 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5068:	9101      	str	r1, [sp, #4]
   d506a:	f002 f980 	bl	d736e <strlen>
   d506e:	6823      	ldr	r3, [r4, #0]
   d5070:	9901      	ldr	r1, [sp, #4]
   d5072:	68db      	ldr	r3, [r3, #12]
   d5074:	4602      	mov	r2, r0
   d5076:	4620      	mov	r0, r4
    }
   d5078:	b002      	add	sp, #8
   d507a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d507e:	4718      	bx	r3
    }
   d5080:	b002      	add	sp, #8
   d5082:	bd10      	pop	{r4, pc}

000d5084 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5084:	6803      	ldr	r3, [r0, #0]
   d5086:	689b      	ldr	r3, [r3, #8]
   d5088:	4718      	bx	r3

000d508a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d508a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d508c:	210d      	movs	r1, #13
{
   d508e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5090:	f7ff fff8 	bl	d5084 <_ZN5Print5printEc>
  n += print('\n');
   d5094:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5096:	4604      	mov	r4, r0
  n += print('\n');
   d5098:	4628      	mov	r0, r5
   d509a:	f7ff fff3 	bl	d5084 <_ZN5Print5printEc>
  return n;
}
   d509e:	4420      	add	r0, r4
   d50a0:	bd38      	pop	{r3, r4, r5, pc}

000d50a2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50a2:	b530      	push	{r4, r5, lr}
   d50a4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50a6:	2300      	movs	r3, #0
   d50a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50ac:	2a01      	cmp	r2, #1
   d50ae:	bf98      	it	ls
   d50b0:	220a      	movls	r2, #10
   d50b2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d50b4:	460d      	mov	r5, r1
   d50b6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d50ba:	fb01 5312 	mls	r3, r1, r2, r5
   d50be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50c2:	2b09      	cmp	r3, #9
   d50c4:	bf94      	ite	ls
   d50c6:	3330      	addls	r3, #48	; 0x30
   d50c8:	3337      	addhi	r3, #55	; 0x37
   d50ca:	b2db      	uxtb	r3, r3
  } while(n);
   d50cc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50ce:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d50d2:	d9ef      	bls.n	d50b4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d50d4:	4621      	mov	r1, r4
   d50d6:	f7ff ffc3 	bl	d5060 <_ZN5Print5writeEPKc>
}
   d50da:	b00b      	add	sp, #44	; 0x2c
   d50dc:	bd30      	pop	{r4, r5, pc}

000d50de <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d50de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d50e2:	b086      	sub	sp, #24
   d50e4:	af00      	add	r7, sp, #0
   d50e6:	4605      	mov	r5, r0
   d50e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d50ea:	1d38      	adds	r0, r7, #4
   d50ec:	2114      	movs	r1, #20
{
   d50ee:	4614      	mov	r4, r2
    va_copy(args2, args);
   d50f0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d50f2:	f7ff fd49 	bl	d4b88 <vsnprintf>

    if (n<bufsize)
   d50f6:	2813      	cmp	r0, #19
   d50f8:	d80e      	bhi.n	d5118 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d50fa:	1d39      	adds	r1, r7, #4
   d50fc:	4628      	mov	r0, r5
   d50fe:	f7ff ffaf 	bl	d5060 <_ZN5Print5writeEPKc>
   d5102:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5104:	b11e      	cbz	r6, d510e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5106:	4628      	mov	r0, r5
   d5108:	f7ff ffbf 	bl	d508a <_ZN5Print7printlnEv>
   d510c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d510e:	4620      	mov	r0, r4
   d5110:	3718      	adds	r7, #24
   d5112:	46bd      	mov	sp, r7
   d5114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5118:	f100 0308 	add.w	r3, r0, #8
   d511c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5120:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5122:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5126:	4622      	mov	r2, r4
   d5128:	1c41      	adds	r1, r0, #1
   d512a:	683b      	ldr	r3, [r7, #0]
   d512c:	4668      	mov	r0, sp
   d512e:	f7ff fd2b 	bl	d4b88 <vsnprintf>
  return write(str);
   d5132:	4669      	mov	r1, sp
   d5134:	4628      	mov	r0, r5
   d5136:	f7ff ff93 	bl	d5060 <_ZN5Print5writeEPKc>
   d513a:	4604      	mov	r4, r0
   d513c:	46c5      	mov	sp, r8
   d513e:	e7e1      	b.n	d5104 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5140 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5140:	6880      	ldr	r0, [r0, #8]
   d5142:	6803      	ldr	r3, [r0, #0]
   d5144:	68db      	ldr	r3, [r3, #12]
   d5146:	4718      	bx	r3

000d5148 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d5148:	4770      	bx	lr

000d514a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d514a:	4608      	mov	r0, r1
   d514c:	b111      	cbz	r1, d5154 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d514e:	680b      	ldr	r3, [r1, #0]
   d5150:	685b      	ldr	r3, [r3, #4]
   d5152:	4718      	bx	r3
}
   d5154:	4770      	bx	lr

000d5156 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5156:	4770      	bx	lr

000d5158 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5158:	4770      	bx	lr

000d515a <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d515a:	4770      	bx	lr

000d515c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d515c:	b538      	push	{r3, r4, r5, lr}
   d515e:	4604      	mov	r4, r0
   d5160:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5162:	6800      	ldr	r0, [r0, #0]
   d5164:	212e      	movs	r1, #46	; 0x2e
   d5166:	f002 f8c8 	bl	d72fa <strchrnul>
    size = s - category;
   d516a:	6823      	ldr	r3, [r4, #0]
   d516c:	1ac3      	subs	r3, r0, r3
   d516e:	602b      	str	r3, [r5, #0]
    if (size) {
   d5170:	b123      	cbz	r3, d517c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5172:	7803      	ldrb	r3, [r0, #0]
   d5174:	b103      	cbz	r3, d5178 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5176:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   d5178:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d517a:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d517c:	4618      	mov	r0, r3
   d517e:	bd38      	pop	{r3, r4, r5, pc}

000d5180 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5180:	b510      	push	{r4, lr}
   d5182:	210c      	movs	r1, #12
   d5184:	4604      	mov	r4, r0
   d5186:	f002 f840 	bl	d720a <_ZdlPvj>
   d518a:	4620      	mov	r0, r4
   d518c:	bd10      	pop	{r4, pc}

000d518e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d518e:	b510      	push	{r4, lr}
   d5190:	2104      	movs	r1, #4
   d5192:	4604      	mov	r4, r0
   d5194:	f002 f839 	bl	d720a <_ZdlPvj>
   d5198:	4620      	mov	r0, r4
   d519a:	bd10      	pop	{r4, pc}

000d519c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d519c:	b510      	push	{r4, lr}
   d519e:	2104      	movs	r1, #4
   d51a0:	4604      	mov	r4, r0
   d51a2:	f002 f832 	bl	d720a <_ZdlPvj>
   d51a6:	4620      	mov	r0, r4
   d51a8:	bd10      	pop	{r4, pc}

000d51aa <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d51aa:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d51ac:	f002 f8af 	bl	d730e <strcmp>
}
   d51b0:	fab0 f080 	clz	r0, r0
   d51b4:	0940      	lsrs	r0, r0, #5
   d51b6:	bd08      	pop	{r3, pc}

000d51b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d51b8:	b510      	push	{r4, lr}
   d51ba:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d51bc:	f001 fb90 	bl	d68e0 <_Z16_fetch_usbserialv>
   d51c0:	4284      	cmp	r4, r0
   d51c2:	d010      	beq.n	d51e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d51c4:	f001 fc60 	bl	d6a88 <_Z22__fetch_global_Serial1v>
   d51c8:	4284      	cmp	r4, r0
   d51ca:	d105      	bne.n	d51d8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d51cc:	f001 fc5c 	bl	d6a88 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d51d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d51d4:	f001 bc55 	b.w	d6a82 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d51d8:	b12c      	cbz	r4, d51e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d51da:	6823      	ldr	r3, [r4, #0]
   d51dc:	4620      	mov	r0, r4
   d51de:	685b      	ldr	r3, [r3, #4]
}
   d51e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d51e4:	4718      	bx	r3
   d51e6:	bd10      	pop	{r4, pc}

000d51e8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d51e8:	b513      	push	{r0, r1, r4, lr}
   d51ea:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d51ec:	4608      	mov	r0, r1
   d51ee:	9101      	str	r1, [sp, #4]
   d51f0:	f002 f8bd 	bl	d736e <strlen>
   d51f4:	9901      	ldr	r1, [sp, #4]
   d51f6:	4602      	mov	r2, r0
   d51f8:	4620      	mov	r0, r4
}
   d51fa:	b002      	add	sp, #8
   d51fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d5200:	f001 bf4c 	b.w	d709c <_ZN5spark10JSONWriter5valueEPKcj>

000d5204 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d5204:	b513      	push	{r0, r1, r4, lr}
   d5206:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5208:	4608      	mov	r0, r1
   d520a:	9101      	str	r1, [sp, #4]
   d520c:	f002 f8af 	bl	d736e <strlen>
   d5210:	6823      	ldr	r3, [r4, #0]
   d5212:	9901      	ldr	r1, [sp, #4]
   d5214:	68db      	ldr	r3, [r3, #12]
   d5216:	4602      	mov	r2, r0
   d5218:	4620      	mov	r0, r4
}
   d521a:	b002      	add	sp, #8
   d521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d5220:	4718      	bx	r3

000d5222 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d5222:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5224:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d5226:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d522a:	68db      	ldr	r3, [r3, #12]
   d522c:	2201      	movs	r2, #1
   d522e:	f10d 0107 	add.w	r1, sp, #7
   d5232:	4798      	blx	r3
}
   d5234:	b003      	add	sp, #12
   d5236:	f85d fb04 	ldr.w	pc, [sp], #4

000d523a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d523a:	b40e      	push	{r1, r2, r3}
   d523c:	b503      	push	{r0, r1, lr}
   d523e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d5240:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5242:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d5246:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d5248:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d524a:	f7ff ff48 	bl	d50de <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d524e:	b002      	add	sp, #8
   d5250:	f85d eb04 	ldr.w	lr, [sp], #4
   d5254:	b003      	add	sp, #12
   d5256:	4770      	bx	lr

000d5258 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d525c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d5260:	f04f 0814 	mov.w	r8, #20
   d5264:	fb08 f505 	mul.w	r5, r8, r5
   d5268:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d526a:	10ab      	asrs	r3, r5, #2
   d526c:	4d18      	ldr	r5, [pc, #96]	; (d52d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d526e:	4617      	mov	r7, r2
   d5270:	435d      	muls	r5, r3
   d5272:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5274:	2d00      	cmp	r5, #0
   d5276:	dd23      	ble.n	d52c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5278:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d527a:	fb08 f006 	mul.w	r0, r8, r6
   d527e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5282:	463a      	mov	r2, r7
   d5284:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5288:	5820      	ldr	r0, [r4, r0]
   d528a:	9101      	str	r1, [sp, #4]
   d528c:	455f      	cmp	r7, fp
   d528e:	bf28      	it	cs
   d5290:	465a      	movcs	r2, fp
   d5292:	f002 f874 	bl	d737e <strncmp>
                if (cmp == 0) {
   d5296:	9901      	ldr	r1, [sp, #4]
   d5298:	2301      	movs	r3, #1
   d529a:	b978      	cbnz	r0, d52bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d529c:	455f      	cmp	r7, fp
   d529e:	d103      	bne.n	d52a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d52a0:	9a00      	ldr	r2, [sp, #0]
   d52a2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d52a4:	4635      	mov	r5, r6
   d52a6:	e7e5      	b.n	d5274 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d52a8:	bf8c      	ite	hi
   d52aa:	2001      	movhi	r0, #1
   d52ac:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d52ae:	2800      	cmp	r0, #0
   d52b0:	d0f8      	beq.n	d52a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d52b2:	1bae      	subs	r6, r5, r6
	      ++__first;
   d52b4:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d52b8:	3e01      	subs	r6, #1
   d52ba:	e7f3      	b.n	d52a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d52bc:	0fc0      	lsrs	r0, r0, #31
   d52be:	e7f6      	b.n	d52ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d52c0:	eba4 0409 	sub.w	r4, r4, r9
}
   d52c4:	4802      	ldr	r0, [pc, #8]	; (d52d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d52c6:	10a4      	asrs	r4, r4, #2
   d52c8:	4360      	muls	r0, r4
   d52ca:	b003      	add	sp, #12
   d52cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d52d0:	cccccccd 	.word	0xcccccccd

000d52d4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d52d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d52d6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d52d8:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d52da:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d52dc:	b30b      	cbz	r3, d5322 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d52de:	b301      	cbz	r1, d5322 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d52e0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d52e2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d52e6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d52e8:	a903      	add	r1, sp, #12
   d52ea:	a801      	add	r0, sp, #4
   d52ec:	f7ff ff36 	bl	d515c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d52f0:	4601      	mov	r1, r0
   d52f2:	b1b0      	cbz	r0, d5322 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d52f4:	f10d 030b 	add.w	r3, sp, #11
   d52f8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d52fa:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d52fe:	4620      	mov	r0, r4
   d5300:	f7ff ffaa 	bl	d5258 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5304:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5308:	b15b      	cbz	r3, d5322 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d530a:	6824      	ldr	r4, [r4, #0]
   d530c:	2314      	movs	r3, #20
   d530e:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d5312:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d5316:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d531a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d531c:	bfa8      	it	ge
   d531e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d5320:	e7e2      	b.n	d52e8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d5322:	4630      	mov	r0, r6
   d5324:	b004      	add	sp, #16
   d5326:	bd70      	pop	{r4, r5, r6, pc}

000d5328 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5328:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d532a:	4c0a      	ldr	r4, [pc, #40]	; (d5354 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d532c:	7823      	ldrb	r3, [r4, #0]
   d532e:	f3bf 8f5b 	dmb	ish
   d5332:	07db      	lsls	r3, r3, #31
   d5334:	d40b      	bmi.n	d534e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d5336:	4620      	mov	r0, r4
   d5338:	f7fe febc 	bl	d40b4 <__cxa_guard_acquire>
   d533c:	b138      	cbz	r0, d534e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d533e:	4620      	mov	r0, r4
   d5340:	f7fe febd 	bl	d40be <__cxa_guard_release>
   d5344:	4a04      	ldr	r2, [pc, #16]	; (d5358 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5346:	4905      	ldr	r1, [pc, #20]	; (d535c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5348:	4805      	ldr	r0, [pc, #20]	; (d5360 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d534a:	f001 ff59 	bl	d7200 <__aeabi_atexit>
}
   d534e:	4804      	ldr	r0, [pc, #16]	; (d5360 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d5350:	bd10      	pop	{r4, pc}
   d5352:	bf00      	nop
   d5354:	2003e604 	.word	0x2003e604
   d5358:	2003e580 	.word	0x2003e580
   d535c:	000d5159 	.word	0x000d5159
   d5360:	2003e510 	.word	0x2003e510

000d5364 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5364:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5366:	4c0a      	ldr	r4, [pc, #40]	; (d5390 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5368:	7823      	ldrb	r3, [r4, #0]
   d536a:	f3bf 8f5b 	dmb	ish
   d536e:	07db      	lsls	r3, r3, #31
   d5370:	d40b      	bmi.n	d538a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d5372:	4620      	mov	r0, r4
   d5374:	f7fe fe9e 	bl	d40b4 <__cxa_guard_acquire>
   d5378:	b138      	cbz	r0, d538a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d537a:	4620      	mov	r0, r4
   d537c:	f7fe fe9f 	bl	d40be <__cxa_guard_release>
   d5380:	4a04      	ldr	r2, [pc, #16]	; (d5394 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5382:	4905      	ldr	r1, [pc, #20]	; (d5398 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5384:	4805      	ldr	r0, [pc, #20]	; (d539c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5386:	f001 ff3b 	bl	d7200 <__aeabi_atexit>
    return &factory;
}
   d538a:	4804      	ldr	r0, [pc, #16]	; (d539c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d538c:	bd10      	pop	{r4, pc}
   d538e:	bf00      	nop
   d5390:	2003e608 	.word	0x2003e608
   d5394:	2003e580 	.word	0x2003e580
   d5398:	000d5157 	.word	0x000d5157
   d539c:	2003e514 	.word	0x2003e514

000d53a0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d53a0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d53a2:	2500      	movs	r5, #0
   d53a4:	4604      	mov	r4, r0
   d53a6:	e9c0 5500 	strd	r5, r5, [r0]
   d53aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d53ae:	6085      	str	r5, [r0, #8]
   d53b0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d53b2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d53b6:	f7ff f9c9 	bl	d474c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d53ba:	f7ff ffb5 	bl	d5328 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d53be:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d53c0:	f7ff ffd0 	bl	d5364 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d53c4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d53c6:	6220      	str	r0, [r4, #32]
}
   d53c8:	4620      	mov	r0, r4
   d53ca:	bd38      	pop	{r3, r4, r5, pc}

000d53cc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d53cc:	b510      	push	{r4, lr}
    static LogManager mgr;
   d53ce:	4c0b      	ldr	r4, [pc, #44]	; (d53fc <_ZN5spark10LogManager8instanceEv+0x30>)
   d53d0:	7823      	ldrb	r3, [r4, #0]
   d53d2:	f3bf 8f5b 	dmb	ish
   d53d6:	07db      	lsls	r3, r3, #31
   d53d8:	d40e      	bmi.n	d53f8 <_ZN5spark10LogManager8instanceEv+0x2c>
   d53da:	4620      	mov	r0, r4
   d53dc:	f7fe fe6a 	bl	d40b4 <__cxa_guard_acquire>
   d53e0:	b150      	cbz	r0, d53f8 <_ZN5spark10LogManager8instanceEv+0x2c>
   d53e2:	4807      	ldr	r0, [pc, #28]	; (d5400 <_ZN5spark10LogManager8instanceEv+0x34>)
   d53e4:	f7ff ffdc 	bl	d53a0 <_ZN5spark10LogManagerC1Ev>
   d53e8:	4620      	mov	r0, r4
   d53ea:	f7fe fe68 	bl	d40be <__cxa_guard_release>
   d53ee:	4a05      	ldr	r2, [pc, #20]	; (d5404 <_ZN5spark10LogManager8instanceEv+0x38>)
   d53f0:	4905      	ldr	r1, [pc, #20]	; (d5408 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d53f2:	4803      	ldr	r0, [pc, #12]	; (d5400 <_ZN5spark10LogManager8instanceEv+0x34>)
   d53f4:	f001 ff04 	bl	d7200 <__aeabi_atexit>
    return &mgr;
}
   d53f8:	4801      	ldr	r0, [pc, #4]	; (d5400 <_ZN5spark10LogManager8instanceEv+0x34>)
   d53fa:	bd10      	pop	{r4, pc}
   d53fc:	2003e600 	.word	0x2003e600
   d5400:	2003e610 	.word	0x2003e610
   d5404:	2003e580 	.word	0x2003e580
   d5408:	000d583d 	.word	0x000d583d

000d540c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d540c:	4a02      	ldr	r2, [pc, #8]	; (d5418 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d540e:	4903      	ldr	r1, [pc, #12]	; (d541c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5410:	4803      	ldr	r0, [pc, #12]	; (d5420 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5412:	2300      	movs	r3, #0
   d5414:	f7ff baba 	b.w	d498c <log_set_callbacks>
   d5418:	000d5719 	.word	0x000d5719
   d541c:	000d56a5 	.word	0x000d56a5
   d5420:	000d5625 	.word	0x000d5625

000d5424 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5424:	2300      	movs	r3, #0
   d5426:	461a      	mov	r2, r3
   d5428:	4619      	mov	r1, r3
   d542a:	4618      	mov	r0, r3
   d542c:	f7ff baae 	b.w	d498c <log_set_callbacks>

000d5430 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5430:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d5432:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5434:	f851 3b04 	ldr.w	r3, [r1], #4
   d5438:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d543a:	4604      	mov	r4, r0
   d543c:	a801      	add	r0, sp, #4
   d543e:	f7ff fdc0 	bl	d4fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5442:	466a      	mov	r2, sp
   d5444:	4629      	mov	r1, r5
   d5446:	4620      	mov	r0, r4
   d5448:	f001 fcd2 	bl	d6df0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d544c:	a801      	add	r0, sp, #4
   d544e:	f7ff fdbf 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5452:	4620      	mov	r0, r4
   d5454:	b003      	add	sp, #12
   d5456:	bd30      	pop	{r4, r5, pc}

000d5458 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5458:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d545a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d545c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5460:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5462:	4604      	mov	r4, r0
   d5464:	a801      	add	r0, sp, #4
   d5466:	f7ff fdac 	bl	d4fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d546a:	466a      	mov	r2, sp
   d546c:	4629      	mov	r1, r5
   d546e:	4620      	mov	r0, r4
   d5470:	f001 fd3a 	bl	d6ee8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5474:	a801      	add	r0, sp, #4
   d5476:	f7ff fdab 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d547a:	4620      	mov	r0, r4
   d547c:	b003      	add	sp, #12
   d547e:	bd30      	pop	{r4, r5, pc}

000d5480 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5480:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d5482:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5484:	f851 3b04 	ldr.w	r3, [r1], #4
   d5488:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d548a:	4604      	mov	r4, r0
   d548c:	a801      	add	r0, sp, #4
   d548e:	f7ff fd98 	bl	d4fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5492:	466a      	mov	r2, sp
   d5494:	4629      	mov	r1, r5
   d5496:	4620      	mov	r0, r4
   d5498:	f001 fd02 	bl	d6ea0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d549c:	a801      	add	r0, sp, #4
   d549e:	f7ff fd97 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d54a2:	4620      	mov	r0, r4
   d54a4:	b003      	add	sp, #12
   d54a6:	bd30      	pop	{r4, r5, pc}

000d54a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d54a8:	b570      	push	{r4, r5, r6, lr}
   d54aa:	b08a      	sub	sp, #40	; 0x28
   d54ac:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d54ae:	4601      	mov	r1, r0
   d54b0:	a804      	add	r0, sp, #16
   d54b2:	f7ff ffd1 	bl	d5458 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d54b6:	4e14      	ldr	r6, [pc, #80]	; (d5508 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d54b8:	a804      	add	r0, sp, #16
   d54ba:	f001 fd2d 	bl	d6f18 <_ZN5spark18JSONObjectIterator4nextEv>
   d54be:	b1e8      	cbz	r0, d54fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d54c0:	a904      	add	r1, sp, #16
   d54c2:	4668      	mov	r0, sp
   d54c4:	f7ff ffdc 	bl	d5480 <_ZNK5spark18JSONObjectIterator4nameEv>
   d54c8:	9802      	ldr	r0, [sp, #8]
   d54ca:	4631      	mov	r1, r6
   d54cc:	f7ff fe6d 	bl	d51aa <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d54d0:	4604      	mov	r4, r0
   d54d2:	b110      	cbz	r0, d54da <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d54d4:	1e2c      	subs	r4, r5, #0
   d54d6:	bf18      	it	ne
   d54d8:	2401      	movne	r4, #1
   d54da:	a801      	add	r0, sp, #4
   d54dc:	f7ff fd78 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54e0:	2c00      	cmp	r4, #0
   d54e2:	d0e9      	beq.n	d54b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d54e4:	a904      	add	r1, sp, #16
   d54e6:	4668      	mov	r0, sp
   d54e8:	f7ff ffa2 	bl	d5430 <_ZNK5spark18JSONObjectIterator5valueEv>
   d54ec:	4668      	mov	r0, sp
   d54ee:	f001 fcb5 	bl	d6e5c <_ZNK5spark9JSONValue5toIntEv>
   d54f2:	6028      	str	r0, [r5, #0]
   d54f4:	a801      	add	r0, sp, #4
   d54f6:	f7ff fd6b 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54fa:	e7dd      	b.n	d54b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d54fc:	a805      	add	r0, sp, #20
   d54fe:	f7ff fd67 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5502:	b00a      	add	sp, #40	; 0x28
   d5504:	bd70      	pop	{r4, r5, r6, pc}
   d5506:	bf00      	nop
   d5508:	000d75b6 	.word	0x000d75b6

000d550c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d550c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d550e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d5510:	4620      	mov	r0, r4
   d5512:	4912      	ldr	r1, [pc, #72]	; (d555c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5514:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d5516:	f001 fefa 	bl	d730e <strcmp>
   d551a:	b948      	cbnz	r0, d5530 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d551c:	f001 f9e0 	bl	d68e0 <_Z16_fetch_usbserialv>
   d5520:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5524:	f001 f9cc 	bl	d68c0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5528:	f001 f9da 	bl	d68e0 <_Z16_fetch_usbserialv>
}
   d552c:	b003      	add	sp, #12
   d552e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d5530:	490b      	ldr	r1, [pc, #44]	; (d5560 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d5532:	4620      	mov	r0, r4
   d5534:	f001 feeb 	bl	d730e <strcmp>
   d5538:	b970      	cbnz	r0, d5558 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d553a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d553e:	a901      	add	r1, sp, #4
   d5540:	4628      	mov	r0, r5
        int baud = 9600;
   d5542:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d5544:	f7ff ffb0 	bl	d54a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5548:	f001 fa9e 	bl	d6a88 <_Z22__fetch_global_Serial1v>
   d554c:	9901      	ldr	r1, [sp, #4]
   d554e:	f001 fa95 	bl	d6a7c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5552:	f001 fa99 	bl	d6a88 <_Z22__fetch_global_Serial1v>
   d5556:	e7e9      	b.n	d552c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5558:	2000      	movs	r0, #0
   d555a:	e7e7      	b.n	d552c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d555c:	000d75bb 	.word	0x000d75bb
   d5560:	000d75c2 	.word	0x000d75c2

000d5564 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5564:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5566:	e9d0 5300 	ldrd	r5, r3, [r0]
   d556a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d556c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d556e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5572:	42ae      	cmp	r6, r5
   d5574:	d005      	beq.n	d5582 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d5576:	f105 0008 	add.w	r0, r5, #8
   d557a:	f7ff fff3 	bl	d5564 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d557e:	3514      	adds	r5, #20
   d5580:	e7f7      	b.n	d5572 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5582:	6820      	ldr	r0, [r4, #0]
   d5584:	f7ff fae8 	bl	d4b58 <free>
}
   d5588:	4620      	mov	r0, r4
   d558a:	bd70      	pop	{r4, r5, r6, pc}

000d558c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d558c:	b510      	push	{r4, lr}
   d558e:	4604      	mov	r4, r0
   d5590:	300c      	adds	r0, #12
   d5592:	f7ff ffe7 	bl	d5564 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5596:	4620      	mov	r0, r4
   d5598:	f7ff fd01 	bl	d4f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d559c:	4620      	mov	r0, r4
   d559e:	bd10      	pop	{r4, pc}

000d55a0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d55a0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d55a2:	4b04      	ldr	r3, [pc, #16]	; (d55b4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d55a4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d55a6:	f840 3b04 	str.w	r3, [r0], #4
   d55aa:	f7ff ffef 	bl	d558c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d55ae:	4620      	mov	r0, r4
   d55b0:	bd10      	pop	{r4, pc}
   d55b2:	bf00      	nop
   d55b4:	000d750c 	.word	0x000d750c

000d55b8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d55b8:	b510      	push	{r4, lr}
   d55ba:	4604      	mov	r4, r0
   d55bc:	f7ff fff0 	bl	d55a0 <_ZN5spark16StreamLogHandlerD1Ev>
   d55c0:	4620      	mov	r0, r4
   d55c2:	2124      	movs	r1, #36	; 0x24
   d55c4:	f001 fe21 	bl	d720a <_ZdlPvj>
   d55c8:	4620      	mov	r0, r4
   d55ca:	bd10      	pop	{r4, pc}

000d55cc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d55cc:	b510      	push	{r4, lr}
   d55ce:	4b03      	ldr	r3, [pc, #12]	; (d55dc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d55d0:	6003      	str	r3, [r0, #0]
   d55d2:	4604      	mov	r4, r0
   d55d4:	f7ff ffe4 	bl	d55a0 <_ZN5spark16StreamLogHandlerD1Ev>
   d55d8:	4620      	mov	r0, r4
   d55da:	bd10      	pop	{r4, pc}
   d55dc:	000d7664 	.word	0x000d7664

000d55e0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d55e0:	b510      	push	{r4, lr}
   d55e2:	4604      	mov	r4, r0
   d55e4:	f7ff fff2 	bl	d55cc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d55e8:	4620      	mov	r0, r4
   d55ea:	2124      	movs	r1, #36	; 0x24
   d55ec:	f001 fe0d 	bl	d720a <_ZdlPvj>
   d55f0:	4620      	mov	r0, r4
   d55f2:	bd10      	pop	{r4, pc}

000d55f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d55f4:	2200      	movs	r2, #0
   d55f6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d55fa:	b510      	push	{r4, lr}
        capacity_(0) {
   d55fc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d55fe:	680c      	ldr	r4, [r1, #0]
   d5600:	6004      	str	r4, [r0, #0]
   d5602:	684c      	ldr	r4, [r1, #4]
   d5604:	6044      	str	r4, [r0, #4]
   d5606:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5608:	600a      	str	r2, [r1, #0]
   d560a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d560c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d560e:	608a      	str	r2, [r1, #8]
}
   d5610:	bd10      	pop	{r4, pc}

000d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5612:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5614:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d5616:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5618:	6818      	ldr	r0, [r3, #0]
   d561a:	f7ff f8af 	bl	d477c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d561e:	4620      	mov	r0, r4
   d5620:	bd10      	pop	{r4, pc}
	...

000d5624 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5628:	b087      	sub	sp, #28
   d562a:	4680      	mov	r8, r0
   d562c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d562e:	4b1c      	ldr	r3, [pc, #112]	; (d56a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d5630:	685b      	ldr	r3, [r3, #4]
   d5632:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5636:	4689      	mov	r9, r1
   d5638:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d563a:	b96b      	cbnz	r3, d5658 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d563c:	f7ff fec6 	bl	d53cc <_ZN5spark10LogManager8instanceEv>
   d5640:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5642:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5646:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5648:	9305      	str	r3, [sp, #20]
   d564a:	f7ff f88f 	bl	d476c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d564e:	7b23      	ldrb	r3, [r4, #12]
   d5650:	b12b      	cbz	r3, d565e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d5652:	a805      	add	r0, sp, #20
   d5654:	f7ff ffdd 	bl	d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5658:	b007      	add	sp, #28
   d565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d565e:	2301      	movs	r3, #1
   d5660:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d5662:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5666:	fa5f f989 	uxtb.w	r9, r9
   d566a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d566e:	45aa      	cmp	sl, r5
   d5670:	d012      	beq.n	d5698 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d5672:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5676:	4631      	mov	r1, r6
   d5678:	1d38      	adds	r0, r7, #4
   d567a:	f7ff fe2b 	bl	d52d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d567e:	4581      	cmp	r9, r0
   d5680:	d3f5      	bcc.n	d566e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d5682:	683b      	ldr	r3, [r7, #0]
   d5684:	9a03      	ldr	r2, [sp, #12]
   d5686:	9200      	str	r2, [sp, #0]
   d5688:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d568c:	464a      	mov	r2, r9
   d568e:	4633      	mov	r3, r6
   d5690:	4641      	mov	r1, r8
   d5692:	4638      	mov	r0, r7
   d5694:	47d8      	blx	fp
   d5696:	e7ea      	b.n	d566e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5698:	2300      	movs	r3, #0
   d569a:	7323      	strb	r3, [r4, #12]
   d569c:	e7d9      	b.n	d5652 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d569e:	bf00      	nop
   d56a0:	e000ed00 	.word	0xe000ed00

000d56a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d56a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56a8:	469b      	mov	fp, r3
   d56aa:	4b1a      	ldr	r3, [pc, #104]	; (d5714 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d56ac:	685b      	ldr	r3, [r3, #4]
   d56ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d56b2:	4680      	mov	r8, r0
   d56b4:	4689      	mov	r9, r1
   d56b6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d56b8:	b96b      	cbnz	r3, d56d6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d56ba:	f7ff fe87 	bl	d53cc <_ZN5spark10LogManager8instanceEv>
   d56be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d56c0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d56c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d56c6:	9301      	str	r3, [sp, #4]
   d56c8:	f7ff f850 	bl	d476c <os_mutex_recursive_lock>
        if (that->isActive()) {
   d56cc:	7b23      	ldrb	r3, [r4, #12]
   d56ce:	b12b      	cbz	r3, d56dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d56d0:	a801      	add	r0, sp, #4
   d56d2:	f7ff ff9e 	bl	d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d56d6:	b003      	add	sp, #12
   d56d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d56dc:	2301      	movs	r3, #1
   d56de:	7323      	strb	r3, [r4, #12]
   d56e0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d56e4:	b2f6      	uxtb	r6, r6
   d56e6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d56ea:	4555      	cmp	r5, sl
   d56ec:	d00e      	beq.n	d570c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d56ee:	f855 7b04 	ldr.w	r7, [r5], #4
   d56f2:	4659      	mov	r1, fp
   d56f4:	1d38      	adds	r0, r7, #4
   d56f6:	f7ff fded 	bl	d52d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d56fa:	4286      	cmp	r6, r0
   d56fc:	d3f5      	bcc.n	d56ea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d56fe:	683b      	ldr	r3, [r7, #0]
   d5700:	464a      	mov	r2, r9
   d5702:	68db      	ldr	r3, [r3, #12]
   d5704:	4641      	mov	r1, r8
   d5706:	4638      	mov	r0, r7
   d5708:	4798      	blx	r3
   d570a:	e7ee      	b.n	d56ea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d570c:	2300      	movs	r3, #0
   d570e:	7323      	strb	r3, [r4, #12]
   d5710:	e7de      	b.n	d56d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d5712:	bf00      	nop
   d5714:	e000ed00 	.word	0xe000ed00

000d5718 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d571c:	4b16      	ldr	r3, [pc, #88]	; (d5778 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d571e:	685b      	ldr	r3, [r3, #4]
   d5720:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5724:	4605      	mov	r5, r0
   d5726:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d5728:	bb1b      	cbnz	r3, d5772 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d572a:	f7ff fe4f 	bl	d53cc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d572e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d5732:	4604      	mov	r4, r0
   d5734:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5736:	9301      	str	r3, [sp, #4]
   d5738:	f7ff f818 	bl	d476c <os_mutex_recursive_lock>
   d573c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d5740:	2446      	movs	r4, #70	; 0x46
   d5742:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5746:	45b0      	cmp	r8, r6
   d5748:	d109      	bne.n	d575e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d574a:	a801      	add	r0, sp, #4
   d574c:	f7ff ff61 	bl	d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d5750:	42a5      	cmp	r5, r4
   d5752:	bfb4      	ite	lt
   d5754:	2000      	movlt	r0, #0
   d5756:	2001      	movge	r0, #1
}
   d5758:	b002      	add	sp, #8
   d575a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d575e:	f856 0b04 	ldr.w	r0, [r6], #4
   d5762:	4639      	mov	r1, r7
   d5764:	3004      	adds	r0, #4
   d5766:	f7ff fdb5 	bl	d52d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d576a:	4284      	cmp	r4, r0
   d576c:	bfa8      	it	ge
   d576e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d5770:	e7e9      	b.n	d5746 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d5772:	2000      	movs	r0, #0
   d5774:	e7f0      	b.n	d5758 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5776:	bf00      	nop
   d5778:	e000ed00 	.word	0xe000ed00

000d577c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d577c:	b570      	push	{r4, r5, r6, lr}
   d577e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5780:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5784:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d5786:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d578a:	4282      	cmp	r2, r0
   d578c:	d007      	beq.n	d579e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d578e:	4601      	mov	r1, r0
            if (*p == value) {
   d5790:	681d      	ldr	r5, [r3, #0]
   d5792:	f851 6b04 	ldr.w	r6, [r1], #4
   d5796:	42ae      	cmp	r6, r5
   d5798:	d003      	beq.n	d57a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d579a:	4608      	mov	r0, r1
   d579c:	e7f5      	b.n	d578a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d579e:	2000      	movs	r0, #0
}
   d57a0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d57a2:	1a52      	subs	r2, r2, r1
   d57a4:	f001 fd56 	bl	d7254 <memmove>
    --size_;
   d57a8:	6863      	ldr	r3, [r4, #4]
   d57aa:	3b01      	subs	r3, #1
   d57ac:	6063      	str	r3, [r4, #4]
    return true;
   d57ae:	2001      	movs	r0, #1
   d57b0:	e7f6      	b.n	d57a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d57b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d57b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d57b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d57b8:	4604      	mov	r4, r0
   d57ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d57bc:	9101      	str	r1, [sp, #4]
   d57be:	9303      	str	r3, [sp, #12]
   d57c0:	f7fe ffd4 	bl	d476c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d57c4:	a901      	add	r1, sp, #4
   d57c6:	4620      	mov	r0, r4
   d57c8:	f7ff ffd8 	bl	d577c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d57cc:	b118      	cbz	r0, d57d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d57ce:	6863      	ldr	r3, [r4, #4]
   d57d0:	b90b      	cbnz	r3, d57d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d57d2:	f7ff fe27 	bl	d5424 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d57d6:	a803      	add	r0, sp, #12
   d57d8:	f7ff ff1b 	bl	d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d57dc:	b004      	add	sp, #16
   d57de:	bd10      	pop	{r4, pc}

000d57e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d57e0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d57e2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d57e6:	2318      	movs	r3, #24
   d57e8:	4604      	mov	r4, r0
   d57ea:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d57ee:	42ae      	cmp	r6, r5
   d57f0:	d015      	beq.n	d581e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d57f2:	f105 0110 	add.w	r1, r5, #16
   d57f6:	4620      	mov	r0, r4
   d57f8:	f7ff ffc0 	bl	d577c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d57fc:	6863      	ldr	r3, [r4, #4]
   d57fe:	b90b      	cbnz	r3, d5804 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5800:	f7ff fe10 	bl	d5424 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d5804:	69e0      	ldr	r0, [r4, #28]
   d5806:	6929      	ldr	r1, [r5, #16]
   d5808:	6803      	ldr	r3, [r0, #0]
   d580a:	68db      	ldr	r3, [r3, #12]
   d580c:	4798      	blx	r3
        if (h.stream) {
   d580e:	6969      	ldr	r1, [r5, #20]
   d5810:	b119      	cbz	r1, d581a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d5812:	6a20      	ldr	r0, [r4, #32]
   d5814:	6803      	ldr	r3, [r0, #0]
   d5816:	68db      	ldr	r3, [r3, #12]
   d5818:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d581a:	3518      	adds	r5, #24
   d581c:	e7e7      	b.n	d57ee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d581e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5822:	2618      	movs	r6, #24
   d5824:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5828:	42ae      	cmp	r6, r5
   d582a:	d004      	beq.n	d5836 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d582c:	4628      	mov	r0, r5
   d582e:	f7ff facb 	bl	d4dc8 <_ZN6StringD1Ev>
   d5832:	3518      	adds	r5, #24
   d5834:	e7f8      	b.n	d5828 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d5836:	2300      	movs	r3, #0
   d5838:	6163      	str	r3, [r4, #20]
}
   d583a:	bd70      	pop	{r4, r5, r6, pc}

000d583c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d583c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d583e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d5840:	f7ff fdf0 	bl	d5424 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5844:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d5848:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d584a:	9301      	str	r3, [sp, #4]
   d584c:	f7fe ff8e 	bl	d476c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d5850:	4620      	mov	r0, r4
   d5852:	f7ff ffc5 	bl	d57e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5856:	a801      	add	r0, sp, #4
   d5858:	f7ff fedb 	bl	d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d585c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d585e:	b108      	cbz	r0, d5864 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d5860:	f7fe ff7c 	bl	d475c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5864:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5868:	2618      	movs	r6, #24
   d586a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d586e:	42ae      	cmp	r6, r5
   d5870:	d004      	beq.n	d587c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d5872:	4628      	mov	r0, r5
   d5874:	f7ff faa8 	bl	d4dc8 <_ZN6StringD1Ev>
   d5878:	3518      	adds	r5, #24
   d587a:	e7f8      	b.n	d586e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d587c:	6920      	ldr	r0, [r4, #16]
   d587e:	f7ff f96b 	bl	d4b58 <free>
   d5882:	6820      	ldr	r0, [r4, #0]
   d5884:	f7ff f968 	bl	d4b58 <free>
}
   d5888:	4620      	mov	r0, r4
   d588a:	b002      	add	sp, #8
   d588c:	bd70      	pop	{r4, r5, r6, pc}

000d588e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d588e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5892:	4606      	mov	r6, r0
   d5894:	460c      	mov	r4, r1
   d5896:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5898:	d927      	bls.n	d58ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d589a:	4290      	cmp	r0, r2
   d589c:	d226      	bcs.n	d58ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d589e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d58a2:	1a6c      	subs	r4, r5, r1
   d58a4:	f1a1 0714 	sub.w	r7, r1, #20
   d58a8:	4404      	add	r4, r0
        capacity_(0) {
   d58aa:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d58ac:	42af      	cmp	r7, r5
   d58ae:	d03d      	beq.n	d592c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d58b0:	b1a4      	cbz	r4, d58dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d58b2:	682b      	ldr	r3, [r5, #0]
   d58b4:	6023      	str	r3, [r4, #0]
   d58b6:	88ab      	ldrh	r3, [r5, #4]
   d58b8:	80a3      	strh	r3, [r4, #4]
   d58ba:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d58be:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d58c0:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d58c4:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d58c6:	68ab      	ldr	r3, [r5, #8]
   d58c8:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d58ca:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d58ce:	68ea      	ldr	r2, [r5, #12]
   d58d0:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d58d2:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58d4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d58d6:	692a      	ldr	r2, [r5, #16]
   d58d8:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d58da:	612b      	str	r3, [r5, #16]
   d58dc:	f105 0008 	add.w	r0, r5, #8
   d58e0:	f7ff fe40 	bl	d5564 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d58e4:	3d14      	subs	r5, #20
   d58e6:	3c14      	subs	r4, #20
   d58e8:	e7e0      	b.n	d58ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d58ea:	d01f      	beq.n	d592c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d58ec:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d58ee:	42ac      	cmp	r4, r5
   d58f0:	d01c      	beq.n	d592c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d58f2:	b1a6      	cbz	r6, d591e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d58f4:	6823      	ldr	r3, [r4, #0]
   d58f6:	6033      	str	r3, [r6, #0]
   d58f8:	88a3      	ldrh	r3, [r4, #4]
   d58fa:	80b3      	strh	r3, [r6, #4]
   d58fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5900:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d5902:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d5906:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5908:	68a3      	ldr	r3, [r4, #8]
   d590a:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d590c:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d590e:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5910:	68e2      	ldr	r2, [r4, #12]
   d5912:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5914:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5916:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5918:	6922      	ldr	r2, [r4, #16]
   d591a:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d591c:	6123      	str	r3, [r4, #16]
   d591e:	f104 0008 	add.w	r0, r4, #8
   d5922:	f7ff fe1f 	bl	d5564 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5926:	3414      	adds	r4, #20
   d5928:	3614      	adds	r6, #20
   d592a:	e7e0      	b.n	d58ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d592e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d592e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5930:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5934:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5936:	4604      	mov	r4, r0
   d5938:	460e      	mov	r6, r1
   d593a:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d593c:	db0d      	blt.n	d595a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d593e:	3501      	adds	r5, #1
        if (n > 0) {
   d5940:	2d00      	cmp	r5, #0
   d5942:	6800      	ldr	r0, [r0, #0]
   d5944:	dd04      	ble.n	d5950 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5946:	00a9      	lsls	r1, r5, #2
   d5948:	f7ff f90e 	bl	d4b68 <realloc>
            if (!d) {
   d594c:	b918      	cbnz	r0, d5956 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d5950:	f7ff f902 	bl	d4b58 <free>
        T* d = nullptr;
   d5954:	2000      	movs	r0, #0
        data_ = d;
   d5956:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5958:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d595a:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d595c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d595e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d5962:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5964:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5968:	1d08      	adds	r0, r1, #4
   d596a:	f001 fc73 	bl	d7254 <memmove>
    new(p) T(std::move(value));
   d596e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5972:	6863      	ldr	r3, [r4, #4]
   d5974:	3301      	adds	r3, #1
   d5976:	6063      	str	r3, [r4, #4]
    return true;
   d5978:	2001      	movs	r0, #1
   d597a:	e7e8      	b.n	d594e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d597c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d597c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d597e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5982:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5984:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5986:	9301      	str	r3, [sp, #4]
   d5988:	460d      	mov	r5, r1
   d598a:	f7fe feef 	bl	d476c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d598e:	e9d4 3100 	ldrd	r3, r1, [r4]
   d5992:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5996:	4283      	cmp	r3, r0
   d5998:	461a      	mov	r2, r3
   d599a:	d00b      	beq.n	d59b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d599c:	6812      	ldr	r2, [r2, #0]
   d599e:	42aa      	cmp	r2, r5
   d59a0:	f103 0304 	add.w	r3, r3, #4
   d59a4:	d1f7      	bne.n	d5996 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d59a6:	a801      	add	r0, sp, #4
   d59a8:	f7ff fe33 	bl	d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d59ac:	2500      	movs	r5, #0
}
   d59ae:	4628      	mov	r0, r5
   d59b0:	b003      	add	sp, #12
   d59b2:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d59b4:	462a      	mov	r2, r5
   d59b6:	4620      	mov	r0, r4
   d59b8:	f7ff ffb9 	bl	d592e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d59bc:	4605      	mov	r5, r0
   d59be:	2800      	cmp	r0, #0
   d59c0:	d0f1      	beq.n	d59a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d59c2:	6863      	ldr	r3, [r4, #4]
   d59c4:	2b01      	cmp	r3, #1
   d59c6:	d101      	bne.n	d59cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d59c8:	f7ff fd20 	bl	d540c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d59cc:	a801      	add	r0, sp, #4
   d59ce:	f7ff fe20 	bl	d5612 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d59d2:	e7ec      	b.n	d59ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d59d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d59d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d59d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59d8:	4604      	mov	r4, r0
   d59da:	460d      	mov	r5, r1
   d59dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d59de:	d914      	bls.n	d5a0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d59e0:	4290      	cmp	r0, r2
   d59e2:	d213      	bcs.n	d5a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d59e4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d59e8:	1a75      	subs	r5, r6, r1
   d59ea:	f1a1 0710 	sub.w	r7, r1, #16
   d59ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d59f0:	42b7      	cmp	r7, r6
   d59f2:	d018      	beq.n	d5a26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d59f4:	b11c      	cbz	r4, d59fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d59f6:	4631      	mov	r1, r6
   d59f8:	4620      	mov	r0, r4
   d59fa:	f7ff fa61 	bl	d4ec0 <_ZN6StringC1EOS_>
                end->~T();
   d59fe:	4630      	mov	r0, r6
   d5a00:	f7ff f9e2 	bl	d4dc8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5a04:	3e10      	subs	r6, #16
   d5a06:	3c10      	subs	r4, #16
   d5a08:	e7f2      	b.n	d59f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5a0a:	d00c      	beq.n	d5a26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5a0c:	42b5      	cmp	r5, r6
   d5a0e:	d00a      	beq.n	d5a26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5a10:	b11c      	cbz	r4, d5a1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5a12:	4629      	mov	r1, r5
   d5a14:	4620      	mov	r0, r4
   d5a16:	f7ff fa53 	bl	d4ec0 <_ZN6StringC1EOS_>
                p->~T();
   d5a1a:	4628      	mov	r0, r5
   d5a1c:	f7ff f9d4 	bl	d4dc8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5a20:	3510      	adds	r5, #16
   d5a22:	3410      	adds	r4, #16
   d5a24:	e7f2      	b.n	d5a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5a28:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5a2a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5a2c:	4605      	mov	r5, r0
        if (n > 0) {
   d5a2e:	dd11      	ble.n	d5a54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5a30:	0130      	lsls	r0, r6, #4
   d5a32:	f7ff f889 	bl	d4b48 <malloc>
            if (!d) {
   d5a36:	4604      	mov	r4, r0
   d5a38:	b158      	cbz	r0, d5a52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5a3a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5a3e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5a42:	f7ff ffc7 	bl	d59d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5a46:	6828      	ldr	r0, [r5, #0]
   d5a48:	f7ff f886 	bl	d4b58 <free>
        data_ = d;
   d5a4c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5a4e:	60ae      	str	r6, [r5, #8]
        return true;
   d5a50:	2001      	movs	r0, #1
    }
   d5a52:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5a54:	2400      	movs	r4, #0
   d5a56:	e7f6      	b.n	d5a46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5a58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a5c:	4691      	mov	r9, r2
   d5a5e:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d5a60:	2300      	movs	r3, #0
   d5a62:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5a64:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5a68:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5a6a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5a6c:	4299      	cmp	r1, r3
        capacity_(0) {
   d5a6e:	e9c0 3300 	strd	r3, r3, [r0]
   d5a72:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5a7a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5a7e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5a80:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5a82:	dc23      	bgt.n	d5acc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5a84:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5a88:	2314      	movs	r3, #20
   d5a8a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d5a8e:	42af      	cmp	r7, r5
   d5a90:	d03b      	beq.n	d5b0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d5a92:	4629      	mov	r1, r5
   d5a94:	a80d      	add	r0, sp, #52	; 0x34
   d5a96:	f7ff fa13 	bl	d4ec0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d5a9a:	a90d      	add	r1, sp, #52	; 0x34
   d5a9c:	a811      	add	r0, sp, #68	; 0x44
   d5a9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d5aa0:	f7ff fa0e 	bl	d4ec0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5aa4:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5aa8:	4299      	cmp	r1, r3
   d5aaa:	da1b      	bge.n	d5ae4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d5aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d5aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d5ab0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5ab4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5ab8:	4631      	mov	r1, r6
   d5aba:	f106 0010 	add.w	r0, r6, #16
   d5abe:	f7ff ff89 	bl	d59d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5ac2:	b9ee      	cbnz	r6, d5b00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d5ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5ac6:	3301      	adds	r3, #1
   d5ac8:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d5aca:	e011      	b.n	d5af0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d5acc:	a80a      	add	r0, sp, #40	; 0x28
   d5ace:	f7ff ffab 	bl	d5a28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5ad2:	2800      	cmp	r0, #0
   d5ad4:	d1d6      	bne.n	d5a84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d5ad6:	a80a      	add	r0, sp, #40	; 0x28
   d5ad8:	f7ff fa61 	bl	d4f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5adc:	4620      	mov	r0, r4
   d5ade:	b017      	add	sp, #92	; 0x5c
   d5ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ae4:	3101      	adds	r1, #1
   d5ae6:	a80a      	add	r0, sp, #40	; 0x28
   d5ae8:	f7ff ff9e 	bl	d5a28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5aec:	2800      	cmp	r0, #0
   d5aee:	d1dd      	bne.n	d5aac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d5af0:	a811      	add	r0, sp, #68	; 0x44
   d5af2:	f7ff f969 	bl	d4dc8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d5af6:	a80d      	add	r0, sp, #52	; 0x34
   d5af8:	f7ff f966 	bl	d4dc8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5afc:	3514      	adds	r5, #20
   d5afe:	e7c6      	b.n	d5a8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5b00:	a911      	add	r1, sp, #68	; 0x44
   d5b02:	4630      	mov	r0, r6
   d5b04:	f7ff f9dc 	bl	d4ec0 <_ZN6StringC1EOS_>
   d5b08:	e7dc      	b.n	d5ac4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d5b0a:	2600      	movs	r6, #0
   d5b0c:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5b10:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5b12:	4637      	mov	r7, r6
   d5b14:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5b18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5b1c:	429e      	cmp	r6, r3
   d5b1e:	f280 8097 	bge.w	d5c50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5b22:	0133      	lsls	r3, r6, #4
   d5b24:	58d3      	ldr	r3, [r2, r3]
   d5b26:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5b28:	b90b      	cbnz	r3, d5b2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d5b2a:	3601      	adds	r6, #1
   d5b2c:	e7f4      	b.n	d5b18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d5b2e:	fb0a f306 	mul.w	r3, sl, r6
   d5b32:	9709      	str	r7, [sp, #36]	; 0x24
   d5b34:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5b36:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5b38:	a909      	add	r1, sp, #36	; 0x24
   d5b3a:	a808      	add	r0, sp, #32
   d5b3c:	f7ff fb0e 	bl	d515c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5b40:	4683      	mov	fp, r0
   d5b42:	2800      	cmp	r0, #0
   d5b44:	d0f1      	beq.n	d5b2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5b46:	4601      	mov	r1, r0
   d5b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5b4a:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5b4e:	f10d 031f 	add.w	r3, sp, #31
   d5b52:	4628      	mov	r0, r5
   d5b54:	f7ff fb80 	bl	d5258 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5b58:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5b5c:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5b5e:	f1b8 0f00 	cmp.w	r8, #0
   d5b62:	d166      	bne.n	d5c32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5b64:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5b68:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5b6c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5b74:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5b78:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5b7c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5b80:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5b84:	4293      	cmp	r3, r2
   d5b86:	db1a      	blt.n	d5bbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5b88:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5b8c:	f1bb 0f00 	cmp.w	fp, #0
   d5b90:	dd4a      	ble.n	d5c28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5b92:	fb0a f00b 	mul.w	r0, sl, fp
   d5b96:	f7fe ffd7 	bl	d4b48 <malloc>
            if (!d) {
   d5b9a:	9004      	str	r0, [sp, #16]
   d5b9c:	2800      	cmp	r0, #0
   d5b9e:	d045      	beq.n	d5c2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5ba0:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5ba4:	fb0a 1202 	mla	r2, sl, r2, r1
   d5ba8:	f7ff fe71 	bl	d588e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5bac:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5bae:	6828      	ldr	r0, [r5, #0]
   d5bb0:	9304      	str	r3, [sp, #16]
   d5bb2:	f7fe ffd1 	bl	d4b58 <free>
        data_ = d;
   d5bb6:	9b04      	ldr	r3, [sp, #16]
   d5bb8:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5bba:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5bbe:	9b01      	ldr	r3, [sp, #4]
   d5bc0:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5bc4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5bc6:	fb0a f303 	mul.w	r3, sl, r3
   d5bca:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d5bce:	f101 0014 	add.w	r0, r1, #20
   d5bd2:	fb0a b202 	mla	r2, sl, r2, fp
   d5bd6:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5bd8:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5bda:	f7ff fe58 	bl	d588e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5bde:	9904      	ldr	r1, [sp, #16]
   d5be0:	b1a9      	cbz	r1, d5c0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d5be2:	9b05      	ldr	r3, [sp, #20]
   d5be4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5be6:	f84b 2003 	str.w	r2, [fp, r3]
   d5bea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5bee:	808b      	strh	r3, [r1, #4]
   d5bf0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5bf4:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5bf6:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5bfa:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5bfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5bfe:	608b      	str	r3, [r1, #8]
   d5c00:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5c02:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5c04:	60cb      	str	r3, [r1, #12]
   d5c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5c08:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5c0a:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c0c:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d5c0e:	686b      	ldr	r3, [r5, #4]
   d5c10:	3301      	adds	r3, #1
   d5c12:	606b      	str	r3, [r5, #4]
   d5c14:	a813      	add	r0, sp, #76	; 0x4c
   d5c16:	f7ff fca5 	bl	d5564 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5c1a:	f1b8 0f00 	cmp.w	r8, #0
   d5c1e:	d008      	beq.n	d5c32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5c20:	a80d      	add	r0, sp, #52	; 0x34
   d5c22:	f7ff fc9f 	bl	d5564 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5c26:	e756      	b.n	d5ad6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5c28:	4643      	mov	r3, r8
   d5c2a:	e7c0      	b.n	d5bae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5c2c:	f04f 0801 	mov.w	r8, #1
   d5c30:	e7f0      	b.n	d5c14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5c32:	9b01      	ldr	r3, [sp, #4]
   d5c34:	682d      	ldr	r5, [r5, #0]
   d5c36:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5c3a:	9b08      	ldr	r3, [sp, #32]
   d5c3c:	781b      	ldrb	r3, [r3, #0]
   d5c3e:	b92b      	cbnz	r3, d5c4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5c40:	f8d9 3000 	ldr.w	r3, [r9]
   d5c44:	9a02      	ldr	r2, [sp, #8]
   d5c46:	4413      	add	r3, r2
   d5c48:	7c1b      	ldrb	r3, [r3, #16]
   d5c4a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5c4c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5c4e:	e773      	b.n	d5b38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c50:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5c52:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c54:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5c56:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c58:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c5a:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5c5e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c60:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5c62:	60a2      	str	r2, [r4, #8]
   d5c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5c66:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c68:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5c6a:	60e2      	str	r2, [r4, #12]
   d5c6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5c6e:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c70:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5c72:	6122      	str	r2, [r4, #16]
   d5c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5c76:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5c78:	9b03      	ldr	r3, [sp, #12]
   d5c7a:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5c7c:	6162      	str	r2, [r4, #20]
   d5c7e:	7623      	strb	r3, [r4, #24]
   d5c80:	e7ce      	b.n	d5c20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5c84 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5c84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5c86:	4605      	mov	r5, r0
   d5c88:	4b09      	ldr	r3, [pc, #36]	; (d5cb0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5c8a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5c8e:	4604      	mov	r4, r0
   d5c90:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5c92:	a801      	add	r0, sp, #4
   d5c94:	4611      	mov	r1, r2
   d5c96:	f7fe fc56 	bl	d4546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5c9a:	aa01      	add	r2, sp, #4
   d5c9c:	4631      	mov	r1, r6
   d5c9e:	4628      	mov	r0, r5
   d5ca0:	f7ff feda 	bl	d5a58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5ca4:	a801      	add	r0, sp, #4
   d5ca6:	f7fe fc0d 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5caa:	4620      	mov	r0, r4
   d5cac:	b004      	add	sp, #16
   d5cae:	bd70      	pop	{r4, r5, r6, pc}
   d5cb0:	000d750c 	.word	0x000d750c

000d5cb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cb6:	460f      	mov	r7, r1
   d5cb8:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5cba:	4926      	ldr	r1, [pc, #152]	; (d5d54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5cbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5cbe:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5cc0:	4616      	mov	r6, r2
   d5cc2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5cc4:	f001 fb23 	bl	d730e <strcmp>
   d5cc8:	bb00      	cbnz	r0, d5d0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5cca:	b1e4      	cbz	r4, d5d06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5ccc:	4629      	mov	r1, r5
   d5cce:	4668      	mov	r0, sp
   d5cd0:	f7ff fc90 	bl	d55f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5cd4:	4920      	ldr	r1, [pc, #128]	; (d5d58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5cd6:	2024      	movs	r0, #36	; 0x24
   d5cd8:	f001 fa99 	bl	d720e <_ZnwjRKSt9nothrow_t>
   d5cdc:	4605      	mov	r5, r0
   d5cde:	b170      	cbz	r0, d5cfe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5ce0:	4669      	mov	r1, sp
   d5ce2:	a803      	add	r0, sp, #12
   d5ce4:	f7fe fc2f 	bl	d4546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ce8:	aa03      	add	r2, sp, #12
   d5cea:	4631      	mov	r1, r6
   d5cec:	4628      	mov	r0, r5
   d5cee:	f7ff ffc9 	bl	d5c84 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5cf2:	a803      	add	r0, sp, #12
   d5cf4:	f7fe fbe6 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5cf8:	4b18      	ldr	r3, [pc, #96]	; (d5d5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5cfa:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5cfc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5cfe:	4668      	mov	r0, sp
   d5d00:	f7fe fbe0 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5d04:	462c      	mov	r4, r5
}
   d5d06:	4620      	mov	r0, r4
   d5d08:	b007      	add	sp, #28
   d5d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5d0c:	4914      	ldr	r1, [pc, #80]	; (d5d60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5d0e:	4638      	mov	r0, r7
   d5d10:	f001 fafd 	bl	d730e <strcmp>
   d5d14:	b9e0      	cbnz	r0, d5d50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5d16:	2c00      	cmp	r4, #0
   d5d18:	d0f5      	beq.n	d5d06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5d1a:	4629      	mov	r1, r5
   d5d1c:	4668      	mov	r0, sp
   d5d1e:	f7ff fc69 	bl	d55f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5d22:	490d      	ldr	r1, [pc, #52]	; (d5d58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5d24:	2024      	movs	r0, #36	; 0x24
   d5d26:	f001 fa72 	bl	d720e <_ZnwjRKSt9nothrow_t>
   d5d2a:	4605      	mov	r5, r0
   d5d2c:	2800      	cmp	r0, #0
   d5d2e:	d0e6      	beq.n	d5cfe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5d30:	4669      	mov	r1, sp
   d5d32:	a803      	add	r0, sp, #12
   d5d34:	f7fe fc07 	bl	d4546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5d38:	aa03      	add	r2, sp, #12
   d5d3a:	4631      	mov	r1, r6
   d5d3c:	4628      	mov	r0, r5
   d5d3e:	f7ff ffa1 	bl	d5c84 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5d42:	a803      	add	r0, sp, #12
   d5d44:	f7fe fbbe 	bl	d44c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5d48:	4b06      	ldr	r3, [pc, #24]	; (d5d64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5d4a:	602b      	str	r3, [r5, #0]
   d5d4c:	622c      	str	r4, [r5, #32]
}
   d5d4e:	e7d6      	b.n	d5cfe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5d50:	2400      	movs	r4, #0
   d5d52:	e7d8      	b.n	d5d06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5d54:	000d75ca 	.word	0x000d75ca
   d5d58:	000d77f9 	.word	0x000d77f9
   d5d5c:	000d7664 	.word	0x000d7664
   d5d60:	000d75ce 	.word	0x000d75ce
   d5d64:	000d764c 	.word	0x000d764c

000d5d68 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5d68:	4b01      	ldr	r3, [pc, #4]	; (d5d70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d6a:	4a02      	ldr	r2, [pc, #8]	; (d5d74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5d6e:	4770      	bx	lr
   d5d70:	2003e60c 	.word	0x2003e60c
   d5d74:	000d75df 	.word	0x000d75df

000d5d78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d7c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5d7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5d82:	4604      	mov	r4, r0
   d5d84:	460e      	mov	r6, r1
   d5d86:	4617      	mov	r7, r2
   d5d88:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5d8a:	f000 fda9 	bl	d68e0 <_Z16_fetch_usbserialv>
   d5d8e:	4581      	cmp	r9, r0
   d5d90:	d04c      	beq.n	d5e2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5d92:	792b      	ldrb	r3, [r5, #4]
   d5d94:	0719      	lsls	r1, r3, #28
   d5d96:	d504      	bpl.n	d5da2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5d98:	696a      	ldr	r2, [r5, #20]
   d5d9a:	4954      	ldr	r1, [pc, #336]	; (d5eec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5d9c:	4620      	mov	r0, r4
   d5d9e:	f7ff fa4c 	bl	d523a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5da2:	f1b8 0f00 	cmp.w	r8, #0
   d5da6:	d00d      	beq.n	d5dc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5da8:	215b      	movs	r1, #91	; 0x5b
   d5daa:	4620      	mov	r0, r4
   d5dac:	f7ff fa39 	bl	d5222 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5db0:	4641      	mov	r1, r8
   d5db2:	4620      	mov	r0, r4
   d5db4:	f7ff fa26 	bl	d5204 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5db8:	6823      	ldr	r3, [r4, #0]
   d5dba:	494d      	ldr	r1, [pc, #308]	; (d5ef0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5dbc:	68db      	ldr	r3, [r3, #12]
   d5dbe:	2202      	movs	r2, #2
   d5dc0:	4620      	mov	r0, r4
   d5dc2:	4798      	blx	r3
    if (attr.has_file) {
   d5dc4:	792b      	ldrb	r3, [r5, #4]
   d5dc6:	07da      	lsls	r2, r3, #31
   d5dc8:	d523      	bpl.n	d5e12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5dca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5dce:	212f      	movs	r1, #47	; 0x2f
   d5dd0:	4640      	mov	r0, r8
   d5dd2:	f001 fae6 	bl	d73a2 <strrchr>
    if (s1) {
   d5dd6:	b108      	cbz	r0, d5ddc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5dd8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5ddc:	4641      	mov	r1, r8
   d5dde:	4620      	mov	r0, r4
   d5de0:	f7ff fa10 	bl	d5204 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5de4:	792b      	ldrb	r3, [r5, #4]
   d5de6:	079b      	lsls	r3, r3, #30
   d5de8:	d508      	bpl.n	d5dfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5dea:	213a      	movs	r1, #58	; 0x3a
   d5dec:	4620      	mov	r0, r4
   d5dee:	f7ff fa18 	bl	d5222 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5df2:	68ea      	ldr	r2, [r5, #12]
   d5df4:	493f      	ldr	r1, [pc, #252]	; (d5ef4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5df6:	4620      	mov	r0, r4
   d5df8:	f7ff fa1f 	bl	d523a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5dfc:	792a      	ldrb	r2, [r5, #4]
   d5dfe:	6823      	ldr	r3, [r4, #0]
   d5e00:	f012 0f04 	tst.w	r2, #4
   d5e04:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5e06:	bf14      	ite	ne
   d5e08:	493b      	ldrne	r1, [pc, #236]	; (d5ef8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5e0a:	493c      	ldreq	r1, [pc, #240]	; (d5efc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5e0c:	2202      	movs	r2, #2
            write(": ", 2);
   d5e0e:	4620      	mov	r0, r4
   d5e10:	4798      	blx	r3
    if (attr.has_function) {
   d5e12:	792b      	ldrb	r3, [r5, #4]
   d5e14:	0758      	lsls	r0, r3, #29
   d5e16:	d51d      	bpl.n	d5e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5e18:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5e1a:	460b      	mov	r3, r1
   d5e1c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5e1e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5e22:	b160      	cbz	r0, d5e3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5e24:	2820      	cmp	r0, #32
   d5e26:	d108      	bne.n	d5e3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5e28:	4619      	mov	r1, r3
   d5e2a:	e7f7      	b.n	d5e1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5e2c:	4834      	ldr	r0, [pc, #208]	; (d5f00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5e2e:	f000 fede 	bl	d6bee <_ZN5spark12NetworkClass9listeningEv>
   d5e32:	2800      	cmp	r0, #0
   d5e34:	d0ad      	beq.n	d5d92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5e3a:	2828      	cmp	r0, #40	; 0x28
   d5e3c:	d1ee      	bne.n	d5e1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5e3e:	6823      	ldr	r3, [r4, #0]
   d5e40:	1a52      	subs	r2, r2, r1
   d5e42:	68db      	ldr	r3, [r3, #12]
   d5e44:	4620      	mov	r0, r4
   d5e46:	4798      	blx	r3
        write("(): ", 4);
   d5e48:	6823      	ldr	r3, [r4, #0]
   d5e4a:	492e      	ldr	r1, [pc, #184]	; (d5f04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5e4c:	68db      	ldr	r3, [r3, #12]
   d5e4e:	2204      	movs	r2, #4
   d5e50:	4620      	mov	r0, r4
   d5e52:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5e54:	2100      	movs	r1, #0
   d5e56:	4638      	mov	r0, r7
   d5e58:	f7fe fd90 	bl	d497c <log_level_name>
   d5e5c:	4601      	mov	r1, r0
    write(s);
   d5e5e:	4620      	mov	r0, r4
   d5e60:	f7ff f9d0 	bl	d5204 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5e64:	6823      	ldr	r3, [r4, #0]
   d5e66:	4925      	ldr	r1, [pc, #148]	; (d5efc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5e68:	68db      	ldr	r3, [r3, #12]
   d5e6a:	2202      	movs	r2, #2
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	4798      	blx	r3
    if (msg) {
   d5e70:	b11e      	cbz	r6, d5e7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5e72:	4631      	mov	r1, r6
   d5e74:	4620      	mov	r0, r4
   d5e76:	f7ff f9c5 	bl	d5204 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5e7a:	792b      	ldrb	r3, [r5, #4]
   d5e7c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5e80:	d02c      	beq.n	d5edc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5e82:	6823      	ldr	r3, [r4, #0]
   d5e84:	4920      	ldr	r1, [pc, #128]	; (d5f08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5e86:	68db      	ldr	r3, [r3, #12]
   d5e88:	2202      	movs	r2, #2
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	4798      	blx	r3
        if (attr.has_code) {
   d5e8e:	792b      	ldrb	r3, [r5, #4]
   d5e90:	06d9      	lsls	r1, r3, #27
   d5e92:	d50a      	bpl.n	d5eaa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5e94:	6823      	ldr	r3, [r4, #0]
   d5e96:	491d      	ldr	r1, [pc, #116]	; (d5f0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5e98:	68db      	ldr	r3, [r3, #12]
   d5e9a:	2207      	movs	r2, #7
   d5e9c:	4620      	mov	r0, r4
   d5e9e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5ea0:	69aa      	ldr	r2, [r5, #24]
   d5ea2:	491b      	ldr	r1, [pc, #108]	; (d5f10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	f7ff f9c8 	bl	d523a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5eaa:	792b      	ldrb	r3, [r5, #4]
   d5eac:	069a      	lsls	r2, r3, #26
   d5eae:	d511      	bpl.n	d5ed4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5eb0:	06db      	lsls	r3, r3, #27
   d5eb2:	d505      	bpl.n	d5ec0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5eb4:	6823      	ldr	r3, [r4, #0]
   d5eb6:	4910      	ldr	r1, [pc, #64]	; (d5ef8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5eb8:	68db      	ldr	r3, [r3, #12]
   d5eba:	2202      	movs	r2, #2
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	4798      	blx	r3
            write("details = ", 10);
   d5ec0:	6823      	ldr	r3, [r4, #0]
   d5ec2:	4914      	ldr	r1, [pc, #80]	; (d5f14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5ec4:	68db      	ldr	r3, [r3, #12]
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	220a      	movs	r2, #10
   d5eca:	4798      	blx	r3
            write(attr.details);
   d5ecc:	69e9      	ldr	r1, [r5, #28]
   d5ece:	4620      	mov	r0, r4
   d5ed0:	f7ff f998 	bl	d5204 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5ed4:	215d      	movs	r1, #93	; 0x5d
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	f7ff f9a3 	bl	d5222 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5edc:	6823      	ldr	r3, [r4, #0]
   d5ede:	490e      	ldr	r1, [pc, #56]	; (d5f18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5ee0:	68db      	ldr	r3, [r3, #12]
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	2202      	movs	r2, #2
}
   d5ee6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5eea:	4718      	bx	r3
   d5eec:	000d75e3 	.word	0x000d75e3
   d5ef0:	000d75ea 	.word	0x000d75ea
   d5ef4:	000d74e8 	.word	0x000d74e8
   d5ef8:	000d75ed 	.word	0x000d75ed
   d5efc:	000d75f2 	.word	0x000d75f2
   d5f00:	2003e7bc 	.word	0x2003e7bc
   d5f04:	000d75f0 	.word	0x000d75f0
   d5f08:	000d75f5 	.word	0x000d75f5
   d5f0c:	000d75f8 	.word	0x000d75f8
   d5f10:	000d7600 	.word	0x000d7600
   d5f14:	000d7603 	.word	0x000d7603
   d5f18:	000d760e 	.word	0x000d760e

000d5f1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5f20:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5f22:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5f26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5f28:	4605      	mov	r5, r0
   d5f2a:	460f      	mov	r7, r1
   d5f2c:	4690      	mov	r8, r2
   d5f2e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5f30:	f000 fcd6 	bl	d68e0 <_Z16_fetch_usbserialv>
   d5f34:	4581      	cmp	r9, r0
   d5f36:	d105      	bne.n	d5f44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5f38:	4849      	ldr	r0, [pc, #292]	; (d6060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5f3a:	f000 fe58 	bl	d6bee <_ZN5spark12NetworkClass9listeningEv>
   d5f3e:	2800      	cmp	r0, #0
   d5f40:	f040 808a 	bne.w	d6058 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5f44:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5f46:	4a47      	ldr	r2, [pc, #284]	; (d6064 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5f48:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5f4a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5f4e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5f50:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5f52:	f88d 9008 	strb.w	r9, [sp, #8]
   d5f56:	f001 f808 	bl	d6f6a <_ZN5spark10JSONWriter11beginObjectEv>
   d5f5a:	4649      	mov	r1, r9
   d5f5c:	4640      	mov	r0, r8
   d5f5e:	f7fe fd0d 	bl	d497c <log_level_name>
    json.name("l", 1).value(s);
   d5f62:	4941      	ldr	r1, [pc, #260]	; (d6068 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5f64:	4680      	mov	r8, r0
   d5f66:	2201      	movs	r2, #1
   d5f68:	a801      	add	r0, sp, #4
   d5f6a:	f001 f887 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f6e:	4641      	mov	r1, r8
   d5f70:	f7ff f93a 	bl	d51e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5f74:	b13f      	cbz	r7, d5f86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5f76:	493d      	ldr	r1, [pc, #244]	; (d606c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5f78:	2201      	movs	r2, #1
   d5f7a:	a801      	add	r0, sp, #4
   d5f7c:	f001 f87e 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f80:	4639      	mov	r1, r7
   d5f82:	f7ff f931 	bl	d51e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5f86:	b13e      	cbz	r6, d5f98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5f88:	4939      	ldr	r1, [pc, #228]	; (d6070 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5f8a:	2201      	movs	r2, #1
   d5f8c:	a801      	add	r0, sp, #4
   d5f8e:	f001 f875 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f92:	4631      	mov	r1, r6
   d5f94:	f7ff f928 	bl	d51e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5f98:	7923      	ldrb	r3, [r4, #4]
   d5f9a:	07df      	lsls	r7, r3, #31
   d5f9c:	d50e      	bpl.n	d5fbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5f9e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5fa0:	212f      	movs	r1, #47	; 0x2f
   d5fa2:	4630      	mov	r0, r6
   d5fa4:	f001 f9fd 	bl	d73a2 <strrchr>
    if (s1) {
   d5fa8:	b100      	cbz	r0, d5fac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5faa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5fac:	4931      	ldr	r1, [pc, #196]	; (d6074 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5fae:	2201      	movs	r2, #1
   d5fb0:	a801      	add	r0, sp, #4
   d5fb2:	f001 f863 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d5fb6:	4631      	mov	r1, r6
   d5fb8:	f7ff f916 	bl	d51e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5fbc:	7923      	ldrb	r3, [r4, #4]
   d5fbe:	079e      	lsls	r6, r3, #30
   d5fc0:	d507      	bpl.n	d5fd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5fc2:	492d      	ldr	r1, [pc, #180]	; (d6078 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5fc4:	2202      	movs	r2, #2
   d5fc6:	a801      	add	r0, sp, #4
   d5fc8:	f001 f858 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d5fcc:	68e1      	ldr	r1, [r4, #12]
   d5fce:	f000 ffd9 	bl	d6f84 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5fd2:	7923      	ldrb	r3, [r4, #4]
   d5fd4:	0758      	lsls	r0, r3, #29
   d5fd6:	d514      	bpl.n	d6002 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5fd8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5fda:	4633      	mov	r3, r6
   d5fdc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5fde:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5fe2:	b12a      	cbz	r2, d5ff0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5fe4:	2a20      	cmp	r2, #32
   d5fe6:	d101      	bne.n	d5fec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5fe8:	461e      	mov	r6, r3
   d5fea:	e7f7      	b.n	d5fdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5fec:	2a28      	cmp	r2, #40	; 0x28
   d5fee:	d1f5      	bne.n	d5fdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5ff0:	4922      	ldr	r1, [pc, #136]	; (d607c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5ff2:	2202      	movs	r2, #2
   d5ff4:	a801      	add	r0, sp, #4
   d5ff6:	f001 f841 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d5ffa:	1bba      	subs	r2, r7, r6
   d5ffc:	4631      	mov	r1, r6
   d5ffe:	f001 f84d 	bl	d709c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d6002:	7923      	ldrb	r3, [r4, #4]
   d6004:	0719      	lsls	r1, r3, #28
   d6006:	d507      	bpl.n	d6018 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d6008:	491d      	ldr	r1, [pc, #116]	; (d6080 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d600a:	2201      	movs	r2, #1
   d600c:	a801      	add	r0, sp, #4
   d600e:	f001 f835 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d6012:	6961      	ldr	r1, [r4, #20]
   d6014:	f000 ffc8 	bl	d6fa8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d6018:	7923      	ldrb	r3, [r4, #4]
   d601a:	06da      	lsls	r2, r3, #27
   d601c:	d508      	bpl.n	d6030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d601e:	2204      	movs	r2, #4
   d6020:	4918      	ldr	r1, [pc, #96]	; (d6084 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d6022:	eb0d 0002 	add.w	r0, sp, r2
   d6026:	f001 f829 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d602a:	69a1      	ldr	r1, [r4, #24]
   d602c:	f000 ffaa 	bl	d6f84 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d6030:	7923      	ldrb	r3, [r4, #4]
   d6032:	069b      	lsls	r3, r3, #26
   d6034:	d507      	bpl.n	d6046 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d6036:	4914      	ldr	r1, [pc, #80]	; (d6088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6038:	2206      	movs	r2, #6
   d603a:	a801      	add	r0, sp, #4
   d603c:	f001 f81e 	bl	d707c <_ZN5spark10JSONWriter4nameEPKcj>
   d6040:	69e1      	ldr	r1, [r4, #28]
   d6042:	f7ff f8d1 	bl	d51e8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d6046:	a801      	add	r0, sp, #4
   d6048:	f000 ff79 	bl	d6f3e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d604c:	6a28      	ldr	r0, [r5, #32]
   d604e:	490f      	ldr	r1, [pc, #60]	; (d608c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6050:	6803      	ldr	r3, [r0, #0]
   d6052:	2202      	movs	r2, #2
   d6054:	68db      	ldr	r3, [r3, #12]
   d6056:	4798      	blx	r3
}
   d6058:	b005      	add	sp, #20
   d605a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d605e:	bf00      	nop
   d6060:	2003e7bc 	.word	0x2003e7bc
   d6064:	000d7634 	.word	0x000d7634
   d6068:	000d75c0 	.word	0x000d75c0
   d606c:	000d7611 	.word	0x000d7611
   d6070:	000d7613 	.word	0x000d7613
   d6074:	000d7615 	.word	0x000d7615
   d6078:	000d7617 	.word	0x000d7617
   d607c:	000d761a 	.word	0x000d761a
   d6080:	000d753d 	.word	0x000d753d
   d6084:	000d761d 	.word	0x000d761d
   d6088:	000d7622 	.word	0x000d7622
   d608c:	000d760e 	.word	0x000d760e

000d6090 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6090:	4b02      	ldr	r3, [pc, #8]	; (d609c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6092:	681a      	ldr	r2, [r3, #0]
   d6094:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6096:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6098:	4770      	bx	lr
   d609a:	bf00      	nop
   d609c:	2003e518 	.word	0x2003e518
   d60a0:	2003e638 	.word	0x2003e638

000d60a4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d60a4:	b510      	push	{r4, lr}
   d60a6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d60a8:	f7fe ff70 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
   d60ac:	4620      	mov	r0, r4
   d60ae:	bd10      	pop	{r4, pc}

000d60b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d60b0:	4803      	ldr	r0, [pc, #12]	; (d60c0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d60b2:	4a04      	ldr	r2, [pc, #16]	; (d60c4 <_GLOBAL__sub_I_RGB+0x14>)
   d60b4:	4904      	ldr	r1, [pc, #16]	; (d60c8 <_GLOBAL__sub_I_RGB+0x18>)
   d60b6:	2300      	movs	r3, #0
   d60b8:	6083      	str	r3, [r0, #8]
   d60ba:	f001 b8a1 	b.w	d7200 <__aeabi_atexit>
   d60be:	bf00      	nop
   d60c0:	2003e63c 	.word	0x2003e63c
   d60c4:	2003e580 	.word	0x2003e580
   d60c8:	000d60a5 	.word	0x000d60a5

000d60cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d60cc:	4b01      	ldr	r3, [pc, #4]	; (d60d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d60ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d60d0:	4770      	bx	lr
   d60d2:	bf00      	nop
   d60d4:	2003e51c 	.word	0x2003e51c

000d60d8 <serialEventRun>:
{
   d60d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d60da:	4b0b      	ldr	r3, [pc, #44]	; (d6108 <serialEventRun+0x30>)
   d60dc:	b143      	cbz	r3, d60f0 <serialEventRun+0x18>
   d60de:	f000 fbff 	bl	d68e0 <_Z16_fetch_usbserialv>
   d60e2:	6803      	ldr	r3, [r0, #0]
   d60e4:	691b      	ldr	r3, [r3, #16]
   d60e6:	4798      	blx	r3
   d60e8:	2800      	cmp	r0, #0
   d60ea:	dd01      	ble.n	d60f0 <serialEventRun+0x18>
        serialEvent();
   d60ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d60f0:	4b06      	ldr	r3, [pc, #24]	; (d610c <serialEventRun+0x34>)
   d60f2:	b143      	cbz	r3, d6106 <serialEventRun+0x2e>
   d60f4:	f000 fcc8 	bl	d6a88 <_Z22__fetch_global_Serial1v>
   d60f8:	6803      	ldr	r3, [r0, #0]
   d60fa:	691b      	ldr	r3, [r3, #16]
   d60fc:	4798      	blx	r3
   d60fe:	2800      	cmp	r0, #0
   d6100:	dd01      	ble.n	d6106 <serialEventRun+0x2e>
        serialEvent1();
   d6102:	f3af 8000 	nop.w
}
   d6106:	bd08      	pop	{r3, pc}
	...

000d6110 <_post_loop>:
{
   d6110:	b508      	push	{r3, lr}
	serialEventRun();
   d6112:	f7ff ffe1 	bl	d60d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6116:	f7fe fb11 	bl	d473c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d611a:	4b01      	ldr	r3, [pc, #4]	; (d6120 <_post_loop+0x10>)
   d611c:	6018      	str	r0, [r3, #0]
}
   d611e:	bd08      	pop	{r3, pc}
   d6120:	2003e7d0 	.word	0x2003e7d0

000d6124 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6124:	4802      	ldr	r0, [pc, #8]	; (d6130 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6126:	4a03      	ldr	r2, [pc, #12]	; (d6134 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6128:	4903      	ldr	r1, [pc, #12]	; (d6138 <_Z33system_initialize_user_backup_ramv+0x14>)
   d612a:	1a12      	subs	r2, r2, r0
   d612c:	f001 b884 	b.w	d7238 <memcpy>
   d6130:	2003f400 	.word	0x2003f400
   d6134:	2003f404 	.word	0x2003f404
   d6138:	000d7920 	.word	0x000d7920

000d613c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d613c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d613e:	2300      	movs	r3, #0
   d6140:	9300      	str	r3, [sp, #0]
   d6142:	461a      	mov	r2, r3
   d6144:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6148:	f7fe fc4a 	bl	d49e0 <system_ctrl_set_result>
}
   d614c:	b003      	add	sp, #12
   d614e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6154 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6154:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6156:	8843      	ldrh	r3, [r0, #2]
   d6158:	2b0a      	cmp	r3, #10
   d615a:	d008      	beq.n	d616e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d615c:	2b50      	cmp	r3, #80	; 0x50
   d615e:	d10b      	bne.n	d6178 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6160:	4b09      	ldr	r3, [pc, #36]	; (d6188 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6162:	681b      	ldr	r3, [r3, #0]
   d6164:	b14b      	cbz	r3, d617a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6166:	b003      	add	sp, #12
   d6168:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d616c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d616e:	f7ff ffe5 	bl	d613c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6172:	b003      	add	sp, #12
   d6174:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6178:	2300      	movs	r3, #0
   d617a:	9300      	str	r3, [sp, #0]
   d617c:	461a      	mov	r2, r3
   d617e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6182:	f7fe fc2d 	bl	d49e0 <system_ctrl_set_result>
}
   d6186:	e7f4      	b.n	d6172 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6188:	2003e650 	.word	0x2003e650

000d618c <module_user_init_hook>:
{
   d618c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d618e:	4c12      	ldr	r4, [pc, #72]	; (d61d8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6190:	4812      	ldr	r0, [pc, #72]	; (d61dc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6192:	4d13      	ldr	r5, [pc, #76]	; (d61e0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6194:	2100      	movs	r1, #0
   d6196:	f7fe fd0f 	bl	d4bb8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d619a:	6823      	ldr	r3, [r4, #0]
   d619c:	42ab      	cmp	r3, r5
   d619e:	4b11      	ldr	r3, [pc, #68]	; (d61e4 <module_user_init_hook+0x58>)
   d61a0:	bf0c      	ite	eq
   d61a2:	2201      	moveq	r2, #1
   d61a4:	2200      	movne	r2, #0
   d61a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d61a8:	d002      	beq.n	d61b0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d61aa:	f7ff ffbb 	bl	d6124 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d61ae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d61b0:	f7fe fab4 	bl	d471c <HAL_RNG_GetRandomNumber>
   d61b4:	4604      	mov	r4, r0
    srand(seed);
   d61b6:	f001 f86f 	bl	d7298 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d61ba:	4b0b      	ldr	r3, [pc, #44]	; (d61e8 <module_user_init_hook+0x5c>)
   d61bc:	b113      	cbz	r3, d61c4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d61be:	4620      	mov	r0, r4
   d61c0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d61c4:	2100      	movs	r1, #0
   d61c6:	4808      	ldr	r0, [pc, #32]	; (d61e8 <module_user_init_hook+0x5c>)
   d61c8:	f7fe fcae 	bl	d4b28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d61cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d61d0:	4806      	ldr	r0, [pc, #24]	; (d61ec <module_user_init_hook+0x60>)
   d61d2:	2100      	movs	r1, #0
   d61d4:	f7fe bbfa 	b.w	d49cc <system_ctrl_set_app_request_handler>
   d61d8:	2003f400 	.word	0x2003f400
   d61dc:	000d60cd 	.word	0x000d60cd
   d61e0:	9a271c1e 	.word	0x9a271c1e
   d61e4:	2003e64c 	.word	0x2003e64c
   d61e8:	00000000 	.word	0x00000000
   d61ec:	000d6155 	.word	0x000d6155

000d61f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d61f0:	4770      	bx	lr

000d61f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d61f2:	2000      	movs	r0, #0
   d61f4:	4770      	bx	lr

000d61f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d61f6:	b510      	push	{r4, lr}
   d61f8:	2110      	movs	r1, #16
   d61fa:	4604      	mov	r4, r0
   d61fc:	f001 f805 	bl	d720a <_ZdlPvj>
   d6200:	4620      	mov	r0, r4
   d6202:	bd10      	pop	{r4, pc}

000d6204 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6204:	b508      	push	{r3, lr}
      { delete this; }
   d6206:	f7ff fff6 	bl	d61f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d620a:	bd08      	pop	{r3, pc}

000d620c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d620c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d620e:	2200      	movs	r2, #0
   d6210:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6214:	6002      	str	r2, [r0, #0]
   d6216:	8084      	strh	r4, [r0, #4]
   d6218:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d621a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d621c:	680c      	ldr	r4, [r1, #0]
   d621e:	8085      	strh	r5, [r0, #4]
   d6220:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6222:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6224:	bd30      	pop	{r4, r5, pc}

000d6226 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6226:	b510      	push	{r4, lr}
   d6228:	4604      	mov	r4, r0
    free((void*)msg_);
   d622a:	6800      	ldr	r0, [r0, #0]
   d622c:	f7fe fc94 	bl	d4b58 <free>
}
   d6230:	4620      	mov	r0, r4
   d6232:	bd10      	pop	{r4, pc}

000d6234 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6234:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6236:	68c4      	ldr	r4, [r0, #12]
   d6238:	b1f4      	cbz	r4, d6278 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d623a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d623c:	2b02      	cmp	r3, #2
   d623e:	d103      	bne.n	d6248 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6240:	f104 000c 	add.w	r0, r4, #12
   d6244:	f7ff ffef 	bl	d6226 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6248:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d624a:	b135      	cbz	r5, d625a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d624c:	4628      	mov	r0, r5
   d624e:	f7fe fe9d 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
   d6252:	2110      	movs	r1, #16
   d6254:	4628      	mov	r0, r5
   d6256:	f000 ffd8 	bl	d720a <_ZdlPvj>
   d625a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d625c:	b135      	cbz	r5, d626c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d625e:	4628      	mov	r0, r5
   d6260:	f7fe fe94 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
   d6264:	2110      	movs	r1, #16
   d6266:	4628      	mov	r0, r5
   d6268:	f000 ffcf 	bl	d720a <_ZdlPvj>
   d626c:	4620      	mov	r0, r4
   d626e:	2114      	movs	r1, #20
   d6270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6274:	f000 bfc9 	b.w	d720a <_ZdlPvj>
   d6278:	bd38      	pop	{r3, r4, r5, pc}

000d627a <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d627a:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d627c:	2100      	movs	r1, #0
   d627e:	f7fe bc5b 	b.w	d4b38 <spark_publish_vitals>

000d6282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6282:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6284:	460e      	mov	r6, r1
   d6286:	4604      	mov	r4, r0
   d6288:	f856 3b04 	ldr.w	r3, [r6], #4
   d628c:	9300      	str	r3, [sp, #0]
   d628e:	460d      	mov	r5, r1
   d6290:	a801      	add	r0, sp, #4
   d6292:	4631      	mov	r1, r6
   d6294:	f7fe fe95 	bl	d4fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6298:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d629a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d629c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d629e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d62a0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d62a2:	2300      	movs	r3, #0
   d62a4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d62a6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d62a8:	f7fe fe92 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62ac:	4630      	mov	r0, r6
   d62ae:	f7fe fe8f 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d62b2:	4628      	mov	r0, r5
   d62b4:	2108      	movs	r1, #8
   d62b6:	f000 ffa8 	bl	d720a <_ZdlPvj>
        return p;
    }
   d62ba:	4620      	mov	r0, r4
   d62bc:	b002      	add	sp, #8
   d62be:	bd70      	pop	{r4, r5, r6, pc}

000d62c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62c0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d62c2:	b510      	push	{r4, lr}
      if (_M_empty())
   d62c4:	b90a      	cbnz	r2, d62ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d62c6:	f000 ffa6 	bl	d7216 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d62ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62ce:	68c3      	ldr	r3, [r0, #12]
   d62d0:	4718      	bx	r3

000d62d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d62d2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d62d4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d62d6:	f100 0110 	add.w	r1, r0, #16
   d62da:	f7ff fff1 	bl	d62c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d62de:	bd08      	pop	{r3, pc}

000d62e0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d62e0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d62e2:	b510      	push	{r4, lr}
      if (_M_empty())
   d62e4:	b90a      	cbnz	r2, d62ea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d62e6:	f000 ff96 	bl	d7216 <_ZSt25__throw_bad_function_callv>
    }
   d62ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62ee:	68c3      	ldr	r3, [r0, #12]
   d62f0:	4718      	bx	r3

000d62f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d62f2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d62f4:	6800      	ldr	r0, [r0, #0]
   d62f6:	f100 0110 	add.w	r1, r0, #16
   d62fa:	f7ff fff1 	bl	d62e0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d62fe:	bd08      	pop	{r3, pc}

000d6300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6300:	b538      	push	{r3, r4, r5, lr}
   d6302:	2300      	movs	r3, #0
   d6304:	4604      	mov	r4, r0
   d6306:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6308:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d630a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d630c:	f7fd fec1 	bl	d4092 <_Znwj>
   d6310:	b128      	cbz	r0, d631e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6312:	2301      	movs	r3, #1
   d6314:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6318:	4b02      	ldr	r3, [pc, #8]	; (d6324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d631a:	6003      	str	r3, [r0, #0]
   d631c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d631e:	6020      	str	r0, [r4, #0]
	}
   d6320:	4620      	mov	r0, r4
   d6322:	bd38      	pop	{r3, r4, r5, pc}
   d6324:	000d76c8 	.word	0x000d76c8

000d6328 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6328:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d632a:	2300      	movs	r3, #0
   d632c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d632e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6330:	4604      	mov	r4, r0
   d6332:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6334:	b12b      	cbz	r3, d6342 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6336:	2202      	movs	r2, #2
   d6338:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d633a:	68eb      	ldr	r3, [r5, #12]
   d633c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d633e:	68ab      	ldr	r3, [r5, #8]
   d6340:	60a3      	str	r3, [r4, #8]
    }
   d6342:	4620      	mov	r0, r4
   d6344:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6348:	b5f0      	push	{r4, r5, r6, r7, lr}
   d634a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d634c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d634e:	4668      	mov	r0, sp
   d6350:	f7ff ff5c 	bl	d620c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6354:	f04f 0302 	mov.w	r3, #2
   d6358:	e8d4 2f4f 	ldrexb	r2, [r4]
   d635c:	2a00      	cmp	r2, #0
   d635e:	d103      	bne.n	d6368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6360:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6364:	2900      	cmp	r1, #0
   d6366:	d1f7      	bne.n	d6358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6368:	d125      	bne.n	d63b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d636a:	f104 050c 	add.w	r5, r4, #12
   d636e:	4669      	mov	r1, sp
   d6370:	4628      	mov	r0, r5
   d6372:	f7ff ff4b 	bl	d620c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6376:	f3bf 8f5b 	dmb	ish
   d637a:	2301      	movs	r3, #1
   d637c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d637e:	2000      	movs	r0, #0
   d6380:	f104 0308 	add.w	r3, r4, #8
   d6384:	f3bf 8f5b 	dmb	ish
   d6388:	e853 6f00 	ldrex	r6, [r3]
   d638c:	e843 0200 	strex	r2, r0, [r3]
   d6390:	2a00      	cmp	r2, #0
   d6392:	d1f9      	bne.n	d6388 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6394:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6398:	b16e      	cbz	r6, d63b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d639a:	f7fe fb07 	bl	d49ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d639e:	b178      	cbz	r0, d63c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d63a0:	4629      	mov	r1, r5
   d63a2:	4630      	mov	r0, r6
   d63a4:	f7ff ff8c 	bl	d62c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d63a8:	4630      	mov	r0, r6
   d63aa:	f7fe fdef 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d63ae:	2110      	movs	r1, #16
   d63b0:	4630      	mov	r0, r6
   d63b2:	f000 ff2a 	bl	d720a <_ZdlPvj>
        p_->setError(std::move(error));
   d63b6:	4668      	mov	r0, sp
   d63b8:	f7ff ff35 	bl	d6226 <_ZN8particle5ErrorD1Ev>
    }
   d63bc:	b009      	add	sp, #36	; 0x24
   d63be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d63c0:	4631      	mov	r1, r6
   d63c2:	a802      	add	r0, sp, #8
   d63c4:	f7ff ffb0 	bl	d6328 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d63c8:	68e0      	ldr	r0, [r4, #12]
   d63ca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d63ce:	b108      	cbz	r0, d63d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d63d0:	f000 ffb0 	bl	d7334 <strdup>
        type_(type) {
   d63d4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d63d6:	2010      	movs	r0, #16
   d63d8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d63dc:	f7fd fe59 	bl	d4092 <_Znwj>
   d63e0:	4605      	mov	r5, r0
   d63e2:	b1e8      	cbz	r0, d6420 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d63e4:	2700      	movs	r7, #0
   d63e6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63e8:	2018      	movs	r0, #24
   d63ea:	f7fd fe52 	bl	d4092 <_Znwj>
   d63ee:	4604      	mov	r4, r0
   d63f0:	b188      	cbz	r0, d6416 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d63f2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d63f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d63f6:	a802      	add	r0, sp, #8
   d63f8:	f7fe fdf6 	bl	d4fe8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63fc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d63fe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6400:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6402:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6404:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6406:	a906      	add	r1, sp, #24
   d6408:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d640a:	60e3      	str	r3, [r4, #12]
   d640c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6410:	9205      	str	r2, [sp, #20]
   d6412:	f7ff fefb 	bl	d620c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6416:	4b08      	ldr	r3, [pc, #32]	; (d6438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6418:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d641a:	4b08      	ldr	r3, [pc, #32]	; (d643c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d641c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d641e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6420:	a806      	add	r0, sp, #24
   d6422:	f7ff ff00 	bl	d6226 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6426:	a802      	add	r0, sp, #8
   d6428:	f7fe fdb0 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d642c:	2200      	movs	r2, #0
   d642e:	4629      	mov	r1, r5
   d6430:	4803      	ldr	r0, [pc, #12]	; (d6440 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6432:	f7fe fac3 	bl	d49bc <application_thread_invoke>
   d6436:	e7b7      	b.n	d63a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6438:	000d62d3 	.word	0x000d62d3
   d643c:	000d6569 	.word	0x000d6569
   d6440:	000d6add 	.word	0x000d6add

000d6444 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6448:	b08a      	sub	sp, #40	; 0x28
   d644a:	4605      	mov	r5, r0
   d644c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6450:	460c      	mov	r4, r1
   d6452:	4617      	mov	r7, r2
   d6454:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6456:	f7fe fb47 	bl	d4ae8 <spark_cloud_flag_connected>
   d645a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d645c:	4682      	mov	sl, r0
   d645e:	bb38      	cbnz	r0, d64b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6460:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6464:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6466:	a905      	add	r1, sp, #20
   d6468:	4630      	mov	r0, r6
   d646a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d646e:	f7ff fecd 	bl	d620c <_ZN8particle5ErrorC1EOS0_>
   d6472:	2014      	movs	r0, #20
   d6474:	f7fd fe0d 	bl	d4092 <_Znwj>
   d6478:	4604      	mov	r4, r0
   d647a:	b148      	cbz	r0, d6490 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d647c:	2302      	movs	r3, #2
   d647e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6480:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6482:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6486:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6488:	4631      	mov	r1, r6
   d648a:	300c      	adds	r0, #12
   d648c:	f7ff febe 	bl	d620c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6490:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6492:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6494:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6498:	f7ff ff32 	bl	d6300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d649c:	4630      	mov	r0, r6
   d649e:	f7ff fec2 	bl	d6226 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d64a2:	a805      	add	r0, sp, #20
   d64a4:	f7ff febf 	bl	d6226 <_ZN8particle5ErrorD1Ev>
}
   d64a8:	4628      	mov	r0, r5
   d64aa:	b00a      	add	sp, #40	; 0x28
   d64ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d64b0:	230c      	movs	r3, #12
   d64b2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d64b6:	2014      	movs	r0, #20
   d64b8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d64bc:	9307      	str	r3, [sp, #28]
   d64be:	f7fd fde8 	bl	d4092 <_Znwj>
   d64c2:	4601      	mov	r1, r0
   d64c4:	b128      	cbz	r0, d64d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d64c6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d64ca:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d64ce:	f880 a001 	strb.w	sl, [r0, #1]
   d64d2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d64d4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d64d6:	f7ff ff13 	bl	d6300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d64da:	4b22      	ldr	r3, [pc, #136]	; (d6564 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d64dc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d64de:	2008      	movs	r0, #8
   d64e0:	f7fd fdd7 	bl	d4092 <_Znwj>
   d64e4:	4682      	mov	sl, r0
   d64e6:	b128      	cbz	r0, d64f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64e8:	9b03      	ldr	r3, [sp, #12]
   d64ea:	f840 3b04 	str.w	r3, [r0], #4
   d64ee:	a904      	add	r1, sp, #16
   d64f0:	f7fe fd67 	bl	d4fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d64f4:	9600      	str	r6, [sp, #0]
   d64f6:	fa5f f389 	uxtb.w	r3, r9
   d64fa:	4642      	mov	r2, r8
   d64fc:	4639      	mov	r1, r7
   d64fe:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6500:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6504:	f7fe faf8 	bl	d4af8 <spark_send_event>
   d6508:	b9b8      	cbnz	r0, d653a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d650a:	9b03      	ldr	r3, [sp, #12]
   d650c:	785b      	ldrb	r3, [r3, #1]
   d650e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6512:	b993      	cbnz	r3, d653a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6514:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6518:	a905      	add	r1, sp, #20
   d651a:	a803      	add	r0, sp, #12
   d651c:	9205      	str	r2, [sp, #20]
   d651e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6522:	f7ff ff11 	bl	d6348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6526:	a805      	add	r0, sp, #20
   d6528:	f7ff fe7d 	bl	d6226 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d652c:	a805      	add	r0, sp, #20
   d652e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6530:	f7ff fea7 	bl	d6282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6534:	a806      	add	r0, sp, #24
   d6536:	f7fe fd4b 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d653a:	9b03      	ldr	r3, [sp, #12]
   d653c:	9305      	str	r3, [sp, #20]
   d653e:	a904      	add	r1, sp, #16
   d6540:	a806      	add	r0, sp, #24
   d6542:	f7fe fd3e 	bl	d4fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6546:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6548:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d654a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d654c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d654e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6550:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6552:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6554:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6556:	f7fe fd3b 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d655a:	a804      	add	r0, sp, #16
   d655c:	f7fe fd38 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6560:	e7a2      	b.n	d64a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6562:	bf00      	nop
   d6564:	000d662d 	.word	0x000d662d

000d6568 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6568:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d656c:	4605      	mov	r5, r0
	  switch (__op)
   d656e:	d007      	beq.n	d6580 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6570:	2a03      	cmp	r2, #3
   d6572:	d018      	beq.n	d65a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6574:	2a01      	cmp	r2, #1
   d6576:	d101      	bne.n	d657c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6578:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d657a:	6003      	str	r3, [r0, #0]
	}
   d657c:	2000      	movs	r0, #0
   d657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6580:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6582:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6584:	f7fd fd85 	bl	d4092 <_Znwj>
   d6588:	4604      	mov	r4, r0
   d658a:	b150      	cbz	r0, d65a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d658c:	4631      	mov	r1, r6
   d658e:	f7ff fecb 	bl	d6328 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6592:	6930      	ldr	r0, [r6, #16]
   d6594:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6598:	b108      	cbz	r0, d659e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d659a:	f000 fecb 	bl	d7334 <strdup>
        type_(type) {
   d659e:	6120      	str	r0, [r4, #16]
   d65a0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d65a2:	602c      	str	r4, [r5, #0]
	}
   d65a4:	e7ea      	b.n	d657c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d65a6:	6804      	ldr	r4, [r0, #0]
   d65a8:	2c00      	cmp	r4, #0
   d65aa:	d0e7      	beq.n	d657c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d65ac:	f104 0010 	add.w	r0, r4, #16
   d65b0:	f7ff fe39 	bl	d6226 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d65b4:	4620      	mov	r0, r4
   d65b6:	f7fe fce9 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d65ba:	2118      	movs	r1, #24
   d65bc:	4620      	mov	r0, r4
   d65be:	f000 fe24 	bl	d720a <_ZdlPvj>
   d65c2:	e7db      	b.n	d657c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d65c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d65c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d65c6:	2300      	movs	r3, #0
   d65c8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d65ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d65cc:	4604      	mov	r4, r0
   d65ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d65d0:	b12b      	cbz	r3, d65de <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65d2:	2202      	movs	r2, #2
   d65d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d65d6:	68eb      	ldr	r3, [r5, #12]
   d65d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d65da:	68ab      	ldr	r3, [r5, #8]
   d65dc:	60a3      	str	r3, [r4, #8]
    }
   d65de:	4620      	mov	r0, r4
   d65e0:	bd38      	pop	{r3, r4, r5, pc}

000d65e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d65e2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d65e4:	b570      	push	{r4, r5, r6, lr}
   d65e6:	4604      	mov	r4, r0
	  switch (__op)
   d65e8:	d007      	beq.n	d65fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d65ea:	2a03      	cmp	r2, #3
   d65ec:	d012      	beq.n	d6614 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d65ee:	2a01      	cmp	r2, #1
   d65f0:	d101      	bne.n	d65f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d65f2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d65f4:	6003      	str	r3, [r0, #0]
	}
   d65f6:	2000      	movs	r0, #0
   d65f8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d65fa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d65fc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d65fe:	f7fd fd48 	bl	d4092 <_Znwj>
   d6602:	4605      	mov	r5, r0
   d6604:	b120      	cbz	r0, d6610 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6606:	4631      	mov	r1, r6
   d6608:	f7ff ffdc 	bl	d65c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d660c:	7c33      	ldrb	r3, [r6, #16]
   d660e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6610:	6025      	str	r5, [r4, #0]
	}
   d6612:	e7f0      	b.n	d65f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6614:	6804      	ldr	r4, [r0, #0]
   d6616:	2c00      	cmp	r4, #0
   d6618:	d0ed      	beq.n	d65f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d661a:	4620      	mov	r0, r4
   d661c:	f7fe fcb6 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6620:	2114      	movs	r1, #20
   d6622:	4620      	mov	r0, r4
   d6624:	f000 fdf1 	bl	d720a <_ZdlPvj>
   d6628:	e7e5      	b.n	d65f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d662c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d662c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d662e:	b089      	sub	sp, #36	; 0x24
   d6630:	4604      	mov	r4, r0
   d6632:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6634:	a801      	add	r0, sp, #4
   d6636:	4611      	mov	r1, r2
   d6638:	f7ff fe23 	bl	d6282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d663c:	b1a4      	cbz	r4, d6668 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d663e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6640:	b11d      	cbz	r5, d664a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6642:	4628      	mov	r0, r5
   d6644:	f000 fe76 	bl	d7334 <strdup>
   d6648:	4605      	mov	r5, r0
   d664a:	a801      	add	r0, sp, #4
   d664c:	a903      	add	r1, sp, #12
        type_(type) {
   d664e:	9503      	str	r5, [sp, #12]
   d6650:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6654:	f7ff fe78 	bl	d6348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6658:	a803      	add	r0, sp, #12
   d665a:	f7ff fde4 	bl	d6226 <_ZN8particle5ErrorD1Ev>
   d665e:	a802      	add	r0, sp, #8
   d6660:	f7fe fcb6 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6664:	b009      	add	sp, #36	; 0x24
   d6666:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6668:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d666a:	2301      	movs	r3, #1
   d666c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6670:	2a00      	cmp	r2, #0
   d6672:	d103      	bne.n	d667c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6674:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6678:	2900      	cmp	r1, #0
   d667a:	d1f7      	bne.n	d666c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d667c:	d1ef      	bne.n	d665e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d667e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6680:	f3bf 8f5b 	dmb	ish
   d6684:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6686:	1d2b      	adds	r3, r5, #4
   d6688:	f3bf 8f5b 	dmb	ish
   d668c:	e853 6f00 	ldrex	r6, [r3]
   d6690:	e843 4200 	strex	r2, r4, [r3]
   d6694:	2a00      	cmp	r2, #0
   d6696:	d1f9      	bne.n	d668c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6698:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d669c:	2e00      	cmp	r6, #0
   d669e:	d0de      	beq.n	d665e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d66a0:	4620      	mov	r0, r4
   d66a2:	f7fe f983 	bl	d49ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d66a6:	4607      	mov	r7, r0
   d66a8:	b160      	cbz	r0, d66c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d66aa:	f105 010c 	add.w	r1, r5, #12
   d66ae:	4630      	mov	r0, r6
   d66b0:	f7ff fe16 	bl	d62e0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d66b4:	4630      	mov	r0, r6
   d66b6:	f7fe fc69 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d66ba:	2110      	movs	r1, #16
   d66bc:	4630      	mov	r0, r6
   d66be:	f000 fda4 	bl	d720a <_ZdlPvj>
   d66c2:	e7cc      	b.n	d665e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d66c4:	4631      	mov	r1, r6
   d66c6:	a803      	add	r0, sp, #12
   d66c8:	f7ff ff7c 	bl	d65c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d66cc:	7b2b      	ldrb	r3, [r5, #12]
   d66ce:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d66d2:	2010      	movs	r0, #16
   d66d4:	f7fd fcdd 	bl	d4092 <_Znwj>
   d66d8:	4605      	mov	r5, r0
   d66da:	b1d0      	cbz	r0, d6712 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d66dc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66de:	2014      	movs	r0, #20
   d66e0:	f7fd fcd7 	bl	d4092 <_Znwj>
   d66e4:	4604      	mov	r4, r0
   d66e6:	b178      	cbz	r0, d6708 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d66e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d66ea:	4601      	mov	r1, r0
   d66ec:	a803      	add	r0, sp, #12
   d66ee:	f7fe fc7b 	bl	d4fe8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66f2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d66f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d66f6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66f8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d66fa:	9205      	str	r2, [sp, #20]
   d66fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d66fe:	60e3      	str	r3, [r4, #12]
   d6700:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6704:	9206      	str	r2, [sp, #24]
   d6706:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6708:	4b06      	ldr	r3, [pc, #24]	; (d6724 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d670a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d670c:	4b06      	ldr	r3, [pc, #24]	; (d6728 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d670e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6710:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6712:	a803      	add	r0, sp, #12
   d6714:	f7fe fc3a 	bl	d4f8c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6718:	2200      	movs	r2, #0
   d671a:	4629      	mov	r1, r5
   d671c:	4803      	ldr	r0, [pc, #12]	; (d672c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d671e:	f7fe f94d 	bl	d49bc <application_thread_invoke>
   d6722:	e7c7      	b.n	d66b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6724:	000d62f3 	.word	0x000d62f3
   d6728:	000d65e3 	.word	0x000d65e3
   d672c:	000d6add 	.word	0x000d6add

000d6730 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6730:	4770      	bx	lr

000d6732 <_ZN9IPAddressD0Ev>:
   d6732:	b510      	push	{r4, lr}
   d6734:	2118      	movs	r1, #24
   d6736:	4604      	mov	r4, r0
   d6738:	f000 fd67 	bl	d720a <_ZdlPvj>
   d673c:	4620      	mov	r0, r4
   d673e:	bd10      	pop	{r4, pc}

000d6740 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6740:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6742:	7d03      	ldrb	r3, [r0, #20]
   d6744:	2b06      	cmp	r3, #6
{
   d6746:	b08d      	sub	sp, #52	; 0x34
   d6748:	460e      	mov	r6, r1
   d674a:	f100 0704 	add.w	r7, r0, #4
   d674e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6752:	d012      	beq.n	d677a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6754:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6758:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d675c:	220a      	movs	r2, #10
   d675e:	4630      	mov	r0, r6
   d6760:	f7fe fc9f 	bl	d50a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6764:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6766:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6768:	d019      	beq.n	d679e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d676a:	2c00      	cmp	r4, #0
   d676c:	d0f4      	beq.n	d6758 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d676e:	212e      	movs	r1, #46	; 0x2e
   d6770:	4630      	mov	r0, r6
   d6772:	f7fe fc87 	bl	d5084 <_ZN5Print5printEc>
   d6776:	4404      	add	r4, r0
   d6778:	e7ee      	b.n	d6758 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d677a:	232f      	movs	r3, #47	; 0x2f
   d677c:	466a      	mov	r2, sp
   d677e:	4639      	mov	r1, r7
   d6780:	200a      	movs	r0, #10
		buf[0] = 0;
   d6782:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6786:	f7fe f801 	bl	d478c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d678a:	4668      	mov	r0, sp
   d678c:	f000 fdef 	bl	d736e <strlen>
   d6790:	6833      	ldr	r3, [r6, #0]
   d6792:	4602      	mov	r2, r0
   d6794:	68db      	ldr	r3, [r3, #12]
   d6796:	4669      	mov	r1, sp
   d6798:	4630      	mov	r0, r6
   d679a:	4798      	blx	r3
   d679c:	4604      	mov	r4, r0
    }
    return n;
}
   d679e:	4620      	mov	r0, r4
   d67a0:	b00d      	add	sp, #52	; 0x34
   d67a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d67a4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d67a4:	b510      	push	{r4, lr}
   d67a6:	4b05      	ldr	r3, [pc, #20]	; (d67bc <_ZN9IPAddressC1Ev+0x18>)
   d67a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d67aa:	2211      	movs	r2, #17
   d67ac:	f840 3b04 	str.w	r3, [r0], #4
   d67b0:	2100      	movs	r1, #0
   d67b2:	f000 fd69 	bl	d7288 <memset>
}
   d67b6:	4620      	mov	r0, r4
   d67b8:	bd10      	pop	{r4, pc}
   d67ba:	bf00      	nop
   d67bc:	000d76e4 	.word	0x000d76e4

000d67c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d67c0:	4603      	mov	r3, r0
   d67c2:	4a07      	ldr	r2, [pc, #28]	; (d67e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d67c4:	b510      	push	{r4, lr}
   d67c6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d67ca:	f101 0210 	add.w	r2, r1, #16
   d67ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d67d2:	f843 4b04 	str.w	r4, [r3], #4
   d67d6:	4291      	cmp	r1, r2
   d67d8:	d1f9      	bne.n	d67ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d67da:	780a      	ldrb	r2, [r1, #0]
   d67dc:	701a      	strb	r2, [r3, #0]
}
   d67de:	bd10      	pop	{r4, pc}
   d67e0:	000d76e4 	.word	0x000d76e4

000d67e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d67e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d67e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d67ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d67ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d67f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d67f6:	2304      	movs	r3, #4
   d67f8:	6041      	str	r1, [r0, #4]
   d67fa:	7503      	strb	r3, [r0, #20]
}
   d67fc:	bd10      	pop	{r4, pc}
	...

000d6800 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6800:	b513      	push	{r0, r1, r4, lr}
   d6802:	4b05      	ldr	r3, [pc, #20]	; (d6818 <_ZN9IPAddressC1EPKh+0x18>)
   d6804:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6806:	78cb      	ldrb	r3, [r1, #3]
   d6808:	9300      	str	r3, [sp, #0]
   d680a:	788b      	ldrb	r3, [r1, #2]
   d680c:	784a      	ldrb	r2, [r1, #1]
   d680e:	7809      	ldrb	r1, [r1, #0]
   d6810:	f7ff ffe8 	bl	d67e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6814:	b002      	add	sp, #8
   d6816:	bd10      	pop	{r4, pc}
   d6818:	000d76e4 	.word	0x000d76e4

000d681c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d681c:	7441      	strb	r1, [r0, #17]
}
   d681e:	4770      	bx	lr

000d6820 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6820:	4770      	bx	lr

000d6822 <_ZN9USBSerial4readEv>:
{
   d6822:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6824:	2100      	movs	r1, #0
   d6826:	7c00      	ldrb	r0, [r0, #16]
   d6828:	f7fe f878 	bl	d491c <HAL_USB_USART_Receive_Data>
}
   d682c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6830:	bd08      	pop	{r3, pc}

000d6832 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6832:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6834:	2101      	movs	r1, #1
   d6836:	7c00      	ldrb	r0, [r0, #16]
   d6838:	f7fe f870 	bl	d491c <HAL_USB_USART_Receive_Data>
}
   d683c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6840:	bd08      	pop	{r3, pc}

000d6842 <_ZN9USBSerial17availableForWriteEv>:
{
   d6842:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6844:	7c00      	ldrb	r0, [r0, #16]
   d6846:	f7fe f861 	bl	d490c <HAL_USB_USART_Available_Data_For_Write>
}
   d684a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d684e:	bd08      	pop	{r3, pc}

000d6850 <_ZN9USBSerial9availableEv>:
{
   d6850:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6852:	7c00      	ldrb	r0, [r0, #16]
   d6854:	f7fe f852 	bl	d48fc <HAL_USB_USART_Available_Data>
}
   d6858:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d685c:	bd08      	pop	{r3, pc}

000d685e <_ZN9USBSerial5writeEh>:
{
   d685e:	b513      	push	{r0, r1, r4, lr}
   d6860:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6862:	7c00      	ldrb	r0, [r0, #16]
{
   d6864:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6866:	f7fe f851 	bl	d490c <HAL_USB_USART_Available_Data_For_Write>
   d686a:	2800      	cmp	r0, #0
   d686c:	9901      	ldr	r1, [sp, #4]
   d686e:	dc01      	bgt.n	d6874 <_ZN9USBSerial5writeEh+0x16>
   d6870:	7c60      	ldrb	r0, [r4, #17]
   d6872:	b120      	cbz	r0, d687e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6874:	7c20      	ldrb	r0, [r4, #16]
   d6876:	f7fe f859 	bl	d492c <HAL_USB_USART_Send_Data>
   d687a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d687e:	b002      	add	sp, #8
   d6880:	bd10      	pop	{r4, pc}

000d6882 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6882:	7c00      	ldrb	r0, [r0, #16]
   d6884:	f7fe b85a 	b.w	d493c <HAL_USB_USART_Flush_Data>

000d6888 <_ZN9USBSerialD0Ev>:
   d6888:	b510      	push	{r4, lr}
   d688a:	2114      	movs	r1, #20
   d688c:	4604      	mov	r4, r0
   d688e:	f000 fcbc 	bl	d720a <_ZdlPvj>
   d6892:	4620      	mov	r0, r4
   d6894:	bd10      	pop	{r4, pc}
	...

000d6898 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6898:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d689a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d689e:	4604      	mov	r4, r0
   d68a0:	4608      	mov	r0, r1
   d68a2:	2100      	movs	r1, #0
   d68a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d68a8:	4b04      	ldr	r3, [pc, #16]	; (d68bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d68aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d68ac:	2301      	movs	r3, #1
  _serial = serial;
   d68ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d68b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d68b2:	4611      	mov	r1, r2
   d68b4:	f7fe f80a 	bl	d48cc <HAL_USB_USART_Init>
}
   d68b8:	4620      	mov	r0, r4
   d68ba:	bd10      	pop	{r4, pc}
   d68bc:	000d76f8 	.word	0x000d76f8

000d68c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d68c0:	7c00      	ldrb	r0, [r0, #16]
   d68c2:	2200      	movs	r2, #0
   d68c4:	f7fe b80a 	b.w	d48dc <HAL_USB_USART_Begin>

000d68c8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d68c8:	7c00      	ldrb	r0, [r0, #16]
   d68ca:	f7fe b80f 	b.w	d48ec <HAL_USB_USART_End>

000d68ce <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d68ce:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d68d0:	2214      	movs	r2, #20
{
   d68d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d68d4:	2100      	movs	r1, #0
   d68d6:	f000 fcd7 	bl	d7288 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d68da:	4620      	mov	r0, r4
   d68dc:	bd10      	pop	{r4, pc}
	...

000d68e0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d68e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d68e2:	4c10      	ldr	r4, [pc, #64]	; (d6924 <_Z16_fetch_usbserialv+0x44>)
{
   d68e4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d68e6:	a803      	add	r0, sp, #12
   d68e8:	f7ff fff1 	bl	d68ce <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d68ec:	7821      	ldrb	r1, [r4, #0]
   d68ee:	f3bf 8f5b 	dmb	ish
   d68f2:	f011 0101 	ands.w	r1, r1, #1
   d68f6:	d111      	bne.n	d691c <_Z16_fetch_usbserialv+0x3c>
   d68f8:	4620      	mov	r0, r4
   d68fa:	9101      	str	r1, [sp, #4]
   d68fc:	f7fd fbda 	bl	d40b4 <__cxa_guard_acquire>
   d6900:	9901      	ldr	r1, [sp, #4]
   d6902:	b158      	cbz	r0, d691c <_Z16_fetch_usbserialv+0x3c>
   d6904:	aa03      	add	r2, sp, #12
   d6906:	4808      	ldr	r0, [pc, #32]	; (d6928 <_Z16_fetch_usbserialv+0x48>)
   d6908:	f7ff ffc6 	bl	d6898 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d690c:	4620      	mov	r0, r4
   d690e:	f7fd fbd6 	bl	d40be <__cxa_guard_release>
   d6912:	4a06      	ldr	r2, [pc, #24]	; (d692c <_Z16_fetch_usbserialv+0x4c>)
   d6914:	4906      	ldr	r1, [pc, #24]	; (d6930 <_Z16_fetch_usbserialv+0x50>)
   d6916:	4804      	ldr	r0, [pc, #16]	; (d6928 <_Z16_fetch_usbserialv+0x48>)
   d6918:	f000 fc72 	bl	d7200 <__aeabi_atexit>
	return _usbserial;
}
   d691c:	4802      	ldr	r0, [pc, #8]	; (d6928 <_Z16_fetch_usbserialv+0x48>)
   d691e:	b008      	add	sp, #32
   d6920:	bd10      	pop	{r4, pc}
   d6922:	bf00      	nop
   d6924:	2003e654 	.word	0x2003e654
   d6928:	2003e658 	.word	0x2003e658
   d692c:	2003e580 	.word	0x2003e580
   d6930:	000d6821 	.word	0x000d6821

000d6934 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6934:	2200      	movs	r2, #0
   d6936:	6840      	ldr	r0, [r0, #4]
   d6938:	4611      	mov	r1, r2
   d693a:	f7fe b87d 	b.w	d4a38 <network_ready>

000d693e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d693e:	2200      	movs	r2, #0
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	4611      	mov	r1, r2
   d6944:	f7fe b898 	b.w	d4a78 <network_listening>

000d6948 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6948:	2200      	movs	r2, #0
   d694a:	6840      	ldr	r0, [r0, #4]
   d694c:	4611      	mov	r1, r2
   d694e:	f7fe b8a3 	b.w	d4a98 <network_get_listen_timeout>

000d6952 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6952:	6840      	ldr	r0, [r0, #4]
   d6954:	2200      	movs	r2, #0
   d6956:	f7fe b897 	b.w	d4a88 <network_set_listen_timeout>

000d695a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d695a:	6840      	ldr	r0, [r0, #4]
   d695c:	2200      	movs	r2, #0
   d695e:	f081 0101 	eor.w	r1, r1, #1
   d6962:	f7fe b881 	b.w	d4a68 <network_listen>

000d6966 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6966:	2300      	movs	r3, #0
   d6968:	6840      	ldr	r0, [r0, #4]
   d696a:	461a      	mov	r2, r3
   d696c:	4619      	mov	r1, r3
   d696e:	f7fe b873 	b.w	d4a58 <network_off>

000d6972 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6972:	2300      	movs	r3, #0
   d6974:	6840      	ldr	r0, [r0, #4]
   d6976:	461a      	mov	r2, r3
   d6978:	4619      	mov	r1, r3
   d697a:	f7fe b865 	b.w	d4a48 <network_on>

000d697e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d697e:	2200      	movs	r2, #0
   d6980:	6840      	ldr	r0, [r0, #4]
   d6982:	4611      	mov	r1, r2
   d6984:	f7fe b848 	b.w	d4a18 <network_connecting>

000d6988 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6988:	6840      	ldr	r0, [r0, #4]
   d698a:	2200      	movs	r2, #0
   d698c:	2102      	movs	r1, #2
   d698e:	f7fe b84b 	b.w	d4a28 <network_disconnect>

000d6992 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6992:	2300      	movs	r3, #0
   d6994:	6840      	ldr	r0, [r0, #4]
   d6996:	461a      	mov	r2, r3
   d6998:	f7fe b836 	b.w	d4a08 <network_connect>

000d699c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d699c:	4b08      	ldr	r3, [pc, #32]	; (d69c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d699e:	b510      	push	{r4, lr}
   d69a0:	2428      	movs	r4, #40	; 0x28
   d69a2:	4622      	mov	r2, r4
   d69a4:	4618      	mov	r0, r3
   d69a6:	2100      	movs	r1, #0
   d69a8:	f000 fc6e 	bl	d7288 <memset>
   d69ac:	4b05      	ldr	r3, [pc, #20]	; (d69c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d69ae:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d69b0:	f04f 32ff 	mov.w	r2, #4294967295
   d69b4:	6042      	str	r2, [r0, #4]
   d69b6:	2204      	movs	r2, #4
   d69b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d69ba:	4a03      	ldr	r2, [pc, #12]	; (d69c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d69bc:	601a      	str	r2, [r3, #0]
   d69be:	bd10      	pop	{r4, pc}
   d69c0:	2003e674 	.word	0x2003e674
   d69c4:	2003e66c 	.word	0x2003e66c
   d69c8:	000d7728 	.word	0x000d7728

000d69cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d69cc:	4770      	bx	lr

000d69ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69ce:	7441      	strb	r1, [r0, #17]
}
   d69d0:	4770      	bx	lr

000d69d2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d69d2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d69d4:	7c00      	ldrb	r0, [r0, #16]
   d69d6:	f7fd ff21 	bl	d481c <hal_usart_available_data_for_write>
}
   d69da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69de:	bd08      	pop	{r3, pc}

000d69e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d69e0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d69e2:	7c00      	ldrb	r0, [r0, #16]
   d69e4:	f7fd fef2 	bl	d47cc <hal_usart_available>
}
   d69e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69ec:	bd08      	pop	{r3, pc}

000d69ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d69ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d69f0:	7c00      	ldrb	r0, [r0, #16]
   d69f2:	f7fd fefb 	bl	d47ec <hal_usart_peek>
}
   d69f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69fa:	bd08      	pop	{r3, pc}

000d69fc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d69fc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d69fe:	7c00      	ldrb	r0, [r0, #16]
   d6a00:	f7fd feec 	bl	d47dc <hal_usart_read>
}
   d6a04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6a08:	bd08      	pop	{r3, pc}

000d6a0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6a0a:	7c00      	ldrb	r0, [r0, #16]
   d6a0c:	f7fd bef6 	b.w	d47fc <hal_usart_flush>

000d6a10 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6a12:	7c45      	ldrb	r5, [r0, #17]
{
   d6a14:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6a16:	b12d      	cbz	r5, d6a24 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6a18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6a1a:	b003      	add	sp, #12
   d6a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6a20:	f7fd becc 	b.w	d47bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6a24:	7c00      	ldrb	r0, [r0, #16]
   d6a26:	9101      	str	r1, [sp, #4]
   d6a28:	f7fd fef8 	bl	d481c <hal_usart_available_data_for_write>
   d6a2c:	2800      	cmp	r0, #0
   d6a2e:	9901      	ldr	r1, [sp, #4]
   d6a30:	dcf2      	bgt.n	d6a18 <_ZN11USARTSerial5writeEh+0x8>
}
   d6a32:	4628      	mov	r0, r5
   d6a34:	b003      	add	sp, #12
   d6a36:	bd30      	pop	{r4, r5, pc}

000d6a38 <_ZN11USARTSerialD0Ev>:
   d6a38:	b510      	push	{r4, lr}
   d6a3a:	2114      	movs	r1, #20
   d6a3c:	4604      	mov	r4, r0
   d6a3e:	f000 fbe4 	bl	d720a <_ZdlPvj>
   d6a42:	4620      	mov	r0, r4
   d6a44:	bd10      	pop	{r4, pc}
	...

000d6a48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6a48:	b510      	push	{r4, lr}
   d6a4a:	f04f 0c00 	mov.w	ip, #0
   d6a4e:	4604      	mov	r4, r0
   d6a50:	4608      	mov	r0, r1
   d6a52:	4611      	mov	r1, r2
   d6a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a58:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6a5c:	4a04      	ldr	r2, [pc, #16]	; (d6a70 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6a5e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6a60:	2201      	movs	r2, #1
  _serial = serial;
   d6a62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6a64:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6a66:	461a      	mov	r2, r3
   d6a68:	f7fd fe98 	bl	d479c <hal_usart_init>
}
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	bd10      	pop	{r4, pc}
   d6a70:	000d7764 	.word	0x000d7764

000d6a74 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6a74:	7c00      	ldrb	r0, [r0, #16]
   d6a76:	2300      	movs	r3, #0
   d6a78:	f7fd bed8 	b.w	d482c <hal_usart_begin_config>

000d6a7c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6a7c:	2200      	movs	r2, #0
   d6a7e:	f7ff bff9 	b.w	d6a74 <_ZN11USARTSerial5beginEmm>

000d6a82 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d6a82:	7c00      	ldrb	r0, [r0, #16]
   d6a84:	f7fd be92 	b.w	d47ac <hal_usart_end>

000d6a88 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a88:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6a8a:	4c0e      	ldr	r4, [pc, #56]	; (d6ac4 <_Z22__fetch_global_Serial1v+0x3c>)
   d6a8c:	7821      	ldrb	r1, [r4, #0]
   d6a8e:	f3bf 8f5b 	dmb	ish
   d6a92:	f011 0101 	ands.w	r1, r1, #1
   d6a96:	d112      	bne.n	d6abe <_Z22__fetch_global_Serial1v+0x36>
   d6a98:	4620      	mov	r0, r4
   d6a9a:	9101      	str	r1, [sp, #4]
   d6a9c:	f7fd fb0a 	bl	d40b4 <__cxa_guard_acquire>
   d6aa0:	9901      	ldr	r1, [sp, #4]
   d6aa2:	b160      	cbz	r0, d6abe <_Z22__fetch_global_Serial1v+0x36>
   d6aa4:	4a08      	ldr	r2, [pc, #32]	; (d6ac8 <_Z22__fetch_global_Serial1v+0x40>)
   d6aa6:	4b09      	ldr	r3, [pc, #36]	; (d6acc <_Z22__fetch_global_Serial1v+0x44>)
   d6aa8:	4809      	ldr	r0, [pc, #36]	; (d6ad0 <_Z22__fetch_global_Serial1v+0x48>)
   d6aaa:	f7ff ffcd 	bl	d6a48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6aae:	4620      	mov	r0, r4
   d6ab0:	f7fd fb05 	bl	d40be <__cxa_guard_release>
   d6ab4:	4a07      	ldr	r2, [pc, #28]	; (d6ad4 <_Z22__fetch_global_Serial1v+0x4c>)
   d6ab6:	4908      	ldr	r1, [pc, #32]	; (d6ad8 <_Z22__fetch_global_Serial1v+0x50>)
   d6ab8:	4805      	ldr	r0, [pc, #20]	; (d6ad0 <_Z22__fetch_global_Serial1v+0x48>)
   d6aba:	f000 fba1 	bl	d7200 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6abe:	4804      	ldr	r0, [pc, #16]	; (d6ad0 <_Z22__fetch_global_Serial1v+0x48>)
   d6ac0:	b002      	add	sp, #8
   d6ac2:	bd10      	pop	{r4, pc}
   d6ac4:	2003e69c 	.word	0x2003e69c
   d6ac8:	2003e6a0 	.word	0x2003e6a0
   d6acc:	2003e724 	.word	0x2003e724
   d6ad0:	2003e7a8 	.word	0x2003e7a8
   d6ad4:	2003e580 	.word	0x2003e580
   d6ad8:	000d69cd 	.word	0x000d69cd

000d6adc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6adc:	b510      	push	{r4, lr}
      if (_M_empty())
   d6ade:	6883      	ldr	r3, [r0, #8]
   d6ae0:	4604      	mov	r4, r0
   d6ae2:	b90b      	cbnz	r3, d6ae8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6ae4:	f000 fb97 	bl	d7216 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ae8:	68c3      	ldr	r3, [r0, #12]
   d6aea:	4798      	blx	r3
      if (_M_manager)
   d6aec:	68a3      	ldr	r3, [r4, #8]
   d6aee:	b11b      	cbz	r3, d6af8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6af0:	2203      	movs	r2, #3
   d6af2:	4621      	mov	r1, r4
   d6af4:	4620      	mov	r0, r4
   d6af6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6af8:	4620      	mov	r0, r4
   d6afa:	2110      	movs	r1, #16
}
   d6afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6b00:	f000 bb83 	b.w	d720a <_ZdlPvj>

000d6b04 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6b04:	4770      	bx	lr

000d6b06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b08:	4606      	mov	r6, r0
   d6b0a:	4615      	mov	r5, r2
   d6b0c:	460c      	mov	r4, r1
   d6b0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6b10:	42bc      	cmp	r4, r7
   d6b12:	d006      	beq.n	d6b22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6b14:	6833      	ldr	r3, [r6, #0]
   d6b16:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6b1a:	689b      	ldr	r3, [r3, #8]
   d6b1c:	4630      	mov	r0, r6
   d6b1e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6b20:	e7f6      	b.n	d6b10 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6b22:	4628      	mov	r0, r5
   d6b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b26 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6b26:	7c00      	ldrb	r0, [r0, #16]
   d6b28:	2200      	movs	r2, #0
   d6b2a:	f7fd be87 	b.w	d483c <hal_i2c_write>

000d6b2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6b2e:	7c00      	ldrb	r0, [r0, #16]
   d6b30:	2100      	movs	r1, #0
   d6b32:	f7fd be8b 	b.w	d484c <hal_i2c_available>

000d6b36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6b36:	7c00      	ldrb	r0, [r0, #16]
   d6b38:	2100      	movs	r1, #0
   d6b3a:	f7fd be8f 	b.w	d485c <hal_i2c_read>

000d6b3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6b3e:	7c00      	ldrb	r0, [r0, #16]
   d6b40:	2100      	movs	r1, #0
   d6b42:	f7fd be93 	b.w	d486c <hal_i2c_peek>

000d6b46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6b46:	7c00      	ldrb	r0, [r0, #16]
   d6b48:	2100      	movs	r1, #0
   d6b4a:	f7fd be97 	b.w	d487c <hal_i2c_flush>

000d6b4e <_ZN7TwoWireD0Ev>:
   d6b4e:	b510      	push	{r4, lr}
   d6b50:	2114      	movs	r1, #20
   d6b52:	4604      	mov	r4, r0
   d6b54:	f000 fb59 	bl	d720a <_ZdlPvj>
   d6b58:	4620      	mov	r0, r4
   d6b5a:	bd10      	pop	{r4, pc}

000d6b5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6b5c:	b510      	push	{r4, lr}
   d6b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b62:	4604      	mov	r4, r0
   d6b64:	4608      	mov	r0, r1
   d6b66:	2100      	movs	r1, #0
   d6b68:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6b6c:	4b03      	ldr	r3, [pc, #12]	; (d6b7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6b6e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6b70:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6b72:	4611      	mov	r1, r2
   d6b74:	f7fd fe92 	bl	d489c <hal_i2c_init>
}
   d6b78:	4620      	mov	r0, r4
   d6b7a:	bd10      	pop	{r4, pc}
   d6b7c:	000d7794 	.word	0x000d7794

000d6b80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b80:	2300      	movs	r3, #0
   d6b82:	6840      	ldr	r0, [r0, #4]
   d6b84:	461a      	mov	r2, r3
   d6b86:	f7fd bf3f 	b.w	d4a08 <network_connect>

000d6b8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b8a:	6840      	ldr	r0, [r0, #4]
   d6b8c:	2200      	movs	r2, #0
   d6b8e:	2102      	movs	r1, #2
   d6b90:	f7fd bf4a 	b.w	d4a28 <network_disconnect>

000d6b94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b94:	2200      	movs	r2, #0
   d6b96:	6840      	ldr	r0, [r0, #4]
   d6b98:	4611      	mov	r1, r2
   d6b9a:	f7fd bf3d 	b.w	d4a18 <network_connecting>

000d6b9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b9e:	2200      	movs	r2, #0
   d6ba0:	6840      	ldr	r0, [r0, #4]
   d6ba2:	4611      	mov	r1, r2
   d6ba4:	f7fd bf48 	b.w	d4a38 <network_ready>

000d6ba8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6ba8:	2300      	movs	r3, #0
   d6baa:	6840      	ldr	r0, [r0, #4]
   d6bac:	461a      	mov	r2, r3
   d6bae:	4619      	mov	r1, r3
   d6bb0:	f7fd bf4a 	b.w	d4a48 <network_on>

000d6bb4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6bb4:	2300      	movs	r3, #0
   d6bb6:	6840      	ldr	r0, [r0, #4]
   d6bb8:	461a      	mov	r2, r3
   d6bba:	4619      	mov	r1, r3
   d6bbc:	f7fd bf4c 	b.w	d4a58 <network_off>

000d6bc0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6bc0:	6840      	ldr	r0, [r0, #4]
   d6bc2:	2100      	movs	r1, #0
   d6bc4:	f7fd bf70 	b.w	d4aa8 <network_is_on>

000d6bc8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6bc8:	6840      	ldr	r0, [r0, #4]
   d6bca:	2100      	movs	r1, #0
   d6bcc:	f7fd bf74 	b.w	d4ab8 <network_is_off>

000d6bd0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6bd0:	6840      	ldr	r0, [r0, #4]
   d6bd2:	2200      	movs	r2, #0
   d6bd4:	f081 0101 	eor.w	r1, r1, #1
   d6bd8:	f7fd bf46 	b.w	d4a68 <network_listen>

000d6bdc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6bdc:	6840      	ldr	r0, [r0, #4]
   d6bde:	2200      	movs	r2, #0
   d6be0:	f7fd bf52 	b.w	d4a88 <network_set_listen_timeout>

000d6be4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6be4:	2200      	movs	r2, #0
   d6be6:	6840      	ldr	r0, [r0, #4]
   d6be8:	4611      	mov	r1, r2
   d6bea:	f7fd bf55 	b.w	d4a98 <network_get_listen_timeout>

000d6bee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6bee:	2200      	movs	r2, #0
   d6bf0:	6840      	ldr	r0, [r0, #4]
   d6bf2:	4611      	mov	r1, r2
   d6bf4:	f7fd bf40 	b.w	d4a78 <network_listening>

000d6bf8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6bfc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6bfe:	b095      	sub	sp, #84	; 0x54
   d6c00:	4616      	mov	r6, r2
   d6c02:	460d      	mov	r5, r1
   d6c04:	4607      	mov	r7, r0
    IPAddress addr;
   d6c06:	f7ff fdcd 	bl	d67a4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6c0a:	4621      	mov	r1, r4
   d6c0c:	2218      	movs	r2, #24
   d6c0e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6c10:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c12:	f000 fb39 	bl	d7288 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c16:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6c18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c1c:	4621      	mov	r1, r4
   d6c1e:	466b      	mov	r3, sp
   d6c20:	aa0c      	add	r2, sp, #48	; 0x30
   d6c22:	4630      	mov	r0, r6
   d6c24:	f7fd fd5a 	bl	d46dc <netdb_getaddrinfo>
    if (!r) {
   d6c28:	4604      	mov	r4, r0
   d6c2a:	2800      	cmp	r0, #0
   d6c2c:	d14c      	bne.n	d6cc8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c2e:	4602      	mov	r2, r0
   d6c30:	2101      	movs	r1, #1
   d6c32:	6868      	ldr	r0, [r5, #4]
   d6c34:	f7fd ff00 	bl	d4a38 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c38:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c3a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c3c:	4622      	mov	r2, r4
   d6c3e:	6868      	ldr	r0, [r5, #4]
   d6c40:	f7fd fefa 	bl	d4a38 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c44:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c46:	4681      	mov	r9, r0
        bool ok = false;
   d6c48:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c4a:	2e00      	cmp	r6, #0
   d6c4c:	d03c      	beq.n	d6cc8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6c4e:	2900      	cmp	r1, #0
   d6c50:	d13a      	bne.n	d6cc8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c52:	6873      	ldr	r3, [r6, #4]
   d6c54:	2b02      	cmp	r3, #2
   d6c56:	d003      	beq.n	d6c60 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6c58:	2b0a      	cmp	r3, #10
   d6c5a:	d011      	beq.n	d6c80 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c5c:	69f6      	ldr	r6, [r6, #28]
   d6c5e:	e7f4      	b.n	d6c4a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6c60:	f1b8 0f00 	cmp.w	r8, #0
   d6c64:	d00a      	beq.n	d6c7c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c66:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6c68:	a806      	add	r0, sp, #24
   d6c6a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6c6c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6c6e:	f7ff fdc7 	bl	d6800 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c74:	1d3c      	adds	r4, r7, #4
   d6c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c78:	682b      	ldr	r3, [r5, #0]
   d6c7a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6c7c:	4641      	mov	r1, r8
   d6c7e:	e7ed      	b.n	d6c5c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c80:	f1b9 0f00 	cmp.w	r9, #0
   d6c84:	d101      	bne.n	d6c8a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6c86:	4649      	mov	r1, r9
   d6c88:	e7e8      	b.n	d6c5c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c8a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c8c:	2210      	movs	r2, #16
   d6c8e:	a801      	add	r0, sp, #4
   d6c90:	f000 fafa 	bl	d7288 <memset>
                    a.v = 6;
   d6c94:	2306      	movs	r3, #6
   d6c96:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c9a:	ad01      	add	r5, sp, #4
   d6c9c:	f104 0308 	add.w	r3, r4, #8
   d6ca0:	3418      	adds	r4, #24
   d6ca2:	6818      	ldr	r0, [r3, #0]
   d6ca4:	6859      	ldr	r1, [r3, #4]
   d6ca6:	462a      	mov	r2, r5
   d6ca8:	c203      	stmia	r2!, {r0, r1}
   d6caa:	3308      	adds	r3, #8
   d6cac:	42a3      	cmp	r3, r4
   d6cae:	4615      	mov	r5, r2
   d6cb0:	d1f7      	bne.n	d6ca2 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6cb2:	a901      	add	r1, sp, #4
   d6cb4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6cb6:	ad07      	add	r5, sp, #28
   d6cb8:	f7ff fd82 	bl	d67c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cbe:	1d3c      	adds	r4, r7, #4
   d6cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cc2:	682b      	ldr	r3, [r5, #0]
   d6cc4:	7023      	strb	r3, [r4, #0]
   d6cc6:	e7de      	b.n	d6c86 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6cc8:	9800      	ldr	r0, [sp, #0]
   d6cca:	f7fd fcff 	bl	d46cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6cce:	4638      	mov	r0, r7
   d6cd0:	b015      	add	sp, #84	; 0x54
   d6cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6cd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6cd8:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6cda:	4a03      	ldr	r2, [pc, #12]	; (d6ce8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6cdc:	601a      	str	r2, [r3, #0]
   d6cde:	2200      	movs	r2, #0
   d6ce0:	605a      	str	r2, [r3, #4]

} // spark
   d6ce2:	4770      	bx	lr
   d6ce4:	2003e7bc 	.word	0x2003e7bc
   d6ce8:	000d77bc 	.word	0x000d77bc

000d6cec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6cec:	f100 0310 	add.w	r3, r0, #16
   d6cf0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6cf2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6cf6:	2901      	cmp	r1, #1
   d6cf8:	4618      	mov	r0, r3
   d6cfa:	d108      	bne.n	d6d0e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6cfc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6d00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6d04:	3a01      	subs	r2, #1
   d6d06:	f103 0310 	add.w	r3, r3, #16
   d6d0a:	d1f2      	bne.n	d6cf2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6d0c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6d0e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6d10:	bf04      	itt	eq
   d6d12:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6d16:	1852      	addeq	r2, r2, r1
   d6d18:	e7f4      	b.n	d6d04 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6d1a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6d1a:	b40e      	push	{r1, r2, r3}
   d6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d1e:	b088      	sub	sp, #32
   d6d20:	af00      	add	r7, sp, #0
   d6d22:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6d26:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6d28:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6d2c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6d2e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6d30:	462b      	mov	r3, r5
   d6d32:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6d34:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6d36:	f7fd ff27 	bl	d4b88 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6d3a:	280f      	cmp	r0, #15
   d6d3c:	687a      	ldr	r2, [r7, #4]
   d6d3e:	d91a      	bls.n	d6d76 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6d40:	f100 0308 	add.w	r3, r0, #8
   d6d44:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6d48:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6d4a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6d4e:	1c41      	adds	r1, r0, #1
   d6d50:	462b      	mov	r3, r5
   d6d52:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6d54:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6d56:	f7fd ff17 	bl	d4b88 <vsnprintf>
        if (n > 0) {
   d6d5a:	1e02      	subs	r2, r0, #0
   d6d5c:	dd04      	ble.n	d6d68 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6d5e:	6823      	ldr	r3, [r4, #0]
   d6d60:	4669      	mov	r1, sp
   d6d62:	689b      	ldr	r3, [r3, #8]
   d6d64:	4620      	mov	r0, r4
   d6d66:	4798      	blx	r3
   d6d68:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6d6a:	3720      	adds	r7, #32
   d6d6c:	46bd      	mov	sp, r7
   d6d6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6d72:	b003      	add	sp, #12
   d6d74:	4770      	bx	lr
    } else if (n > 0) {
   d6d76:	2800      	cmp	r0, #0
   d6d78:	d0f7      	beq.n	d6d6a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6d7a:	6823      	ldr	r3, [r4, #0]
   d6d7c:	4602      	mov	r2, r0
   d6d7e:	689b      	ldr	r3, [r3, #8]
   d6d80:	f107 0110 	add.w	r1, r7, #16
   d6d84:	4620      	mov	r0, r4
   d6d86:	4798      	blx	r3
}
   d6d88:	e7ef      	b.n	d6d6a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6d8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d8a:	b510      	push	{r4, lr}
          _M_dispose();
   d6d8c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6d8e:	4604      	mov	r4, r0
          _M_dispose();
   d6d90:	689b      	ldr	r3, [r3, #8]
   d6d92:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6d94:	68a3      	ldr	r3, [r4, #8]
   d6d96:	3b01      	subs	r3, #1
   d6d98:	60a3      	str	r3, [r4, #8]
   d6d9a:	b92b      	cbnz	r3, d6da8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6d9c:	6823      	ldr	r3, [r4, #0]
   d6d9e:	4620      	mov	r0, r4
   d6da0:	68db      	ldr	r3, [r3, #12]
    }
   d6da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6da6:	4718      	bx	r3
    }
   d6da8:	bd10      	pop	{r4, pc}

000d6daa <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d6daa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6dac:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6dae:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6db2:	689b      	ldr	r3, [r3, #8]
   d6db4:	2201      	movs	r2, #1
   d6db6:	f10d 0107 	add.w	r1, sp, #7
   d6dba:	4798      	blx	r3
}
   d6dbc:	b003      	add	sp, #12
   d6dbe:	f85d fb04 	ldr.w	pc, [sp], #4

000d6dc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6dc2:	b538      	push	{r3, r4, r5, lr}
   d6dc4:	680b      	ldr	r3, [r1, #0]
   d6dc6:	6003      	str	r3, [r0, #0]
   d6dc8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6dca:	6843      	ldr	r3, [r0, #4]
   d6dcc:	429d      	cmp	r5, r3
    class __shared_ptr
   d6dce:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6dd0:	d00c      	beq.n	d6dec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6dd2:	b115      	cbz	r5, d6dda <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6dd4:	686b      	ldr	r3, [r5, #4]
   d6dd6:	3301      	adds	r3, #1
   d6dd8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6dda:	6860      	ldr	r0, [r4, #4]
   d6ddc:	b128      	cbz	r0, d6dea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6dde:	6843      	ldr	r3, [r0, #4]
   d6de0:	3b01      	subs	r3, #1
   d6de2:	6043      	str	r3, [r0, #4]
   d6de4:	b90b      	cbnz	r3, d6dea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6de6:	f7ff ffd0 	bl	d6d8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6dea:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6dec:	4620      	mov	r0, r4
   d6dee:	bd38      	pop	{r3, r4, r5, pc}

000d6df0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6df0:	460b      	mov	r3, r1
   d6df2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6df4:	2200      	movs	r2, #0
   d6df6:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6df8:	e9c0 2200 	strd	r2, r2, [r0]
   d6dfc:	4604      	mov	r4, r0
        t_ = t;
   d6dfe:	6083      	str	r3, [r0, #8]
    if (t) {
   d6e00:	b90b      	cbnz	r3, d6e06 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6e02:	4620      	mov	r0, r4
   d6e04:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6e06:	f7ff ffdc 	bl	d6dc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6e0a:	e7fa      	b.n	d6e02 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6e0c <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6e0c:	6883      	ldr	r3, [r0, #8]
   d6e0e:	b1eb      	cbz	r3, d6e4c <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6e10:	781a      	ldrb	r2, [r3, #0]
   d6e12:	2a03      	cmp	r2, #3
   d6e14:	d81a      	bhi.n	d6e4c <_ZNK5spark9JSONValue4typeEv+0x40>
   d6e16:	e8df f002 	tbb	[pc, r2]
   d6e1a:	1704      	.short	0x1704
   d6e1c:	1b02      	.short	0x1b02
   d6e1e:	2005      	movs	r0, #5
   d6e20:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6e22:	6802      	ldr	r2, [r0, #0]
   d6e24:	685b      	ldr	r3, [r3, #4]
   d6e26:	6852      	ldr	r2, [r2, #4]
   d6e28:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6e2a:	282d      	cmp	r0, #45	; 0x2d
   d6e2c:	d012      	beq.n	d6e54 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6e2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6e32:	2b09      	cmp	r3, #9
   d6e34:	d90e      	bls.n	d6e54 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6e36:	2874      	cmp	r0, #116	; 0x74
   d6e38:	d00e      	beq.n	d6e58 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6e3a:	2866      	cmp	r0, #102	; 0x66
   d6e3c:	d00c      	beq.n	d6e58 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6e3e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6e42:	4258      	negs	r0, r3
   d6e44:	4158      	adcs	r0, r3
   d6e46:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6e48:	2006      	movs	r0, #6
   d6e4a:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6e4c:	2000      	movs	r0, #0
   d6e4e:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6e50:	2004      	movs	r0, #4
   d6e52:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6e54:	2003      	movs	r0, #3
   d6e56:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6e58:	2002      	movs	r0, #2
}
   d6e5a:	4770      	bx	lr

000d6e5c <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6e5c:	b510      	push	{r4, lr}
   d6e5e:	4604      	mov	r4, r0
    switch (type()) {
   d6e60:	f7ff ffd4 	bl	d6e0c <_ZNK5spark9JSONValue4typeEv>
   d6e64:	2802      	cmp	r0, #2
   d6e66:	d00e      	beq.n	d6e86 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6e68:	1ec3      	subs	r3, r0, #3
   d6e6a:	b2db      	uxtb	r3, r3
   d6e6c:	2b01      	cmp	r3, #1
   d6e6e:	d814      	bhi.n	d6e9a <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6e70:	6822      	ldr	r2, [r4, #0]
   d6e72:	68a3      	ldr	r3, [r4, #8]
   d6e74:	6850      	ldr	r0, [r2, #4]
   d6e76:	685b      	ldr	r3, [r3, #4]
}
   d6e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6e7c:	220a      	movs	r2, #10
   d6e7e:	2100      	movs	r1, #0
   d6e80:	4418      	add	r0, r3
   d6e82:	f000 bb1d 	b.w	d74c0 <strtol>
        const char* const s = d_->json + t_->start;
   d6e86:	6822      	ldr	r2, [r4, #0]
   d6e88:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6e8a:	6852      	ldr	r2, [r2, #4]
   d6e8c:	685b      	ldr	r3, [r3, #4]
   d6e8e:	5cd0      	ldrb	r0, [r2, r3]
   d6e90:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6e94:	4258      	negs	r0, r3
   d6e96:	4158      	adcs	r0, r3
}
   d6e98:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6e9a:	2000      	movs	r0, #0
   d6e9c:	e7fc      	b.n	d6e98 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d6ea0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6ea0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6ea2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6ea4:	e9c0 3300 	strd	r3, r3, [r0]
   d6ea8:	4604      	mov	r4, r0
        n_(0) {
   d6eaa:	480e      	ldr	r0, [pc, #56]	; (d6ee4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6eac:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6eb0:	b1a9      	cbz	r1, d6ede <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6eb2:	780b      	ldrb	r3, [r1, #0]
   d6eb4:	2b03      	cmp	r3, #3
   d6eb6:	d006      	beq.n	d6ec6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6eb8:	b98b      	cbnz	r3, d6ede <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6eba:	6813      	ldr	r3, [r2, #0]
   d6ebc:	6858      	ldr	r0, [r3, #4]
   d6ebe:	684b      	ldr	r3, [r1, #4]
   d6ec0:	5cc3      	ldrb	r3, [r0, r3]
   d6ec2:	2b6e      	cmp	r3, #110	; 0x6e
   d6ec4:	d007      	beq.n	d6ed6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6ec6:	6813      	ldr	r3, [r2, #0]
   d6ec8:	684d      	ldr	r5, [r1, #4]
   d6eca:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6ecc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6ece:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6ed0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6ed2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6ed4:	60e3      	str	r3, [r4, #12]
   d6ed6:	4611      	mov	r1, r2
   d6ed8:	4620      	mov	r0, r4
   d6eda:	f7ff ff72 	bl	d6dc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6ede:	4620      	mov	r0, r4
   d6ee0:	bd38      	pop	{r3, r4, r5, pc}
   d6ee2:	bf00      	nop
   d6ee4:	000d7610 	.word	0x000d7610

000d6ee8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6ee8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6eea:	2500      	movs	r5, #0
   d6eec:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6eee:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6ef2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6ef6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6efa:	4604      	mov	r4, r0
   d6efc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6efe:	b14b      	cbz	r3, d6f14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6f00:	781a      	ldrb	r2, [r3, #0]
   d6f02:	2a01      	cmp	r2, #1
   d6f04:	d106      	bne.n	d6f14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6f06:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6f0a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6f0c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6f0e:	6143      	str	r3, [r0, #20]
   d6f10:	f7ff ff57 	bl	d6dc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6f14:	4620      	mov	r0, r4
   d6f16:	bd38      	pop	{r3, r4, r5, pc}

000d6f18 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6f18:	b510      	push	{r4, lr}
    if (!n_) {
   d6f1a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6f1c:	4604      	mov	r4, r0
    if (!n_) {
   d6f1e:	b163      	cbz	r3, d6f3a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6f20:	6880      	ldr	r0, [r0, #8]
   d6f22:	60e0      	str	r0, [r4, #12]
    --n_;
   d6f24:	3b01      	subs	r3, #1
    ++t_;
   d6f26:	3010      	adds	r0, #16
   d6f28:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6f2a:	6120      	str	r0, [r4, #16]
    --n_;
   d6f2c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6f2e:	b113      	cbz	r3, d6f36 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6f30:	f7ff fedc 	bl	d6cec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6f34:	60a0      	str	r0, [r4, #8]
    return true;
   d6f36:	2001      	movs	r0, #1
   d6f38:	e000      	b.n	d6f3c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6f3a:	4618      	mov	r0, r3
}
   d6f3c:	bd10      	pop	{r4, pc}

000d6f3e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6f3e:	b510      	push	{r4, lr}
    write('}');
   d6f40:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6f42:	4604      	mov	r4, r0
    write('}');
   d6f44:	f7ff ff31 	bl	d6daa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6f48:	2301      	movs	r3, #1
   d6f4a:	7123      	strb	r3, [r4, #4]
}
   d6f4c:	4620      	mov	r0, r4
   d6f4e:	bd10      	pop	{r4, pc}

000d6f50 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6f50:	b508      	push	{r3, lr}
    switch (state_) {
   d6f52:	7903      	ldrb	r3, [r0, #4]
   d6f54:	2b01      	cmp	r3, #1
   d6f56:	d002      	beq.n	d6f5e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6f58:	2b02      	cmp	r3, #2
   d6f5a:	d004      	beq.n	d6f66 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6f5c:	bd08      	pop	{r3, pc}
        write(',');
   d6f5e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6f60:	f7ff ff23 	bl	d6daa <_ZN5spark10JSONWriter5writeEc>
}
   d6f64:	e7fa      	b.n	d6f5c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6f66:	213a      	movs	r1, #58	; 0x3a
   d6f68:	e7fa      	b.n	d6f60 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6f6a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6f6a:	b510      	push	{r4, lr}
   d6f6c:	4604      	mov	r4, r0
    writeSeparator();
   d6f6e:	f7ff ffef 	bl	d6f50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6f72:	4620      	mov	r0, r4
   d6f74:	217b      	movs	r1, #123	; 0x7b
   d6f76:	f7ff ff18 	bl	d6daa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6f7a:	2300      	movs	r3, #0
   d6f7c:	7123      	strb	r3, [r4, #4]
}
   d6f7e:	4620      	mov	r0, r4
   d6f80:	bd10      	pop	{r4, pc}
	...

000d6f84 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6f84:	b513      	push	{r0, r1, r4, lr}
   d6f86:	4604      	mov	r4, r0
   d6f88:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6f8a:	f7ff ffe1 	bl	d6f50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6f8e:	6823      	ldr	r3, [r4, #0]
   d6f90:	9a01      	ldr	r2, [sp, #4]
   d6f92:	68db      	ldr	r3, [r3, #12]
   d6f94:	4903      	ldr	r1, [pc, #12]	; (d6fa4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6f96:	4620      	mov	r0, r4
   d6f98:	4798      	blx	r3
    state_ = NEXT;
   d6f9a:	2301      	movs	r3, #1
}
   d6f9c:	4620      	mov	r0, r4
    state_ = NEXT;
   d6f9e:	7123      	strb	r3, [r4, #4]
}
   d6fa0:	b002      	add	sp, #8
   d6fa2:	bd10      	pop	{r4, pc}
   d6fa4:	000d74e8 	.word	0x000d74e8

000d6fa8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6fa8:	b513      	push	{r0, r1, r4, lr}
   d6faa:	4604      	mov	r4, r0
   d6fac:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6fae:	f7ff ffcf 	bl	d6f50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6fb2:	6823      	ldr	r3, [r4, #0]
   d6fb4:	9a01      	ldr	r2, [sp, #4]
   d6fb6:	68db      	ldr	r3, [r3, #12]
   d6fb8:	4903      	ldr	r1, [pc, #12]	; (d6fc8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6fba:	4620      	mov	r0, r4
   d6fbc:	4798      	blx	r3
    state_ = NEXT;
   d6fbe:	2301      	movs	r3, #1
}
   d6fc0:	4620      	mov	r0, r4
    state_ = NEXT;
   d6fc2:	7123      	strb	r3, [r4, #4]
}
   d6fc4:	b002      	add	sp, #8
   d6fc6:	bd10      	pop	{r4, pc}
   d6fc8:	000d77f0 	.word	0x000d77f0

000d6fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6fd0:	460d      	mov	r5, r1
   d6fd2:	4617      	mov	r7, r2
    write('"');
   d6fd4:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6fd6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d7078 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6fda:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6fdc:	442f      	add	r7, r5
    write('"');
   d6fde:	f7ff fee4 	bl	d6daa <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6fe2:	4629      	mov	r1, r5
    while (s != end) {
   d6fe4:	42bd      	cmp	r5, r7
   d6fe6:	462a      	mov	r2, r5
   d6fe8:	d038      	beq.n	d705c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6fea:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6fee:	2e22      	cmp	r6, #34	; 0x22
   d6ff0:	d003      	beq.n	d6ffa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6ff2:	2e5c      	cmp	r6, #92	; 0x5c
   d6ff4:	d001      	beq.n	d6ffa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6ff6:	2e1f      	cmp	r6, #31
   d6ff8:	d8f4      	bhi.n	d6fe4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6ffa:	6823      	ldr	r3, [r4, #0]
   d6ffc:	1a52      	subs	r2, r2, r1
   d6ffe:	689b      	ldr	r3, [r3, #8]
   d7000:	4620      	mov	r0, r4
   d7002:	4798      	blx	r3
            write('\\');
   d7004:	215c      	movs	r1, #92	; 0x5c
   d7006:	4620      	mov	r0, r4
   d7008:	f7ff fecf 	bl	d6daa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d700c:	2e0d      	cmp	r6, #13
   d700e:	d80a      	bhi.n	d7026 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d7010:	2e07      	cmp	r6, #7
   d7012:	d91c      	bls.n	d704e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d7014:	f1a6 0308 	sub.w	r3, r6, #8
   d7018:	2b05      	cmp	r3, #5
   d701a:	d818      	bhi.n	d704e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d701c:	e8df f003 	tbb	[pc, r3]
   d7020:	17110f0d 	.word	0x17110f0d
   d7024:	1513      	.short	0x1513
   d7026:	2e22      	cmp	r6, #34	; 0x22
   d7028:	d001      	beq.n	d702e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d702a:	2e5c      	cmp	r6, #92	; 0x5c
   d702c:	d10f      	bne.n	d704e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d702e:	4631      	mov	r1, r6
                write('b');
   d7030:	4620      	mov	r0, r4
   d7032:	f7ff feba 	bl	d6daa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d7036:	4629      	mov	r1, r5
    while (s != end) {
   d7038:	e7d4      	b.n	d6fe4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d703a:	2162      	movs	r1, #98	; 0x62
   d703c:	e7f8      	b.n	d7030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d703e:	2174      	movs	r1, #116	; 0x74
   d7040:	e7f6      	b.n	d7030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d7042:	216e      	movs	r1, #110	; 0x6e
   d7044:	e7f4      	b.n	d7030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d7046:	2166      	movs	r1, #102	; 0x66
   d7048:	e7f2      	b.n	d7030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d704a:	2172      	movs	r1, #114	; 0x72
   d704c:	e7f0      	b.n	d7030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d704e:	6823      	ldr	r3, [r4, #0]
   d7050:	4632      	mov	r2, r6
   d7052:	68db      	ldr	r3, [r3, #12]
   d7054:	4641      	mov	r1, r8
   d7056:	4620      	mov	r0, r4
   d7058:	4798      	blx	r3
                break;
   d705a:	e7ec      	b.n	d7036 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d705c:	428d      	cmp	r5, r1
   d705e:	d004      	beq.n	d706a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d7060:	6823      	ldr	r3, [r4, #0]
   d7062:	1a6a      	subs	r2, r5, r1
   d7064:	689b      	ldr	r3, [r3, #8]
   d7066:	4620      	mov	r0, r4
   d7068:	4798      	blx	r3
    }
    write('"');
   d706a:	2122      	movs	r1, #34	; 0x22
   d706c:	4620      	mov	r0, r4
   d706e:	f7ff fe9c 	bl	d6daa <_ZN5spark10JSONWriter5writeEc>
}
   d7072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7076:	bf00      	nop
   d7078:	000d77f3 	.word	0x000d77f3

000d707c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d707c:	b513      	push	{r0, r1, r4, lr}
   d707e:	4604      	mov	r4, r0
   d7080:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7084:	f7ff ff64 	bl	d6f50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d7088:	4620      	mov	r0, r4
   d708a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d708e:	f7ff ff9d 	bl	d6fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d7092:	2302      	movs	r3, #2
}
   d7094:	4620      	mov	r0, r4
    state_ = VALUE;
   d7096:	7123      	strb	r3, [r4, #4]
}
   d7098:	b002      	add	sp, #8
   d709a:	bd10      	pop	{r4, pc}

000d709c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d709c:	b513      	push	{r0, r1, r4, lr}
   d709e:	4604      	mov	r4, r0
   d70a0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d70a4:	f7ff ff54 	bl	d6f50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d70a8:	4620      	mov	r0, r4
   d70aa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d70ae:	f7ff ff8d 	bl	d6fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d70b2:	2301      	movs	r3, #1
}
   d70b4:	4620      	mov	r0, r4
    state_ = NEXT;
   d70b6:	7123      	strb	r3, [r4, #4]
}
   d70b8:	b002      	add	sp, #8
   d70ba:	bd10      	pop	{r4, pc}

000d70bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d70bc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d70be:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d70c0:	d902      	bls.n	d70c8 <pinAvailable+0xc>
    return false;
   d70c2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d70c4:	b002      	add	sp, #8
   d70c6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d70c8:	f1a0 030b 	sub.w	r3, r0, #11
   d70cc:	2b02      	cmp	r3, #2
   d70ce:	d81a      	bhi.n	d7106 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d70d0:	4c17      	ldr	r4, [pc, #92]	; (d7130 <pinAvailable+0x74>)
   d70d2:	7821      	ldrb	r1, [r4, #0]
   d70d4:	f3bf 8f5b 	dmb	ish
   d70d8:	f011 0101 	ands.w	r1, r1, #1
   d70dc:	d10b      	bne.n	d70f6 <pinAvailable+0x3a>
   d70de:	4620      	mov	r0, r4
   d70e0:	9101      	str	r1, [sp, #4]
   d70e2:	f7fc ffe7 	bl	d40b4 <__cxa_guard_acquire>
   d70e6:	9901      	ldr	r1, [sp, #4]
   d70e8:	b128      	cbz	r0, d70f6 <pinAvailable+0x3a>
   d70ea:	4812      	ldr	r0, [pc, #72]	; (d7134 <pinAvailable+0x78>)
   d70ec:	f7fd fdaa 	bl	d4c44 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d70f0:	4620      	mov	r0, r4
   d70f2:	f7fc ffe4 	bl	d40be <__cxa_guard_release>
   d70f6:	4b0f      	ldr	r3, [pc, #60]	; (d7134 <pinAvailable+0x78>)
   d70f8:	7818      	ldrb	r0, [r3, #0]
   d70fa:	f7fd fbdf 	bl	d48bc <hal_spi_is_enabled>
   d70fe:	2800      	cmp	r0, #0
   d7100:	d1df      	bne.n	d70c2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7102:	2001      	movs	r0, #1
   d7104:	e7de      	b.n	d70c4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7106:	2801      	cmp	r0, #1
   d7108:	d809      	bhi.n	d711e <pinAvailable+0x62>
   d710a:	f000 f851 	bl	d71b0 <_Z19__fetch_global_Wirev>
   d710e:	2100      	movs	r1, #0
   d7110:	7c00      	ldrb	r0, [r0, #16]
   d7112:	f7fd fbbb 	bl	d488c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7116:	f080 0001 	eor.w	r0, r0, #1
   d711a:	b2c0      	uxtb	r0, r0
   d711c:	e7d2      	b.n	d70c4 <pinAvailable+0x8>
   d711e:	3809      	subs	r0, #9
   d7120:	2801      	cmp	r0, #1
   d7122:	d8ee      	bhi.n	d7102 <pinAvailable+0x46>
   d7124:	f7ff fcb0 	bl	d6a88 <_Z22__fetch_global_Serial1v>
   d7128:	7c00      	ldrb	r0, [r0, #16]
   d712a:	f7fd fb6f 	bl	d480c <hal_usart_is_enabled>
   d712e:	e7f2      	b.n	d7116 <pinAvailable+0x5a>
   d7130:	2003e7c4 	.word	0x2003e7c4
   d7134:	2003e7c8 	.word	0x2003e7c8

000d7138 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7138:	2823      	cmp	r0, #35	; 0x23
{
   d713a:	b538      	push	{r3, r4, r5, lr}
   d713c:	4604      	mov	r4, r0
   d713e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7140:	d80a      	bhi.n	d7158 <pinMode+0x20>
   d7142:	29ff      	cmp	r1, #255	; 0xff
   d7144:	d008      	beq.n	d7158 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7146:	f7ff ffb9 	bl	d70bc <pinAvailable>
   d714a:	b128      	cbz	r0, d7158 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d714c:	4629      	mov	r1, r5
   d714e:	4620      	mov	r0, r4
}
   d7150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7154:	f7fd baca 	b.w	d46ec <HAL_Pin_Mode>
}
   d7158:	bd38      	pop	{r3, r4, r5, pc}

000d715a <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d715a:	b510      	push	{r4, lr}
   d715c:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d715e:	f7fd facd 	bl	d46fc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7162:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7164:	b2db      	uxtb	r3, r3
   d7166:	2b01      	cmp	r3, #1
   d7168:	d908      	bls.n	d717c <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d716a:	4620      	mov	r0, r4
   d716c:	f7ff ffa6 	bl	d70bc <pinAvailable>
   d7170:	b120      	cbz	r0, d717c <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7172:	4620      	mov	r0, r4
}
   d7174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7178:	f7fd bac8 	b.w	d470c <HAL_GPIO_Read>
}
   d717c:	2000      	movs	r0, #0
   d717e:	bd10      	pop	{r4, pc}

000d7180 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7180:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7182:	2300      	movs	r3, #0
   d7184:	2520      	movs	r5, #32
   d7186:	8043      	strh	r3, [r0, #2]
   d7188:	2314      	movs	r3, #20
{
   d718a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d718c:	8003      	strh	r3, [r0, #0]
   d718e:	6085      	str	r5, [r0, #8]
   d7190:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7192:	4906      	ldr	r1, [pc, #24]	; (d71ac <_Z17acquireWireBufferv+0x2c>)
   d7194:	4628      	mov	r0, r5
   d7196:	f000 f83c 	bl	d7212 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d719a:	4904      	ldr	r1, [pc, #16]	; (d71ac <_Z17acquireWireBufferv+0x2c>)
	};
   d719c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d719e:	4628      	mov	r0, r5
   d71a0:	f000 f837 	bl	d7212 <_ZnajRKSt9nothrow_t>
	};
   d71a4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d71a6:	4620      	mov	r0, r4
   d71a8:	bd38      	pop	{r3, r4, r5, pc}
   d71aa:	bf00      	nop
   d71ac:	000d77f9 	.word	0x000d77f9

000d71b0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d71b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d71b2:	4d0f      	ldr	r5, [pc, #60]	; (d71f0 <_Z19__fetch_global_Wirev+0x40>)
   d71b4:	7829      	ldrb	r1, [r5, #0]
   d71b6:	f3bf 8f5b 	dmb	ish
   d71ba:	f011 0401 	ands.w	r4, r1, #1
{
   d71be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d71c0:	d113      	bne.n	d71ea <_Z19__fetch_global_Wirev+0x3a>
   d71c2:	4628      	mov	r0, r5
   d71c4:	f7fc ff76 	bl	d40b4 <__cxa_guard_acquire>
   d71c8:	b178      	cbz	r0, d71ea <_Z19__fetch_global_Wirev+0x3a>
   d71ca:	a801      	add	r0, sp, #4
   d71cc:	f7ff ffd8 	bl	d7180 <_Z17acquireWireBufferv>
   d71d0:	aa01      	add	r2, sp, #4
   d71d2:	4621      	mov	r1, r4
   d71d4:	4807      	ldr	r0, [pc, #28]	; (d71f4 <_Z19__fetch_global_Wirev+0x44>)
   d71d6:	f7ff fcc1 	bl	d6b5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d71da:	4628      	mov	r0, r5
   d71dc:	f7fc ff6f 	bl	d40be <__cxa_guard_release>
   d71e0:	4a05      	ldr	r2, [pc, #20]	; (d71f8 <_Z19__fetch_global_Wirev+0x48>)
   d71e2:	4906      	ldr	r1, [pc, #24]	; (d71fc <_Z19__fetch_global_Wirev+0x4c>)
   d71e4:	4803      	ldr	r0, [pc, #12]	; (d71f4 <_Z19__fetch_global_Wirev+0x44>)
   d71e6:	f000 f80b 	bl	d7200 <__aeabi_atexit>
	return wire;
}
   d71ea:	4802      	ldr	r0, [pc, #8]	; (d71f4 <_Z19__fetch_global_Wirev+0x44>)
   d71ec:	b007      	add	sp, #28
   d71ee:	bd30      	pop	{r4, r5, pc}
   d71f0:	2003e7d8 	.word	0x2003e7d8
   d71f4:	2003e7dc 	.word	0x2003e7dc
   d71f8:	2003e580 	.word	0x2003e580
   d71fc:	000d6b05 	.word	0x000d6b05

000d7200 <__aeabi_atexit>:
   d7200:	460b      	mov	r3, r1
   d7202:	4601      	mov	r1, r0
   d7204:	4618      	mov	r0, r3
   d7206:	f000 b809 	b.w	d721c <__cxa_atexit>

000d720a <_ZdlPvj>:
   d720a:	f7fc bf46 	b.w	d409a <_ZdlPv>

000d720e <_ZnwjRKSt9nothrow_t>:
   d720e:	f7fc bf40 	b.w	d4092 <_Znwj>

000d7212 <_ZnajRKSt9nothrow_t>:
   d7212:	f7fc bf40 	b.w	d4096 <_Znaj>

000d7216 <_ZSt25__throw_bad_function_callv>:
   d7216:	b508      	push	{r3, lr}
   d7218:	f7fd fcbe 	bl	d4b98 <abort>

000d721c <__cxa_atexit>:
   d721c:	b510      	push	{r4, lr}
   d721e:	4c05      	ldr	r4, [pc, #20]	; (d7234 <__cxa_atexit+0x18>)
   d7220:	4613      	mov	r3, r2
   d7222:	b12c      	cbz	r4, d7230 <__cxa_atexit+0x14>
   d7224:	460a      	mov	r2, r1
   d7226:	4601      	mov	r1, r0
   d7228:	2002      	movs	r0, #2
   d722a:	f3af 8000 	nop.w
   d722e:	bd10      	pop	{r4, pc}
   d7230:	4620      	mov	r0, r4
   d7232:	e7fc      	b.n	d722e <__cxa_atexit+0x12>
   d7234:	00000000 	.word	0x00000000

000d7238 <memcpy>:
   d7238:	440a      	add	r2, r1
   d723a:	4291      	cmp	r1, r2
   d723c:	f100 33ff 	add.w	r3, r0, #4294967295
   d7240:	d100      	bne.n	d7244 <memcpy+0xc>
   d7242:	4770      	bx	lr
   d7244:	b510      	push	{r4, lr}
   d7246:	f811 4b01 	ldrb.w	r4, [r1], #1
   d724a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d724e:	4291      	cmp	r1, r2
   d7250:	d1f9      	bne.n	d7246 <memcpy+0xe>
   d7252:	bd10      	pop	{r4, pc}

000d7254 <memmove>:
   d7254:	4288      	cmp	r0, r1
   d7256:	b510      	push	{r4, lr}
   d7258:	eb01 0402 	add.w	r4, r1, r2
   d725c:	d902      	bls.n	d7264 <memmove+0x10>
   d725e:	4284      	cmp	r4, r0
   d7260:	4623      	mov	r3, r4
   d7262:	d807      	bhi.n	d7274 <memmove+0x20>
   d7264:	1e43      	subs	r3, r0, #1
   d7266:	42a1      	cmp	r1, r4
   d7268:	d008      	beq.n	d727c <memmove+0x28>
   d726a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d726e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7272:	e7f8      	b.n	d7266 <memmove+0x12>
   d7274:	4402      	add	r2, r0
   d7276:	4601      	mov	r1, r0
   d7278:	428a      	cmp	r2, r1
   d727a:	d100      	bne.n	d727e <memmove+0x2a>
   d727c:	bd10      	pop	{r4, pc}
   d727e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7282:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7286:	e7f7      	b.n	d7278 <memmove+0x24>

000d7288 <memset>:
   d7288:	4402      	add	r2, r0
   d728a:	4603      	mov	r3, r0
   d728c:	4293      	cmp	r3, r2
   d728e:	d100      	bne.n	d7292 <memset+0xa>
   d7290:	4770      	bx	lr
   d7292:	f803 1b01 	strb.w	r1, [r3], #1
   d7296:	e7f9      	b.n	d728c <memset+0x4>

000d7298 <srand>:
   d7298:	b538      	push	{r3, r4, r5, lr}
   d729a:	4b0d      	ldr	r3, [pc, #52]	; (d72d0 <srand+0x38>)
   d729c:	681d      	ldr	r5, [r3, #0]
   d729e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d72a0:	4604      	mov	r4, r0
   d72a2:	b97b      	cbnz	r3, d72c4 <srand+0x2c>
   d72a4:	2018      	movs	r0, #24
   d72a6:	f7fd fc4f 	bl	d4b48 <malloc>
   d72aa:	4a0a      	ldr	r2, [pc, #40]	; (d72d4 <srand+0x3c>)
   d72ac:	4b0a      	ldr	r3, [pc, #40]	; (d72d8 <srand+0x40>)
   d72ae:	63a8      	str	r0, [r5, #56]	; 0x38
   d72b0:	e9c0 2300 	strd	r2, r3, [r0]
   d72b4:	4b09      	ldr	r3, [pc, #36]	; (d72dc <srand+0x44>)
   d72b6:	6083      	str	r3, [r0, #8]
   d72b8:	230b      	movs	r3, #11
   d72ba:	8183      	strh	r3, [r0, #12]
   d72bc:	2201      	movs	r2, #1
   d72be:	2300      	movs	r3, #0
   d72c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d72c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d72c6:	2200      	movs	r2, #0
   d72c8:	611c      	str	r4, [r3, #16]
   d72ca:	615a      	str	r2, [r3, #20]
   d72cc:	bd38      	pop	{r3, r4, r5, pc}
   d72ce:	bf00      	nop
   d72d0:	2003e51c 	.word	0x2003e51c
   d72d4:	abcd330e 	.word	0xabcd330e
   d72d8:	e66d1234 	.word	0xe66d1234
   d72dc:	0005deec 	.word	0x0005deec

000d72e0 <strchr>:
   d72e0:	b2c9      	uxtb	r1, r1
   d72e2:	4603      	mov	r3, r0
   d72e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d72e8:	b11a      	cbz	r2, d72f2 <strchr+0x12>
   d72ea:	428a      	cmp	r2, r1
   d72ec:	d1f9      	bne.n	d72e2 <strchr+0x2>
   d72ee:	4618      	mov	r0, r3
   d72f0:	4770      	bx	lr
   d72f2:	2900      	cmp	r1, #0
   d72f4:	bf18      	it	ne
   d72f6:	2300      	movne	r3, #0
   d72f8:	e7f9      	b.n	d72ee <strchr+0xe>

000d72fa <strchrnul>:
   d72fa:	b510      	push	{r4, lr}
   d72fc:	4604      	mov	r4, r0
   d72fe:	f7ff ffef 	bl	d72e0 <strchr>
   d7302:	b918      	cbnz	r0, d730c <strchrnul+0x12>
   d7304:	4620      	mov	r0, r4
   d7306:	f000 f832 	bl	d736e <strlen>
   d730a:	4420      	add	r0, r4
   d730c:	bd10      	pop	{r4, pc}

000d730e <strcmp>:
   d730e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7312:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7316:	2a01      	cmp	r2, #1
   d7318:	bf28      	it	cs
   d731a:	429a      	cmpcs	r2, r3
   d731c:	d0f7      	beq.n	d730e <strcmp>
   d731e:	1ad0      	subs	r0, r2, r3
   d7320:	4770      	bx	lr

000d7322 <strcpy>:
   d7322:	4603      	mov	r3, r0
   d7324:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7328:	f803 2b01 	strb.w	r2, [r3], #1
   d732c:	2a00      	cmp	r2, #0
   d732e:	d1f9      	bne.n	d7324 <strcpy+0x2>
   d7330:	4770      	bx	lr
	...

000d7334 <strdup>:
   d7334:	4b02      	ldr	r3, [pc, #8]	; (d7340 <strdup+0xc>)
   d7336:	4601      	mov	r1, r0
   d7338:	6818      	ldr	r0, [r3, #0]
   d733a:	f000 b803 	b.w	d7344 <_strdup_r>
   d733e:	bf00      	nop
   d7340:	2003e51c 	.word	0x2003e51c

000d7344 <_strdup_r>:
   d7344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7346:	4604      	mov	r4, r0
   d7348:	4608      	mov	r0, r1
   d734a:	460d      	mov	r5, r1
   d734c:	f000 f80f 	bl	d736e <strlen>
   d7350:	1c42      	adds	r2, r0, #1
   d7352:	4611      	mov	r1, r2
   d7354:	4620      	mov	r0, r4
   d7356:	9201      	str	r2, [sp, #4]
   d7358:	f7fd fc26 	bl	d4ba8 <_malloc_r>
   d735c:	4604      	mov	r4, r0
   d735e:	b118      	cbz	r0, d7368 <_strdup_r+0x24>
   d7360:	9a01      	ldr	r2, [sp, #4]
   d7362:	4629      	mov	r1, r5
   d7364:	f7ff ff68 	bl	d7238 <memcpy>
   d7368:	4620      	mov	r0, r4
   d736a:	b003      	add	sp, #12
   d736c:	bd30      	pop	{r4, r5, pc}

000d736e <strlen>:
   d736e:	4603      	mov	r3, r0
   d7370:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7374:	2a00      	cmp	r2, #0
   d7376:	d1fb      	bne.n	d7370 <strlen+0x2>
   d7378:	1a18      	subs	r0, r3, r0
   d737a:	3801      	subs	r0, #1
   d737c:	4770      	bx	lr

000d737e <strncmp>:
   d737e:	b510      	push	{r4, lr}
   d7380:	b16a      	cbz	r2, d739e <strncmp+0x20>
   d7382:	3901      	subs	r1, #1
   d7384:	1884      	adds	r4, r0, r2
   d7386:	f810 3b01 	ldrb.w	r3, [r0], #1
   d738a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d738e:	4293      	cmp	r3, r2
   d7390:	d103      	bne.n	d739a <strncmp+0x1c>
   d7392:	42a0      	cmp	r0, r4
   d7394:	d001      	beq.n	d739a <strncmp+0x1c>
   d7396:	2b00      	cmp	r3, #0
   d7398:	d1f5      	bne.n	d7386 <strncmp+0x8>
   d739a:	1a98      	subs	r0, r3, r2
   d739c:	bd10      	pop	{r4, pc}
   d739e:	4610      	mov	r0, r2
   d73a0:	e7fc      	b.n	d739c <strncmp+0x1e>

000d73a2 <strrchr>:
   d73a2:	b538      	push	{r3, r4, r5, lr}
   d73a4:	4603      	mov	r3, r0
   d73a6:	460c      	mov	r4, r1
   d73a8:	b969      	cbnz	r1, d73c6 <strrchr+0x24>
   d73aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d73ae:	f7ff bf97 	b.w	d72e0 <strchr>
   d73b2:	1c43      	adds	r3, r0, #1
   d73b4:	4605      	mov	r5, r0
   d73b6:	4621      	mov	r1, r4
   d73b8:	4618      	mov	r0, r3
   d73ba:	f7ff ff91 	bl	d72e0 <strchr>
   d73be:	2800      	cmp	r0, #0
   d73c0:	d1f7      	bne.n	d73b2 <strrchr+0x10>
   d73c2:	4628      	mov	r0, r5
   d73c4:	bd38      	pop	{r3, r4, r5, pc}
   d73c6:	2500      	movs	r5, #0
   d73c8:	e7f5      	b.n	d73b6 <strrchr+0x14>
	...

000d73cc <_strtol_l.isra.0>:
   d73cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d73d0:	4e3a      	ldr	r6, [pc, #232]	; (d74bc <_strtol_l.isra.0+0xf0>)
   d73d2:	4686      	mov	lr, r0
   d73d4:	468c      	mov	ip, r1
   d73d6:	4660      	mov	r0, ip
   d73d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d73dc:	5da5      	ldrb	r5, [r4, r6]
   d73de:	f015 0508 	ands.w	r5, r5, #8
   d73e2:	d1f8      	bne.n	d73d6 <_strtol_l.isra.0+0xa>
   d73e4:	2c2d      	cmp	r4, #45	; 0x2d
   d73e6:	d133      	bne.n	d7450 <_strtol_l.isra.0+0x84>
   d73e8:	f89c 4000 	ldrb.w	r4, [ip]
   d73ec:	f04f 0801 	mov.w	r8, #1
   d73f0:	f100 0c02 	add.w	ip, r0, #2
   d73f4:	2b00      	cmp	r3, #0
   d73f6:	d05c      	beq.n	d74b2 <_strtol_l.isra.0+0xe6>
   d73f8:	2b10      	cmp	r3, #16
   d73fa:	d10c      	bne.n	d7416 <_strtol_l.isra.0+0x4a>
   d73fc:	2c30      	cmp	r4, #48	; 0x30
   d73fe:	d10a      	bne.n	d7416 <_strtol_l.isra.0+0x4a>
   d7400:	f89c 0000 	ldrb.w	r0, [ip]
   d7404:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7408:	2858      	cmp	r0, #88	; 0x58
   d740a:	d14d      	bne.n	d74a8 <_strtol_l.isra.0+0xdc>
   d740c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7410:	2310      	movs	r3, #16
   d7412:	f10c 0c02 	add.w	ip, ip, #2
   d7416:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d741a:	3f01      	subs	r7, #1
   d741c:	2600      	movs	r6, #0
   d741e:	fbb7 f9f3 	udiv	r9, r7, r3
   d7422:	4630      	mov	r0, r6
   d7424:	fb03 7a19 	mls	sl, r3, r9, r7
   d7428:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d742c:	2d09      	cmp	r5, #9
   d742e:	d818      	bhi.n	d7462 <_strtol_l.isra.0+0x96>
   d7430:	462c      	mov	r4, r5
   d7432:	42a3      	cmp	r3, r4
   d7434:	dd24      	ble.n	d7480 <_strtol_l.isra.0+0xb4>
   d7436:	1c75      	adds	r5, r6, #1
   d7438:	d007      	beq.n	d744a <_strtol_l.isra.0+0x7e>
   d743a:	4581      	cmp	r9, r0
   d743c:	d31d      	bcc.n	d747a <_strtol_l.isra.0+0xae>
   d743e:	d101      	bne.n	d7444 <_strtol_l.isra.0+0x78>
   d7440:	45a2      	cmp	sl, r4
   d7442:	db1a      	blt.n	d747a <_strtol_l.isra.0+0xae>
   d7444:	fb00 4003 	mla	r0, r0, r3, r4
   d7448:	2601      	movs	r6, #1
   d744a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d744e:	e7eb      	b.n	d7428 <_strtol_l.isra.0+0x5c>
   d7450:	2c2b      	cmp	r4, #43	; 0x2b
   d7452:	bf08      	it	eq
   d7454:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7458:	46a8      	mov	r8, r5
   d745a:	bf08      	it	eq
   d745c:	f100 0c02 	addeq.w	ip, r0, #2
   d7460:	e7c8      	b.n	d73f4 <_strtol_l.isra.0+0x28>
   d7462:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7466:	2d19      	cmp	r5, #25
   d7468:	d801      	bhi.n	d746e <_strtol_l.isra.0+0xa2>
   d746a:	3c37      	subs	r4, #55	; 0x37
   d746c:	e7e1      	b.n	d7432 <_strtol_l.isra.0+0x66>
   d746e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7472:	2d19      	cmp	r5, #25
   d7474:	d804      	bhi.n	d7480 <_strtol_l.isra.0+0xb4>
   d7476:	3c57      	subs	r4, #87	; 0x57
   d7478:	e7db      	b.n	d7432 <_strtol_l.isra.0+0x66>
   d747a:	f04f 36ff 	mov.w	r6, #4294967295
   d747e:	e7e4      	b.n	d744a <_strtol_l.isra.0+0x7e>
   d7480:	1c73      	adds	r3, r6, #1
   d7482:	d106      	bne.n	d7492 <_strtol_l.isra.0+0xc6>
   d7484:	2322      	movs	r3, #34	; 0x22
   d7486:	f8ce 3000 	str.w	r3, [lr]
   d748a:	4638      	mov	r0, r7
   d748c:	b942      	cbnz	r2, d74a0 <_strtol_l.isra.0+0xd4>
   d748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7492:	f1b8 0f00 	cmp.w	r8, #0
   d7496:	d000      	beq.n	d749a <_strtol_l.isra.0+0xce>
   d7498:	4240      	negs	r0, r0
   d749a:	2a00      	cmp	r2, #0
   d749c:	d0f7      	beq.n	d748e <_strtol_l.isra.0+0xc2>
   d749e:	b10e      	cbz	r6, d74a4 <_strtol_l.isra.0+0xd8>
   d74a0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d74a4:	6011      	str	r1, [r2, #0]
   d74a6:	e7f2      	b.n	d748e <_strtol_l.isra.0+0xc2>
   d74a8:	2430      	movs	r4, #48	; 0x30
   d74aa:	2b00      	cmp	r3, #0
   d74ac:	d1b3      	bne.n	d7416 <_strtol_l.isra.0+0x4a>
   d74ae:	2308      	movs	r3, #8
   d74b0:	e7b1      	b.n	d7416 <_strtol_l.isra.0+0x4a>
   d74b2:	2c30      	cmp	r4, #48	; 0x30
   d74b4:	d0a4      	beq.n	d7400 <_strtol_l.isra.0+0x34>
   d74b6:	230a      	movs	r3, #10
   d74b8:	e7ad      	b.n	d7416 <_strtol_l.isra.0+0x4a>
   d74ba:	bf00      	nop
   d74bc:	000d77fb 	.word	0x000d77fb

000d74c0 <strtol>:
   d74c0:	4613      	mov	r3, r2
   d74c2:	460a      	mov	r2, r1
   d74c4:	4601      	mov	r1, r0
   d74c6:	4802      	ldr	r0, [pc, #8]	; (d74d0 <strtol+0x10>)
   d74c8:	6800      	ldr	r0, [r0, #0]
   d74ca:	f7ff bf7f 	b.w	d73cc <_strtol_l.isra.0>
   d74ce:	bf00      	nop
   d74d0:	2003e51c 	.word	0x2003e51c

000d74d4 <dynalib_user>:
   d74d4:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d74e4:	00000000 5b006425 252c6425 64252c64     ....%d.[%d,%d,%d
   d74f4:	7570005d 73696c62 3a646568 00732520     ].published: %s.

000d7504 <_ZTVN5spark10LogHandlerE>:
	...
   d7514:	000d40a1 000d40c5                       .@...@..

000d751c <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7524:	000d4119 000d414d 000d5d79 000d40c7     .A..MA..y]...@..
   d7534:	61646152 65764572 7300746e 74656568     RadarEvent.sheet
   d7544:	74736554 00000031                       Test1...

000d754c <_ZTVN5spark13EthernetClassE>:
	...
   d7554:	000d4c27 000d4c1d 000d4c13 000d4c09     'L...L...L...L..
   d7564:	000d4bfd 000d4bf1 000d6bc1 000d6bc9     .K...K...k...k..
   d7574:	000d4be5 000d4bdd 000d4bd3 000d4bc9     .K...K...K...K..
   d7584:	000d6bf9 69726977 5300676e 65747379     .k..wiring.Syste
   d7594:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   d75a4:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   d75b4:	6162002e 53006475 61697265 6553006c     ..baud.Serial.Se
   d75c4:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   d75d4:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d75e4:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   d75f4:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   d7604:	69617465 3d20736c 0a0d0020 63006d00     etails = ....m.c
   d7614:	6c006600 6e66006e 646f6300 65640065     .f.ln.fn.code.de
   d7624:	6c696174 00000000                       tail....

000d762c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7634:	000d515b 000d5181 000d5141 000d6d1b     [Q...Q..AQ...m..

000d7644 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d764c:	000d55a1 000d55b9 000d5d79 000d40c7     .U...U..y]...@..

000d765c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7664:	000d55cd 000d55e1 000d5f1d 000d5149     .U...U..._..IQ..

000d7674 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d767c:	000d5159 000d518f 000d5cb5 000d514b     YQ...Q...\..KQ..

000d768c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7694:	000d5157 000d519d 000d550d 000d51b9     WQ...Q...U...Q..
   d76a4:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d76b4:	007a2553 74637361 00656d69              S%z.asctime.

000d76c0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d76c8:	000d61f1 000d61f7 000d6235 000d6205     .a...a..5b...b..
   d76d8:	000d61f3                                .a..

000d76dc <_ZTV9IPAddress>:
	...
   d76e4:	000d6741 000d6731 000d6733              Ag..1g..3g..

000d76f0 <_ZTV9USBSerial>:
	...
   d76f8:	000d6821 000d6889 000d685f 000d5035     !h...h.._h..5P..
   d7708:	000d6851 000d6823 000d6833 000d6883     Qh..#h..3h...h..
   d7718:	000d6843 000d681d                       Ch...h..

000d7720 <_ZTVN5spark13CellularClassE>:
	...
   d7728:	000d6993 000d6989 000d697f 000d6935     .i...i...i..5i..
   d7738:	000d6973 000d6967 000d6bc1 000d6bc9     si..gi...k...k..
   d7748:	000d695b 000d6953 000d6949 000d693f     [i..Si..Ii..?i..
   d7758:	000d6bf9                                .k..

000d775c <_ZTV11USARTSerial>:
	...
   d7764:	000d69cd 000d6a39 000d6a11 000d5035     .i..9j...j..5P..
   d7774:	000d69e1 000d69fd 000d69ef 000d6a0b     .i...i...i...j..
   d7784:	000d69cf 000d69d3                       .i...i..

000d778c <_ZTV7TwoWire>:
	...
   d7794:	000d6b05 000d6b4f 000d6b27 000d6b07     .k..Ok..'k...k..
   d77a4:	000d6b2f 000d6b37 000d6b3f 000d6b47     /k..7k..?k..Gk..

000d77b4 <_ZTVN5spark12NetworkClassE>:
	...
   d77bc:	000d6b81 000d6b8b 000d6b95 000d6b9f     .k...k...k...k..
   d77cc:	000d6ba9 000d6bb5 000d6bc1 000d6bc9     .k...k...k...k..
   d77dc:	000d6bd1 000d6bdd 000d6be5 000d6bef     .k...k...k...k..
   d77ec:	000d6bf9 75007525 78343025               .k..%u.u%04x.

000d77f9 <_ZSt7nothrow>:
	...

000d77fa <_ctype_>:
   d77fa:	20202000 20202020 28282020 20282828     .         ((((( 
   d780a:	20202020 20202020 20202020 20202020                     
   d781a:	10108820 10101010 10101010 10101010      ...............
   d782a:	04040410 04040404 10040404 10101010     ................
   d783a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d784a:	01010101 01010101 01010101 10101010     ................
   d785a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d786a:	02020202 02020202 02020202 10101010     ................
   d787a:	00000020 00000000 00000000 00000000      ...............
	...

000d78fb <link_const_variable_data_end>:
	...

000d78fc <link_constructors_location>:
   d78fc:	000d45ad 	.word	0x000d45ad
   d7900:	000d4c31 	.word	0x000d4c31
   d7904:	000d4d8d 	.word	0x000d4d8d
   d7908:	000d500d 	.word	0x000d500d
   d790c:	000d5d69 	.word	0x000d5d69
   d7910:	000d6091 	.word	0x000d6091
   d7914:	000d60b1 	.word	0x000d60b1
   d7918:	000d699d 	.word	0x000d699d
   d791c:	000d6cd9 	.word	0x000d6cd9
