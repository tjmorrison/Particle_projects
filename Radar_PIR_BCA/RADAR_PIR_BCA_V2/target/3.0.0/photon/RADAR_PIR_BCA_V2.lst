
c:/Users/tjmor/OneDrive/Documents/Particle_projects/RADAR_PIR_BCA_V2/target/3.0.0/photon/RADAR_PIR_BCA_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000036e4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3700  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  080a3704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000548  20000080  20000080  00030080  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3784  080a3784  00023784  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a37ac  080a37ac  000237ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011efff  00000000  00000000  000237b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000150d5  00000000  00000000  001427af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001df2c  00000000  00000000  00157884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023c8  00000000  00000000  001757b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005af0  00000000  00000000  00177b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000275d2  00000000  00000000  0017d668  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e46b  00000000  00000000  001a4c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b94a4  00000000  00000000  001d30a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005d04  00000000  00000000  0028c54c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f815 	bl	80a305c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f837 	bl	80a30ac <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3704 	.word	0x080a3704
 80a004c:	20000080 	.word	0x20000080
 80a0050:	20000080 	.word	0x20000080
 80a0054:	200005c8 	.word	0x200005c8
 80a0058:	200005c8 	.word	0x200005c8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff71 	bl	80a1f44 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a36d8 	.word	0x080a36d8
 80a0080:	080a36f8 	.word	0x080a36f8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b8ae 	b.w	80a01e4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f921 	bl	80a02d0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bf19 	b.w	80a1ec8 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bc95 	b.w	80a09c4 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bc93 	b.w	80a09c4 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bc99 	b.w	80a09d4 <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f000 fba4 	bl	80a07f8 <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a05d5 	.word	0x080a05d5

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ca:	6a00      	ldr	r0, [r0, #32]
 80a00cc:	6803      	ldr	r3, [r0, #0]
 80a00ce:	68db      	ldr	r3, [r3, #12]
 80a00d0:	4718      	bx	r3
	...

080a00d4 <_Z10Radar_plusv>:
}


// Interupt service routines (ISR) these functions can have no inputs/returns. They just add +1 to the value
void Radar_plus(){
    Radar_cnt++;
 80a00d4:	4a02      	ldr	r2, [pc, #8]	; (80a00e0 <_Z10Radar_plusv+0xc>)
 80a00d6:	6813      	ldr	r3, [r2, #0]
 80a00d8:	3301      	adds	r3, #1
 80a00da:	6013      	str	r3, [r2, #0]
}
 80a00dc:	4770      	bx	lr
 80a00de:	bf00      	nop
 80a00e0:	2000008c 	.word	0x2000008c

080a00e4 <_Z8PIR_plusv>:
void PIR_plus(){
    PIR_cnt++;
 80a00e4:	4a02      	ldr	r2, [pc, #8]	; (80a00f0 <_Z8PIR_plusv+0xc>)
 80a00e6:	6813      	ldr	r3, [r2, #0]
 80a00e8:	3301      	adds	r3, #1
 80a00ea:	6013      	str	r3, [r2, #0]
}
 80a00ec:	4770      	bx	lr
 80a00ee:	bf00      	nop
 80a00f0:	20000088 	.word	0x20000088

080a00f4 <_Z11Beacon_plusv>:

void Beacon_plus(){
    Beacon_cnt++;
 80a00f4:	4a02      	ldr	r2, [pc, #8]	; (80a0100 <_Z11Beacon_plusv+0xc>)
 80a00f6:	6813      	ldr	r3, [r2, #0]
 80a00f8:	3301      	adds	r3, #1
 80a00fa:	6013      	str	r3, [r2, #0]
}
 80a00fc:	4770      	bx	lr
 80a00fe:	bf00      	nop
 80a0100:	20000084 	.word	0x20000084

080a0104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a0104:	b510      	push	{r4, lr}
 80a0106:	4604      	mov	r4, r0
 80a0108:	4b09      	ldr	r3, [pc, #36]	; (80a0130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a010a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a010c:	f000 ffcc 	bl	80a10a8 <_ZN5spark10LogManager8instanceEv>
 80a0110:	4621      	mov	r1, r4
 80a0112:	f001 f9fb 	bl	80a150c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a0116:	f002 fab5 	bl	80a2684 <_Z16_fetch_usbserialv>
 80a011a:	f002 fa99 	bl	80a2650 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a011e:	4620      	mov	r0, r4
 80a0120:	4b04      	ldr	r3, [pc, #16]	; (80a0134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a0122:	f840 3b04 	str.w	r3, [r0], #4
 80a0126:	f001 f8df 	bl	80a12e8 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a012a:	4620      	mov	r0, r4
 80a012c:	bd10      	pop	{r4, pc}
 80a012e:	bf00      	nop
 80a0130:	080a3344 	.word	0x080a3344
 80a0134:	080a332c 	.word	0x080a332c

080a0138 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a0138:	b510      	push	{r4, lr}
 80a013a:	4604      	mov	r4, r0
    }
 80a013c:	f7ff ffe2 	bl	80a0104 <_ZN5spark16SerialLogHandlerD1Ev>
 80a0140:	4620      	mov	r0, r4
 80a0142:	2124      	movs	r1, #36	; 0x24
 80a0144:	f002 ff73 	bl	80a302e <_ZdlPvj>
 80a0148:	4620      	mov	r0, r4
 80a014a:	bd10      	pop	{r4, pc}

080a014c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 80a014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
 80a014e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 80a0150:	4605      	mov	r5, r0
 80a0152:	460f      	mov	r7, r1
 80a0154:	4616      	mov	r6, r2
        if (valid_) {
 80a0156:	b18b      	cbz	r3, 80a017c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 80a0158:	6803      	ldr	r3, [r0, #0]
 80a015a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
 80a015c:	b183      	cbz	r3, 80a0180 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
 80a015e:	889a      	ldrh	r2, [r3, #4]
 80a0160:	2a01      	cmp	r2, #1
 80a0162:	d006      	beq.n	80a0172 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
 80a0164:	689b      	ldr	r3, [r3, #8]
        while (start) {
 80a0166:	e7f9      	b.n	80a015c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
 80a0168:	689b      	ldr	r3, [r3, #8]
        if (!start) {
 80a016a:	b14b      	cbz	r3, 80a0180 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
 80a016c:	889a      	ldrh	r2, [r3, #4]
 80a016e:	2a01      	cmp	r2, #1
 80a0170:	d1fa      	bne.n	80a0168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
 80a0172:	b12b      	cbz	r3, 80a0180 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
 80a0174:	899a      	ldrh	r2, [r3, #12]
 80a0176:	42ba      	cmp	r2, r7
 80a0178:	d1f6      	bne.n	80a0168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
 80a017a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
 80a017c:	4628      	mov	r0, r5
 80a017e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
 80a0180:	2010      	movs	r0, #16
 80a0182:	490a      	ldr	r1, [pc, #40]	; (80a01ac <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
 80a0184:	f002 ff55 	bl	80a3032 <_ZnwjRKSt9nothrow_t>
 80a0188:	4604      	mov	r4, r0
 80a018a:	b168      	cbz	r0, 80a01a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
 80a018c:	2210      	movs	r2, #16
 80a018e:	2100      	movs	r1, #0
 80a0190:	f002 ff8c 	bl	80a30ac <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
 80a0194:	4b06      	ldr	r3, [pc, #24]	; (80a01b0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
            wakeupSource->pin = pin;
 80a0196:	81a7      	strh	r7, [r4, #12]
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
 80a0198:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 80a019a:	2301      	movs	r3, #1
 80a019c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 80a019e:	692b      	ldr	r3, [r5, #16]
            wakeupSource->mode = mode;
 80a01a0:	73a6      	strb	r6, [r4, #14]
            wakeupSource->base.next = config_.wakeup_sources;
 80a01a2:	60a3      	str	r3, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 80a01a4:	612c      	str	r4, [r5, #16]
 80a01a6:	e7e9      	b.n	80a017c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
 80a01a8:	7528      	strb	r0, [r5, #20]
                return *this;
 80a01aa:	e7e7      	b.n	80a017c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
 80a01ac:	080a35d5 	.word	0x080a35d5
 80a01b0:	00030010 	.word	0x00030010

080a01b4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a01b4:	b40e      	push	{r1, r2, r3}
 80a01b6:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a01b8:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a01ba:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a01bc:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a01be:	b08d      	sub	sp, #52	; 0x34
 80a01c0:	aa0f      	add	r2, sp, #60	; 0x3c
 80a01c2:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a01c6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01ca:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a01ce:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01d0:	201e      	movs	r0, #30
 80a01d2:	aa04      	add	r2, sp, #16
 80a01d4:	f000 fb20 	bl	80a0818 <log_message_v>
}
 80a01d8:	b00d      	add	sp, #52	; 0x34
 80a01da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a01de:	b003      	add	sp, #12
 80a01e0:	4770      	bx	lr
	...

080a01e4 <setup>:
void setup() {
 80a01e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  attachInterrupt(Pin_Radar, Radar_plus, RISING);
 80a01e6:	2400      	movs	r4, #0
  pinMode(Pin_Radar, INPUT);
 80a01e8:	4f16      	ldr	r7, [pc, #88]	; (80a0244 <setup+0x60>)
  pinMode(Pin_PIR, INPUT);
 80a01ea:	4e17      	ldr	r6, [pc, #92]	; (80a0248 <setup+0x64>)
  pinMode(Pin_Radar, INPUT);
 80a01ec:	8838      	ldrh	r0, [r7, #0]
  pinMode(Pin_Beacon, INPUT);
 80a01ee:	4d17      	ldr	r5, [pc, #92]	; (80a024c <setup+0x68>)
  pinMode(Pin_Radar, INPUT);
 80a01f0:	2100      	movs	r1, #0
 80a01f2:	f002 fead 	bl	80a2f50 <pinMode>
  pinMode(Pin_PIR, INPUT);
 80a01f6:	8830      	ldrh	r0, [r6, #0]
 80a01f8:	2100      	movs	r1, #0
 80a01fa:	f002 fea9 	bl	80a2f50 <pinMode>
  pinMode(Pin_Beacon, INPUT);
 80a01fe:	8828      	ldrh	r0, [r5, #0]
 80a0200:	2100      	movs	r1, #0
 80a0202:	f002 fea5 	bl	80a2f50 <pinMode>
  pinMode(A1, INPUT);
 80a0206:	2100      	movs	r1, #0
 80a0208:	200b      	movs	r0, #11
 80a020a:	f002 fea1 	bl	80a2f50 <pinMode>
  attachInterrupt(Pin_Radar, Radar_plus, RISING);
 80a020e:	f04f 33ff 	mov.w	r3, #4294967295
 80a0212:	2201      	movs	r2, #1
 80a0214:	490e      	ldr	r1, [pc, #56]	; (80a0250 <setup+0x6c>)
 80a0216:	8838      	ldrh	r0, [r7, #0]
 80a0218:	9400      	str	r4, [sp, #0]
 80a021a:	f002 fa9b 	bl	80a2754 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(Pin_PIR, PIR_plus, RISING);
 80a021e:	f04f 33ff 	mov.w	r3, #4294967295
 80a0222:	2201      	movs	r2, #1
 80a0224:	490b      	ldr	r1, [pc, #44]	; (80a0254 <setup+0x70>)
 80a0226:	8830      	ldrh	r0, [r6, #0]
 80a0228:	9400      	str	r4, [sp, #0]
 80a022a:	f002 fa93 	bl	80a2754 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(Pin_Beacon, Beacon_plus, RISING);
 80a022e:	f04f 33ff 	mov.w	r3, #4294967295
 80a0232:	2201      	movs	r2, #1
 80a0234:	4908      	ldr	r1, [pc, #32]	; (80a0258 <setup+0x74>)
 80a0236:	8828      	ldrh	r0, [r5, #0]
 80a0238:	9400      	str	r4, [sp, #0]
 80a023a:	f002 fa8b 	bl	80a2754 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80a023e:	b003      	add	sp, #12
 80a0240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0242:	bf00      	nop
 80a0244:	20000008 	.word	0x20000008
 80a0248:	20000004 	.word	0x20000004
 80a024c:	20000000 	.word	0x20000000
 80a0250:	080a00d5 	.word	0x080a00d5
 80a0254:	080a00e5 	.word	0x080a00e5
 80a0258:	080a00f5 	.word	0x080a00f5

080a025c <_Z20PublishToGoogleSheetiii>:


//Publish to google sheets function
void PublishToGoogleSheet(int Radar_cnt, int PIR_cnt, int Beacon_cnt) {
 80a025c:	b510      	push	{r4, lr}
    
    char tmp1 = (char) Radar_cnt;
    char tmp2 = (char) PIR_cnt;
    char tmp3 = (char) Beacon_cnt;

    snprintf(buf, sizeof(buf), "[%d,%d,%d]", tmp1, tmp2, tmp3);
 80a025e:	b2d2      	uxtb	r2, r2
void PublishToGoogleSheet(int Radar_cnt, int PIR_cnt, int Beacon_cnt) {
 80a0260:	b0a4      	sub	sp, #144	; 0x90
    snprintf(buf, sizeof(buf), "[%d,%d,%d]", tmp1, tmp2, tmp3);
 80a0262:	b2c9      	uxtb	r1, r1
 80a0264:	b2c3      	uxtb	r3, r0
 80a0266:	9201      	str	r2, [sp, #4]
 80a0268:	9100      	str	r1, [sp, #0]
 80a026a:	4a14      	ldr	r2, [pc, #80]	; (80a02bc <_Z20PublishToGoogleSheetiii+0x60>)
 80a026c:	2180      	movs	r1, #128	; 0x80
 80a026e:	a804      	add	r0, sp, #16
 80a0270:	f000 fbc0 	bl	80a09f4 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0274:	4b12      	ldr	r3, [pc, #72]	; (80a02c0 <_Z20PublishToGoogleSheetiii+0x64>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0276:	4913      	ldr	r1, [pc, #76]	; (80a02c4 <_Z20PublishToGoogleSheetiii+0x68>)
 80a0278:	781b      	ldrb	r3, [r3, #0]
 80a027a:	aa04      	add	r2, sp, #16
 80a027c:	f88d 3000 	strb.w	r3, [sp]
 80a0280:	6809      	ldr	r1, [r1, #0]
 80a0282:	233c      	movs	r3, #60	; 0x3c
 80a0284:	a802      	add	r0, sp, #8
 80a0286:	f001 ffb5 	bl	80a21f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a028a:	9c03      	ldr	r4, [sp, #12]
 80a028c:	b17c      	cbz	r4, 80a02ae <_Z20PublishToGoogleSheetiii+0x52>
      if (--_M_use_count == 0)
 80a028e:	6863      	ldr	r3, [r4, #4]
 80a0290:	3b01      	subs	r3, #1
 80a0292:	6063      	str	r3, [r4, #4]
 80a0294:	b95b      	cbnz	r3, 80a02ae <_Z20PublishToGoogleSheetiii+0x52>
          _M_dispose();
 80a0296:	6823      	ldr	r3, [r4, #0]
 80a0298:	4620      	mov	r0, r4
 80a029a:	689b      	ldr	r3, [r3, #8]
 80a029c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a029e:	68a3      	ldr	r3, [r4, #8]
 80a02a0:	3b01      	subs	r3, #1
 80a02a2:	60a3      	str	r3, [r4, #8]
 80a02a4:	b91b      	cbnz	r3, 80a02ae <_Z20PublishToGoogleSheetiii+0x52>
            _M_destroy();
 80a02a6:	6823      	ldr	r3, [r4, #0]
 80a02a8:	4620      	mov	r0, r4
 80a02aa:	68db      	ldr	r3, [r3, #12]
 80a02ac:	4798      	blx	r3

    Particle.publish(eventName, buf, PRIVATE);
    Log.info("published: %s", buf);
 80a02ae:	4906      	ldr	r1, [pc, #24]	; (80a02c8 <_Z20PublishToGoogleSheetiii+0x6c>)
 80a02b0:	4806      	ldr	r0, [pc, #24]	; (80a02cc <_Z20PublishToGoogleSheetiii+0x70>)
 80a02b2:	aa04      	add	r2, sp, #16
 80a02b4:	f7ff ff7e 	bl	80a01b4 <_ZNK5spark6Logger4infoEPKcz>
 80a02b8:	b024      	add	sp, #144	; 0x90
 80a02ba:	bd10      	pop	{r4, pc}
 80a02bc:	080a3308 	.word	0x080a3308
 80a02c0:	20000090 	.word	0x20000090
 80a02c4:	2000000c 	.word	0x2000000c
 80a02c8:	080a3313 	.word	0x080a3313
 80a02cc:	200000d8 	.word	0x200000d8

080a02d0 <loop>:
void loop() {
 80a02d0:	b570      	push	{r4, r5, r6, lr}
 80a02d2:	b08a      	sub	sp, #40	; 0x28
        : config_(config) {
 80a02d4:	ab05      	add	r3, sp, #20
 80a02d6:	9304      	str	r3, [sp, #16]
              valid_(true) {
 80a02d8:	2300      	movs	r3, #0
        config_.wakeup_sources = nullptr;
 80a02da:	e9cd 3307 	strd	r3, r3, [sp, #28]
              valid_(true) {
 80a02de:	f8ad 3019 	strh.w	r3, [sp, #25]
 80a02e2:	f88d 301b 	strb.w	r3, [sp, #27]
        config_.size = sizeof(hal_sleep_config_t);
 80a02e6:	4b37      	ldr	r3, [pc, #220]	; (80a03c4 <loop+0xf4>)
              valid_(true) {
 80a02e8:	2401      	movs	r4, #1
        config_.size = sizeof(hal_sleep_config_t);
 80a02ea:	9305      	str	r3, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 80a02ec:	2302      	movs	r3, #2
 80a02ee:	f88d 3018 	strb.w	r3, [sp, #24]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).gpio(Pin_Radar, RISING).gpio(Pin_PIR, RISING).gpio(Pin_Beacon, RISING).duration(15min); 
 80a02f2:	4b35      	ldr	r3, [pc, #212]	; (80a03c8 <loop+0xf8>)
 80a02f4:	4622      	mov	r2, r4
 80a02f6:	8819      	ldrh	r1, [r3, #0]
 80a02f8:	a804      	add	r0, sp, #16
              valid_(true) {
 80a02fa:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80a02fe:	f7ff ff25 	bl	80a014c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
 80a0302:	4b32      	ldr	r3, [pc, #200]	; (80a03cc <loop+0xfc>)
 80a0304:	4622      	mov	r2, r4
 80a0306:	8819      	ldrh	r1, [r3, #0]
 80a0308:	f7ff ff20 	bl	80a014c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
 80a030c:	4b30      	ldr	r3, [pc, #192]	; (80a03d0 <loop+0x100>)
 80a030e:	4622      	mov	r2, r4
 80a0310:	8819      	ldrh	r1, [r3, #0]
 80a0312:	f7ff ff1b 	bl	80a014c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
 80a0316:	7d03      	ldrb	r3, [r0, #20]
 80a0318:	4605      	mov	r5, r0
 80a031a:	b1db      	cbz	r3, 80a0354 <loop+0x84>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 80a031c:	6803      	ldr	r3, [r0, #0]
 80a031e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
 80a0320:	b123      	cbz	r3, 80a032c <loop+0x5c>
            if (start->type == type) {
 80a0322:	889a      	ldrh	r2, [r3, #4]
 80a0324:	2a04      	cmp	r2, #4
 80a0326:	d047      	beq.n	80a03b8 <loop+0xe8>
            start = start->next;
 80a0328:	689b      	ldr	r3, [r3, #8]
        while (start) {
 80a032a:	e7f9      	b.n	80a0320 <loop+0x50>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 80a032c:	2010      	movs	r0, #16
 80a032e:	4929      	ldr	r1, [pc, #164]	; (80a03d4 <loop+0x104>)
 80a0330:	f002 fe7f 	bl	80a3032 <_ZnwjRKSt9nothrow_t>
 80a0334:	4604      	mov	r4, r0
 80a0336:	2800      	cmp	r0, #0
 80a0338:	d03c      	beq.n	80a03b4 <loop+0xe4>
 80a033a:	2210      	movs	r2, #16
 80a033c:	2100      	movs	r1, #0
 80a033e:	f002 feb5 	bl	80a30ac <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 80a0342:	4b20      	ldr	r3, [pc, #128]	; (80a03c4 <loop+0xf4>)
 80a0344:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 80a0346:	2304      	movs	r3, #4
 80a0348:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 80a034a:	692b      	ldr	r3, [r5, #16]
 80a034c:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
 80a034e:	4b22      	ldr	r3, [pc, #136]	; (80a03d8 <loop+0x108>)
 80a0350:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 80a0352:	612c      	str	r4, [r5, #16]
    System.sleep(config);
 80a0354:	a801      	add	r0, sp, #4
 80a0356:	a904      	add	r1, sp, #16
 80a0358:	f000 fbbe 	bl	80a0ad8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a035c:	9801      	ldr	r0, [sp, #4]
 80a035e:	b108      	cbz	r0, 80a0364 <loop+0x94>
            free(wakeupSource_);
 80a0360:	f000 fb38 	bl	80a09d4 <free>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0364:	f000 fb0e 	bl	80a0984 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 80a0368:	b158      	cbz	r0, 80a0382 <loop+0xb2>
        PublishToGoogleSheet(Radar_cnt, PIR_cnt, Beacon_cnt);
 80a036a:	4c1c      	ldr	r4, [pc, #112]	; (80a03dc <loop+0x10c>)
 80a036c:	4d1c      	ldr	r5, [pc, #112]	; (80a03e0 <loop+0x110>)
 80a036e:	4e1d      	ldr	r6, [pc, #116]	; (80a03e4 <loop+0x114>)
 80a0370:	6822      	ldr	r2, [r4, #0]
 80a0372:	6829      	ldr	r1, [r5, #0]
 80a0374:	6830      	ldr	r0, [r6, #0]
 80a0376:	f7ff ff71 	bl	80a025c <_Z20PublishToGoogleSheetiii>
        Radar_cnt = 0; 
 80a037a:	2300      	movs	r3, #0
 80a037c:	6033      	str	r3, [r6, #0]
        PIR_cnt = 0; 
 80a037e:	602b      	str	r3, [r5, #0]
        Beacon_cnt = 0; 
 80a0380:	6023      	str	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0382:	f000 f92f 	bl	80a05e4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastSync > ONE_DAY_MILLIS) {
 80a0386:	4c18      	ldr	r4, [pc, #96]	; (80a03e8 <loop+0x118>)
 80a0388:	6822      	ldr	r2, [r4, #0]
 80a038a:	1a80      	subs	r0, r0, r2
 80a038c:	4a17      	ldr	r2, [pc, #92]	; (80a03ec <loop+0x11c>)
 80a038e:	4290      	cmp	r0, r2
 80a0390:	d908      	bls.n	80a03a4 <loop+0xd4>
 80a0392:	f000 faf7 	bl	80a0984 <spark_cloud_flag_connected>
        if (!connected()) {
 80a0396:	b110      	cbz	r0, 80a039e <loop+0xce>
        return spark_sync_time(NULL);
 80a0398:	2000      	movs	r0, #0
 80a039a:	f000 fb03 	bl	80a09a4 <spark_sync_time>
 80a039e:	f000 f921 	bl	80a05e4 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
 80a03a2:	6020      	str	r0, [r4, #0]
        auto wakeupSource = config_.wakeup_sources;
 80a03a4:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
 80a03a6:	b150      	cbz	r0, 80a03be <loop+0xee>
            auto next = wakeupSource->next;
 80a03a8:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
 80a03aa:	210c      	movs	r1, #12
 80a03ac:	f002 fe3f 	bl	80a302e <_ZdlPvj>
            wakeupSource = next;
 80a03b0:	4620      	mov	r0, r4
        while (wakeupSource) {
 80a03b2:	e7f8      	b.n	80a03a6 <loop+0xd6>
                valid_ = false;
 80a03b4:	7528      	strb	r0, [r5, #20]
                return *this;
 80a03b6:	e7cd      	b.n	80a0354 <loop+0x84>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
 80a03b8:	4a07      	ldr	r2, [pc, #28]	; (80a03d8 <loop+0x108>)
 80a03ba:	60da      	str	r2, [r3, #12]
                return *this;
 80a03bc:	e7ca      	b.n	80a0354 <loop+0x84>
}
 80a03be:	b00a      	add	sp, #40	; 0x28
 80a03c0:	bd70      	pop	{r4, r5, r6, pc}
 80a03c2:	bf00      	nop
 80a03c4:	00030010 	.word	0x00030010
 80a03c8:	20000008 	.word	0x20000008
 80a03cc:	20000004 	.word	0x20000004
 80a03d0:	20000000 	.word	0x20000000
 80a03d4:	080a35d5 	.word	0x080a35d5
 80a03d8:	000dbba0 	.word	0x000dbba0
 80a03dc:	20000084 	.word	0x20000084
 80a03e0:	20000088 	.word	0x20000088
 80a03e4:	2000008c 	.word	0x2000008c
 80a03e8:	20000094 	.word	0x20000094
 80a03ec:	05265c00 	.word	0x05265c00

080a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a03f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a03f2:	2614      	movs	r6, #20
 80a03f4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a03f8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a03fa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a03fe:	42ae      	cmp	r6, r5
 80a0400:	d004      	beq.n	80a040c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a0402:	4628      	mov	r0, r5
 80a0404:	f000 fbea 	bl	80a0bdc <_ZN6StringD1Ev>
 80a0408:	3514      	adds	r5, #20
 80a040a:	e7f8      	b.n	80a03fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a040c:	6820      	ldr	r0, [r4, #0]
 80a040e:	f000 fae1 	bl	80a09d4 <free>
    AllocatorT::free(data_);
}
 80a0412:	4620      	mov	r0, r4
 80a0414:	bd70      	pop	{r4, r5, r6, pc}

080a0416 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a0416:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a0418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a041a:	4604      	mov	r4, r0
 80a041c:	460d      	mov	r5, r1
 80a041e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a0420:	d916      	bls.n	80a0450 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0422:	4290      	cmp	r0, r2
 80a0424:	d215      	bcs.n	80a0452 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a0426:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a042a:	1a75      	subs	r5, r6, r1
 80a042c:	f1a1 0714 	sub.w	r7, r1, #20
 80a0430:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a0432:	42b7      	cmp	r7, r6
 80a0434:	d01c      	beq.n	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0436:	b12c      	cbz	r4, 80a0444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0438:	4631      	mov	r1, r6
 80a043a:	4620      	mov	r0, r4
 80a043c:	f000 fc35 	bl	80a0caa <_ZN6StringC1EOS_>
 80a0440:	7c33      	ldrb	r3, [r6, #16]
 80a0442:	7423      	strb	r3, [r4, #16]
 80a0444:	4630      	mov	r0, r6
 80a0446:	f000 fbc9 	bl	80a0bdc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a044a:	3e14      	subs	r6, #20
 80a044c:	3c14      	subs	r4, #20
 80a044e:	e7f0      	b.n	80a0432 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a0450:	d00e      	beq.n	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0452:	42b5      	cmp	r5, r6
 80a0454:	d00c      	beq.n	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a0456:	b12c      	cbz	r4, 80a0464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0458:	4629      	mov	r1, r5
 80a045a:	4620      	mov	r0, r4
 80a045c:	f000 fc25 	bl	80a0caa <_ZN6StringC1EOS_>
 80a0460:	7c2b      	ldrb	r3, [r5, #16]
 80a0462:	7423      	strb	r3, [r4, #16]
 80a0464:	4628      	mov	r0, r5
 80a0466:	f000 fbb9 	bl	80a0bdc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a046a:	3514      	adds	r5, #20
 80a046c:	3414      	adds	r4, #20
 80a046e:	e7f0      	b.n	80a0452 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a0470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a0472:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a0478:	e9c0 3300 	strd	r3, r3, [r0]
 80a047c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a047e:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0480:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0482:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0484:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0486:	dd24      	ble.n	80a04d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a0488:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a048c:	fb08 f007 	mul.w	r0, r8, r7
 80a0490:	f000 fa98 	bl	80a09c4 <malloc>
            if (!d) {
 80a0494:	4605      	mov	r5, r0
 80a0496:	b1e0      	cbz	r0, 80a04d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a0498:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a049c:	fb08 1202 	mla	r2, r8, r2, r1
 80a04a0:	f7ff ffb9 	bl	80a0416 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a04a4:	6820      	ldr	r0, [r4, #0]
 80a04a6:	f000 fa95 	bl	80a09d4 <free>
        data_ = d;
 80a04aa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a04ac:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a04ae:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a04b2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a04b6:	45b8      	cmp	r8, r7
 80a04b8:	d009      	beq.n	80a04ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a04ba:	4639      	mov	r1, r7
 80a04bc:	4628      	mov	r0, r5
 80a04be:	f000 fc0e 	bl	80a0cde <_ZN6StringC1ERKS_>
 80a04c2:	7c3b      	ldrb	r3, [r7, #16]
 80a04c4:	3514      	adds	r5, #20
 80a04c6:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a04ca:	3714      	adds	r7, #20
 80a04cc:	e7f3      	b.n	80a04b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a04ce:	6873      	ldr	r3, [r6, #4]
 80a04d0:	6063      	str	r3, [r4, #4]
}
 80a04d2:	4620      	mov	r0, r4
 80a04d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a04d8 <_GLOBAL__sub_I_Pin_Radar>:
 80a04d8:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 80a04da:	2401      	movs	r4, #1
 80a04dc:	4b25      	ldr	r3, [pc, #148]	; (80a0574 <_GLOBAL__sub_I_Pin_Radar+0x9c>)
 80a04de:	b08c      	sub	sp, #48	; 0x30
 80a04e0:	701c      	strb	r4, [r3, #0]
 80a04e2:	f000 f87f 	bl	80a05e4 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
 80a04e6:	4b24      	ldr	r3, [pc, #144]	; (80a0578 <_GLOBAL__sub_I_Pin_Radar+0xa0>)
SYSTEM_THREAD(ENABLED);
 80a04e8:	2100      	movs	r1, #0
unsigned long lastSync = millis();
 80a04ea:	6018      	str	r0, [r3, #0]
SYSTEM_THREAD(ENABLED);
 80a04ec:	4620      	mov	r0, r4
 80a04ee:	f000 f9b3 	bl	80a0858 <system_thread_set_state>
        capacity_(0) {
 80a04f2:	2300      	movs	r3, #0
 80a04f4:	e9cd 3300 	strd	r3, r3, [sp]
 80a04f8:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 80a04fa:	f002 f8c3 	bl	80a2684 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a04fe:	4c1f      	ldr	r4, [pc, #124]	; (80a057c <_GLOBAL__sub_I_Pin_Radar+0xa4>)
 80a0500:	4605      	mov	r5, r0
 80a0502:	4626      	mov	r6, r4
 80a0504:	4669      	mov	r1, sp
 80a0506:	a803      	add	r0, sp, #12
 80a0508:	f7ff ffb3 	bl	80a0472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a050c:	a903      	add	r1, sp, #12
 80a050e:	a806      	add	r0, sp, #24
 80a0510:	f7ff ffaf 	bl	80a0472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a0514:	4b1a      	ldr	r3, [pc, #104]	; (80a0580 <_GLOBAL__sub_I_Pin_Radar+0xa8>)
 80a0516:	a906      	add	r1, sp, #24
 80a0518:	f846 3b04 	str.w	r3, [r6], #4
 80a051c:	a809      	add	r0, sp, #36	; 0x24
 80a051e:	f7ff ffa8 	bl	80a0472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a0522:	aa09      	add	r2, sp, #36	; 0x24
 80a0524:	211e      	movs	r1, #30
 80a0526:	4630      	mov	r0, r6
 80a0528:	f001 f942 	bl	80a17b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a052c:	a809      	add	r0, sp, #36	; 0x24
 80a052e:	f7ff ff5f 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a0532:	a806      	add	r0, sp, #24
 80a0534:	f7ff ff5c 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0538:	4b12      	ldr	r3, [pc, #72]	; (80a0584 <_GLOBAL__sub_I_Pin_Radar+0xac>)
 80a053a:	6225      	str	r5, [r4, #32]
 80a053c:	6023      	str	r3, [r4, #0]
 80a053e:	a803      	add	r0, sp, #12
 80a0540:	f7ff ff56 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0544:	4b10      	ldr	r3, [pc, #64]	; (80a0588 <_GLOBAL__sub_I_Pin_Radar+0xb0>)
 80a0546:	6023      	str	r3, [r4, #0]
        Serial.begin();
 80a0548:	f002 f89c 	bl	80a2684 <_Z16_fetch_usbserialv>
 80a054c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0550:	f002 f87a 	bl	80a2648 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0554:	f000 fda8 	bl	80a10a8 <_ZN5spark10LogManager8instanceEv>
 80a0558:	4621      	mov	r1, r4
 80a055a:	f001 f8bc 	bl	80a16d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;//
 80a055e:	4668      	mov	r0, sp
 80a0560:	f7ff ff46 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0564:	4620      	mov	r0, r4
 80a0566:	4a09      	ldr	r2, [pc, #36]	; (80a058c <_GLOBAL__sub_I_Pin_Radar+0xb4>)
 80a0568:	4909      	ldr	r1, [pc, #36]	; (80a0590 <_GLOBAL__sub_I_Pin_Radar+0xb8>)
 80a056a:	f002 fd5b 	bl	80a3024 <__aeabi_atexit>
 80a056e:	b00c      	add	sp, #48	; 0x30
 80a0570:	bd70      	pop	{r4, r5, r6, pc}
 80a0572:	bf00      	nop
 80a0574:	20000090 	.word	0x20000090
 80a0578:	20000094 	.word	0x20000094
 80a057c:	20000098 	.word	0x20000098
 80a0580:	080a332c 	.word	0x080a332c
 80a0584:	080a3428 	.word	0x080a3428
 80a0588:	080a3344 	.word	0x080a3344
 80a058c:	20000080 	.word	0x20000080
 80a0590:	080a0105 	.word	0x080a0105

080a0594 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <HAL_Pin_Mode+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	689b      	ldr	r3, [r3, #8]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601b0 	.word	0x080601b0

080a05a4 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_Interrupts_Attach+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	699b      	ldr	r3, [r3, #24]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601b0 	.word	0x080601b0

080a05b4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_Interrupts_Detach+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	69db      	ldr	r3, [r3, #28]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601b0 	.word	0x080601b0

080a05c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <HAL_RNG_GetRandomNumber+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	685b      	ldr	r3, [r3, #4]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	0806019c 	.word	0x0806019c

080a05d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <HAL_Delay_Microseconds+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	68db      	ldr	r3, [r3, #12]
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	0806019c 	.word	0x0806019c

080a05e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	695b      	ldr	r3, [r3, #20]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	0806019c 	.word	0x0806019c

080a05f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <os_mutex_recursive_create+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601d0 	.word	0x080601d0

080a0604 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <os_mutex_recursive_destroy+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601d0 	.word	0x080601d0

080a0614 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <os_mutex_recursive_lock+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601d0 	.word	0x080601d0

080a0624 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <os_mutex_recursive_unlock+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601d0 	.word	0x080601d0

080a0634 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <hal_usart_init+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	699b      	ldr	r3, [r3, #24]
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601c4 	.word	0x080601c4

080a0644 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <hal_usart_end+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	6a1b      	ldr	r3, [r3, #32]
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601c4 	.word	0x080601c4

080a0654 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <hal_usart_write+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601c4 	.word	0x080601c4

080a0664 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <hal_usart_available+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601c4 	.word	0x080601c4

080a0674 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <hal_usart_read+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601c4 	.word	0x080601c4

080a0684 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <hal_usart_peek+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601c4 	.word	0x080601c4

080a0694 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <hal_usart_flush+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601c4 	.word	0x080601c4

080a06a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <hal_usart_is_enabled+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601c4 	.word	0x080601c4

080a06b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <hal_usart_available_data_for_write+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601c4 	.word	0x080601c4

080a06c4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <hal_usart_begin_config+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601c4 	.word	0x080601c4

080a06d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <hal_i2c_write+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601ac 	.word	0x080601ac

080a06e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <hal_i2c_available+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601ac 	.word	0x080601ac

080a06f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <hal_i2c_read+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601ac 	.word	0x080601ac

080a0704 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <hal_i2c_peek+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601ac 	.word	0x080601ac

080a0714 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <hal_i2c_flush+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601ac 	.word	0x080601ac

080a0724 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <hal_i2c_is_enabled+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601ac 	.word	0x080601ac

080a0734 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b03      	ldr	r3, [pc, #12]	; (80a0744 <hal_i2c_init+0x10>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a073e:	9301      	str	r3, [sp, #4]
 80a0740:	bd08      	pop	{r3, pc}
 80a0742:	0000      	.short	0x0000
 80a0744:	080601ac 	.word	0x080601ac

080a0748 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0748:	b508      	push	{r3, lr}
 80a074a:	4b02      	ldr	r3, [pc, #8]	; (80a0754 <hal_spi_init+0xc>)
 80a074c:	681b      	ldr	r3, [r3, #0]
 80a074e:	69db      	ldr	r3, [r3, #28]
 80a0750:	9301      	str	r3, [sp, #4]
 80a0752:	bd08      	pop	{r3, pc}
 80a0754:	080601b4 	.word	0x080601b4

080a0758 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0758:	b508      	push	{r3, lr}
 80a075a:	4b02      	ldr	r3, [pc, #8]	; (80a0764 <hal_spi_is_enabled+0xc>)
 80a075c:	681b      	ldr	r3, [r3, #0]
 80a075e:	6a1b      	ldr	r3, [r3, #32]
 80a0760:	9301      	str	r3, [sp, #4]
 80a0762:	bd08      	pop	{r3, pc}
 80a0764:	080601b4 	.word	0x080601b4

080a0768 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b02      	ldr	r3, [pc, #8]	; (80a0774 <HAL_USB_USART_Init+0xc>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	681b      	ldr	r3, [r3, #0]
 80a0770:	9301      	str	r3, [sp, #4]
 80a0772:	bd08      	pop	{r3, pc}
 80a0774:	080601d8 	.word	0x080601d8

080a0778 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0778:	b508      	push	{r3, lr}
 80a077a:	4b02      	ldr	r3, [pc, #8]	; (80a0784 <HAL_USB_USART_Begin+0xc>)
 80a077c:	681b      	ldr	r3, [r3, #0]
 80a077e:	685b      	ldr	r3, [r3, #4]
 80a0780:	9301      	str	r3, [sp, #4]
 80a0782:	bd08      	pop	{r3, pc}
 80a0784:	080601d8 	.word	0x080601d8

080a0788 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <HAL_USB_USART_End+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	689b      	ldr	r3, [r3, #8]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601d8 	.word	0x080601d8

080a0798 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <HAL_USB_USART_Available_Data+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	691b      	ldr	r3, [r3, #16]
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601d8 	.word	0x080601d8

080a07a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	695b      	ldr	r3, [r3, #20]
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601d8 	.word	0x080601d8

080a07b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <HAL_USB_USART_Receive_Data+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	699b      	ldr	r3, [r3, #24]
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601d8 	.word	0x080601d8

080a07c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <HAL_USB_USART_Send_Data+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	69db      	ldr	r3, [r3, #28]
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601d8 	.word	0x080601d8

080a07d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <HAL_USB_USART_Flush_Data+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	6a1b      	ldr	r3, [r3, #32]
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601d8 	.word	0x080601d8

080a07e8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <inet_gethostbyname+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c0 	.word	0x080601c0

080a07f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <panic_+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080201a8 	.word	0x080201a8

080a0808 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <log_message+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080201a8 	.word	0x080201a8

080a0818 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <log_message_v+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080201a8 	.word	0x080201a8

080a0828 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <log_level_name+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080201a8 	.word	0x080201a8

080a0838 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <log_set_callbacks+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080201a8 	.word	0x080201a8

080a0848 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <set_system_mode+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	685b      	ldr	r3, [r3, #4]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601a4 	.word	0x080601a4

080a0858 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <system_thread_set_state+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601a4 	.word	0x080601a4

080a0868 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <application_thread_current+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601a4 	.word	0x080601a4

080a0878 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <application_thread_invoke+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601a4 	.word	0x080601a4

080a0888 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b03      	ldr	r3, [pc, #12]	; (80a0898 <system_ctrl_set_app_request_handler+0x10>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0892:	9301      	str	r3, [sp, #4]
 80a0894:	bd08      	pop	{r3, pc}
 80a0896:	0000      	.short	0x0000
 80a0898:	080601a4 	.word	0x080601a4

080a089c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b03      	ldr	r3, [pc, #12]	; (80a08ac <system_ctrl_set_result+0x10>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a08a6:	9301      	str	r3, [sp, #4]
 80a08a8:	bd08      	pop	{r3, pc}
 80a08aa:	0000      	.short	0x0000
 80a08ac:	080601a4 	.word	0x080601a4

080a08b0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b03      	ldr	r3, [pc, #12]	; (80a08c0 <system_sleep_ext+0x10>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80a08ba:	9301      	str	r3, [sp, #4]
 80a08bc:	bd08      	pop	{r3, pc}
 80a08be:	0000      	.short	0x0000
 80a08c0:	080601a4 	.word	0x080601a4

080a08c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <network_connect+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	685b      	ldr	r3, [r3, #4]
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	080601c8 	.word	0x080601c8

080a08d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <network_connecting+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	689b      	ldr	r3, [r3, #8]
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	080601c8 	.word	0x080601c8

080a08e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <network_disconnect+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	68db      	ldr	r3, [r3, #12]
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601c8 	.word	0x080601c8

080a08f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <network_ready+0xc>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	691b      	ldr	r3, [r3, #16]
 80a08fc:	9301      	str	r3, [sp, #4]
 80a08fe:	bd08      	pop	{r3, pc}
 80a0900:	080601c8 	.word	0x080601c8

080a0904 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <network_on+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	695b      	ldr	r3, [r3, #20]
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601c8 	.word	0x080601c8

080a0914 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <network_off+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	699b      	ldr	r3, [r3, #24]
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601c8 	.word	0x080601c8

080a0924 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <network_listen+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	69db      	ldr	r3, [r3, #28]
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601c8 	.word	0x080601c8

080a0934 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <network_listening+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	6a1b      	ldr	r3, [r3, #32]
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601c8 	.word	0x080601c8

080a0944 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <network_set_listen_timeout+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601c8 	.word	0x080601c8

080a0954 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <network_get_listen_timeout+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601c8 	.word	0x080601c8

080a0964 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <network_is_on+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601c8 	.word	0x080601c8

080a0974 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <network_is_off+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601c8 	.word	0x080601c8

080a0984 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <spark_cloud_flag_connected+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	695b      	ldr	r3, [r3, #20]
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601cc 	.word	0x080601cc

080a0994 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <spark_send_event+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	6a1b      	ldr	r3, [r3, #32]
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601cc 	.word	0x080601cc

080a09a4 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <spark_sync_time+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601cc 	.word	0x080601cc

080a09b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	080601cc 	.word	0x080601cc

080a09c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <malloc+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	681b      	ldr	r3, [r3, #0]
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601a0 	.word	0x080601a0

080a09d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <free+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	685b      	ldr	r3, [r3, #4]
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601a0 	.word	0x080601a0

080a09e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <realloc+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	689b      	ldr	r3, [r3, #8]
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601a0 	.word	0x080601a0

080a09f4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a09f4:	b508      	push	{r3, lr}
 80a09f6:	4b02      	ldr	r3, [pc, #8]	; (80a0a00 <snprintf+0xc>)
 80a09f8:	681b      	ldr	r3, [r3, #0]
 80a09fa:	69db      	ldr	r3, [r3, #28]
 80a09fc:	9301      	str	r3, [sp, #4]
 80a09fe:	bd08      	pop	{r3, pc}
 80a0a00:	080601a0 	.word	0x080601a0

080a0a04 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0a04:	b508      	push	{r3, lr}
 80a0a06:	4b02      	ldr	r3, [pc, #8]	; (80a0a10 <vsnprintf+0xc>)
 80a0a08:	681b      	ldr	r3, [r3, #0]
 80a0a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a0c:	9301      	str	r3, [sp, #4]
 80a0a0e:	bd08      	pop	{r3, pc}
 80a0a10:	080601a0 	.word	0x080601a0

080a0a14 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0a14:	b508      	push	{r3, lr}
 80a0a16:	4b02      	ldr	r3, [pc, #8]	; (80a0a20 <abort+0xc>)
 80a0a18:	681b      	ldr	r3, [r3, #0]
 80a0a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a1c:	9301      	str	r3, [sp, #4]
 80a0a1e:	bd08      	pop	{r3, pc}
 80a0a20:	080601a0 	.word	0x080601a0

080a0a24 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0a24:	b508      	push	{r3, lr}
 80a0a26:	4b02      	ldr	r3, [pc, #8]	; (80a0a30 <_malloc_r+0xc>)
 80a0a28:	681b      	ldr	r3, [r3, #0]
 80a0a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a2c:	9301      	str	r3, [sp, #4]
 80a0a2e:	bd08      	pop	{r3, pc}
 80a0a30:	080601a0 	.word	0x080601a0

080a0a34 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0a34:	b508      	push	{r3, lr}
 80a0a36:	4b02      	ldr	r3, [pc, #8]	; (80a0a40 <newlib_impure_ptr_callback+0xc>)
 80a0a38:	681b      	ldr	r3, [r3, #0]
 80a0a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a3c:	9301      	str	r3, [sp, #4]
 80a0a3e:	bd08      	pop	{r3, pc}
 80a0a40:	080601a0 	.word	0x080601a0

080a0a44 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0a44:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0a46:	2600      	movs	r6, #0
 80a0a48:	4604      	mov	r4, r0
 80a0a4a:	460d      	mov	r5, r1
 80a0a4c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0a50:	f7ff fdd0 	bl	80a05f4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0a54:	4628      	mov	r0, r5
    _spi = spi;
 80a0a56:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0a58:	f7ff fe76 	bl	80a0748 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0a5c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0a5e:	6066      	str	r6, [r4, #4]
}
 80a0a60:	bd70      	pop	{r4, r5, r6, pc}

080a0a62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0a62:	b510      	push	{r4, lr}
 80a0a64:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0a66:	6800      	ldr	r0, [r0, #0]
 80a0a68:	b118      	cbz	r0, 80a0a72 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0a6a:	f7ff ffb3 	bl	80a09d4 <free>
            wakeupSource_ = nullptr;
 80a0a6e:	2300      	movs	r3, #0
 80a0a70:	6023      	str	r3, [r4, #0]
        }
    }
 80a0a72:	bd10      	pop	{r4, pc}

080a0a74 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0a74:	b510      	push	{r4, lr}
 80a0a76:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0a78:	f7ff fff3 	bl	80a0a62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	bd10      	pop	{r4, pc}

080a0a80 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a0a80:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80a0a82:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a0a86:	460d      	mov	r5, r1
        error_ = result.error_;
 80a0a88:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a0a8a:	460b      	mov	r3, r1
 80a0a8c:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a0a90:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80a0a92:	f8c0 2006 	str.w	r2, [r0, #6]
 80a0a96:	889b      	ldrh	r3, [r3, #4]
 80a0a98:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a0a9a:	f7ff ffe2 	bl	80a0a62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80a0a9e:	682b      	ldr	r3, [r5, #0]
 80a0aa0:	b113      	cbz	r3, 80a0aa8 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80a0aa2:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80a0aa4:	2300      	movs	r3, #0
 80a0aa6:	602b      	str	r3, [r5, #0]
    }
 80a0aa8:	4620      	mov	r0, r4
 80a0aaa:	bd38      	pop	{r3, r4, r5, pc}

080a0aac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 80a0aac:	b538      	push	{r3, r4, r5, lr}
 80a0aae:	460c      	mov	r4, r1
 80a0ab0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 80a0ab2:	f7ff ffd6 	bl	80a0a62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 80a0ab6:	b144      	cbz	r4, 80a0aca <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 80a0ab8:	8820      	ldrh	r0, [r4, #0]
 80a0aba:	f7ff ff83 	bl	80a09c4 <malloc>
 80a0abe:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 80a0ac0:	b128      	cbz	r0, 80a0ace <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 80a0ac2:	4621      	mov	r1, r4
 80a0ac4:	8822      	ldrh	r2, [r4, #0]
 80a0ac6:	f002 fac9 	bl	80a305c <memcpy>
        return SYSTEM_ERROR_NONE;
 80a0aca:	2000      	movs	r0, #0
    }
 80a0acc:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 80a0ace:	4801      	ldr	r0, [pc, #4]	; (80a0ad4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 80a0ad0:	e7fc      	b.n	80a0acc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 80a0ad2:	bf00      	nop
 80a0ad4:	fffffefc 	.word	0xfffffefc

080a0ad8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 80a0ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ada:	4d2d      	ldr	r5, [pc, #180]	; (80a0b90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 80a0adc:	7d0b      	ldrb	r3, [r1, #20]
 80a0ade:	4604      	mov	r4, r0
 80a0ae0:	b08b      	sub	sp, #44	; 0x2c
 80a0ae2:	4608      	mov	r0, r1
 80a0ae4:	1daf      	adds	r7, r5, #6
 80a0ae6:	2b00      	cmp	r3, #0
 80a0ae8:	d038      	beq.n	80a0b5c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 80a0aea:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 80a0aec:	791b      	ldrb	r3, [r3, #4]
 80a0aee:	2b00      	cmp	r3, #0
 80a0af0:	d034      	beq.n	80a0b5c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 80a0af2:	2200      	movs	r2, #0
    SleepResult() {}
 80a0af4:	4b27      	ldr	r3, [pc, #156]	; (80a0b94 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 80a0af6:	a902      	add	r1, sp, #8
 80a0af8:	3004      	adds	r0, #4
 80a0afa:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 80a0afc:	9202      	str	r2, [sp, #8]
 80a0afe:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 80a0b02:	f88d 200e 	strb.w	r2, [sp, #14]
 80a0b06:	f7ff fed3 	bl	80a08b0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 80a0b0a:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 80a0b0e:	b200      	sxth	r0, r0
 80a0b10:	f8c5 3006 	str.w	r3, [r5, #6]
 80a0b14:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 80a0b18:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 80a0b1c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80a0b1e:	9902      	ldr	r1, [sp, #8]
 80a0b20:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 80a0b22:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 80a0b24:	f7ff ffc2 	bl	80a0aac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 80a0b28:	a802      	add	r0, sp, #8
 80a0b2a:	f7ff ff9a 	bl	80a0a62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 80a0b2e:	2300      	movs	r3, #0
 80a0b30:	6023      	str	r3, [r4, #0]
 80a0b32:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80a0b34:	71a3      	strb	r3, [r4, #6]
 80a0b36:	8123      	strh	r3, [r4, #8]
 80a0b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0b3c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 80a0b3e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80a0b42:	4620      	mov	r0, r4
        error_ = result.error_;
 80a0b44:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 80a0b46:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 80a0b48:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 80a0b4a:	f8c4 3006 	str.w	r3, [r4, #6]
 80a0b4e:	88bb      	ldrh	r3, [r7, #4]
 80a0b50:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 80a0b52:	f7ff ffab 	bl	80a0aac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 80a0b56:	4620      	mov	r0, r4
 80a0b58:	b00b      	add	sp, #44	; 0x2c
 80a0b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 80a0b5c:	2600      	movs	r6, #0
 80a0b5e:	2320      	movs	r3, #32
 80a0b60:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80a0b64:	4b0c      	ldr	r3, [pc, #48]	; (80a0b98 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 80a0b66:	2032      	movs	r0, #50	; 0x32
 80a0b68:	9300      	str	r3, [sp, #0]
 80a0b6a:	490c      	ldr	r1, [pc, #48]	; (80a0b9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 80a0b6c:	4633      	mov	r3, r6
 80a0b6e:	aa02      	add	r2, sp, #8
 80a0b70:	f7ff fe4a 	bl	80a0808 <log_message>
    SleepResult() {}
 80a0b74:	4b07      	ldr	r3, [pc, #28]	; (80a0b94 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 80a0b76:	a902      	add	r1, sp, #8
 80a0b78:	9304      	str	r3, [sp, #16]
        error_ = error;
 80a0b7a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 80a0b7e:	4804      	ldr	r0, [pc, #16]	; (80a0b90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 80a0b80:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 80a0b82:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 80a0b86:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0b8a:	f7ff ff79 	bl	80a0a80 <_ZN17SystemSleepResultaSEOS_>
 80a0b8e:	e7cb      	b.n	80a0b28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 80a0b90:	200000bc 	.word	0x200000bc
 80a0b94:	ffff0000 	.word	0xffff0000
 80a0b98:	080a3366 	.word	0x080a3366
 80a0b9c:	080a335f 	.word	0x080a335f

080a0ba0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0ba0:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0ba2:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0ba4:	b510      	push	{r4, lr}
 80a0ba6:	4b08      	ldr	r3, [pc, #32]	; (80a0bc8 <_GLOBAL__sub_I_System+0x28>)
 80a0ba8:	4c08      	ldr	r4, [pc, #32]	; (80a0bcc <_GLOBAL__sub_I_System+0x2c>)
 80a0baa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0bac:	4b08      	ldr	r3, [pc, #32]	; (80a0bd0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0bae:	6020      	str	r0, [r4, #0]
 80a0bb0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0bb2:	71a0      	strb	r0, [r4, #6]
 80a0bb4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0bb6:	f7ff fe47 	bl	80a0848 <set_system_mode>
SystemClass System;
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0bc0:	4a04      	ldr	r2, [pc, #16]	; (80a0bd4 <_GLOBAL__sub_I_System+0x34>)
 80a0bc2:	4905      	ldr	r1, [pc, #20]	; (80a0bd8 <_GLOBAL__sub_I_System+0x38>)
 80a0bc4:	f002 ba2e 	b.w	80a3024 <__aeabi_atexit>
 80a0bc8:	200000c8 	.word	0x200000c8
 80a0bcc:	200000bc 	.word	0x200000bc
 80a0bd0:	ffff0000 	.word	0xffff0000
 80a0bd4:	20000080 	.word	0x20000080
 80a0bd8:	080a0a75 	.word	0x080a0a75

080a0bdc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0bdc:	b510      	push	{r4, lr}
 80a0bde:	4604      	mov	r4, r0
{
	free(buffer);
 80a0be0:	6800      	ldr	r0, [r0, #0]
 80a0be2:	f7ff fef7 	bl	80a09d4 <free>
}
 80a0be6:	4620      	mov	r0, r4
 80a0be8:	bd10      	pop	{r4, pc}

080a0bea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0bea:	b510      	push	{r4, lr}
 80a0bec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0bee:	6800      	ldr	r0, [r0, #0]
 80a0bf0:	b108      	cbz	r0, 80a0bf6 <_ZN6String10invalidateEv+0xc>
 80a0bf2:	f7ff feef 	bl	80a09d4 <free>
	buffer = NULL;
 80a0bf6:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0bf8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0bfc:	6023      	str	r3, [r4, #0]
}
 80a0bfe:	bd10      	pop	{r4, pc}

080a0c00 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0c00:	b538      	push	{r3, r4, r5, lr}
 80a0c02:	4604      	mov	r4, r0
 80a0c04:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0c06:	6800      	ldr	r0, [r0, #0]
 80a0c08:	3101      	adds	r1, #1
 80a0c0a:	f7ff feeb 	bl	80a09e4 <realloc>
	if (newbuffer) {
 80a0c0e:	b110      	cbz	r0, 80a0c16 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0c10:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0c14:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0c16:	bd38      	pop	{r3, r4, r5, pc}

080a0c18 <_ZN6String7reserveEj>:
{
 80a0c18:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0c1a:	6803      	ldr	r3, [r0, #0]
{
 80a0c1c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0c1e:	b123      	cbz	r3, 80a0c2a <_ZN6String7reserveEj+0x12>
 80a0c20:	6843      	ldr	r3, [r0, #4]
 80a0c22:	428b      	cmp	r3, r1
 80a0c24:	d301      	bcc.n	80a0c2a <_ZN6String7reserveEj+0x12>
 80a0c26:	2001      	movs	r0, #1
}
 80a0c28:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0c2a:	4620      	mov	r0, r4
 80a0c2c:	f7ff ffe8 	bl	80a0c00 <_ZN6String12changeBufferEj>
 80a0c30:	2800      	cmp	r0, #0
 80a0c32:	d0f9      	beq.n	80a0c28 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0c34:	68a3      	ldr	r3, [r4, #8]
 80a0c36:	2b00      	cmp	r3, #0
 80a0c38:	d1f5      	bne.n	80a0c26 <_ZN6String7reserveEj+0xe>
 80a0c3a:	6822      	ldr	r2, [r4, #0]
 80a0c3c:	7013      	strb	r3, [r2, #0]
 80a0c3e:	e7f2      	b.n	80a0c26 <_ZN6String7reserveEj+0xe>

080a0c40 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c40:	b570      	push	{r4, r5, r6, lr}
 80a0c42:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0c44:	4611      	mov	r1, r2
{
 80a0c46:	4604      	mov	r4, r0
 80a0c48:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0c4a:	f7ff ffe5 	bl	80a0c18 <_ZN6String7reserveEj>
 80a0c4e:	b920      	cbnz	r0, 80a0c5a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0c50:	4620      	mov	r0, r4
 80a0c52:	f7ff ffca 	bl	80a0bea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0c56:	4620      	mov	r0, r4
 80a0c58:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0c5a:	462a      	mov	r2, r5
 80a0c5c:	4631      	mov	r1, r6
 80a0c5e:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0c60:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0c62:	f002 f9fb 	bl	80a305c <memcpy>
	buffer[len] = 0;
 80a0c66:	2100      	movs	r1, #0
 80a0c68:	6822      	ldr	r2, [r4, #0]
 80a0c6a:	68a3      	ldr	r3, [r4, #8]
 80a0c6c:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0c6e:	e7f2      	b.n	80a0c56 <_ZN6String4copyEPKcj+0x16>

080a0c70 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a0c70:	b538      	push	{r3, r4, r5, lr}
 80a0c72:	4605      	mov	r5, r0
	if (buffer) {
 80a0c74:	6800      	ldr	r0, [r0, #0]
{
 80a0c76:	460c      	mov	r4, r1
	if (buffer) {
 80a0c78:	b168      	cbz	r0, 80a0c96 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a0c7a:	686a      	ldr	r2, [r5, #4]
 80a0c7c:	688b      	ldr	r3, [r1, #8]
 80a0c7e:	429a      	cmp	r2, r3
 80a0c80:	d307      	bcc.n	80a0c92 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a0c82:	6809      	ldr	r1, [r1, #0]
 80a0c84:	f002 fa5f 	bl	80a3146 <strcpy>
			len = rhs.len;
 80a0c88:	68a3      	ldr	r3, [r4, #8]
 80a0c8a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a0c8c:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a0c8e:	60a3      	str	r3, [r4, #8]
}
 80a0c90:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a0c92:	f7ff fe9f 	bl	80a09d4 <free>
	buffer = rhs.buffer;
 80a0c96:	6823      	ldr	r3, [r4, #0]
 80a0c98:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a0c9a:	6863      	ldr	r3, [r4, #4]
 80a0c9c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a0c9e:	68a3      	ldr	r3, [r4, #8]
 80a0ca0:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a0ca2:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a0ca4:	e9c4 3300 	strd	r3, r3, [r4]
 80a0ca8:	e7f1      	b.n	80a0c8e <_ZN6String4moveERS_+0x1e>

080a0caa <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a0caa:	2300      	movs	r3, #0
String::String(String &&rval)
 80a0cac:	b510      	push	{r4, lr}
 80a0cae:	4604      	mov	r4, r0
	capacity = 0;
 80a0cb0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0cb4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0cb6:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a0cb8:	f7ff ffda 	bl	80a0c70 <_ZN6String4moveERS_>
}
 80a0cbc:	4620      	mov	r0, r4
 80a0cbe:	bd10      	pop	{r4, pc}

080a0cc0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0cc0:	4288      	cmp	r0, r1
{
 80a0cc2:	b510      	push	{r4, lr}
 80a0cc4:	460b      	mov	r3, r1
 80a0cc6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0cc8:	d004      	beq.n	80a0cd4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0cca:	6809      	ldr	r1, [r1, #0]
 80a0ccc:	b121      	cbz	r1, 80a0cd8 <_ZN6StringaSERKS_+0x18>
 80a0cce:	689a      	ldr	r2, [r3, #8]
 80a0cd0:	f7ff ffb6 	bl	80a0c40 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0cd4:	4620      	mov	r0, r4
 80a0cd6:	bd10      	pop	{r4, pc}
	else invalidate();
 80a0cd8:	f7ff ff87 	bl	80a0bea <_ZN6String10invalidateEv>
 80a0cdc:	e7fa      	b.n	80a0cd4 <_ZN6StringaSERKS_+0x14>

080a0cde <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a0cde:	2300      	movs	r3, #0
String::String(const String &value)
 80a0ce0:	b510      	push	{r4, lr}
 80a0ce2:	4604      	mov	r4, r0
	capacity = 0;
 80a0ce4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0ce8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0cea:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a0cec:	f7ff ffe8 	bl	80a0cc0 <_ZN6StringaSERKS_>
}
 80a0cf0:	4620      	mov	r0, r4
 80a0cf2:	bd10      	pop	{r4, pc}

080a0cf4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cf6:	4606      	mov	r6, r0
 80a0cf8:	460d      	mov	r5, r1
  size_t n = 0;
 80a0cfa:	2400      	movs	r4, #0
 80a0cfc:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0cfe:	42bd      	cmp	r5, r7
 80a0d00:	d00c      	beq.n	80a0d1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0d02:	6833      	ldr	r3, [r6, #0]
 80a0d04:	4630      	mov	r0, r6
 80a0d06:	689b      	ldr	r3, [r3, #8]
 80a0d08:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0d0c:	4798      	blx	r3
     if (chunk>=0)
 80a0d0e:	1e03      	subs	r3, r0, #0
 80a0d10:	db01      	blt.n	80a0d16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0d12:	441c      	add	r4, r3
  while (size--) {
 80a0d14:	e7f3      	b.n	80a0cfe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0d16:	2c00      	cmp	r4, #0
 80a0d18:	bf08      	it	eq
 80a0d1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0d1c:	4620      	mov	r0, r4
 80a0d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0d20:	b570      	push	{r4, r5, r6, lr}
 80a0d22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0d24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0d26:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0d28:	b149      	cbz	r1, 80a0d3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0d2a:	f002 fa30 	bl	80a318e <strlen>
 80a0d2e:	682b      	ldr	r3, [r5, #0]
 80a0d30:	4602      	mov	r2, r0
 80a0d32:	4621      	mov	r1, r4
 80a0d34:	4628      	mov	r0, r5
    }
 80a0d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0d3a:	68db      	ldr	r3, [r3, #12]
 80a0d3c:	4718      	bx	r3
    }
 80a0d3e:	bd70      	pop	{r4, r5, r6, pc}

080a0d40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0d40:	6803      	ldr	r3, [r0, #0]
 80a0d42:	689b      	ldr	r3, [r3, #8]
 80a0d44:	4718      	bx	r3

080a0d46 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0d46:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0d48:	210d      	movs	r1, #13
{
 80a0d4a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0d4c:	f7ff fff8 	bl	80a0d40 <_ZN5Print5printEc>
  n += print('\n');
 80a0d50:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0d52:	4604      	mov	r4, r0
  n += print('\n');
 80a0d54:	4628      	mov	r0, r5
 80a0d56:	f7ff fff3 	bl	80a0d40 <_ZN5Print5printEc>
  return n;
}
 80a0d5a:	4420      	add	r0, r4
 80a0d5c:	bd38      	pop	{r3, r4, r5, pc}

080a0d5e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0d5e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0d60:	2a01      	cmp	r2, #1
 80a0d62:	bf98      	it	ls
 80a0d64:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0d66:	b530      	push	{r4, r5, lr}
 80a0d68:	b08b      	sub	sp, #44	; 0x2c
 80a0d6a:	460c      	mov	r4, r1
  *str = '\0';
 80a0d6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0d70:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0d72:	4625      	mov	r5, r4
 80a0d74:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0d78:	fb04 5312 	mls	r3, r4, r2, r5
 80a0d7c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0d7e:	2b09      	cmp	r3, #9
 80a0d80:	bf94      	ite	ls
 80a0d82:	3330      	addls	r3, #48	; 0x30
 80a0d84:	3337      	addhi	r3, #55	; 0x37
 80a0d86:	b2db      	uxtb	r3, r3
  } while(n);
 80a0d88:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0d8a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0d8e:	d9f0      	bls.n	80a0d72 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0d90:	f7ff ffc6 	bl	80a0d20 <_ZN5Print5writeEPKc>
}
 80a0d94:	b00b      	add	sp, #44	; 0x2c
 80a0d96:	bd30      	pop	{r4, r5, pc}

080a0d98 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a0d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0d9c:	b086      	sub	sp, #24
 80a0d9e:	af00      	add	r7, sp, #0
 80a0da0:	4605      	mov	r5, r0
 80a0da2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a0da4:	1d38      	adds	r0, r7, #4
 80a0da6:	2114      	movs	r1, #20
{
 80a0da8:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a0daa:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a0dac:	f7ff fe2a 	bl	80a0a04 <vsnprintf>

    if (n<bufsize)
 80a0db0:	2813      	cmp	r0, #19
 80a0db2:	d80e      	bhi.n	80a0dd2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a0db4:	4628      	mov	r0, r5
 80a0db6:	1d39      	adds	r1, r7, #4
 80a0db8:	f7ff ffb2 	bl	80a0d20 <_ZN5Print5writeEPKc>
 80a0dbc:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a0dbe:	b11e      	cbz	r6, 80a0dc8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a0dc0:	4628      	mov	r0, r5
 80a0dc2:	f7ff ffc0 	bl	80a0d46 <_ZN5Print7printlnEv>
 80a0dc6:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a0dc8:	4620      	mov	r0, r4
 80a0dca:	3718      	adds	r7, #24
 80a0dcc:	46bd      	mov	sp, r7
 80a0dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a0dd2:	f100 0308 	add.w	r3, r0, #8
 80a0dd6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a0dda:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a0ddc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a0de0:	4622      	mov	r2, r4
 80a0de2:	1c41      	adds	r1, r0, #1
 80a0de4:	683b      	ldr	r3, [r7, #0]
 80a0de6:	4668      	mov	r0, sp
 80a0de8:	f7ff fe0c 	bl	80a0a04 <vsnprintf>
  return write(str);
 80a0dec:	4669      	mov	r1, sp
 80a0dee:	4628      	mov	r0, r5
 80a0df0:	f7ff ff96 	bl	80a0d20 <_ZN5Print5writeEPKc>
 80a0df4:	4604      	mov	r4, r0
 80a0df6:	46c5      	mov	sp, r8
 80a0df8:	e7e1      	b.n	80a0dbe <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a0dfa <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0dfa:	2300      	movs	r3, #0
 80a0dfc:	6840      	ldr	r0, [r0, #4]
 80a0dfe:	461a      	mov	r2, r3
 80a0e00:	4619      	mov	r1, r3
 80a0e02:	f7ff bd7f 	b.w	80a0904 <network_on>

080a0e06 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a0e06:	6880      	ldr	r0, [r0, #8]
 80a0e08:	6803      	ldr	r3, [r0, #0]
 80a0e0a:	68db      	ldr	r3, [r3, #12]
 80a0e0c:	4718      	bx	r3

080a0e0e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a0e0e:	4770      	bx	lr

080a0e10 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a0e10:	4608      	mov	r0, r1
 80a0e12:	b111      	cbz	r1, 80a0e1a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a0e14:	680b      	ldr	r3, [r1, #0]
 80a0e16:	685b      	ldr	r3, [r3, #4]
 80a0e18:	4718      	bx	r3
}
 80a0e1a:	4770      	bx	lr

080a0e1c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a0e1c:	4770      	bx	lr

080a0e1e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a0e1e:	4770      	bx	lr

080a0e20 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a0e20:	4770      	bx	lr

080a0e22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a0e22:	b538      	push	{r3, r4, r5, lr}
 80a0e24:	4604      	mov	r4, r0
 80a0e26:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a0e28:	6800      	ldr	r0, [r0, #0]
 80a0e2a:	212e      	movs	r1, #46	; 0x2e
 80a0e2c:	f002 f977 	bl	80a311e <strchrnul>
    size = s - category;
 80a0e30:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a0e32:	4602      	mov	r2, r0
    size = s - category;
 80a0e34:	1ac0      	subs	r0, r0, r3
 80a0e36:	6028      	str	r0, [r5, #0]
    if (size) {
 80a0e38:	b120      	cbz	r0, 80a0e44 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a0e3a:	7813      	ldrb	r3, [r2, #0]
 80a0e3c:	b103      	cbz	r3, 80a0e40 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a0e3e:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0e40:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e42:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a0e44:	bd38      	pop	{r3, r4, r5, pc}

080a0e46 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a0e46:	b510      	push	{r4, lr}
 80a0e48:	4604      	mov	r4, r0
 80a0e4a:	210c      	movs	r1, #12
 80a0e4c:	f002 f8ef 	bl	80a302e <_ZdlPvj>
 80a0e50:	4620      	mov	r0, r4
 80a0e52:	bd10      	pop	{r4, pc}

080a0e54 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a0e54:	b510      	push	{r4, lr}
 80a0e56:	4604      	mov	r4, r0
 80a0e58:	2104      	movs	r1, #4
 80a0e5a:	f002 f8e8 	bl	80a302e <_ZdlPvj>
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	bd10      	pop	{r4, pc}

080a0e62 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a0e62:	b510      	push	{r4, lr}
 80a0e64:	4604      	mov	r4, r0
 80a0e66:	2104      	movs	r1, #4
 80a0e68:	f002 f8e1 	bl	80a302e <_ZdlPvj>
 80a0e6c:	4620      	mov	r0, r4
 80a0e6e:	bd10      	pop	{r4, pc}

080a0e70 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a0e70:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a0e72:	f002 f95e 	bl	80a3132 <strcmp>
}
 80a0e76:	fab0 f080 	clz	r0, r0
 80a0e7a:	0940      	lsrs	r0, r0, #5
 80a0e7c:	bd08      	pop	{r3, pc}

080a0e7e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a0e7e:	b510      	push	{r4, lr}
 80a0e80:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a0e82:	f001 fbff 	bl	80a2684 <_Z16_fetch_usbserialv>
 80a0e86:	4284      	cmp	r4, r0
 80a0e88:	d105      	bne.n	80a0e96 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a0e8a:	f001 fbfb 	bl	80a2684 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a0e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a0e92:	f001 bbdd 	b.w	80a2650 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a0e96:	f001 fc33 	bl	80a2700 <_Z17_fetch_usbserial1v>
 80a0e9a:	4284      	cmp	r4, r0
 80a0e9c:	d102      	bne.n	80a0ea4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a0e9e:	f001 fc2f 	bl	80a2700 <_Z17_fetch_usbserial1v>
 80a0ea2:	e7f4      	b.n	80a0e8e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a0ea4:	f001 fcdc 	bl	80a2860 <_Z22__fetch_global_Serial1v>
 80a0ea8:	4284      	cmp	r4, r0
 80a0eaa:	d105      	bne.n	80a0eb8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a0eac:	f001 fcd8 	bl	80a2860 <_Z22__fetch_global_Serial1v>
}
 80a0eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a0eb4:	f001 bcd1 	b.w	80a285a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a0eb8:	b12c      	cbz	r4, 80a0ec6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a0eba:	6823      	ldr	r3, [r4, #0]
 80a0ebc:	4620      	mov	r0, r4
}
 80a0ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0ec2:	685b      	ldr	r3, [r3, #4]
 80a0ec4:	4718      	bx	r3
 80a0ec6:	bd10      	pop	{r4, pc}

080a0ec8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a0ec8:	b538      	push	{r3, r4, r5, lr}
 80a0eca:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a0ecc:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a0ece:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a0ed0:	f002 f95d 	bl	80a318e <strlen>
 80a0ed4:	4621      	mov	r1, r4
 80a0ed6:	4602      	mov	r2, r0
 80a0ed8:	4628      	mov	r0, r5
}
 80a0eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a0ede:	f001 bfda 	b.w	80a2e96 <_ZN5spark10JSONWriter5valueEPKcj>

080a0ee2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a0ee2:	b570      	push	{r4, r5, r6, lr}
 80a0ee4:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a0ee6:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a0ee8:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a0eea:	f002 f950 	bl	80a318e <strlen>
 80a0eee:	6823      	ldr	r3, [r4, #0]
 80a0ef0:	4602      	mov	r2, r0
 80a0ef2:	4629      	mov	r1, r5
 80a0ef4:	4620      	mov	r0, r4
}
 80a0ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a0efa:	68db      	ldr	r3, [r3, #12]
 80a0efc:	4718      	bx	r3

080a0efe <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a0efe:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a0f00:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a0f02:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a0f06:	2201      	movs	r2, #1
 80a0f08:	68db      	ldr	r3, [r3, #12]
 80a0f0a:	f10d 0107 	add.w	r1, sp, #7
 80a0f0e:	4798      	blx	r3
}
 80a0f10:	b003      	add	sp, #12
 80a0f12:	f85d fb04 	ldr.w	pc, [sp], #4

080a0f16 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a0f16:	b40e      	push	{r1, r2, r3}
 80a0f18:	b503      	push	{r0, r1, lr}
 80a0f1a:	ab03      	add	r3, sp, #12
 80a0f1c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a0f20:	2100      	movs	r1, #0
 80a0f22:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a0f24:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a0f26:	f7ff ff37 	bl	80a0d98 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a0f2a:	b002      	add	sp, #8
 80a0f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0f30:	b003      	add	sp, #12
 80a0f32:	4770      	bx	lr

080a0f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a0f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a0f38:	f04f 0814 	mov.w	r8, #20
 80a0f3c:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a0f40:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a0f42:	464c      	mov	r4, r9
 80a0f44:	fb08 f505 	mul.w	r5, r8, r5
 80a0f48:	9300      	str	r3, [sp, #0]
 80a0f4a:	10ab      	asrs	r3, r5, #2
 80a0f4c:	4d17      	ldr	r5, [pc, #92]	; (80a0fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a0f4e:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a0f50:	2d00      	cmp	r5, #0
 80a0f52:	dd23      	ble.n	80a0f9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a0f54:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a0f56:	fb08 f006 	mul.w	r0, r8, r6
 80a0f5a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a0f5e:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a0f62:	463a      	mov	r2, r7
 80a0f64:	455f      	cmp	r7, fp
 80a0f66:	bf28      	it	cs
 80a0f68:	465a      	movcs	r2, fp
 80a0f6a:	5820      	ldr	r0, [r4, r0]
 80a0f6c:	9101      	str	r1, [sp, #4]
 80a0f6e:	f002 f916 	bl	80a319e <strncmp>
                if (cmp == 0) {
 80a0f72:	2301      	movs	r3, #1
 80a0f74:	9901      	ldr	r1, [sp, #4]
 80a0f76:	b978      	cbnz	r0, 80a0f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a0f78:	455f      	cmp	r7, fp
 80a0f7a:	d103      	bne.n	80a0f84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a0f7c:	9a00      	ldr	r2, [sp, #0]
 80a0f7e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a0f80:	4635      	mov	r5, r6
 80a0f82:	e7e5      	b.n	80a0f50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a0f84:	bf8c      	ite	hi
 80a0f86:	2001      	movhi	r0, #1
 80a0f88:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a0f8a:	2800      	cmp	r0, #0
 80a0f8c:	d0f8      	beq.n	80a0f80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a0f8e:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a0f90:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a0f94:	3e01      	subs	r6, #1
 80a0f96:	e7f3      	b.n	80a0f80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a0f98:	0fc0      	lsrs	r0, r0, #31
 80a0f9a:	e7f6      	b.n	80a0f8a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a0f9c:	eba4 0409 	sub.w	r4, r4, r9
}
 80a0fa0:	4802      	ldr	r0, [pc, #8]	; (80a0fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a0fa2:	10a4      	asrs	r4, r4, #2
 80a0fa4:	4360      	muls	r0, r4
 80a0fa6:	b003      	add	sp, #12
 80a0fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0fac:	cccccccd 	.word	0xcccccccd

080a0fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a0fb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a0fb2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a0fb4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a0fb6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a0fb8:	b303      	cbz	r3, 80a0ffc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a0fba:	b1f9      	cbz	r1, 80a0ffc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a0fbc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a0fbe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a0fc2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a0fc4:	a903      	add	r1, sp, #12
 80a0fc6:	a801      	add	r0, sp, #4
 80a0fc8:	f7ff ff2b 	bl	80a0e22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a0fcc:	4601      	mov	r1, r0
 80a0fce:	b1a8      	cbz	r0, 80a0ffc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a0fd0:	f10d 030b 	add.w	r3, sp, #11
 80a0fd4:	4620      	mov	r0, r4
 80a0fd6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a0fd8:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a0fdc:	f7ff ffaa 	bl	80a0f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a0fe0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a0fe4:	b153      	cbz	r3, 80a0ffc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a0fe6:	2314      	movs	r3, #20
 80a0fe8:	6824      	ldr	r4, [r4, #0]
 80a0fea:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a0fee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a0ff2:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a0ff4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a0ff6:	bfa8      	it	ge
 80a0ff8:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a0ffa:	e7e3      	b.n	80a0fc4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a0ffc:	4630      	mov	r0, r6
 80a0ffe:	b004      	add	sp, #16
 80a1000:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1004 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1004:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a1006:	4c0a      	ldr	r4, [pc, #40]	; (80a1030 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a1008:	7823      	ldrb	r3, [r4, #0]
 80a100a:	f3bf 8f5b 	dmb	ish
 80a100e:	07db      	lsls	r3, r3, #31
 80a1010:	d40b      	bmi.n	80a102a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1012:	4620      	mov	r0, r4
 80a1014:	f7ff f850 	bl	80a00b8 <__cxa_guard_acquire>
 80a1018:	b138      	cbz	r0, 80a102a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a101a:	4620      	mov	r0, r4
 80a101c:	f7ff f851 	bl	80a00c2 <__cxa_guard_release>
 80a1020:	4a04      	ldr	r2, [pc, #16]	; (80a1034 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1022:	4905      	ldr	r1, [pc, #20]	; (80a1038 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1024:	4805      	ldr	r0, [pc, #20]	; (80a103c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1026:	f001 fffd 	bl	80a3024 <__aeabi_atexit>
}
 80a102a:	4804      	ldr	r0, [pc, #16]	; (80a103c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a102c:	bd10      	pop	{r4, pc}
 80a102e:	bf00      	nop
 80a1030:	200000d0 	.word	0x200000d0
 80a1034:	20000080 	.word	0x20000080
 80a1038:	080a0e1f 	.word	0x080a0e1f
 80a103c:	20000010 	.word	0x20000010

080a1040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1040:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1042:	4c0a      	ldr	r4, [pc, #40]	; (80a106c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1044:	7823      	ldrb	r3, [r4, #0]
 80a1046:	f3bf 8f5b 	dmb	ish
 80a104a:	07db      	lsls	r3, r3, #31
 80a104c:	d40b      	bmi.n	80a1066 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a104e:	4620      	mov	r0, r4
 80a1050:	f7ff f832 	bl	80a00b8 <__cxa_guard_acquire>
 80a1054:	b138      	cbz	r0, 80a1066 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1056:	4620      	mov	r0, r4
 80a1058:	f7ff f833 	bl	80a00c2 <__cxa_guard_release>
 80a105c:	4a04      	ldr	r2, [pc, #16]	; (80a1070 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a105e:	4905      	ldr	r1, [pc, #20]	; (80a1074 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1060:	4805      	ldr	r0, [pc, #20]	; (80a1078 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1062:	f001 ffdf 	bl	80a3024 <__aeabi_atexit>
    return &factory;
}
 80a1066:	4804      	ldr	r0, [pc, #16]	; (80a1078 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1068:	bd10      	pop	{r4, pc}
 80a106a:	bf00      	nop
 80a106c:	200000d4 	.word	0x200000d4
 80a1070:	20000080 	.word	0x20000080
 80a1074:	080a0e1d 	.word	0x080a0e1d
 80a1078:	20000014 	.word	0x20000014

080a107c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a107c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a107e:	2500      	movs	r5, #0
 80a1080:	4604      	mov	r4, r0
 80a1082:	e9c0 5500 	strd	r5, r5, [r0]
 80a1086:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a108a:	6085      	str	r5, [r0, #8]
 80a108c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 80a108e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 80a1092:	f7ff faaf 	bl	80a05f4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a1096:	f7ff ffb5 	bl	80a1004 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a109a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a109c:	f7ff ffd0 	bl	80a1040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a10a0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a10a2:	6220      	str	r0, [r4, #32]
}
 80a10a4:	4620      	mov	r0, r4
 80a10a6:	bd38      	pop	{r3, r4, r5, pc}

080a10a8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a10a8:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a10aa:	4c0b      	ldr	r4, [pc, #44]	; (80a10d8 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a10ac:	7823      	ldrb	r3, [r4, #0]
 80a10ae:	f3bf 8f5b 	dmb	ish
 80a10b2:	07db      	lsls	r3, r3, #31
 80a10b4:	d40e      	bmi.n	80a10d4 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a10b6:	4620      	mov	r0, r4
 80a10b8:	f7fe fffe 	bl	80a00b8 <__cxa_guard_acquire>
 80a10bc:	b150      	cbz	r0, 80a10d4 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a10be:	4807      	ldr	r0, [pc, #28]	; (80a10dc <_ZN5spark10LogManager8instanceEv+0x34>)
 80a10c0:	f7ff ffdc 	bl	80a107c <_ZN5spark10LogManagerC1Ev>
 80a10c4:	4620      	mov	r0, r4
 80a10c6:	f7fe fffc 	bl	80a00c2 <__cxa_guard_release>
 80a10ca:	4a05      	ldr	r2, [pc, #20]	; (80a10e0 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a10cc:	4905      	ldr	r1, [pc, #20]	; (80a10e4 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a10ce:	4803      	ldr	r0, [pc, #12]	; (80a10dc <_ZN5spark10LogManager8instanceEv+0x34>)
 80a10d0:	f001 ffa8 	bl	80a3024 <__aeabi_atexit>
    return &mgr;
}
 80a10d4:	4801      	ldr	r0, [pc, #4]	; (80a10dc <_ZN5spark10LogManager8instanceEv+0x34>)
 80a10d6:	bd10      	pop	{r4, pc}
 80a10d8:	200000cc 	.word	0x200000cc
 80a10dc:	200000dc 	.word	0x200000dc
 80a10e0:	20000080 	.word	0x20000080
 80a10e4:	080a1597 	.word	0x080a1597

080a10e8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a10e8:	2300      	movs	r3, #0
 80a10ea:	4a02      	ldr	r2, [pc, #8]	; (80a10f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a10ec:	4902      	ldr	r1, [pc, #8]	; (80a10f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a10ee:	4803      	ldr	r0, [pc, #12]	; (80a10fc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a10f0:	f7ff bba2 	b.w	80a0838 <log_set_callbacks>
 80a10f4:	080a1475 	.word	0x080a1475
 80a10f8:	080a1401 	.word	0x080a1401
 80a10fc:	080a1381 	.word	0x080a1381

080a1100 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1100:	2300      	movs	r3, #0
 80a1102:	461a      	mov	r2, r3
 80a1104:	4619      	mov	r1, r3
 80a1106:	4618      	mov	r0, r3
 80a1108:	f7ff bb96 	b.w	80a0838 <log_set_callbacks>

080a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a110c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a110e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a1110:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a1112:	b17c      	cbz	r4, 80a1134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a1114:	6863      	ldr	r3, [r4, #4]
 80a1116:	3b01      	subs	r3, #1
 80a1118:	6063      	str	r3, [r4, #4]
 80a111a:	b95b      	cbnz	r3, 80a1134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a111c:	6823      	ldr	r3, [r4, #0]
 80a111e:	4620      	mov	r0, r4
 80a1120:	689b      	ldr	r3, [r3, #8]
 80a1122:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1124:	68a3      	ldr	r3, [r4, #8]
 80a1126:	3b01      	subs	r3, #1
 80a1128:	60a3      	str	r3, [r4, #8]
 80a112a:	b91b      	cbnz	r3, 80a1134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a112c:	6823      	ldr	r3, [r4, #0]
 80a112e:	4620      	mov	r0, r4
 80a1130:	68db      	ldr	r3, [r3, #12]
 80a1132:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a1134:	4628      	mov	r0, r5
 80a1136:	bd38      	pop	{r3, r4, r5, pc}

080a1138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1138:	680b      	ldr	r3, [r1, #0]
 80a113a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a113c:	b113      	cbz	r3, 80a1144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a113e:	685a      	ldr	r2, [r3, #4]
 80a1140:	3201      	adds	r2, #1
 80a1142:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a1144:	4770      	bx	lr

080a1146 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a1146:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1148:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a114a:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a114c:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1150:	a801      	add	r0, sp, #4
 80a1152:	9300      	str	r3, [sp, #0]
 80a1154:	f7ff fff0 	bl	80a1138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1158:	466a      	mov	r2, sp
 80a115a:	4629      	mov	r1, r5
 80a115c:	4620      	mov	r0, r4
 80a115e:	f001 fd45 	bl	80a2bec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1162:	a801      	add	r0, sp, #4
 80a1164:	f7ff ffd2 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1168:	4620      	mov	r0, r4
 80a116a:	b003      	add	sp, #12
 80a116c:	bd30      	pop	{r4, r5, pc}

080a116e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a116e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1170:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a1172:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1174:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1178:	a801      	add	r0, sp, #4
 80a117a:	9300      	str	r3, [sp, #0]
 80a117c:	f7ff ffdc 	bl	80a1138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1180:	466a      	mov	r2, sp
 80a1182:	4629      	mov	r1, r5
 80a1184:	4620      	mov	r0, r4
 80a1186:	f001 fdad 	bl	80a2ce4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a118a:	a801      	add	r0, sp, #4
 80a118c:	f7ff ffbe 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1190:	4620      	mov	r0, r4
 80a1192:	b003      	add	sp, #12
 80a1194:	bd30      	pop	{r4, r5, pc}

080a1196 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a1196:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1198:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a119a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a119c:	f851 3b04 	ldr.w	r3, [r1], #4
 80a11a0:	a801      	add	r0, sp, #4
 80a11a2:	9300      	str	r3, [sp, #0]
 80a11a4:	f7ff ffc8 	bl	80a1138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a11a8:	466a      	mov	r2, sp
 80a11aa:	4629      	mov	r1, r5
 80a11ac:	4620      	mov	r0, r4
 80a11ae:	f001 fd75 	bl	80a2c9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a11b2:	a801      	add	r0, sp, #4
 80a11b4:	f7ff ffaa 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a11b8:	4620      	mov	r0, r4
 80a11ba:	b003      	add	sp, #12
 80a11bc:	bd30      	pop	{r4, r5, pc}
	...

080a11c0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a11c0:	b570      	push	{r4, r5, r6, lr}
 80a11c2:	b08a      	sub	sp, #40	; 0x28
 80a11c4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a11c6:	4601      	mov	r1, r0
 80a11c8:	a804      	add	r0, sp, #16
 80a11ca:	f7ff ffd0 	bl	80a116e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a11ce:	4e14      	ldr	r6, [pc, #80]	; (80a1220 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a11d0:	a804      	add	r0, sp, #16
 80a11d2:	f001 fd9f 	bl	80a2d14 <_ZN5spark18JSONObjectIterator4nextEv>
 80a11d6:	b1e8      	cbz	r0, 80a1214 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a11d8:	4668      	mov	r0, sp
 80a11da:	a904      	add	r1, sp, #16
 80a11dc:	f7ff ffdb 	bl	80a1196 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a11e0:	4631      	mov	r1, r6
 80a11e2:	9802      	ldr	r0, [sp, #8]
 80a11e4:	f7ff fe44 	bl	80a0e70 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a11e8:	4604      	mov	r4, r0
 80a11ea:	b110      	cbz	r0, 80a11f2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a11ec:	1e2c      	subs	r4, r5, #0
 80a11ee:	bf18      	it	ne
 80a11f0:	2401      	movne	r4, #1
 80a11f2:	a801      	add	r0, sp, #4
 80a11f4:	f7ff ff8a 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a11f8:	2c00      	cmp	r4, #0
 80a11fa:	d0e9      	beq.n	80a11d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a11fc:	4668      	mov	r0, sp
 80a11fe:	a904      	add	r1, sp, #16
 80a1200:	f7ff ffa1 	bl	80a1146 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a1204:	4668      	mov	r0, sp
 80a1206:	f001 fd28 	bl	80a2c5a <_ZNK5spark9JSONValue5toIntEv>
 80a120a:	6028      	str	r0, [r5, #0]
 80a120c:	a801      	add	r0, sp, #4
 80a120e:	f7ff ff7d 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1212:	e7dd      	b.n	80a11d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a1214:	a805      	add	r0, sp, #20
 80a1216:	f7ff ff79 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a121a:	b00a      	add	sp, #40	; 0x28
 80a121c:	bd70      	pop	{r4, r5, r6, pc}
 80a121e:	bf00      	nop
 80a1220:	080a338d 	.word	0x080a338d

080a1224 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1226:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a1228:	4919      	ldr	r1, [pc, #100]	; (80a1290 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a122a:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a122c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a122e:	f001 ff80 	bl	80a3132 <strcmp>
 80a1232:	b948      	cbnz	r0, 80a1248 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a1234:	f001 fa26 	bl	80a2684 <_Z16_fetch_usbserialv>
 80a1238:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a123c:	f001 fa04 	bl	80a2648 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a1240:	f001 fa20 	bl	80a2684 <_Z16_fetch_usbserialv>
}
 80a1244:	b003      	add	sp, #12
 80a1246:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a1248:	4620      	mov	r0, r4
 80a124a:	4912      	ldr	r1, [pc, #72]	; (80a1294 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a124c:	f001 ff71 	bl	80a3132 <strcmp>
 80a1250:	b940      	cbnz	r0, 80a1264 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a1252:	f001 fa55 	bl	80a2700 <_Z17_fetch_usbserial1v>
 80a1256:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a125a:	f001 f9f5 	bl	80a2648 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a125e:	f001 fa4f 	bl	80a2700 <_Z17_fetch_usbserial1v>
 80a1262:	e7ef      	b.n	80a1244 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a1264:	4620      	mov	r0, r4
 80a1266:	490c      	ldr	r1, [pc, #48]	; (80a1298 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a1268:	f001 ff63 	bl	80a3132 <strcmp>
 80a126c:	b970      	cbnz	r0, 80a128c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a126e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a1272:	a901      	add	r1, sp, #4
 80a1274:	4628      	mov	r0, r5
        int baud = 9600;
 80a1276:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a1278:	f7ff ffa2 	bl	80a11c0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a127c:	f001 faf0 	bl	80a2860 <_Z22__fetch_global_Serial1v>
 80a1280:	9901      	ldr	r1, [sp, #4]
 80a1282:	f001 fae7 	bl	80a2854 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a1286:	f001 faeb 	bl	80a2860 <_Z22__fetch_global_Serial1v>
 80a128a:	e7db      	b.n	80a1244 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a128c:	2000      	movs	r0, #0
 80a128e:	e7d9      	b.n	80a1244 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a1290:	080a3392 	.word	0x080a3392
 80a1294:	080a3399 	.word	0x080a3399
 80a1298:	080a339c 	.word	0x080a339c

080a129c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a129c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a129e:	2614      	movs	r6, #20
 80a12a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a12a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a12a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a12aa:	42ae      	cmp	r6, r5
 80a12ac:	d005      	beq.n	80a12ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a12ae:	f105 0008 	add.w	r0, r5, #8
 80a12b2:	f7ff fff3 	bl	80a129c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a12b6:	3514      	adds	r5, #20
 80a12b8:	e7f7      	b.n	80a12aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a12ba:	6820      	ldr	r0, [r4, #0]
 80a12bc:	f7ff fb8a 	bl	80a09d4 <free>
}
 80a12c0:	4620      	mov	r0, r4
 80a12c2:	bd70      	pop	{r4, r5, r6, pc}

080a12c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a12c4:	b570      	push	{r4, r5, r6, lr}
 80a12c6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a12c8:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a12cc:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a12d0:	42ae      	cmp	r6, r5
 80a12d2:	d004      	beq.n	80a12de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a12d4:	4628      	mov	r0, r5
 80a12d6:	f7ff fc81 	bl	80a0bdc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a12da:	3510      	adds	r5, #16
 80a12dc:	e7f8      	b.n	80a12d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a12de:	6820      	ldr	r0, [r4, #0]
 80a12e0:	f7ff fb78 	bl	80a09d4 <free>
}
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	bd70      	pop	{r4, r5, r6, pc}

080a12e8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a12e8:	b510      	push	{r4, lr}
 80a12ea:	4604      	mov	r4, r0
 80a12ec:	300c      	adds	r0, #12
 80a12ee:	f7ff ffd5 	bl	80a129c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a12f2:	4620      	mov	r0, r4
 80a12f4:	f7ff ffe6 	bl	80a12c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a12f8:	4620      	mov	r0, r4
 80a12fa:	bd10      	pop	{r4, pc}

080a12fc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a12fc:	b510      	push	{r4, lr}
 80a12fe:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a1300:	4b03      	ldr	r3, [pc, #12]	; (80a1310 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a1302:	f840 3b04 	str.w	r3, [r0], #4
 80a1306:	f7ff ffef 	bl	80a12e8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a130a:	4620      	mov	r0, r4
 80a130c:	bd10      	pop	{r4, pc}
 80a130e:	bf00      	nop
 80a1310:	080a332c 	.word	0x080a332c

080a1314 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a1314:	b510      	push	{r4, lr}
 80a1316:	4604      	mov	r4, r0
 80a1318:	f7ff fff0 	bl	80a12fc <_ZN5spark16StreamLogHandlerD1Ev>
 80a131c:	4620      	mov	r0, r4
 80a131e:	2124      	movs	r1, #36	; 0x24
 80a1320:	f001 fe85 	bl	80a302e <_ZdlPvj>
 80a1324:	4620      	mov	r0, r4
 80a1326:	bd10      	pop	{r4, pc}

080a1328 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a1328:	b510      	push	{r4, lr}
 80a132a:	4604      	mov	r4, r0
 80a132c:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a132e:	6003      	str	r3, [r0, #0]
 80a1330:	f7ff ffe4 	bl	80a12fc <_ZN5spark16StreamLogHandlerD1Ev>
 80a1334:	4620      	mov	r0, r4
 80a1336:	bd10      	pop	{r4, pc}
 80a1338:	080a3440 	.word	0x080a3440

080a133c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a133c:	b510      	push	{r4, lr}
 80a133e:	4604      	mov	r4, r0
 80a1340:	f7ff fff2 	bl	80a1328 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a1344:	4620      	mov	r0, r4
 80a1346:	2124      	movs	r1, #36	; 0x24
 80a1348:	f001 fe71 	bl	80a302e <_ZdlPvj>
 80a134c:	4620      	mov	r0, r4
 80a134e:	bd10      	pop	{r4, pc}

080a1350 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a1350:	2200      	movs	r2, #0
 80a1352:	e9c0 2200 	strd	r2, r2, [r0]
 80a1356:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a1358:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a135a:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a135c:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a135e:	6004      	str	r4, [r0, #0]
 80a1360:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1362:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1364:	6044      	str	r4, [r0, #4]
 80a1366:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1368:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a136a:	6084      	str	r4, [r0, #8]
}
 80a136c:	bd10      	pop	{r4, pc}

080a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a136e:	b510      	push	{r4, lr}
 80a1370:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a1372:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1374:	6818      	ldr	r0, [r3, #0]
 80a1376:	f7ff f955 	bl	80a0624 <os_mutex_recursive_unlock>
 80a137a:	4620      	mov	r0, r4
 80a137c:	bd10      	pop	{r4, pc}
	...

080a1380 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a1380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1384:	b087      	sub	sp, #28
 80a1386:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a1388:	4b1c      	ldr	r3, [pc, #112]	; (80a13fc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a138a:	4680      	mov	r8, r0
 80a138c:	685b      	ldr	r3, [r3, #4]
 80a138e:	4689      	mov	r9, r1
 80a1390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a1394:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a1396:	b96b      	cbnz	r3, 80a13b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a1398:	f7ff fe86 	bl	80a10a8 <_ZN5spark10LogManager8instanceEv>
 80a139c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a139e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a13a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a13a4:	9305      	str	r3, [sp, #20]
 80a13a6:	f7ff f935 	bl	80a0614 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a13aa:	7b23      	ldrb	r3, [r4, #12]
 80a13ac:	b12b      	cbz	r3, 80a13ba <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a13ae:	a805      	add	r0, sp, #20
 80a13b0:	f7ff ffdd 	bl	80a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a13b4:	b007      	add	sp, #28
 80a13b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a13ba:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a13bc:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a13c0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a13c2:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a13c6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a13ca:	45aa      	cmp	sl, r5
 80a13cc:	d012      	beq.n	80a13f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a13ce:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a13d2:	4631      	mov	r1, r6
 80a13d4:	1d38      	adds	r0, r7, #4
 80a13d6:	f7ff fdeb 	bl	80a0fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a13da:	4581      	cmp	r9, r0
 80a13dc:	d3f5      	bcc.n	80a13ca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a13de:	9a03      	ldr	r2, [sp, #12]
 80a13e0:	683b      	ldr	r3, [r7, #0]
 80a13e2:	9200      	str	r2, [sp, #0]
 80a13e4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a13e8:	464a      	mov	r2, r9
 80a13ea:	4633      	mov	r3, r6
 80a13ec:	4641      	mov	r1, r8
 80a13ee:	4638      	mov	r0, r7
 80a13f0:	47d8      	blx	fp
 80a13f2:	e7ea      	b.n	80a13ca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a13f4:	2300      	movs	r3, #0
 80a13f6:	7323      	strb	r3, [r4, #12]
 80a13f8:	e7d9      	b.n	80a13ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a13fa:	bf00      	nop
 80a13fc:	e000ed00 	.word	0xe000ed00

080a1400 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a1400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1404:	469b      	mov	fp, r3
 80a1406:	4b1a      	ldr	r3, [pc, #104]	; (80a1470 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a1408:	4680      	mov	r8, r0
 80a140a:	685b      	ldr	r3, [r3, #4]
 80a140c:	4689      	mov	r9, r1
 80a140e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a1412:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a1414:	b96b      	cbnz	r3, 80a1432 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a1416:	f7ff fe47 	bl	80a10a8 <_ZN5spark10LogManager8instanceEv>
 80a141a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a141c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1420:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a1422:	9301      	str	r3, [sp, #4]
 80a1424:	f7ff f8f6 	bl	80a0614 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a1428:	7b23      	ldrb	r3, [r4, #12]
 80a142a:	b12b      	cbz	r3, 80a1438 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a142c:	a801      	add	r0, sp, #4
 80a142e:	f7ff ff9e 	bl	80a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a1432:	b003      	add	sp, #12
 80a1434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a1438:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a143a:	b2f6      	uxtb	r6, r6
 80a143c:	7323      	strb	r3, [r4, #12]
 80a143e:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a1442:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a1446:	4555      	cmp	r5, sl
 80a1448:	d00e      	beq.n	80a1468 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a144a:	f855 7b04 	ldr.w	r7, [r5], #4
 80a144e:	4659      	mov	r1, fp
 80a1450:	1d38      	adds	r0, r7, #4
 80a1452:	f7ff fdad 	bl	80a0fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a1456:	4286      	cmp	r6, r0
 80a1458:	d3f5      	bcc.n	80a1446 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a145a:	683b      	ldr	r3, [r7, #0]
 80a145c:	464a      	mov	r2, r9
 80a145e:	4641      	mov	r1, r8
 80a1460:	4638      	mov	r0, r7
 80a1462:	68db      	ldr	r3, [r3, #12]
 80a1464:	4798      	blx	r3
 80a1466:	e7ee      	b.n	80a1446 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a1468:	2300      	movs	r3, #0
 80a146a:	7323      	strb	r3, [r4, #12]
 80a146c:	e7de      	b.n	80a142c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a146e:	bf00      	nop
 80a1470:	e000ed00 	.word	0xe000ed00

080a1474 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a1474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1478:	4b16      	ldr	r3, [pc, #88]	; (80a14d4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a147a:	4605      	mov	r5, r0
 80a147c:	685b      	ldr	r3, [r3, #4]
 80a147e:	460f      	mov	r7, r1
 80a1480:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a1484:	bb1b      	cbnz	r3, 80a14ce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a1486:	f7ff fe0f 	bl	80a10a8 <_ZN5spark10LogManager8instanceEv>
 80a148a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a148c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1490:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a1492:	9301      	str	r3, [sp, #4]
 80a1494:	f7ff f8be 	bl	80a0614 <os_mutex_recursive_lock>
 80a1498:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a149c:	2446      	movs	r4, #70	; 0x46
 80a149e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a14a2:	45b0      	cmp	r8, r6
 80a14a4:	d109      	bne.n	80a14ba <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a14a6:	a801      	add	r0, sp, #4
 80a14a8:	f7ff ff61 	bl	80a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a14ac:	42a5      	cmp	r5, r4
 80a14ae:	bfb4      	ite	lt
 80a14b0:	2000      	movlt	r0, #0
 80a14b2:	2001      	movge	r0, #1
}
 80a14b4:	b002      	add	sp, #8
 80a14b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a14ba:	f856 0b04 	ldr.w	r0, [r6], #4
 80a14be:	4639      	mov	r1, r7
 80a14c0:	3004      	adds	r0, #4
 80a14c2:	f7ff fd75 	bl	80a0fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a14c6:	4284      	cmp	r4, r0
 80a14c8:	bfa8      	it	ge
 80a14ca:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a14cc:	e7e9      	b.n	80a14a2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a14ce:	2000      	movs	r0, #0
 80a14d0:	e7f0      	b.n	80a14b4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a14d2:	bf00      	nop
 80a14d4:	e000ed00 	.word	0xe000ed00

080a14d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a14d8:	460b      	mov	r3, r1
 80a14da:	b570      	push	{r4, r5, r6, lr}
 80a14dc:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a14de:	c805      	ldmia	r0, {r0, r2}
 80a14e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a14e4:	4282      	cmp	r2, r0
 80a14e6:	d007      	beq.n	80a14f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a14e8:	4601      	mov	r1, r0
            if (*p == value) {
 80a14ea:	681d      	ldr	r5, [r3, #0]
 80a14ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80a14f0:	42ae      	cmp	r6, r5
 80a14f2:	d003      	beq.n	80a14fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a14f4:	4608      	mov	r0, r1
 80a14f6:	e7f5      	b.n	80a14e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a14f8:	2000      	movs	r0, #0
}
 80a14fa:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a14fc:	1a52      	subs	r2, r2, r1
 80a14fe:	f001 fdbb 	bl	80a3078 <memmove>
    --size_;
 80a1502:	6863      	ldr	r3, [r4, #4]
    return true;
 80a1504:	2001      	movs	r0, #1
    --size_;
 80a1506:	3b01      	subs	r3, #1
 80a1508:	6063      	str	r3, [r4, #4]
    return true;
 80a150a:	e7f6      	b.n	80a14fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a150c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a150c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a150e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a1510:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1514:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a1516:	9101      	str	r1, [sp, #4]
 80a1518:	9303      	str	r3, [sp, #12]
 80a151a:	f7ff f87b 	bl	80a0614 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a151e:	4620      	mov	r0, r4
 80a1520:	a901      	add	r1, sp, #4
 80a1522:	f7ff ffd9 	bl	80a14d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a1526:	b118      	cbz	r0, 80a1530 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a1528:	6863      	ldr	r3, [r4, #4]
 80a152a:	b90b      	cbnz	r3, 80a1530 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a152c:	f7ff fde8 	bl	80a1100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1530:	a803      	add	r0, sp, #12
 80a1532:	f7ff ff1c 	bl	80a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a1536:	b004      	add	sp, #16
 80a1538:	bd10      	pop	{r4, pc}

080a153a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a153a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a153c:	b570      	push	{r4, r5, r6, lr}
 80a153e:	4604      	mov	r4, r0
 80a1540:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a1544:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a1548:	42ae      	cmp	r6, r5
 80a154a:	d015      	beq.n	80a1578 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a154c:	4620      	mov	r0, r4
 80a154e:	f105 0110 	add.w	r1, r5, #16
 80a1552:	f7ff ffc1 	bl	80a14d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a1556:	6863      	ldr	r3, [r4, #4]
 80a1558:	b90b      	cbnz	r3, 80a155e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a155a:	f7ff fdd1 	bl	80a1100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a155e:	69e0      	ldr	r0, [r4, #28]
 80a1560:	6929      	ldr	r1, [r5, #16]
 80a1562:	6803      	ldr	r3, [r0, #0]
 80a1564:	68db      	ldr	r3, [r3, #12]
 80a1566:	4798      	blx	r3
        if (h.stream) {
 80a1568:	6969      	ldr	r1, [r5, #20]
 80a156a:	b119      	cbz	r1, 80a1574 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a156c:	6a20      	ldr	r0, [r4, #32]
 80a156e:	6803      	ldr	r3, [r0, #0]
 80a1570:	68db      	ldr	r3, [r3, #12]
 80a1572:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a1574:	3518      	adds	r5, #24
 80a1576:	e7e7      	b.n	80a1548 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a1578:	2618      	movs	r6, #24
 80a157a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a157e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1582:	42ae      	cmp	r6, r5
 80a1584:	d004      	beq.n	80a1590 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a1586:	4628      	mov	r0, r5
 80a1588:	f7ff fb28 	bl	80a0bdc <_ZN6StringD1Ev>
 80a158c:	3518      	adds	r5, #24
 80a158e:	e7f8      	b.n	80a1582 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a1590:	2300      	movs	r3, #0
 80a1592:	6163      	str	r3, [r4, #20]
}
 80a1594:	bd70      	pop	{r4, r5, r6, pc}

080a1596 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a1596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1598:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a159a:	f7ff fdb1 	bl	80a1100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a159e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a15a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	f7ff f835 	bl	80a0614 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a15aa:	4620      	mov	r0, r4
 80a15ac:	f7ff ffc5 	bl	80a153a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a15b0:	a801      	add	r0, sp, #4
 80a15b2:	f7ff fedc 	bl	80a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a15b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a15b8:	b108      	cbz	r0, 80a15be <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a15ba:	f7ff f823 	bl	80a0604 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a15be:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a15c2:	2618      	movs	r6, #24
 80a15c4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a15c8:	42ae      	cmp	r6, r5
 80a15ca:	d004      	beq.n	80a15d6 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a15cc:	4628      	mov	r0, r5
 80a15ce:	f7ff fb05 	bl	80a0bdc <_ZN6StringD1Ev>
 80a15d2:	3518      	adds	r5, #24
 80a15d4:	e7f8      	b.n	80a15c8 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a15d6:	6920      	ldr	r0, [r4, #16]
 80a15d8:	f7ff f9fc 	bl	80a09d4 <free>
 80a15dc:	6820      	ldr	r0, [r4, #0]
 80a15de:	f7ff f9f9 	bl	80a09d4 <free>
}
 80a15e2:	4620      	mov	r0, r4
 80a15e4:	b002      	add	sp, #8
 80a15e6:	bd70      	pop	{r4, r5, r6, pc}

080a15e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a15e8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a15ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15ec:	4606      	mov	r6, r0
 80a15ee:	460c      	mov	r4, r1
 80a15f0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a15f2:	d927      	bls.n	80a1644 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a15f4:	4290      	cmp	r0, r2
 80a15f6:	d226      	bcs.n	80a1646 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a15f8:	2600      	movs	r6, #0
            --end;
 80a15fa:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a15fe:	1a6c      	subs	r4, r5, r1
 80a1600:	f1a1 0714 	sub.w	r7, r1, #20
 80a1604:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a1606:	42af      	cmp	r7, r5
 80a1608:	d03d      	beq.n	80a1686 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a160a:	b1a4      	cbz	r4, 80a1636 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a160c:	682b      	ldr	r3, [r5, #0]
 80a160e:	6023      	str	r3, [r4, #0]
 80a1610:	88ab      	ldrh	r3, [r5, #4]
 80a1612:	80a3      	strh	r3, [r4, #4]
 80a1614:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a1618:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a161c:	6126      	str	r6, [r4, #16]
 80a161e:	80e3      	strh	r3, [r4, #6]
 80a1620:	68ab      	ldr	r3, [r5, #8]
 80a1622:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1624:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1626:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1628:	68ea      	ldr	r2, [r5, #12]
 80a162a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a162c:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a162e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1630:	692a      	ldr	r2, [r5, #16]
 80a1632:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1634:	612b      	str	r3, [r5, #16]
 80a1636:	f105 0008 	add.w	r0, r5, #8
 80a163a:	f7ff fe2f 	bl	80a129c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a163e:	3d14      	subs	r5, #20
 80a1640:	3c14      	subs	r4, #20
 80a1642:	e7e0      	b.n	80a1606 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a1644:	d01f      	beq.n	80a1686 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a1646:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a1648:	42ac      	cmp	r4, r5
 80a164a:	d01c      	beq.n	80a1686 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a164c:	b1a6      	cbz	r6, 80a1678 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a164e:	6823      	ldr	r3, [r4, #0]
 80a1650:	6033      	str	r3, [r6, #0]
 80a1652:	88a3      	ldrh	r3, [r4, #4]
 80a1654:	80b3      	strh	r3, [r6, #4]
 80a1656:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a165a:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a165e:	6137      	str	r7, [r6, #16]
 80a1660:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a1662:	68a3      	ldr	r3, [r4, #8]
 80a1664:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1666:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1668:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a166a:	68e2      	ldr	r2, [r4, #12]
 80a166c:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a166e:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1670:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1672:	6922      	ldr	r2, [r4, #16]
 80a1674:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1676:	6123      	str	r3, [r4, #16]
 80a1678:	f104 0008 	add.w	r0, r4, #8
 80a167c:	f7ff fe0e 	bl	80a129c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a1680:	3414      	adds	r4, #20
 80a1682:	3614      	adds	r6, #20
 80a1684:	e7e0      	b.n	80a1648 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a1686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1688 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a1688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a168a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a168e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a1690:	4604      	mov	r4, r0
 80a1692:	460e      	mov	r6, r1
 80a1694:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1696:	db0d      	blt.n	80a16b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a1698:	3501      	adds	r5, #1
        if (n > 0) {
 80a169a:	2d00      	cmp	r5, #0
 80a169c:	6800      	ldr	r0, [r0, #0]
 80a169e:	dd04      	ble.n	80a16aa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a16a0:	00a9      	lsls	r1, r5, #2
 80a16a2:	f7ff f99f 	bl	80a09e4 <realloc>
            if (!d) {
 80a16a6:	b918      	cbnz	r0, 80a16b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a16a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a16aa:	f7ff f993 	bl	80a09d4 <free>
        T* d = nullptr;
 80a16ae:	2000      	movs	r0, #0
        data_ = d;
 80a16b0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a16b2:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a16b4:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a16b6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a16b8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a16bc:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a16be:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a16c2:	1d08      	adds	r0, r1, #4
 80a16c4:	f001 fcd8 	bl	80a3078 <memmove>
    new(p) T(std::move(value));
 80a16c8:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a16cc:	6863      	ldr	r3, [r4, #4]
    return true;
 80a16ce:	2001      	movs	r0, #1
    ++size_;
 80a16d0:	3301      	adds	r3, #1
 80a16d2:	6063      	str	r3, [r4, #4]
    return true;
 80a16d4:	e7e8      	b.n	80a16a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a16d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a16d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a16d8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a16da:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a16de:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a16e0:	460d      	mov	r5, r1
 80a16e2:	9301      	str	r3, [sp, #4]
 80a16e4:	f7fe ff96 	bl	80a0614 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a16e8:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a16ec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a16f0:	4283      	cmp	r3, r0
 80a16f2:	461a      	mov	r2, r3
 80a16f4:	d00a      	beq.n	80a170c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a16f6:	6812      	ldr	r2, [r2, #0]
 80a16f8:	3304      	adds	r3, #4
 80a16fa:	42aa      	cmp	r2, r5
 80a16fc:	d1f8      	bne.n	80a16f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a16fe:	a801      	add	r0, sp, #4
 80a1700:	f7ff fe35 	bl	80a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a1704:	2500      	movs	r5, #0
}
 80a1706:	4628      	mov	r0, r5
 80a1708:	b003      	add	sp, #12
 80a170a:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a170c:	462a      	mov	r2, r5
 80a170e:	4620      	mov	r0, r4
 80a1710:	f7ff ffba 	bl	80a1688 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a1714:	4605      	mov	r5, r0
 80a1716:	2800      	cmp	r0, #0
 80a1718:	d0f1      	beq.n	80a16fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a171a:	6863      	ldr	r3, [r4, #4]
 80a171c:	2b01      	cmp	r3, #1
 80a171e:	d101      	bne.n	80a1724 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a1720:	f7ff fce2 	bl	80a10e8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1724:	a801      	add	r0, sp, #4
 80a1726:	f7ff fe22 	bl	80a136e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a172a:	e7ec      	b.n	80a1706 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a172c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a172c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a172e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1730:	4604      	mov	r4, r0
 80a1732:	460d      	mov	r5, r1
 80a1734:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a1736:	d914      	bls.n	80a1762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a1738:	4290      	cmp	r0, r2
 80a173a:	d213      	bcs.n	80a1764 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a173c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a1740:	1a75      	subs	r5, r6, r1
 80a1742:	f1a1 0710 	sub.w	r7, r1, #16
 80a1746:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a1748:	42b7      	cmp	r7, r6
 80a174a:	d018      	beq.n	80a177e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a174c:	b11c      	cbz	r4, 80a1756 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a174e:	4631      	mov	r1, r6
 80a1750:	4620      	mov	r0, r4
 80a1752:	f7ff faaa 	bl	80a0caa <_ZN6StringC1EOS_>
                end->~T();
 80a1756:	4630      	mov	r0, r6
 80a1758:	f7ff fa40 	bl	80a0bdc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a175c:	3e10      	subs	r6, #16
 80a175e:	3c10      	subs	r4, #16
 80a1760:	e7f2      	b.n	80a1748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a1762:	d00c      	beq.n	80a177e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a1764:	42b5      	cmp	r5, r6
 80a1766:	d00a      	beq.n	80a177e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a1768:	b11c      	cbz	r4, 80a1772 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a176a:	4629      	mov	r1, r5
 80a176c:	4620      	mov	r0, r4
 80a176e:	f7ff fa9c 	bl	80a0caa <_ZN6StringC1EOS_>
                p->~T();
 80a1772:	4628      	mov	r0, r5
 80a1774:	f7ff fa32 	bl	80a0bdc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a1778:	3510      	adds	r5, #16
 80a177a:	3410      	adds	r4, #16
 80a177c:	e7f2      	b.n	80a1764 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a1780:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a1782:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a1784:	4605      	mov	r5, r0
        if (n > 0) {
 80a1786:	dd11      	ble.n	80a17ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a1788:	0130      	lsls	r0, r6, #4
 80a178a:	f7ff f91b 	bl	80a09c4 <malloc>
            if (!d) {
 80a178e:	4604      	mov	r4, r0
 80a1790:	b158      	cbz	r0, 80a17aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a1792:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a1796:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a179a:	f7ff ffc7 	bl	80a172c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a179e:	6828      	ldr	r0, [r5, #0]
 80a17a0:	f7ff f918 	bl	80a09d4 <free>
        return true;
 80a17a4:	2001      	movs	r0, #1
        data_ = d;
 80a17a6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a17a8:	60ae      	str	r6, [r5, #8]
    }
 80a17aa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a17ac:	2400      	movs	r4, #0
 80a17ae:	e7f6      	b.n	80a179e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a17b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a17b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a17b4:	4691      	mov	r9, r2
        capacity_(0) {
 80a17b6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a17b8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a17ba:	b097      	sub	sp, #92	; 0x5c
 80a17bc:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a17be:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a17c2:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a17c4:	4299      	cmp	r1, r3
        capacity_(0) {
 80a17c6:	e9c0 3300 	strd	r3, r3, [r0]
 80a17ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a17ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a17d2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a17d6:	7602      	strb	r2, [r0, #24]
 80a17d8:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a17da:	dc23      	bgt.n	80a1824 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a17dc:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a17e0:	2314      	movs	r3, #20
 80a17e2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a17e6:	42af      	cmp	r7, r5
 80a17e8:	d03b      	beq.n	80a1862 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a17ea:	4629      	mov	r1, r5
 80a17ec:	a80d      	add	r0, sp, #52	; 0x34
 80a17ee:	f7ff fa5c 	bl	80a0caa <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a17f2:	a90d      	add	r1, sp, #52	; 0x34
 80a17f4:	a811      	add	r0, sp, #68	; 0x44
 80a17f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a17f8:	f7ff fa57 	bl	80a0caa <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a17fc:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a1800:	4299      	cmp	r1, r3
 80a1802:	da1b      	bge.n	80a183c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a1804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a1806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a1808:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a180c:	4631      	mov	r1, r6
 80a180e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a1812:	f106 0010 	add.w	r0, r6, #16
 80a1816:	f7ff ff89 	bl	80a172c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a181a:	b9ee      	cbnz	r6, 80a1858 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a181c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a181e:	3301      	adds	r3, #1
 80a1820:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a1822:	e011      	b.n	80a1848 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a1824:	a80a      	add	r0, sp, #40	; 0x28
 80a1826:	f7ff ffab 	bl	80a1780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a182a:	2800      	cmp	r0, #0
 80a182c:	d1d6      	bne.n	80a17dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a182e:	a80a      	add	r0, sp, #40	; 0x28
 80a1830:	f7ff fd48 	bl	80a12c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1834:	4620      	mov	r0, r4
 80a1836:	b017      	add	sp, #92	; 0x5c
 80a1838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a183c:	3101      	adds	r1, #1
 80a183e:	a80a      	add	r0, sp, #40	; 0x28
 80a1840:	f7ff ff9e 	bl	80a1780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1844:	2800      	cmp	r0, #0
 80a1846:	d1dd      	bne.n	80a1804 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a1848:	a811      	add	r0, sp, #68	; 0x44
 80a184a:	f7ff f9c7 	bl	80a0bdc <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a184e:	a80d      	add	r0, sp, #52	; 0x34
 80a1850:	f7ff f9c4 	bl	80a0bdc <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a1854:	3514      	adds	r5, #20
 80a1856:	e7c6      	b.n	80a17e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a1858:	4630      	mov	r0, r6
 80a185a:	a911      	add	r1, sp, #68	; 0x44
 80a185c:	f7ff fa25 	bl	80a0caa <_ZN6StringC1EOS_>
 80a1860:	e7dc      	b.n	80a181c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a1862:	2600      	movs	r6, #0
 80a1864:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a1868:	4637      	mov	r7, r6
 80a186a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a186e:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a1870:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a1874:	429e      	cmp	r6, r3
 80a1876:	f280 8097 	bge.w	80a19a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a187a:	0133      	lsls	r3, r6, #4
 80a187c:	58d3      	ldr	r3, [r2, r3]
 80a187e:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a1880:	b90b      	cbnz	r3, 80a1886 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a1882:	3601      	adds	r6, #1
 80a1884:	e7f4      	b.n	80a1870 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a1886:	fb0a f306 	mul.w	r3, sl, r6
 80a188a:	9709      	str	r7, [sp, #36]	; 0x24
 80a188c:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a188e:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a1890:	a909      	add	r1, sp, #36	; 0x24
 80a1892:	a808      	add	r0, sp, #32
 80a1894:	f7ff fac5 	bl	80a0e22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1898:	4683      	mov	fp, r0
 80a189a:	2800      	cmp	r0, #0
 80a189c:	d0f1      	beq.n	80a1882 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a189e:	4601      	mov	r1, r0
 80a18a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a18a2:	4628      	mov	r0, r5
 80a18a4:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a18a8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a18ac:	f7ff fb42 	bl	80a0f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a18b0:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a18b4:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a18b6:	f1b8 0f00 	cmp.w	r8, #0
 80a18ba:	d166      	bne.n	80a198a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a18bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a18c0:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a18c4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a18c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a18cc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a18d0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a18d4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a18d8:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a18dc:	4293      	cmp	r3, r2
 80a18de:	db1a      	blt.n	80a1916 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a18e0:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a18e4:	f1bb 0f00 	cmp.w	fp, #0
 80a18e8:	dd4a      	ble.n	80a1980 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a18ea:	fb0a f00b 	mul.w	r0, sl, fp
 80a18ee:	f7ff f869 	bl	80a09c4 <malloc>
            if (!d) {
 80a18f2:	9004      	str	r0, [sp, #16]
 80a18f4:	2800      	cmp	r0, #0
 80a18f6:	d045      	beq.n	80a1984 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a18f8:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a18fc:	fb0a 1202 	mla	r2, sl, r2, r1
 80a1900:	f7ff fe72 	bl	80a15e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a1904:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a1906:	6828      	ldr	r0, [r5, #0]
 80a1908:	9304      	str	r3, [sp, #16]
 80a190a:	f7ff f863 	bl	80a09d4 <free>
        data_ = d;
 80a190e:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a1910:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a1914:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a1916:	9b01      	ldr	r3, [sp, #4]
 80a1918:	f8d5 b000 	ldr.w	fp, [r5]
 80a191c:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a1920:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a1922:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a1926:	f101 0014 	add.w	r0, r1, #20
 80a192a:	fb0a b202 	mla	r2, sl, r2, fp
 80a192e:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a1930:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a1932:	f7ff fe59 	bl	80a15e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a1936:	9904      	ldr	r1, [sp, #16]
 80a1938:	b1a9      	cbz	r1, 80a1966 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a193a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a193c:	9b05      	ldr	r3, [sp, #20]
 80a193e:	f84b 2003 	str.w	r2, [fp, r3]
 80a1942:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a1946:	808b      	strh	r3, [r1, #4]
 80a1948:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a194c:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a1950:	610f      	str	r7, [r1, #16]
 80a1952:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a1954:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a1956:	608b      	str	r3, [r1, #8]
 80a1958:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a195a:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a195c:	60cb      	str	r3, [r1, #12]
 80a195e:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a1960:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a1962:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1964:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a1966:	686b      	ldr	r3, [r5, #4]
 80a1968:	3301      	adds	r3, #1
 80a196a:	606b      	str	r3, [r5, #4]
 80a196c:	a813      	add	r0, sp, #76	; 0x4c
 80a196e:	f7ff fc95 	bl	80a129c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1972:	f1b8 0f00 	cmp.w	r8, #0
 80a1976:	d008      	beq.n	80a198a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a1978:	a80d      	add	r0, sp, #52	; 0x34
 80a197a:	f7ff fc8f 	bl	80a129c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a197e:	e756      	b.n	80a182e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a1980:	4643      	mov	r3, r8
 80a1982:	e7c0      	b.n	80a1906 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1984:	f04f 0801 	mov.w	r8, #1
 80a1988:	e7f0      	b.n	80a196c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a198a:	9b01      	ldr	r3, [sp, #4]
 80a198c:	682d      	ldr	r5, [r5, #0]
 80a198e:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a1992:	9b08      	ldr	r3, [sp, #32]
 80a1994:	781b      	ldrb	r3, [r3, #0]
 80a1996:	b92b      	cbnz	r3, 80a19a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a1998:	f8d9 3000 	ldr.w	r3, [r9]
 80a199c:	9a02      	ldr	r2, [sp, #8]
 80a199e:	4413      	add	r3, r2
 80a19a0:	7c1b      	ldrb	r3, [r3, #16]
 80a19a2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a19a4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a19a6:	e773      	b.n	80a1890 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19a8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a19aa:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19ac:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a19ae:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19b0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19b2:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a19b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a19b6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19b8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a19ba:	60a2      	str	r2, [r4, #8]
 80a19bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a19be:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19c0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a19c2:	60e2      	str	r2, [r4, #12]
 80a19c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a19c6:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19c8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a19ca:	6122      	str	r2, [r4, #16]
 80a19cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a19ce:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a19d0:	9b03      	ldr	r3, [sp, #12]
 80a19d2:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a19d4:	6162      	str	r2, [r4, #20]
 80a19d6:	7623      	strb	r3, [r4, #24]
 80a19d8:	e7ce      	b.n	80a1978 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a19dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a19dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a19de:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a19e0:	460e      	mov	r6, r1
 80a19e2:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a19e4:	4b08      	ldr	r3, [pc, #32]	; (80a1a08 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a19e6:	4611      	mov	r1, r2
 80a19e8:	f845 3b04 	str.w	r3, [r5], #4
 80a19ec:	a801      	add	r0, sp, #4
 80a19ee:	f7fe fd40 	bl	80a0472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a19f2:	4631      	mov	r1, r6
 80a19f4:	aa01      	add	r2, sp, #4
 80a19f6:	4628      	mov	r0, r5
 80a19f8:	f7ff feda 	bl	80a17b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a19fc:	a801      	add	r0, sp, #4
 80a19fe:	f7fe fcf7 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a1a02:	4620      	mov	r0, r4
 80a1a04:	b004      	add	sp, #16
 80a1a06:	bd70      	pop	{r4, r5, r6, pc}
 80a1a08:	080a332c 	.word	0x080a332c

080a1a0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a1a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1a0e:	460f      	mov	r7, r1
 80a1a10:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1a12:	4638      	mov	r0, r7
 80a1a14:	4925      	ldr	r1, [pc, #148]	; (80a1aac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a1a16:	4616      	mov	r6, r2
 80a1a18:	461d      	mov	r5, r3
 80a1a1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1a1c:	f001 fb89 	bl	80a3132 <strcmp>
 80a1a20:	bb00      	cbnz	r0, 80a1a64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a1a22:	b1e4      	cbz	r4, 80a1a5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a1a24:	4629      	mov	r1, r5
 80a1a26:	4668      	mov	r0, sp
 80a1a28:	f7ff fc92 	bl	80a1350 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1a2c:	2024      	movs	r0, #36	; 0x24
 80a1a2e:	4920      	ldr	r1, [pc, #128]	; (80a1ab0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1a30:	f001 faff 	bl	80a3032 <_ZnwjRKSt9nothrow_t>
 80a1a34:	4605      	mov	r5, r0
 80a1a36:	b170      	cbz	r0, 80a1a56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a1a38:	4669      	mov	r1, sp
 80a1a3a:	a803      	add	r0, sp, #12
 80a1a3c:	f7fe fd19 	bl	80a0472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1a40:	4631      	mov	r1, r6
 80a1a42:	aa03      	add	r2, sp, #12
 80a1a44:	4628      	mov	r0, r5
 80a1a46:	f7ff ffc9 	bl	80a19dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1a4a:	a803      	add	r0, sp, #12
 80a1a4c:	f7fe fcd0 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a1a50:	4b18      	ldr	r3, [pc, #96]	; (80a1ab4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a1a52:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a1a54:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1a56:	4668      	mov	r0, sp
 80a1a58:	f7fe fcca 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1a5c:	462c      	mov	r4, r5
}
 80a1a5e:	4620      	mov	r0, r4
 80a1a60:	b007      	add	sp, #28
 80a1a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a1a64:	4638      	mov	r0, r7
 80a1a66:	4914      	ldr	r1, [pc, #80]	; (80a1ab8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a1a68:	f001 fb63 	bl	80a3132 <strcmp>
 80a1a6c:	b9e0      	cbnz	r0, 80a1aa8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a1a6e:	2c00      	cmp	r4, #0
 80a1a70:	d0f5      	beq.n	80a1a5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1a72:	4629      	mov	r1, r5
 80a1a74:	4668      	mov	r0, sp
 80a1a76:	f7ff fc6b 	bl	80a1350 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1a7a:	2024      	movs	r0, #36	; 0x24
 80a1a7c:	490c      	ldr	r1, [pc, #48]	; (80a1ab0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1a7e:	f001 fad8 	bl	80a3032 <_ZnwjRKSt9nothrow_t>
 80a1a82:	4605      	mov	r5, r0
 80a1a84:	2800      	cmp	r0, #0
 80a1a86:	d0e6      	beq.n	80a1a56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a1a88:	4669      	mov	r1, sp
 80a1a8a:	a803      	add	r0, sp, #12
 80a1a8c:	f7fe fcf1 	bl	80a0472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1a90:	4631      	mov	r1, r6
 80a1a92:	aa03      	add	r2, sp, #12
 80a1a94:	4628      	mov	r0, r5
 80a1a96:	f7ff ffa1 	bl	80a19dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1a9a:	a803      	add	r0, sp, #12
 80a1a9c:	f7fe fca8 	bl	80a03f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1aa0:	4b06      	ldr	r3, [pc, #24]	; (80a1abc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a1aa2:	622c      	str	r4, [r5, #32]
 80a1aa4:	602b      	str	r3, [r5, #0]
}
 80a1aa6:	e7d6      	b.n	80a1a56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a1aa8:	2400      	movs	r4, #0
 80a1aaa:	e7d8      	b.n	80a1a5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a1aac:	080a33a4 	.word	0x080a33a4
 80a1ab0:	080a35d5 	.word	0x080a35d5
 80a1ab4:	080a3440 	.word	0x080a3440
 80a1ab8:	080a33a8 	.word	0x080a33a8
 80a1abc:	080a3428 	.word	0x080a3428

080a1ac0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a1ac0:	4b01      	ldr	r3, [pc, #4]	; (80a1ac8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1ac2:	4a02      	ldr	r2, [pc, #8]	; (80a1acc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1ac4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1ac6:	4770      	bx	lr
 80a1ac8:	200000d8 	.word	0x200000d8
 80a1acc:	080a33b9 	.word	0x080a33b9

080a1ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1ad4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a1ad6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1ada:	4604      	mov	r4, r0
 80a1adc:	460e      	mov	r6, r1
 80a1ade:	4617      	mov	r7, r2
 80a1ae0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a1ae2:	f000 fdcf 	bl	80a2684 <_Z16_fetch_usbserialv>
 80a1ae6:	4581      	cmp	r9, r0
 80a1ae8:	d04d      	beq.n	80a1b86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a1aea:	792b      	ldrb	r3, [r5, #4]
 80a1aec:	0719      	lsls	r1, r3, #28
 80a1aee:	d504      	bpl.n	80a1afa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a1af0:	4620      	mov	r0, r4
 80a1af2:	696a      	ldr	r2, [r5, #20]
 80a1af4:	4954      	ldr	r1, [pc, #336]	; (80a1c48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a1af6:	f7ff fa0e 	bl	80a0f16 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a1afa:	f1b8 0f00 	cmp.w	r8, #0
 80a1afe:	d00d      	beq.n	80a1b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a1b00:	215b      	movs	r1, #91	; 0x5b
 80a1b02:	4620      	mov	r0, r4
 80a1b04:	f7ff f9fb 	bl	80a0efe <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a1b08:	4641      	mov	r1, r8
 80a1b0a:	4620      	mov	r0, r4
 80a1b0c:	f7ff f9e9 	bl	80a0ee2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a1b10:	6823      	ldr	r3, [r4, #0]
 80a1b12:	2202      	movs	r2, #2
 80a1b14:	4620      	mov	r0, r4
 80a1b16:	68db      	ldr	r3, [r3, #12]
 80a1b18:	494c      	ldr	r1, [pc, #304]	; (80a1c4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a1b1a:	4798      	blx	r3
    if (attr.has_file) {
 80a1b1c:	792b      	ldrb	r3, [r5, #4]
 80a1b1e:	07da      	lsls	r2, r3, #31
 80a1b20:	d524      	bpl.n	80a1b6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a1b22:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a1b26:	212f      	movs	r1, #47	; 0x2f
 80a1b28:	4640      	mov	r0, r8
 80a1b2a:	f001 fb4a 	bl	80a31c2 <strrchr>
    if (s1) {
 80a1b2e:	b108      	cbz	r0, 80a1b34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a1b30:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a1b34:	4641      	mov	r1, r8
 80a1b36:	4620      	mov	r0, r4
 80a1b38:	f7ff f9d3 	bl	80a0ee2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a1b3c:	792b      	ldrb	r3, [r5, #4]
 80a1b3e:	079b      	lsls	r3, r3, #30
 80a1b40:	d508      	bpl.n	80a1b54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a1b42:	213a      	movs	r1, #58	; 0x3a
 80a1b44:	4620      	mov	r0, r4
 80a1b46:	f7ff f9da 	bl	80a0efe <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a1b4a:	4620      	mov	r0, r4
 80a1b4c:	68ea      	ldr	r2, [r5, #12]
 80a1b4e:	4940      	ldr	r1, [pc, #256]	; (80a1c50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a1b50:	f7ff f9e1 	bl	80a0f16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a1b54:	792a      	ldrb	r2, [r5, #4]
 80a1b56:	6823      	ldr	r3, [r4, #0]
 80a1b58:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a1b5c:	4620      	mov	r0, r4
            write(", ", 2);
 80a1b5e:	f04f 0202 	mov.w	r2, #2
 80a1b62:	68db      	ldr	r3, [r3, #12]
 80a1b64:	bf14      	ite	ne
 80a1b66:	493b      	ldrne	r1, [pc, #236]	; (80a1c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a1b68:	493b      	ldreq	r1, [pc, #236]	; (80a1c58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1b6a:	4798      	blx	r3
    if (attr.has_function) {
 80a1b6c:	792b      	ldrb	r3, [r5, #4]
 80a1b6e:	0758      	lsls	r0, r3, #29
 80a1b70:	d51d      	bpl.n	80a1bae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1b72:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1b74:	460b      	mov	r3, r1
 80a1b76:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a1b78:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1b7c:	b160      	cbz	r0, 80a1b98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a1b7e:	2820      	cmp	r0, #32
 80a1b80:	d108      	bne.n	80a1b94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a1b82:	4619      	mov	r1, r3
 80a1b84:	e7f7      	b.n	80a1b76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a1b86:	4835      	ldr	r0, [pc, #212]	; (80a1c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a1b88:	f000 ff75 	bl	80a2a76 <_ZN5spark12NetworkClass9listeningEv>
 80a1b8c:	2800      	cmp	r0, #0
 80a1b8e:	d0ac      	beq.n	80a1aea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a1b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a1b94:	2828      	cmp	r0, #40	; 0x28
 80a1b96:	d1ee      	bne.n	80a1b76 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a1b98:	6823      	ldr	r3, [r4, #0]
 80a1b9a:	1a52      	subs	r2, r2, r1
 80a1b9c:	4620      	mov	r0, r4
 80a1b9e:	68db      	ldr	r3, [r3, #12]
 80a1ba0:	4798      	blx	r3
        write("(): ", 4);
 80a1ba2:	6823      	ldr	r3, [r4, #0]
 80a1ba4:	2204      	movs	r2, #4
 80a1ba6:	4620      	mov	r0, r4
 80a1ba8:	68db      	ldr	r3, [r3, #12]
 80a1baa:	492d      	ldr	r1, [pc, #180]	; (80a1c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a1bac:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a1bae:	2100      	movs	r1, #0
 80a1bb0:	4638      	mov	r0, r7
 80a1bb2:	f7fe fe39 	bl	80a0828 <log_level_name>
 80a1bb6:	4601      	mov	r1, r0
    write(s);
 80a1bb8:	4620      	mov	r0, r4
 80a1bba:	f7ff f992 	bl	80a0ee2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a1bbe:	6823      	ldr	r3, [r4, #0]
 80a1bc0:	2202      	movs	r2, #2
 80a1bc2:	4620      	mov	r0, r4
 80a1bc4:	68db      	ldr	r3, [r3, #12]
 80a1bc6:	4924      	ldr	r1, [pc, #144]	; (80a1c58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1bc8:	4798      	blx	r3
    if (msg) {
 80a1bca:	b11e      	cbz	r6, 80a1bd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a1bcc:	4631      	mov	r1, r6
 80a1bce:	4620      	mov	r0, r4
 80a1bd0:	f7ff f987 	bl	80a0ee2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a1bd4:	792b      	ldrb	r3, [r5, #4]
 80a1bd6:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a1bda:	d02c      	beq.n	80a1c36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a1bdc:	6823      	ldr	r3, [r4, #0]
 80a1bde:	4921      	ldr	r1, [pc, #132]	; (80a1c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a1be0:	68db      	ldr	r3, [r3, #12]
 80a1be2:	2202      	movs	r2, #2
 80a1be4:	4620      	mov	r0, r4
 80a1be6:	4798      	blx	r3
        if (attr.has_code) {
 80a1be8:	792b      	ldrb	r3, [r5, #4]
 80a1bea:	06d9      	lsls	r1, r3, #27
 80a1bec:	d50a      	bpl.n	80a1c04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a1bee:	6823      	ldr	r3, [r4, #0]
 80a1bf0:	2207      	movs	r2, #7
 80a1bf2:	4620      	mov	r0, r4
 80a1bf4:	491c      	ldr	r1, [pc, #112]	; (80a1c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a1bf6:	68db      	ldr	r3, [r3, #12]
 80a1bf8:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a1bfa:	4620      	mov	r0, r4
 80a1bfc:	69aa      	ldr	r2, [r5, #24]
 80a1bfe:	491b      	ldr	r1, [pc, #108]	; (80a1c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a1c00:	f7ff f989 	bl	80a0f16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a1c04:	792b      	ldrb	r3, [r5, #4]
 80a1c06:	069a      	lsls	r2, r3, #26
 80a1c08:	d511      	bpl.n	80a1c2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a1c0a:	06db      	lsls	r3, r3, #27
 80a1c0c:	d505      	bpl.n	80a1c1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a1c0e:	6823      	ldr	r3, [r4, #0]
 80a1c10:	2202      	movs	r2, #2
 80a1c12:	4620      	mov	r0, r4
 80a1c14:	68db      	ldr	r3, [r3, #12]
 80a1c16:	490f      	ldr	r1, [pc, #60]	; (80a1c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a1c18:	4798      	blx	r3
            write("details = ", 10);
 80a1c1a:	6823      	ldr	r3, [r4, #0]
 80a1c1c:	4620      	mov	r0, r4
 80a1c1e:	4914      	ldr	r1, [pc, #80]	; (80a1c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a1c20:	220a      	movs	r2, #10
 80a1c22:	68db      	ldr	r3, [r3, #12]
 80a1c24:	4798      	blx	r3
            write(attr.details);
 80a1c26:	4620      	mov	r0, r4
 80a1c28:	69e9      	ldr	r1, [r5, #28]
 80a1c2a:	f7ff f95a 	bl	80a0ee2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a1c2e:	215d      	movs	r1, #93	; 0x5d
 80a1c30:	4620      	mov	r0, r4
 80a1c32:	f7ff f964 	bl	80a0efe <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a1c36:	6823      	ldr	r3, [r4, #0]
 80a1c38:	4620      	mov	r0, r4
}
 80a1c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a1c3e:	2202      	movs	r2, #2
 80a1c40:	68db      	ldr	r3, [r3, #12]
 80a1c42:	490c      	ldr	r1, [pc, #48]	; (80a1c74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a1c44:	4718      	bx	r3
 80a1c46:	bf00      	nop
 80a1c48:	080a33bd 	.word	0x080a33bd
 80a1c4c:	080a33c4 	.word	0x080a33c4
 80a1c50:	080a33c7 	.word	0x080a33c7
 80a1c54:	080a33ca 	.word	0x080a33ca
 80a1c58:	080a33cf 	.word	0x080a33cf
 80a1c5c:	2000057c 	.word	0x2000057c
 80a1c60:	080a33cd 	.word	0x080a33cd
 80a1c64:	080a33d2 	.word	0x080a33d2
 80a1c68:	080a33d5 	.word	0x080a33d5
 80a1c6c:	080a33dd 	.word	0x080a33dd
 80a1c70:	080a33e0 	.word	0x080a33e0
 80a1c74:	080a33eb 	.word	0x080a33eb

080a1c78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1c7c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a1c7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1c82:	4605      	mov	r5, r0
 80a1c84:	460f      	mov	r7, r1
 80a1c86:	4690      	mov	r8, r2
 80a1c88:	461e      	mov	r6, r3
 80a1c8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a1c8c:	f000 fcfa 	bl	80a2684 <_Z16_fetch_usbserialv>
 80a1c90:	4581      	cmp	r9, r0
 80a1c92:	d105      	bne.n	80a1ca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a1c94:	4849      	ldr	r0, [pc, #292]	; (80a1dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a1c96:	f000 feee 	bl	80a2a76 <_ZN5spark12NetworkClass9listeningEv>
 80a1c9a:	2800      	cmp	r0, #0
 80a1c9c:	f040 808a 	bne.w	80a1db4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a1ca0:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a1ca4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a1ca6:	4a46      	ldr	r2, [pc, #280]	; (80a1dc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a1ca8:	a801      	add	r0, sp, #4
 80a1caa:	9201      	str	r2, [sp, #4]
 80a1cac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a1cae:	f88d 9008 	strb.w	r9, [sp, #8]
 80a1cb2:	f001 f858 	bl	80a2d66 <_ZN5spark10JSONWriter11beginObjectEv>
 80a1cb6:	4649      	mov	r1, r9
 80a1cb8:	4640      	mov	r0, r8
 80a1cba:	f7fe fdb5 	bl	80a0828 <log_level_name>
 80a1cbe:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a1cc0:	4940      	ldr	r1, [pc, #256]	; (80a1dc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a1cc2:	2201      	movs	r2, #1
 80a1cc4:	a801      	add	r0, sp, #4
 80a1cc6:	f001 f8d7 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1cca:	4641      	mov	r1, r8
 80a1ccc:	f7ff f8fc 	bl	80a0ec8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a1cd0:	b13f      	cbz	r7, 80a1ce2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a1cd2:	493d      	ldr	r1, [pc, #244]	; (80a1dc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a1cd4:	2201      	movs	r2, #1
 80a1cd6:	a801      	add	r0, sp, #4
 80a1cd8:	f001 f8ce 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1cdc:	4639      	mov	r1, r7
 80a1cde:	f7ff f8f3 	bl	80a0ec8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a1ce2:	b13e      	cbz	r6, 80a1cf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a1ce4:	4939      	ldr	r1, [pc, #228]	; (80a1dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a1ce6:	2201      	movs	r2, #1
 80a1ce8:	a801      	add	r0, sp, #4
 80a1cea:	f001 f8c5 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1cee:	4631      	mov	r1, r6
 80a1cf0:	f7ff f8ea 	bl	80a0ec8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a1cf4:	7923      	ldrb	r3, [r4, #4]
 80a1cf6:	07df      	lsls	r7, r3, #31
 80a1cf8:	d50e      	bpl.n	80a1d18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a1cfa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a1cfc:	212f      	movs	r1, #47	; 0x2f
 80a1cfe:	4630      	mov	r0, r6
 80a1d00:	f001 fa5f 	bl	80a31c2 <strrchr>
    if (s1) {
 80a1d04:	b100      	cbz	r0, 80a1d08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a1d06:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a1d08:	4931      	ldr	r1, [pc, #196]	; (80a1dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a1d0a:	2201      	movs	r2, #1
 80a1d0c:	a801      	add	r0, sp, #4
 80a1d0e:	f001 f8b3 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1d12:	4631      	mov	r1, r6
 80a1d14:	f7ff f8d8 	bl	80a0ec8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a1d18:	7923      	ldrb	r3, [r4, #4]
 80a1d1a:	079e      	lsls	r6, r3, #30
 80a1d1c:	d507      	bpl.n	80a1d2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a1d1e:	492d      	ldr	r1, [pc, #180]	; (80a1dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a1d20:	2202      	movs	r2, #2
 80a1d22:	a801      	add	r0, sp, #4
 80a1d24:	f001 f8a8 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1d28:	68e1      	ldr	r1, [r4, #12]
 80a1d2a:	f001 f829 	bl	80a2d80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a1d2e:	7923      	ldrb	r3, [r4, #4]
 80a1d30:	0758      	lsls	r0, r3, #29
 80a1d32:	d514      	bpl.n	80a1d5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1d34:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1d36:	4633      	mov	r3, r6
 80a1d38:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a1d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1d3e:	b12a      	cbz	r2, 80a1d4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a1d40:	2a20      	cmp	r2, #32
 80a1d42:	d101      	bne.n	80a1d48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a1d44:	461e      	mov	r6, r3
 80a1d46:	e7f7      	b.n	80a1d38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a1d48:	2a28      	cmp	r2, #40	; 0x28
 80a1d4a:	d1f5      	bne.n	80a1d38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a1d4c:	2202      	movs	r2, #2
 80a1d4e:	4922      	ldr	r1, [pc, #136]	; (80a1dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a1d50:	a801      	add	r0, sp, #4
 80a1d52:	f001 f891 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1d56:	4631      	mov	r1, r6
 80a1d58:	1bba      	subs	r2, r7, r6
 80a1d5a:	f001 f89c 	bl	80a2e96 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a1d5e:	7923      	ldrb	r3, [r4, #4]
 80a1d60:	0719      	lsls	r1, r3, #28
 80a1d62:	d507      	bpl.n	80a1d74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a1d64:	491d      	ldr	r1, [pc, #116]	; (80a1ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a1d66:	2201      	movs	r2, #1
 80a1d68:	a801      	add	r0, sp, #4
 80a1d6a:	f001 f885 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1d6e:	6961      	ldr	r1, [r4, #20]
 80a1d70:	f001 f818 	bl	80a2da4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a1d74:	7923      	ldrb	r3, [r4, #4]
 80a1d76:	06da      	lsls	r2, r3, #27
 80a1d78:	d508      	bpl.n	80a1d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a1d7a:	2204      	movs	r2, #4
 80a1d7c:	4918      	ldr	r1, [pc, #96]	; (80a1de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a1d7e:	eb0d 0002 	add.w	r0, sp, r2
 80a1d82:	f001 f879 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1d86:	69a1      	ldr	r1, [r4, #24]
 80a1d88:	f000 fffa 	bl	80a2d80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a1d8c:	7923      	ldrb	r3, [r4, #4]
 80a1d8e:	069b      	lsls	r3, r3, #26
 80a1d90:	d507      	bpl.n	80a1da2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a1d92:	4914      	ldr	r1, [pc, #80]	; (80a1de4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a1d94:	2206      	movs	r2, #6
 80a1d96:	a801      	add	r0, sp, #4
 80a1d98:	f001 f86e 	bl	80a2e78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1d9c:	69e1      	ldr	r1, [r4, #28]
 80a1d9e:	f7ff f893 	bl	80a0ec8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a1da2:	a801      	add	r0, sp, #4
 80a1da4:	f000 ffc9 	bl	80a2d3a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a1da8:	6a28      	ldr	r0, [r5, #32]
 80a1daa:	2202      	movs	r2, #2
 80a1dac:	6803      	ldr	r3, [r0, #0]
 80a1dae:	490e      	ldr	r1, [pc, #56]	; (80a1de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a1db0:	68db      	ldr	r3, [r3, #12]
 80a1db2:	4798      	blx	r3
}
 80a1db4:	b005      	add	sp, #20
 80a1db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1dba:	bf00      	nop
 80a1dbc:	2000057c 	.word	0x2000057c
 80a1dc0:	080a3410 	.word	0x080a3410
 80a1dc4:	080a3397 	.word	0x080a3397
 80a1dc8:	080a33ee 	.word	0x080a33ee
 80a1dcc:	080a33f0 	.word	0x080a33f0
 80a1dd0:	080a33f2 	.word	0x080a33f2
 80a1dd4:	080a33f4 	.word	0x080a33f4
 80a1dd8:	080a33f7 	.word	0x080a33f7
 80a1ddc:	080a33fa 	.word	0x080a33fa
 80a1de0:	080a33fc 	.word	0x080a33fc
 80a1de4:	080a3401 	.word	0x080a3401
 80a1de8:	080a33eb 	.word	0x080a33eb

080a1dec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1dec:	4b02      	ldr	r3, [pc, #8]	; (80a1df8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1dee:	681a      	ldr	r2, [r3, #0]
 80a1df0:	4b02      	ldr	r3, [pc, #8]	; (80a1dfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1df2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1df4:	4770      	bx	lr
 80a1df6:	bf00      	nop
 80a1df8:	20000018 	.word	0x20000018
 80a1dfc:	20000104 	.word	0x20000104

080a1e00 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1e00:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1e02:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1e04:	4604      	mov	r4, r0
      if (_M_manager)
 80a1e06:	b113      	cbz	r3, 80a1e0e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1e08:	2203      	movs	r2, #3
 80a1e0a:	4601      	mov	r1, r0
 80a1e0c:	4798      	blx	r3
    }
 80a1e0e:	4620      	mov	r0, r4
 80a1e10:	bd10      	pop	{r4, pc}

080a1e12 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1e12:	b510      	push	{r4, lr}
 80a1e14:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e16:	f7ff fff3 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
 80a1e1a:	4620      	mov	r0, r4
 80a1e1c:	bd10      	pop	{r4, pc}

080a1e1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a1e1e:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e20:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1e22:	460b      	mov	r3, r1
 80a1e24:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e26:	c803      	ldmia	r0, {r0, r1}
 80a1e28:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1e2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1e30:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1e38:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1e3c:	b002      	add	sp, #8
 80a1e3e:	bd10      	pop	{r4, pc}

080a1e40 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1e40:	2300      	movs	r3, #0
 80a1e42:	4803      	ldr	r0, [pc, #12]	; (80a1e50 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1e44:	4a03      	ldr	r2, [pc, #12]	; (80a1e54 <_GLOBAL__sub_I_RGB+0x14>)
 80a1e46:	4904      	ldr	r1, [pc, #16]	; (80a1e58 <_GLOBAL__sub_I_RGB+0x18>)
 80a1e48:	6083      	str	r3, [r0, #8]
 80a1e4a:	f001 b8eb 	b.w	80a3024 <__aeabi_atexit>
 80a1e4e:	bf00      	nop
 80a1e50:	20000108 	.word	0x20000108
 80a1e54:	20000080 	.word	0x20000080
 80a1e58:	080a1e13 	.word	0x080a1e13

080a1e5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1e5c:	4b01      	ldr	r3, [pc, #4]	; (80a1e64 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1e5e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1e60:	4770      	bx	lr
 80a1e62:	bf00      	nop
 80a1e64:	2000001c 	.word	0x2000001c

080a1e68 <serialEventRun>:
{
 80a1e68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1e6a:	4b13      	ldr	r3, [pc, #76]	; (80a1eb8 <serialEventRun+0x50>)
 80a1e6c:	b143      	cbz	r3, 80a1e80 <serialEventRun+0x18>
 80a1e6e:	f000 fc09 	bl	80a2684 <_Z16_fetch_usbserialv>
 80a1e72:	6803      	ldr	r3, [r0, #0]
 80a1e74:	691b      	ldr	r3, [r3, #16]
 80a1e76:	4798      	blx	r3
 80a1e78:	2800      	cmp	r0, #0
 80a1e7a:	dd01      	ble.n	80a1e80 <serialEventRun+0x18>
        serialEvent();
 80a1e7c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1e80:	4b0e      	ldr	r3, [pc, #56]	; (80a1ebc <serialEventRun+0x54>)
 80a1e82:	b143      	cbz	r3, 80a1e96 <serialEventRun+0x2e>
 80a1e84:	f000 fcec 	bl	80a2860 <_Z22__fetch_global_Serial1v>
 80a1e88:	6803      	ldr	r3, [r0, #0]
 80a1e8a:	691b      	ldr	r3, [r3, #16]
 80a1e8c:	4798      	blx	r3
 80a1e8e:	2800      	cmp	r0, #0
 80a1e90:	dd01      	ble.n	80a1e96 <serialEventRun+0x2e>
        serialEvent1();
 80a1e92:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1e96:	4b0a      	ldr	r3, [pc, #40]	; (80a1ec0 <serialEventRun+0x58>)
 80a1e98:	b10b      	cbz	r3, 80a1e9e <serialEventRun+0x36>
 80a1e9a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1e9e:	4b09      	ldr	r3, [pc, #36]	; (80a1ec4 <serialEventRun+0x5c>)
 80a1ea0:	b143      	cbz	r3, 80a1eb4 <serialEventRun+0x4c>
 80a1ea2:	f000 fc2d 	bl	80a2700 <_Z17_fetch_usbserial1v>
 80a1ea6:	6803      	ldr	r3, [r0, #0]
 80a1ea8:	691b      	ldr	r3, [r3, #16]
 80a1eaa:	4798      	blx	r3
 80a1eac:	2800      	cmp	r0, #0
 80a1eae:	dd01      	ble.n	80a1eb4 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1eb0:	f3af 8000 	nop.w
}
 80a1eb4:	bd08      	pop	{r3, pc}
 80a1eb6:	bf00      	nop
	...

080a1ec8 <_post_loop>:
{
 80a1ec8:	b508      	push	{r3, lr}
	serialEventRun();
 80a1eca:	f7ff ffcd 	bl	80a1e68 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1ece:	f7fe fb89 	bl	80a05e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1ed2:	4b01      	ldr	r3, [pc, #4]	; (80a1ed8 <_post_loop+0x10>)
 80a1ed4:	6018      	str	r0, [r3, #0]
}
 80a1ed6:	bd08      	pop	{r3, pc}
 80a1ed8:	20000594 	.word	0x20000594

080a1edc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1edc:	4802      	ldr	r0, [pc, #8]	; (80a1ee8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1ede:	4a03      	ldr	r2, [pc, #12]	; (80a1eec <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1ee0:	4903      	ldr	r1, [pc, #12]	; (80a1ef0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1ee2:	1a12      	subs	r2, r2, r0
 80a1ee4:	f001 b8ba 	b.w	80a305c <memcpy>
 80a1ee8:	40024000 	.word	0x40024000
 80a1eec:	40024004 	.word	0x40024004
 80a1ef0:	080a3700 	.word	0x080a3700

080a1ef4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ef4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1ef6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ef8:	461a      	mov	r2, r3
 80a1efa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1efe:	9300      	str	r3, [sp, #0]
 80a1f00:	f7fe fccc 	bl	80a089c <system_ctrl_set_result>
}
 80a1f04:	b003      	add	sp, #12
 80a1f06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1f0c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1f0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1f0e:	8843      	ldrh	r3, [r0, #2]
 80a1f10:	2b0a      	cmp	r3, #10
 80a1f12:	d008      	beq.n	80a1f26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1f14:	2b50      	cmp	r3, #80	; 0x50
 80a1f16:	d10b      	bne.n	80a1f30 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1f18:	4b09      	ldr	r3, [pc, #36]	; (80a1f40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1f1a:	681b      	ldr	r3, [r3, #0]
 80a1f1c:	b14b      	cbz	r3, 80a1f32 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1f1e:	b003      	add	sp, #12
 80a1f20:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1f24:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1f26:	f7ff ffe5 	bl	80a1ef4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1f2a:	b003      	add	sp, #12
 80a1f2c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f30:	2300      	movs	r3, #0
 80a1f32:	461a      	mov	r2, r3
 80a1f34:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f38:	9300      	str	r3, [sp, #0]
 80a1f3a:	f7fe fcaf 	bl	80a089c <system_ctrl_set_result>
}
 80a1f3e:	e7f4      	b.n	80a1f2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1f40:	2000011c 	.word	0x2000011c

080a1f44 <module_user_init_hook>:
{
 80a1f44:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1f46:	4c12      	ldr	r4, [pc, #72]	; (80a1f90 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1f48:	2100      	movs	r1, #0
 80a1f4a:	4812      	ldr	r0, [pc, #72]	; (80a1f94 <module_user_init_hook+0x50>)
 80a1f4c:	f7fe fd72 	bl	80a0a34 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1f50:	4d11      	ldr	r5, [pc, #68]	; (80a1f98 <module_user_init_hook+0x54>)
 80a1f52:	6823      	ldr	r3, [r4, #0]
 80a1f54:	42ab      	cmp	r3, r5
 80a1f56:	bf0c      	ite	eq
 80a1f58:	2201      	moveq	r2, #1
 80a1f5a:	2200      	movne	r2, #0
 80a1f5c:	4b0f      	ldr	r3, [pc, #60]	; (80a1f9c <module_user_init_hook+0x58>)
 80a1f5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1f60:	d002      	beq.n	80a1f68 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1f62:	f7ff ffbb 	bl	80a1edc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1f66:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1f68:	f7fe fb2c 	bl	80a05c4 <HAL_RNG_GetRandomNumber>
 80a1f6c:	4604      	mov	r4, r0
    srand(seed);
 80a1f6e:	f001 f8a5 	bl	80a30bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1f72:	4b0b      	ldr	r3, [pc, #44]	; (80a1fa0 <module_user_init_hook+0x5c>)
 80a1f74:	b113      	cbz	r3, 80a1f7c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1f76:	4620      	mov	r0, r4
 80a1f78:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1f7c:	2100      	movs	r1, #0
 80a1f7e:	4808      	ldr	r0, [pc, #32]	; (80a1fa0 <module_user_init_hook+0x5c>)
 80a1f80:	f7fe fd18 	bl	80a09b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1f88:	2100      	movs	r1, #0
 80a1f8a:	4806      	ldr	r0, [pc, #24]	; (80a1fa4 <module_user_init_hook+0x60>)
 80a1f8c:	f7fe bc7c 	b.w	80a0888 <system_ctrl_set_app_request_handler>
 80a1f90:	40024000 	.word	0x40024000
 80a1f94:	080a1e5d 	.word	0x080a1e5d
 80a1f98:	9a271c1e 	.word	0x9a271c1e
 80a1f9c:	20000118 	.word	0x20000118
 80a1fa0:	00000000 	.word	0x00000000
 80a1fa4:	080a1f0d 	.word	0x080a1f0d

080a1fa8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1fa8:	4770      	bx	lr

080a1faa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a1faa:	2000      	movs	r0, #0
 80a1fac:	4770      	bx	lr

080a1fae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1fae:	b510      	push	{r4, lr}
 80a1fb0:	4604      	mov	r4, r0
 80a1fb2:	2110      	movs	r1, #16
 80a1fb4:	f001 f83b 	bl	80a302e <_ZdlPvj>
 80a1fb8:	4620      	mov	r0, r4
 80a1fba:	bd10      	pop	{r4, pc}

080a1fbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a1fbc:	b508      	push	{r3, lr}
      { delete this; }
 80a1fbe:	f7ff fff6 	bl	80a1fae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1fc2:	bd08      	pop	{r3, pc}

080a1fc4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1fc4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1fc6:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1fc8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1fcc:	6002      	str	r2, [r0, #0]
 80a1fce:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1fd0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fd2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1fd4:	680c      	ldr	r4, [r1, #0]
 80a1fd6:	8085      	strh	r5, [r0, #4]
 80a1fd8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fda:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1fdc:	bd30      	pop	{r4, r5, pc}

080a1fde <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1fde:	b510      	push	{r4, lr}
 80a1fe0:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1fe2:	6800      	ldr	r0, [r0, #0]
 80a1fe4:	f7fe fcf6 	bl	80a09d4 <free>
}
 80a1fe8:	4620      	mov	r0, r4
 80a1fea:	bd10      	pop	{r4, pc}

080a1fec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1fec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1fee:	68c4      	ldr	r4, [r0, #12]
 80a1ff0:	b1f4      	cbz	r4, 80a2030 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1ff2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1ff4:	2b02      	cmp	r3, #2
 80a1ff6:	d103      	bne.n	80a2000 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1ff8:	f104 000c 	add.w	r0, r4, #12
 80a1ffc:	f7ff ffef 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a2000:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2002:	b135      	cbz	r5, 80a2012 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a2004:	4628      	mov	r0, r5
 80a2006:	f7ff fefb 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
 80a200a:	2110      	movs	r1, #16
 80a200c:	4628      	mov	r0, r5
 80a200e:	f001 f80e 	bl	80a302e <_ZdlPvj>
 80a2012:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2014:	b135      	cbz	r5, 80a2024 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2016:	4628      	mov	r0, r5
 80a2018:	f7ff fef2 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
 80a201c:	2110      	movs	r1, #16
 80a201e:	4628      	mov	r0, r5
 80a2020:	f001 f805 	bl	80a302e <_ZdlPvj>
 80a2024:	4620      	mov	r0, r4
 80a2026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a202a:	2114      	movs	r1, #20
 80a202c:	f000 bfff 	b.w	80a302e <_ZdlPvj>
 80a2030:	bd38      	pop	{r3, r4, r5, pc}

080a2032 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2032:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2034:	460e      	mov	r6, r1
 80a2036:	4604      	mov	r4, r0
 80a2038:	f856 3b04 	ldr.w	r3, [r6], #4
 80a203c:	460d      	mov	r5, r1
 80a203e:	a801      	add	r0, sp, #4
 80a2040:	4631      	mov	r1, r6
 80a2042:	9300      	str	r3, [sp, #0]
 80a2044:	f7ff f878 	bl	80a1138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2048:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a204a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a204c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a204e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2050:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a2052:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a2054:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2056:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a2058:	f7ff f858 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a205c:	4630      	mov	r0, r6
 80a205e:	f7ff f855 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a2062:	4628      	mov	r0, r5
 80a2064:	2108      	movs	r1, #8
 80a2066:	f000 ffe2 	bl	80a302e <_ZdlPvj>
        return p;
    }
 80a206a:	4620      	mov	r0, r4
 80a206c:	b002      	add	sp, #8
 80a206e:	bd70      	pop	{r4, r5, r6, pc}

080a2070 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2070:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a2072:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2074:	b90a      	cbnz	r2, 80a207a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2076:	f000 ffe0 	bl	80a303a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a207a:	68c3      	ldr	r3, [r0, #12]
    }
 80a207c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2080:	4718      	bx	r3

080a2082 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2082:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2084:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a2086:	f100 0110 	add.w	r1, r0, #16
 80a208a:	f7ff fff1 	bl	80a2070 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a208e:	bd08      	pop	{r3, pc}

080a2090 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a2090:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a2092:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2094:	b90a      	cbnz	r2, 80a209a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2096:	f000 ffd0 	bl	80a303a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a209a:	68c3      	ldr	r3, [r0, #12]
    }
 80a209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a20a0:	4718      	bx	r3

080a20a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a20a2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a20a4:	6800      	ldr	r0, [r0, #0]
 80a20a6:	f100 0110 	add.w	r1, r0, #16
 80a20aa:	f7ff fff1 	bl	80a2090 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a20ae:	bd08      	pop	{r3, pc}

080a20b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a20b0:	b538      	push	{r3, r4, r5, lr}
 80a20b2:	2300      	movs	r3, #0
 80a20b4:	4604      	mov	r4, r0
 80a20b6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a20b8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a20ba:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a20bc:	f7fd ffeb 	bl	80a0096 <_Znwj>
 80a20c0:	b128      	cbz	r0, 80a20ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a20c2:	2301      	movs	r3, #1
 80a20c4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a20c8:	4b02      	ldr	r3, [pc, #8]	; (80a20d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a20ca:	60c5      	str	r5, [r0, #12]
 80a20cc:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a20ce:	6020      	str	r0, [r4, #0]
	}
 80a20d0:	4620      	mov	r0, r4
 80a20d2:	bd38      	pop	{r3, r4, r5, pc}
 80a20d4:	080a34a4 	.word	0x080a34a4

080a20d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a20d8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a20da:	2300      	movs	r3, #0
 80a20dc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a20de:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a20e0:	4604      	mov	r4, r0
 80a20e2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a20e4:	b12b      	cbz	r3, 80a20f2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a20e6:	2202      	movs	r2, #2
 80a20e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a20ea:	68eb      	ldr	r3, [r5, #12]
 80a20ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a20ee:	68ab      	ldr	r3, [r5, #8]
 80a20f0:	60a3      	str	r3, [r4, #8]
    }
 80a20f2:	4620      	mov	r0, r4
 80a20f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a20f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20fa:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a20fc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a20fe:	4668      	mov	r0, sp
 80a2100:	f7ff ff60 	bl	80a1fc4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2104:	f04f 0302 	mov.w	r3, #2
 80a2108:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a210c:	2a00      	cmp	r2, #0
 80a210e:	d103      	bne.n	80a2118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a2110:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a2114:	2900      	cmp	r1, #0
 80a2116:	d1f7      	bne.n	80a2108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a2118:	d125      	bne.n	80a2166 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a211a:	f104 050c 	add.w	r5, r4, #12
 80a211e:	4669      	mov	r1, sp
 80a2120:	4628      	mov	r0, r5
 80a2122:	f7ff ff4f 	bl	80a1fc4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2126:	2301      	movs	r3, #1
 80a2128:	f3bf 8f5b 	dmb	ish
 80a212c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a212e:	2000      	movs	r0, #0
 80a2130:	f3bf 8f5b 	dmb	ish
 80a2134:	f104 0308 	add.w	r3, r4, #8
 80a2138:	e853 6f00 	ldrex	r6, [r3]
 80a213c:	e843 0200 	strex	r2, r0, [r3]
 80a2140:	2a00      	cmp	r2, #0
 80a2142:	d1f9      	bne.n	80a2138 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a2144:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2148:	b16e      	cbz	r6, 80a2166 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a214a:	f7fe fb8d 	bl	80a0868 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a214e:	b178      	cbz	r0, 80a2170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2150:	4629      	mov	r1, r5
 80a2152:	4630      	mov	r0, r6
 80a2154:	f7ff ff8c 	bl	80a2070 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a2158:	4630      	mov	r0, r6
 80a215a:	f7ff fe51 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a215e:	2110      	movs	r1, #16
 80a2160:	4630      	mov	r0, r6
 80a2162:	f000 ff64 	bl	80a302e <_ZdlPvj>
        p_->setError(std::move(error));
 80a2166:	4668      	mov	r0, sp
 80a2168:	f7ff ff39 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
    }
 80a216c:	b009      	add	sp, #36	; 0x24
 80a216e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2170:	4631      	mov	r1, r6
 80a2172:	a802      	add	r0, sp, #8
 80a2174:	f7ff ffb0 	bl	80a20d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2178:	68e0      	ldr	r0, [r4, #12]
 80a217a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a217e:	b108      	cbz	r0, 80a2184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a2180:	f000 ffea 	bl	80a3158 <strdup>
        type_(type) {
 80a2184:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2186:	2010      	movs	r0, #16
 80a2188:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a218c:	f7fd ff83 	bl	80a0096 <_Znwj>
 80a2190:	4605      	mov	r5, r0
 80a2192:	b1e8      	cbz	r0, 80a21d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a2194:	2700      	movs	r7, #0
 80a2196:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2198:	2018      	movs	r0, #24
 80a219a:	f7fd ff7c 	bl	80a0096 <_Znwj>
 80a219e:	4604      	mov	r4, r0
 80a21a0:	b188      	cbz	r0, 80a21c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a21a2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a21a4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a21a6:	a802      	add	r0, sp, #8
 80a21a8:	f7ff fe39 	bl	80a1e1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21ac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a21ae:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a21b0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a21b4:	9204      	str	r2, [sp, #16]
 80a21b6:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a21b8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a21ba:	60e3      	str	r3, [r4, #12]
 80a21bc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a21c0:	9205      	str	r2, [sp, #20]
 80a21c2:	f7ff feff 	bl	80a1fc4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a21c6:	4b08      	ldr	r3, [pc, #32]	; (80a21e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a21c8:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a21ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a21cc:	4b07      	ldr	r3, [pc, #28]	; (80a21ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a21ce:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a21d0:	a806      	add	r0, sp, #24
 80a21d2:	f7ff ff04 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a21d6:	a802      	add	r0, sp, #8
 80a21d8:	f7ff fe12 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a21dc:	2200      	movs	r2, #0
 80a21de:	4629      	mov	r1, r5
 80a21e0:	4803      	ldr	r0, [pc, #12]	; (80a21f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a21e2:	f7fe fb49 	bl	80a0878 <application_thread_invoke>
 80a21e6:	e7b7      	b.n	80a2158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a21e8:	080a2083 	.word	0x080a2083
 80a21ec:	080a2319 	.word	0x080a2319
 80a21f0:	080a28b1 	.word	0x080a28b1

080a21f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a21f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a21f8:	b08a      	sub	sp, #40	; 0x28
 80a21fa:	4605      	mov	r5, r0
 80a21fc:	460c      	mov	r4, r1
 80a21fe:	4617      	mov	r7, r2
 80a2200:	4698      	mov	r8, r3
 80a2202:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2206:	f7fe fbbd 	bl	80a0984 <spark_cloud_flag_connected>
 80a220a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a220c:	4682      	mov	sl, r0
 80a220e:	bb38      	cbnz	r0, 80a2260 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a2210:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2214:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2216:	a905      	add	r1, sp, #20
 80a2218:	4630      	mov	r0, r6
 80a221a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a221e:	f7ff fed1 	bl	80a1fc4 <_ZN8particle5ErrorC1EOS0_>
 80a2222:	2014      	movs	r0, #20
 80a2224:	f7fd ff37 	bl	80a0096 <_Znwj>
 80a2228:	4604      	mov	r4, r0
 80a222a:	b148      	cbz	r0, 80a2240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a222c:	2302      	movs	r3, #2
 80a222e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2230:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2232:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2236:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a2238:	4631      	mov	r1, r6
 80a223a:	300c      	adds	r0, #12
 80a223c:	f7ff fec2 	bl	80a1fc4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2240:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a2242:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2244:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a2248:	f7ff ff32 	bl	80a20b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a224c:	4630      	mov	r0, r6
 80a224e:	f7ff fec6 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2252:	a805      	add	r0, sp, #20
 80a2254:	f7ff fec3 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a2258:	4628      	mov	r0, r5
 80a225a:	b00a      	add	sp, #40	; 0x28
 80a225c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2260:	230c      	movs	r3, #12
 80a2262:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2266:	2014      	movs	r0, #20
 80a2268:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a226c:	9307      	str	r3, [sp, #28]
 80a226e:	f7fd ff12 	bl	80a0096 <_Znwj>
 80a2272:	4601      	mov	r1, r0
 80a2274:	b128      	cbz	r0, 80a2282 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2276:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a227a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a227e:	f880 a001 	strb.w	sl, [r0, #1]
 80a2282:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2284:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a2286:	f7ff ff13 	bl	80a20b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a228a:	4b22      	ldr	r3, [pc, #136]	; (80a2314 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a228c:	2008      	movs	r0, #8
 80a228e:	9308      	str	r3, [sp, #32]
 80a2290:	f7fd ff01 	bl	80a0096 <_Znwj>
 80a2294:	4682      	mov	sl, r0
 80a2296:	b128      	cbz	r0, 80a22a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2298:	9b03      	ldr	r3, [sp, #12]
 80a229a:	a904      	add	r1, sp, #16
 80a229c:	f840 3b04 	str.w	r3, [r0], #4
 80a22a0:	f7fe ff4a 	bl	80a1138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a22a4:	4642      	mov	r2, r8
 80a22a6:	4639      	mov	r1, r7
 80a22a8:	4620      	mov	r0, r4
 80a22aa:	9600      	str	r6, [sp, #0]
 80a22ac:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a22b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a22b4:	f7fe fb6e 	bl	80a0994 <spark_send_event>
 80a22b8:	b9b8      	cbnz	r0, 80a22ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a22ba:	9b03      	ldr	r3, [sp, #12]
 80a22bc:	785b      	ldrb	r3, [r3, #1]
 80a22be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a22c2:	b993      	cbnz	r3, 80a22ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a22c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a22c8:	a905      	add	r1, sp, #20
 80a22ca:	a803      	add	r0, sp, #12
 80a22cc:	9205      	str	r2, [sp, #20]
 80a22ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a22d2:	f7ff ff11 	bl	80a20f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a22d6:	a805      	add	r0, sp, #20
 80a22d8:	f7ff fe81 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a22dc:	a805      	add	r0, sp, #20
 80a22de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a22e0:	f7ff fea7 	bl	80a2032 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a22e4:	a806      	add	r0, sp, #24
 80a22e6:	f7fe ff11 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a22ea:	9b03      	ldr	r3, [sp, #12]
 80a22ec:	a904      	add	r1, sp, #16
 80a22ee:	a806      	add	r0, sp, #24
 80a22f0:	9305      	str	r3, [sp, #20]
 80a22f2:	f7fe ff21 	bl	80a1138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a22f6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a22f8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a22fa:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a22fc:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a22fe:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a2300:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a2302:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a2304:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a2306:	f7fe ff01 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a230a:	a804      	add	r0, sp, #16
 80a230c:	f7fe fefe 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a2310:	e7a2      	b.n	80a2258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a2312:	bf00      	nop
 80a2314:	080a23dd 	.word	0x080a23dd

080a2318 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a2318:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a231a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a231c:	4605      	mov	r5, r0
	  switch (__op)
 80a231e:	d007      	beq.n	80a2330 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a2320:	2a03      	cmp	r2, #3
 80a2322:	d018      	beq.n	80a2356 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a2324:	2a01      	cmp	r2, #1
 80a2326:	d101      	bne.n	80a232c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a2328:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a232a:	6003      	str	r3, [r0, #0]
	}
 80a232c:	2000      	movs	r0, #0
 80a232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2330:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a2332:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2334:	f7fd feaf 	bl	80a0096 <_Znwj>
 80a2338:	4604      	mov	r4, r0
 80a233a:	b150      	cbz	r0, 80a2352 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a233c:	4631      	mov	r1, r6
 80a233e:	f7ff fecb 	bl	80a20d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2342:	6930      	ldr	r0, [r6, #16]
 80a2344:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2348:	b108      	cbz	r0, 80a234e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a234a:	f000 ff05 	bl	80a3158 <strdup>
        type_(type) {
 80a234e:	6120      	str	r0, [r4, #16]
 80a2350:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a2352:	602c      	str	r4, [r5, #0]
	}
 80a2354:	e7ea      	b.n	80a232c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a2356:	6804      	ldr	r4, [r0, #0]
 80a2358:	2c00      	cmp	r4, #0
 80a235a:	d0e7      	beq.n	80a232c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a235c:	f104 0010 	add.w	r0, r4, #16
 80a2360:	f7ff fe3d 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2364:	4620      	mov	r0, r4
 80a2366:	f7ff fd4b 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a236a:	2118      	movs	r1, #24
 80a236c:	4620      	mov	r0, r4
 80a236e:	f000 fe5e 	bl	80a302e <_ZdlPvj>
 80a2372:	e7db      	b.n	80a232c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a2374 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a2374:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2376:	2300      	movs	r3, #0
 80a2378:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a237a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a237c:	4604      	mov	r4, r0
 80a237e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a2380:	b12b      	cbz	r3, 80a238e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2382:	2202      	movs	r2, #2
 80a2384:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2386:	68eb      	ldr	r3, [r5, #12]
 80a2388:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a238a:	68ab      	ldr	r3, [r5, #8]
 80a238c:	60a3      	str	r3, [r4, #8]
    }
 80a238e:	4620      	mov	r0, r4
 80a2390:	bd38      	pop	{r3, r4, r5, pc}

080a2392 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a2392:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2394:	b570      	push	{r4, r5, r6, lr}
 80a2396:	4604      	mov	r4, r0
	  switch (__op)
 80a2398:	d007      	beq.n	80a23aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a239a:	2a03      	cmp	r2, #3
 80a239c:	d012      	beq.n	80a23c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a239e:	2a01      	cmp	r2, #1
 80a23a0:	d101      	bne.n	80a23a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a23a2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a23a4:	6003      	str	r3, [r0, #0]
	}
 80a23a6:	2000      	movs	r0, #0
 80a23a8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a23aa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a23ac:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a23ae:	f7fd fe72 	bl	80a0096 <_Znwj>
 80a23b2:	4605      	mov	r5, r0
 80a23b4:	b120      	cbz	r0, 80a23c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a23b6:	4631      	mov	r1, r6
 80a23b8:	f7ff ffdc 	bl	80a2374 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a23bc:	7c33      	ldrb	r3, [r6, #16]
 80a23be:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a23c0:	6025      	str	r5, [r4, #0]
	}
 80a23c2:	e7f0      	b.n	80a23a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a23c4:	6804      	ldr	r4, [r0, #0]
 80a23c6:	2c00      	cmp	r4, #0
 80a23c8:	d0ed      	beq.n	80a23a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a23ca:	4620      	mov	r0, r4
 80a23cc:	f7ff fd18 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a23d0:	2114      	movs	r1, #20
 80a23d2:	4620      	mov	r0, r4
 80a23d4:	f000 fe2b 	bl	80a302e <_ZdlPvj>
 80a23d8:	e7e5      	b.n	80a23a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a23dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a23dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a23de:	4604      	mov	r4, r0
 80a23e0:	b089      	sub	sp, #36	; 0x24
 80a23e2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a23e4:	a801      	add	r0, sp, #4
 80a23e6:	4611      	mov	r1, r2
 80a23e8:	f7ff fe23 	bl	80a2032 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a23ec:	b1a4      	cbz	r4, 80a2418 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a23ee:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a23f0:	b11d      	cbz	r5, 80a23fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a23f2:	4628      	mov	r0, r5
 80a23f4:	f000 feb0 	bl	80a3158 <strdup>
 80a23f8:	4605      	mov	r5, r0
 80a23fa:	a801      	add	r0, sp, #4
 80a23fc:	a903      	add	r1, sp, #12
        type_(type) {
 80a23fe:	9503      	str	r5, [sp, #12]
 80a2400:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a2404:	f7ff fe78 	bl	80a20f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2408:	a803      	add	r0, sp, #12
 80a240a:	f7ff fde8 	bl	80a1fde <_ZN8particle5ErrorD1Ev>
 80a240e:	a802      	add	r0, sp, #8
 80a2410:	f7fe fe7c 	bl	80a110c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a2414:	b009      	add	sp, #36	; 0x24
 80a2416:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2418:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a241a:	9d01      	ldr	r5, [sp, #4]
 80a241c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a2420:	2a00      	cmp	r2, #0
 80a2422:	d103      	bne.n	80a242c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a2424:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a2428:	2900      	cmp	r1, #0
 80a242a:	d1f7      	bne.n	80a241c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a242c:	d1ef      	bne.n	80a240e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a242e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2430:	f3bf 8f5b 	dmb	ish
 80a2434:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2436:	f3bf 8f5b 	dmb	ish
 80a243a:	1d2b      	adds	r3, r5, #4
 80a243c:	e853 6f00 	ldrex	r6, [r3]
 80a2440:	e843 4200 	strex	r2, r4, [r3]
 80a2444:	2a00      	cmp	r2, #0
 80a2446:	d1f9      	bne.n	80a243c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a2448:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a244c:	2e00      	cmp	r6, #0
 80a244e:	d0de      	beq.n	80a240e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a2450:	4620      	mov	r0, r4
 80a2452:	f7fe fa09 	bl	80a0868 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2456:	4607      	mov	r7, r0
 80a2458:	b160      	cbz	r0, 80a2474 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a245a:	4630      	mov	r0, r6
 80a245c:	f105 010c 	add.w	r1, r5, #12
 80a2460:	f7ff fe16 	bl	80a2090 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a2464:	4630      	mov	r0, r6
 80a2466:	f7ff fccb 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a246a:	2110      	movs	r1, #16
 80a246c:	4630      	mov	r0, r6
 80a246e:	f000 fdde 	bl	80a302e <_ZdlPvj>
 80a2472:	e7cc      	b.n	80a240e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2474:	4631      	mov	r1, r6
 80a2476:	a803      	add	r0, sp, #12
 80a2478:	f7ff ff7c 	bl	80a2374 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a247c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a247e:	2010      	movs	r0, #16
 80a2480:	f88d 301c 	strb.w	r3, [sp, #28]
 80a2484:	f7fd fe07 	bl	80a0096 <_Znwj>
 80a2488:	4605      	mov	r5, r0
 80a248a:	b1d0      	cbz	r0, 80a24c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a248c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a248e:	2014      	movs	r0, #20
 80a2490:	f7fd fe01 	bl	80a0096 <_Znwj>
 80a2494:	4604      	mov	r4, r0
 80a2496:	b178      	cbz	r0, 80a24b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a2498:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a249a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a249c:	a803      	add	r0, sp, #12
 80a249e:	f7ff fcbe 	bl	80a1e1e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a24a2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a24a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24a6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a24a8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a24aa:	9205      	str	r2, [sp, #20]
 80a24ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24ae:	60e3      	str	r3, [r4, #12]
 80a24b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a24b4:	9206      	str	r2, [sp, #24]
 80a24b6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a24b8:	4b06      	ldr	r3, [pc, #24]	; (80a24d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a24ba:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a24bc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a24be:	4b06      	ldr	r3, [pc, #24]	; (80a24d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a24c0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a24c2:	a803      	add	r0, sp, #12
 80a24c4:	f7ff fc9c 	bl	80a1e00 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a24c8:	2200      	movs	r2, #0
 80a24ca:	4629      	mov	r1, r5
 80a24cc:	4803      	ldr	r0, [pc, #12]	; (80a24dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a24ce:	f7fe f9d3 	bl	80a0878 <application_thread_invoke>
 80a24d2:	e7c7      	b.n	80a2464 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a24d4:	080a20a3 	.word	0x080a20a3
 80a24d8:	080a2393 	.word	0x080a2393
 80a24dc:	080a28b1 	.word	0x080a28b1

080a24e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a24e0:	4770      	bx	lr

080a24e2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a24e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24e4:	460e      	mov	r6, r1
 80a24e6:	2400      	movs	r4, #0
 80a24e8:	f100 0708 	add.w	r7, r0, #8
 80a24ec:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a24ee:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a24f2:	220a      	movs	r2, #10
 80a24f4:	4630      	mov	r0, r6
 80a24f6:	f7fe fc32 	bl	80a0d5e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a24fa:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a24fc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a24fe:	d101      	bne.n	80a2504 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a2500:	4620      	mov	r0, r4
 80a2502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a2504:	2c00      	cmp	r4, #0
 80a2506:	d0f2      	beq.n	80a24ee <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2508:	212e      	movs	r1, #46	; 0x2e
 80a250a:	4630      	mov	r0, r6
 80a250c:	f7fe fc18 	bl	80a0d40 <_ZN5Print5printEc>
 80a2510:	4404      	add	r4, r0
 80a2512:	e7ec      	b.n	80a24ee <_ZNK9IPAddress7printToER5Print+0xc>

080a2514 <_ZN9IPAddressD0Ev>:
 80a2514:	b510      	push	{r4, lr}
 80a2516:	4604      	mov	r4, r0
 80a2518:	2118      	movs	r1, #24
 80a251a:	f000 fd88 	bl	80a302e <_ZdlPvj>
 80a251e:	4620      	mov	r0, r4
 80a2520:	bd10      	pop	{r4, pc}
	...

080a2524 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a2524:	b510      	push	{r4, lr}
 80a2526:	4604      	mov	r4, r0
 80a2528:	4b04      	ldr	r3, [pc, #16]	; (80a253c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a252a:	2211      	movs	r2, #17
 80a252c:	2100      	movs	r1, #0
 80a252e:	f840 3b04 	str.w	r3, [r0], #4
 80a2532:	f000 fdbb 	bl	80a30ac <memset>
}
 80a2536:	4620      	mov	r0, r4
 80a2538:	bd10      	pop	{r4, pc}
 80a253a:	bf00      	nop
 80a253c:	080a34c0 	.word	0x080a34c0

080a2540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2540:	4603      	mov	r3, r0
 80a2542:	4a07      	ldr	r2, [pc, #28]	; (80a2560 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2544:	b510      	push	{r4, lr}
 80a2546:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a254a:	f101 0210 	add.w	r2, r1, #16
 80a254e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2552:	4291      	cmp	r1, r2
 80a2554:	f843 4b04 	str.w	r4, [r3], #4
 80a2558:	d1f9      	bne.n	80a254e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a255a:	780a      	ldrb	r2, [r1, #0]
 80a255c:	701a      	strb	r2, [r3, #0]
}
 80a255e:	bd10      	pop	{r4, pc}
 80a2560:	080a34c0 	.word	0x080a34c0

080a2564 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a2564:	4a02      	ldr	r2, [pc, #8]	; (80a2570 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a2566:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a256a:	2204      	movs	r2, #4
 80a256c:	7502      	strb	r2, [r0, #20]
}
 80a256e:	4770      	bx	lr
 80a2570:	080a34c0 	.word	0x080a34c0

080a2574 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2574:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2576:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a257a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a257e:	2304      	movs	r3, #4
 80a2580:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2584:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2588:	6044      	str	r4, [r0, #4]
 80a258a:	7503      	strb	r3, [r0, #20]
}
 80a258c:	bd10      	pop	{r4, pc}
	...

080a2590 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2592:	4d04      	ldr	r5, [pc, #16]	; (80a25a4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2594:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2596:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a259a:	9500      	str	r5, [sp, #0]
 80a259c:	f7ff ffea 	bl	80a2574 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a25a0:	b003      	add	sp, #12
 80a25a2:	bd30      	pop	{r4, r5, pc}
 80a25a4:	080a34c0 	.word	0x080a34c0

080a25a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a25a8:	7441      	strb	r1, [r0, #17]
}
 80a25aa:	4770      	bx	lr

080a25ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a25ac:	4770      	bx	lr

080a25ae <_ZN9USBSerial4readEv>:
{
 80a25ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a25b0:	2100      	movs	r1, #0
 80a25b2:	7c00      	ldrb	r0, [r0, #16]
 80a25b4:	f7fe f900 	bl	80a07b8 <HAL_USB_USART_Receive_Data>
}
 80a25b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a25bc:	bd08      	pop	{r3, pc}

080a25be <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a25be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a25c0:	2101      	movs	r1, #1
 80a25c2:	7c00      	ldrb	r0, [r0, #16]
 80a25c4:	f7fe f8f8 	bl	80a07b8 <HAL_USB_USART_Receive_Data>
}
 80a25c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a25cc:	bd08      	pop	{r3, pc}

080a25ce <_ZN9USBSerial17availableForWriteEv>:
{
 80a25ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a25d0:	7c00      	ldrb	r0, [r0, #16]
 80a25d2:	f7fe f8e9 	bl	80a07a8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a25d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25da:	bd08      	pop	{r3, pc}

080a25dc <_ZN9USBSerial9availableEv>:
{
 80a25dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a25de:	7c00      	ldrb	r0, [r0, #16]
 80a25e0:	f7fe f8da 	bl	80a0798 <HAL_USB_USART_Available_Data>
}
 80a25e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25e8:	bd08      	pop	{r3, pc}

080a25ea <_ZN9USBSerial5writeEh>:
{
 80a25ea:	b538      	push	{r3, r4, r5, lr}
 80a25ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25ee:	7c00      	ldrb	r0, [r0, #16]
{
 80a25f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25f2:	f7fe f8d9 	bl	80a07a8 <HAL_USB_USART_Available_Data_For_Write>
 80a25f6:	2800      	cmp	r0, #0
 80a25f8:	dc01      	bgt.n	80a25fe <_ZN9USBSerial5writeEh+0x14>
 80a25fa:	7c60      	ldrb	r0, [r4, #17]
 80a25fc:	b128      	cbz	r0, 80a260a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a25fe:	4629      	mov	r1, r5
 80a2600:	7c20      	ldrb	r0, [r4, #16]
 80a2602:	f7fe f8e1 	bl	80a07c8 <HAL_USB_USART_Send_Data>
 80a2606:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a260a:	bd38      	pop	{r3, r4, r5, pc}

080a260c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a260c:	7c00      	ldrb	r0, [r0, #16]
 80a260e:	f7fe b8e3 	b.w	80a07d8 <HAL_USB_USART_Flush_Data>

080a2612 <_ZN9USBSerialD0Ev>:
 80a2612:	b510      	push	{r4, lr}
 80a2614:	4604      	mov	r4, r0
 80a2616:	2114      	movs	r1, #20
 80a2618:	f000 fd09 	bl	80a302e <_ZdlPvj>
 80a261c:	4620      	mov	r0, r4
 80a261e:	bd10      	pop	{r4, pc}

080a2620 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2620:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2626:	4604      	mov	r4, r0
 80a2628:	4608      	mov	r0, r1
 80a262a:	2100      	movs	r1, #0
 80a262c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2630:	4b04      	ldr	r3, [pc, #16]	; (80a2644 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2632:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2634:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2636:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2638:	4611      	mov	r1, r2
  _blocking = true;
 80a263a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a263c:	f7fe f894 	bl	80a0768 <HAL_USB_USART_Init>
}
 80a2640:	4620      	mov	r0, r4
 80a2642:	bd10      	pop	{r4, pc}
 80a2644:	080a34d4 	.word	0x080a34d4

080a2648 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2648:	2200      	movs	r2, #0
 80a264a:	7c00      	ldrb	r0, [r0, #16]
 80a264c:	f7fe b894 	b.w	80a0778 <HAL_USB_USART_Begin>

080a2650 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a2650:	7c00      	ldrb	r0, [r0, #16]
 80a2652:	f7fe b899 	b.w	80a0788 <HAL_USB_USART_End>
	...

080a2658 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2658:	b510      	push	{r4, lr}
 80a265a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a265c:	2214      	movs	r2, #20
 80a265e:	2100      	movs	r1, #0
 80a2660:	f000 fd24 	bl	80a30ac <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2664:	4b05      	ldr	r3, [pc, #20]	; (80a267c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2666:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2668:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a266a:	4b05      	ldr	r3, [pc, #20]	; (80a2680 <_Z19acquireSerialBufferv+0x28>)
 80a266c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a266e:	f240 1301 	movw	r3, #257	; 0x101
 80a2672:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2674:	2381      	movs	r3, #129	; 0x81
 80a2676:	8223      	strh	r3, [r4, #16]
}
 80a2678:	bd10      	pop	{r4, pc}
 80a267a:	bf00      	nop
 80a267c:	20000150 	.word	0x20000150
 80a2680:	20000251 	.word	0x20000251

080a2684 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2684:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2686:	4d0f      	ldr	r5, [pc, #60]	; (80a26c4 <_Z16_fetch_usbserialv+0x40>)
{
 80a2688:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a268a:	a801      	add	r0, sp, #4
 80a268c:	f7ff ffe4 	bl	80a2658 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2690:	7829      	ldrb	r1, [r5, #0]
 80a2692:	f3bf 8f5b 	dmb	ish
 80a2696:	f011 0401 	ands.w	r4, r1, #1
 80a269a:	d110      	bne.n	80a26be <_Z16_fetch_usbserialv+0x3a>
 80a269c:	4628      	mov	r0, r5
 80a269e:	f7fd fd0b 	bl	80a00b8 <__cxa_guard_acquire>
 80a26a2:	b160      	cbz	r0, 80a26be <_Z16_fetch_usbserialv+0x3a>
 80a26a4:	4621      	mov	r1, r4
 80a26a6:	aa01      	add	r2, sp, #4
 80a26a8:	4807      	ldr	r0, [pc, #28]	; (80a26c8 <_Z16_fetch_usbserialv+0x44>)
 80a26aa:	f7ff ffb9 	bl	80a2620 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a26ae:	4628      	mov	r0, r5
 80a26b0:	f7fd fd07 	bl	80a00c2 <__cxa_guard_release>
 80a26b4:	4a05      	ldr	r2, [pc, #20]	; (80a26cc <_Z16_fetch_usbserialv+0x48>)
 80a26b6:	4906      	ldr	r1, [pc, #24]	; (80a26d0 <_Z16_fetch_usbserialv+0x4c>)
 80a26b8:	4803      	ldr	r0, [pc, #12]	; (80a26c8 <_Z16_fetch_usbserialv+0x44>)
 80a26ba:	f000 fcb3 	bl	80a3024 <__aeabi_atexit>
	return _usbserial;
}
 80a26be:	4802      	ldr	r0, [pc, #8]	; (80a26c8 <_Z16_fetch_usbserialv+0x44>)
 80a26c0:	b007      	add	sp, #28
 80a26c2:	bd30      	pop	{r4, r5, pc}
 80a26c4:	20000120 	.word	0x20000120
 80a26c8:	20000128 	.word	0x20000128
 80a26cc:	20000080 	.word	0x20000080
 80a26d0:	080a25ad 	.word	0x080a25ad

080a26d4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a26d4:	b510      	push	{r4, lr}
 80a26d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a26d8:	2214      	movs	r2, #20
 80a26da:	2100      	movs	r1, #0
 80a26dc:	f000 fce6 	bl	80a30ac <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a26e0:	4b05      	ldr	r3, [pc, #20]	; (80a26f8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a26e2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a26e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a26e6:	4b05      	ldr	r3, [pc, #20]	; (80a26fc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a26e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a26ea:	f240 1301 	movw	r3, #257	; 0x101
 80a26ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a26f0:	2381      	movs	r3, #129	; 0x81
 80a26f2:	8223      	strh	r3, [r4, #16]
}
 80a26f4:	bd10      	pop	{r4, pc}
 80a26f6:	bf00      	nop
 80a26f8:	200002d2 	.word	0x200002d2
 80a26fc:	200003d3 	.word	0x200003d3

080a2700 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2700:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2702:	4c0f      	ldr	r4, [pc, #60]	; (80a2740 <_Z17_fetch_usbserial1v+0x40>)
{
 80a2704:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2706:	a801      	add	r0, sp, #4
 80a2708:	f7ff ffe4 	bl	80a26d4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a270c:	7823      	ldrb	r3, [r4, #0]
 80a270e:	f3bf 8f5b 	dmb	ish
 80a2712:	07db      	lsls	r3, r3, #31
 80a2714:	d410      	bmi.n	80a2738 <_Z17_fetch_usbserial1v+0x38>
 80a2716:	4620      	mov	r0, r4
 80a2718:	f7fd fcce 	bl	80a00b8 <__cxa_guard_acquire>
 80a271c:	b160      	cbz	r0, 80a2738 <_Z17_fetch_usbserial1v+0x38>
 80a271e:	2101      	movs	r1, #1
 80a2720:	aa01      	add	r2, sp, #4
 80a2722:	4808      	ldr	r0, [pc, #32]	; (80a2744 <_Z17_fetch_usbserial1v+0x44>)
 80a2724:	f7ff ff7c 	bl	80a2620 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2728:	4620      	mov	r0, r4
 80a272a:	f7fd fcca 	bl	80a00c2 <__cxa_guard_release>
 80a272e:	4a06      	ldr	r2, [pc, #24]	; (80a2748 <_Z17_fetch_usbserial1v+0x48>)
 80a2730:	4906      	ldr	r1, [pc, #24]	; (80a274c <_Z17_fetch_usbserial1v+0x4c>)
 80a2732:	4804      	ldr	r0, [pc, #16]	; (80a2744 <_Z17_fetch_usbserial1v+0x44>)
 80a2734:	f000 fc76 	bl	80a3024 <__aeabi_atexit>
  return _usbserial1;
}
 80a2738:	4802      	ldr	r0, [pc, #8]	; (80a2744 <_Z17_fetch_usbserial1v+0x44>)
 80a273a:	b006      	add	sp, #24
 80a273c:	bd10      	pop	{r4, pc}
 80a273e:	bf00      	nop
 80a2740:	20000124 	.word	0x20000124
 80a2744:	2000013c 	.word	0x2000013c
 80a2748:	20000080 	.word	0x20000080
 80a274c:	080a25ad 	.word	0x080a25ad

080a2750 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a2750:	4700      	bx	r0
	...

080a2754 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a2754:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a2758:	2400      	movs	r4, #0
{
 80a275a:	461d      	mov	r5, r3
 80a275c:	460f      	mov	r7, r1
 80a275e:	4690      	mov	r8, r2
 80a2760:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80a2762:	f7fd ff27 	bl	80a05b4 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a2766:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a2768:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a276a:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a276e:	bfa8      	it	ge
 80a2770:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 80a2774:	f8ad 400d 	strh.w	r4, [sp, #13]
 80a2778:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80a277c:	bfa4      	itt	ge
 80a277e:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a2780:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2784:	463a      	mov	r2, r7
 80a2786:	4643      	mov	r3, r8
 80a2788:	4630      	mov	r0, r6
 80a278a:	4906      	ldr	r1, [pc, #24]	; (80a27a4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80a278c:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a278e:	bfa8      	it	ge
 80a2790:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2794:	f7fd ff06 	bl	80a05a4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a2798:	fab0 f080 	clz	r0, r0
 80a279c:	0940      	lsrs	r0, r0, #5
 80a279e:	b004      	add	sp, #16
 80a27a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a27a4:	080a2751 	.word	0x080a2751

080a27a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a27a8:	4770      	bx	lr

080a27aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a27aa:	7441      	strb	r1, [r0, #17]
}
 80a27ac:	4770      	bx	lr

080a27ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a27ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a27b0:	7c00      	ldrb	r0, [r0, #16]
 80a27b2:	f7fd ff7f 	bl	80a06b4 <hal_usart_available_data_for_write>
}
 80a27b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a27ba:	bd08      	pop	{r3, pc}

080a27bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a27bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a27be:	7c00      	ldrb	r0, [r0, #16]
 80a27c0:	f7fd ff50 	bl	80a0664 <hal_usart_available>
}
 80a27c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a27c8:	bd08      	pop	{r3, pc}

080a27ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a27ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a27cc:	7c00      	ldrb	r0, [r0, #16]
 80a27ce:	f7fd ff59 	bl	80a0684 <hal_usart_peek>
}
 80a27d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a27d6:	bd08      	pop	{r3, pc}

080a27d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a27d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a27da:	7c00      	ldrb	r0, [r0, #16]
 80a27dc:	f7fd ff4a 	bl	80a0674 <hal_usart_read>
}
 80a27e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a27e4:	bd08      	pop	{r3, pc}

080a27e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a27e6:	7c00      	ldrb	r0, [r0, #16]
 80a27e8:	f7fd bf54 	b.w	80a0694 <hal_usart_flush>

080a27ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a27ec:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a27ee:	7c46      	ldrb	r6, [r0, #17]
{
 80a27f0:	4604      	mov	r4, r0
 80a27f2:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a27f4:	b12e      	cbz	r6, 80a2802 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a27f6:	4629      	mov	r1, r5
 80a27f8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a27fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a27fe:	f7fd bf29 	b.w	80a0654 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2802:	7c00      	ldrb	r0, [r0, #16]
 80a2804:	f7fd ff56 	bl	80a06b4 <hal_usart_available_data_for_write>
 80a2808:	2800      	cmp	r0, #0
 80a280a:	dcf4      	bgt.n	80a27f6 <_ZN11USARTSerial5writeEh+0xa>
}
 80a280c:	4630      	mov	r0, r6
 80a280e:	bd70      	pop	{r4, r5, r6, pc}

080a2810 <_ZN11USARTSerialD0Ev>:
 80a2810:	b510      	push	{r4, lr}
 80a2812:	4604      	mov	r4, r0
 80a2814:	2114      	movs	r1, #20
 80a2816:	f000 fc0a 	bl	80a302e <_ZdlPvj>
 80a281a:	4620      	mov	r0, r4
 80a281c:	bd10      	pop	{r4, pc}
	...

080a2820 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2820:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2824:	b510      	push	{r4, lr}
 80a2826:	4604      	mov	r4, r0
 80a2828:	4608      	mov	r0, r1
 80a282a:	4611      	mov	r1, r2
 80a282c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2830:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2834:	4a04      	ldr	r2, [pc, #16]	; (80a2848 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a2836:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2838:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a283a:	2201      	movs	r2, #1
 80a283c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a283e:	461a      	mov	r2, r3
 80a2840:	f7fd fef8 	bl	80a0634 <hal_usart_init>
}
 80a2844:	4620      	mov	r0, r4
 80a2846:	bd10      	pop	{r4, pc}
 80a2848:	080a3504 	.word	0x080a3504

080a284c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a284c:	2300      	movs	r3, #0
 80a284e:	7c00      	ldrb	r0, [r0, #16]
 80a2850:	f7fd bf38 	b.w	80a06c4 <hal_usart_begin_config>

080a2854 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a2854:	2200      	movs	r2, #0
 80a2856:	f7ff bff9 	b.w	80a284c <_ZN11USARTSerial5beginEmm>

080a285a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a285a:	7c00      	ldrb	r0, [r0, #16]
 80a285c:	f7fd bef2 	b.w	80a0644 <hal_usart_end>

080a2860 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2860:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2862:	4d0d      	ldr	r5, [pc, #52]	; (80a2898 <_Z22__fetch_global_Serial1v+0x38>)
 80a2864:	7829      	ldrb	r1, [r5, #0]
 80a2866:	f3bf 8f5b 	dmb	ish
 80a286a:	f011 0401 	ands.w	r4, r1, #1
 80a286e:	d111      	bne.n	80a2894 <_Z22__fetch_global_Serial1v+0x34>
 80a2870:	4628      	mov	r0, r5
 80a2872:	f7fd fc21 	bl	80a00b8 <__cxa_guard_acquire>
 80a2876:	b168      	cbz	r0, 80a2894 <_Z22__fetch_global_Serial1v+0x34>
 80a2878:	4621      	mov	r1, r4
 80a287a:	4a08      	ldr	r2, [pc, #32]	; (80a289c <_Z22__fetch_global_Serial1v+0x3c>)
 80a287c:	4b08      	ldr	r3, [pc, #32]	; (80a28a0 <_Z22__fetch_global_Serial1v+0x40>)
 80a287e:	4809      	ldr	r0, [pc, #36]	; (80a28a4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2880:	f7ff ffce 	bl	80a2820 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2884:	4628      	mov	r0, r5
 80a2886:	f7fd fc1c 	bl	80a00c2 <__cxa_guard_release>
 80a288a:	4a07      	ldr	r2, [pc, #28]	; (80a28a8 <_Z22__fetch_global_Serial1v+0x48>)
 80a288c:	4907      	ldr	r1, [pc, #28]	; (80a28ac <_Z22__fetch_global_Serial1v+0x4c>)
 80a288e:	4805      	ldr	r0, [pc, #20]	; (80a28a4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2890:	f000 fbc8 	bl	80a3024 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2894:	4803      	ldr	r0, [pc, #12]	; (80a28a4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2896:	bd38      	pop	{r3, r4, r5, pc}
 80a2898:	20000454 	.word	0x20000454
 80a289c:	20000458 	.word	0x20000458
 80a28a0:	200004dc 	.word	0x200004dc
 80a28a4:	20000560 	.word	0x20000560
 80a28a8:	20000080 	.word	0x20000080
 80a28ac:	080a27a9 	.word	0x080a27a9

080a28b0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a28b0:	b510      	push	{r4, lr}
      if (_M_empty())
 80a28b2:	6883      	ldr	r3, [r0, #8]
 80a28b4:	4604      	mov	r4, r0
 80a28b6:	b90b      	cbnz	r3, 80a28bc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a28b8:	f000 fbbf 	bl	80a303a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a28bc:	68c3      	ldr	r3, [r0, #12]
 80a28be:	4798      	blx	r3
      if (_M_manager)
 80a28c0:	68a3      	ldr	r3, [r4, #8]
 80a28c2:	b11b      	cbz	r3, 80a28cc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a28c4:	2203      	movs	r2, #3
 80a28c6:	4621      	mov	r1, r4
 80a28c8:	4620      	mov	r0, r4
 80a28ca:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a28cc:	4620      	mov	r0, r4
}
 80a28ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a28d2:	2110      	movs	r1, #16
 80a28d4:	f000 bbab 	b.w	80a302e <_ZdlPvj>

080a28d8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a28d8:	4770      	bx	lr

080a28da <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a28da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a28dc:	4606      	mov	r6, r0
 80a28de:	4615      	mov	r5, r2
 80a28e0:	460c      	mov	r4, r1
 80a28e2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a28e4:	42bc      	cmp	r4, r7
 80a28e6:	d006      	beq.n	80a28f6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a28e8:	6833      	ldr	r3, [r6, #0]
 80a28ea:	4630      	mov	r0, r6
 80a28ec:	689b      	ldr	r3, [r3, #8]
 80a28ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a28f2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a28f4:	e7f6      	b.n	80a28e4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a28f6:	4628      	mov	r0, r5
 80a28f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a28fa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a28fa:	2200      	movs	r2, #0
 80a28fc:	7c00      	ldrb	r0, [r0, #16]
 80a28fe:	f7fd bee9 	b.w	80a06d4 <hal_i2c_write>

080a2902 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a2902:	2100      	movs	r1, #0
 80a2904:	7c00      	ldrb	r0, [r0, #16]
 80a2906:	f7fd beed 	b.w	80a06e4 <hal_i2c_available>

080a290a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a290a:	2100      	movs	r1, #0
 80a290c:	7c00      	ldrb	r0, [r0, #16]
 80a290e:	f7fd bef1 	b.w	80a06f4 <hal_i2c_read>

080a2912 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a2912:	2100      	movs	r1, #0
 80a2914:	7c00      	ldrb	r0, [r0, #16]
 80a2916:	f7fd bef5 	b.w	80a0704 <hal_i2c_peek>

080a291a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a291a:	2100      	movs	r1, #0
 80a291c:	7c00      	ldrb	r0, [r0, #16]
 80a291e:	f7fd bef9 	b.w	80a0714 <hal_i2c_flush>

080a2922 <_ZN7TwoWireD0Ev>:
 80a2922:	b510      	push	{r4, lr}
 80a2924:	4604      	mov	r4, r0
 80a2926:	2114      	movs	r1, #20
 80a2928:	f000 fb81 	bl	80a302e <_ZdlPvj>
 80a292c:	4620      	mov	r0, r4
 80a292e:	bd10      	pop	{r4, pc}

080a2930 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2930:	b510      	push	{r4, lr}
 80a2932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2936:	4604      	mov	r4, r0
 80a2938:	4608      	mov	r0, r1
 80a293a:	2100      	movs	r1, #0
 80a293c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2940:	4b03      	ldr	r3, [pc, #12]	; (80a2950 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a2942:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2944:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2946:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2948:	f7fd fef4 	bl	80a0734 <hal_i2c_init>
}
 80a294c:	4620      	mov	r0, r4
 80a294e:	bd10      	pop	{r4, pc}
 80a2950:	080a3534 	.word	0x080a3534

080a2954 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2954:	2200      	movs	r2, #0
 80a2956:	6840      	ldr	r0, [r0, #4]
 80a2958:	4611      	mov	r1, r2
 80a295a:	f7fd bfcb 	b.w	80a08f4 <network_ready>

080a295e <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a295e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2960:	4615      	mov	r5, r2
 80a2962:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2964:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2966:	460e      	mov	r6, r1
 80a2968:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a296a:	2100      	movs	r1, #0
 80a296c:	a803      	add	r0, sp, #12
 80a296e:	f000 fb9d 	bl	80a30ac <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2972:	4628      	mov	r0, r5
 80a2974:	f000 fc0b 	bl	80a318e <strlen>
 80a2978:	2700      	movs	r7, #0
 80a297a:	b281      	uxth	r1, r0
 80a297c:	6873      	ldr	r3, [r6, #4]
 80a297e:	4628      	mov	r0, r5
 80a2980:	9700      	str	r7, [sp, #0]
 80a2982:	aa03      	add	r2, sp, #12
 80a2984:	f7fd ff30 	bl	80a07e8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2988:	b130      	cbz	r0, 80a2998 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a298a:	4639      	mov	r1, r7
 80a298c:	4620      	mov	r0, r4
 80a298e:	f7ff fde9 	bl	80a2564 <_ZN9IPAddressC1Em>
    }
 80a2992:	4620      	mov	r0, r4
 80a2994:	b009      	add	sp, #36	; 0x24
 80a2996:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2998:	4620      	mov	r0, r4
 80a299a:	a903      	add	r1, sp, #12
 80a299c:	f7ff fdd0 	bl	80a2540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a29a0:	e7f7      	b.n	80a2992 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a29a2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a29a2:	2200      	movs	r2, #0
 80a29a4:	6840      	ldr	r0, [r0, #4]
 80a29a6:	4611      	mov	r1, r2
 80a29a8:	f7fd bfc4 	b.w	80a0934 <network_listening>

080a29ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a29ac:	2200      	movs	r2, #0
 80a29ae:	6840      	ldr	r0, [r0, #4]
 80a29b0:	4611      	mov	r1, r2
 80a29b2:	f7fd bfcf 	b.w	80a0954 <network_get_listen_timeout>

080a29b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a29b6:	2200      	movs	r2, #0
 80a29b8:	6840      	ldr	r0, [r0, #4]
 80a29ba:	f7fd bfc3 	b.w	80a0944 <network_set_listen_timeout>

080a29be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a29be:	2200      	movs	r2, #0
 80a29c0:	6840      	ldr	r0, [r0, #4]
 80a29c2:	f081 0101 	eor.w	r1, r1, #1
 80a29c6:	f7fd bfad 	b.w	80a0924 <network_listen>

080a29ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a29ca:	2300      	movs	r3, #0
 80a29cc:	6840      	ldr	r0, [r0, #4]
 80a29ce:	461a      	mov	r2, r3
 80a29d0:	4619      	mov	r1, r3
 80a29d2:	f7fd bf9f 	b.w	80a0914 <network_off>

080a29d6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a29d6:	2200      	movs	r2, #0
 80a29d8:	6840      	ldr	r0, [r0, #4]
 80a29da:	4611      	mov	r1, r2
 80a29dc:	f7fd bf7a 	b.w	80a08d4 <network_connecting>

080a29e0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a29e0:	2200      	movs	r2, #0
 80a29e2:	2102      	movs	r1, #2
 80a29e4:	6840      	ldr	r0, [r0, #4]
 80a29e6:	f7fd bf7d 	b.w	80a08e4 <network_disconnect>

080a29ea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a29ea:	2300      	movs	r3, #0
 80a29ec:	6840      	ldr	r0, [r0, #4]
 80a29ee:	461a      	mov	r2, r3
 80a29f0:	f7fd bf68 	b.w	80a08c4 <network_connect>

080a29f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a29f4:	2204      	movs	r2, #4
 80a29f6:	4b02      	ldr	r3, [pc, #8]	; (80a2a00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a29f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a29fa:	4a02      	ldr	r2, [pc, #8]	; (80a2a04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a29fc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a29fe:	4770      	bx	lr
 80a2a00:	20000574 	.word	0x20000574
 80a2a04:	080a355c 	.word	0x080a355c

080a2a08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2a08:	2300      	movs	r3, #0
 80a2a0a:	6840      	ldr	r0, [r0, #4]
 80a2a0c:	461a      	mov	r2, r3
 80a2a0e:	f7fd bf59 	b.w	80a08c4 <network_connect>

080a2a12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2a12:	2200      	movs	r2, #0
 80a2a14:	2102      	movs	r1, #2
 80a2a16:	6840      	ldr	r0, [r0, #4]
 80a2a18:	f7fd bf64 	b.w	80a08e4 <network_disconnect>

080a2a1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2a1c:	2200      	movs	r2, #0
 80a2a1e:	6840      	ldr	r0, [r0, #4]
 80a2a20:	4611      	mov	r1, r2
 80a2a22:	f7fd bf57 	b.w	80a08d4 <network_connecting>

080a2a26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2a26:	2200      	movs	r2, #0
 80a2a28:	6840      	ldr	r0, [r0, #4]
 80a2a2a:	4611      	mov	r1, r2
 80a2a2c:	f7fd bf62 	b.w	80a08f4 <network_ready>

080a2a30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2a30:	2300      	movs	r3, #0
 80a2a32:	6840      	ldr	r0, [r0, #4]
 80a2a34:	461a      	mov	r2, r3
 80a2a36:	4619      	mov	r1, r3
 80a2a38:	f7fd bf64 	b.w	80a0904 <network_on>

080a2a3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2a3c:	2300      	movs	r3, #0
 80a2a3e:	6840      	ldr	r0, [r0, #4]
 80a2a40:	461a      	mov	r2, r3
 80a2a42:	4619      	mov	r1, r3
 80a2a44:	f7fd bf66 	b.w	80a0914 <network_off>

080a2a48 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2a48:	2100      	movs	r1, #0
 80a2a4a:	6840      	ldr	r0, [r0, #4]
 80a2a4c:	f7fd bf8a 	b.w	80a0964 <network_is_on>

080a2a50 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2a50:	2100      	movs	r1, #0
 80a2a52:	6840      	ldr	r0, [r0, #4]
 80a2a54:	f7fd bf8e 	b.w	80a0974 <network_is_off>

080a2a58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2a58:	2200      	movs	r2, #0
 80a2a5a:	6840      	ldr	r0, [r0, #4]
 80a2a5c:	f081 0101 	eor.w	r1, r1, #1
 80a2a60:	f7fd bf60 	b.w	80a0924 <network_listen>

080a2a64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2a64:	2200      	movs	r2, #0
 80a2a66:	6840      	ldr	r0, [r0, #4]
 80a2a68:	f7fd bf6c 	b.w	80a0944 <network_set_listen_timeout>

080a2a6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2a6c:	2200      	movs	r2, #0
 80a2a6e:	6840      	ldr	r0, [r0, #4]
 80a2a70:	4611      	mov	r1, r2
 80a2a72:	f7fd bf6f 	b.w	80a0954 <network_get_listen_timeout>

080a2a76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2a76:	2200      	movs	r2, #0
 80a2a78:	6840      	ldr	r0, [r0, #4]
 80a2a7a:	4611      	mov	r1, r2
 80a2a7c:	f7fd bf5a 	b.w	80a0934 <network_listening>

080a2a80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2a80:	b570      	push	{r4, r5, r6, lr}
 80a2a82:	4615      	mov	r5, r2
 80a2a84:	b08e      	sub	sp, #56	; 0x38
 80a2a86:	4604      	mov	r4, r0
    IPAddress addr;
 80a2a88:	a808      	add	r0, sp, #32
 80a2a8a:	f7ff fd4b 	bl	80a2524 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2a8e:	2211      	movs	r2, #17
 80a2a90:	2100      	movs	r1, #0
 80a2a92:	a803      	add	r0, sp, #12
 80a2a94:	f000 fb0a 	bl	80a30ac <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2a98:	2600      	movs	r6, #0
 80a2a9a:	4628      	mov	r0, r5
 80a2a9c:	f000 fb77 	bl	80a318e <strlen>
 80a2aa0:	4b0a      	ldr	r3, [pc, #40]	; (80a2acc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2aa2:	9600      	str	r6, [sp, #0]
 80a2aa4:	b281      	uxth	r1, r0
 80a2aa6:	685b      	ldr	r3, [r3, #4]
 80a2aa8:	4628      	mov	r0, r5
 80a2aaa:	aa03      	add	r2, sp, #12
 80a2aac:	f7fd fe9c 	bl	80a07e8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2ab0:	b130      	cbz	r0, 80a2ac0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2ab2:	4631      	mov	r1, r6
 80a2ab4:	4620      	mov	r0, r4
 80a2ab6:	f7ff fd55 	bl	80a2564 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2aba:	4620      	mov	r0, r4
 80a2abc:	b00e      	add	sp, #56	; 0x38
 80a2abe:	bd70      	pop	{r4, r5, r6, pc}
 80a2ac0:	4620      	mov	r0, r4
 80a2ac2:	a903      	add	r1, sp, #12
 80a2ac4:	f7ff fd3c 	bl	80a2540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2ac8:	e7f7      	b.n	80a2aba <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2aca:	bf00      	nop
 80a2acc:	20000574 	.word	0x20000574

080a2ad0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2ad0:	4b02      	ldr	r3, [pc, #8]	; (80a2adc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2ad2:	4a03      	ldr	r2, [pc, #12]	; (80a2ae0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2ad4:	601a      	str	r2, [r3, #0]
 80a2ad6:	2200      	movs	r2, #0
 80a2ad8:	605a      	str	r2, [r3, #4]

} // spark
 80a2ada:	4770      	bx	lr
 80a2adc:	2000057c 	.word	0x2000057c
 80a2ae0:	080a3598 	.word	0x080a3598

080a2ae4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a2ae4:	2201      	movs	r2, #1
 80a2ae6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a2aea:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a2aee:	4618      	mov	r0, r3
 80a2af0:	2901      	cmp	r1, #1
 80a2af2:	d108      	bne.n	80a2b06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a2af4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a2af8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a2afc:	3a01      	subs	r2, #1
 80a2afe:	f103 0310 	add.w	r3, r3, #16
 80a2b02:	d1f2      	bne.n	80a2aea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a2b04:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a2b06:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a2b08:	bf04      	itt	eq
 80a2b0a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a2b0e:	1852      	addeq	r2, r2, r1
 80a2b10:	e7f4      	b.n	80a2afc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a2b12 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a2b12:	b40e      	push	{r1, r2, r3}
 80a2b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b18:	b087      	sub	sp, #28
 80a2b1a:	af00      	add	r7, sp, #0
 80a2b1c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a2b20:	f855 8b04 	ldr.w	r8, [r5], #4
 80a2b24:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2b26:	462b      	mov	r3, r5
 80a2b28:	4642      	mov	r2, r8
 80a2b2a:	2110      	movs	r1, #16
 80a2b2c:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a2b30:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2b32:	f7fd ff67 	bl	80a0a04 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a2b36:	280f      	cmp	r0, #15
 80a2b38:	d91b      	bls.n	80a2b72 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a2b3a:	f100 0308 	add.w	r3, r0, #8
 80a2b3e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a2b42:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a2b44:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2b48:	4642      	mov	r2, r8
 80a2b4a:	1c41      	adds	r1, r0, #1
 80a2b4c:	462b      	mov	r3, r5
 80a2b4e:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a2b50:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2b52:	f7fd ff57 	bl	80a0a04 <vsnprintf>
        if (n > 0) {
 80a2b56:	1e02      	subs	r2, r0, #0
 80a2b58:	dd04      	ble.n	80a2b64 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a2b5a:	6823      	ldr	r3, [r4, #0]
 80a2b5c:	4669      	mov	r1, sp
 80a2b5e:	4620      	mov	r0, r4
 80a2b60:	689b      	ldr	r3, [r3, #8]
 80a2b62:	4798      	blx	r3
 80a2b64:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a2b66:	371c      	adds	r7, #28
 80a2b68:	46bd      	mov	sp, r7
 80a2b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b6e:	b003      	add	sp, #12
 80a2b70:	4770      	bx	lr
    } else if (n > 0) {
 80a2b72:	2800      	cmp	r0, #0
 80a2b74:	d0f7      	beq.n	80a2b66 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a2b76:	6823      	ldr	r3, [r4, #0]
 80a2b78:	4602      	mov	r2, r0
 80a2b7a:	689b      	ldr	r3, [r3, #8]
 80a2b7c:	4620      	mov	r0, r4
 80a2b7e:	f107 0108 	add.w	r1, r7, #8
 80a2b82:	4798      	blx	r3
}
 80a2b84:	e7ef      	b.n	80a2b66 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a2b86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2b86:	b510      	push	{r4, lr}
 80a2b88:	4604      	mov	r4, r0
          _M_dispose();
 80a2b8a:	6803      	ldr	r3, [r0, #0]
 80a2b8c:	689b      	ldr	r3, [r3, #8]
 80a2b8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2b90:	68a3      	ldr	r3, [r4, #8]
 80a2b92:	3b01      	subs	r3, #1
 80a2b94:	60a3      	str	r3, [r4, #8]
 80a2b96:	b92b      	cbnz	r3, 80a2ba4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a2b98:	6823      	ldr	r3, [r4, #0]
 80a2b9a:	4620      	mov	r0, r4
    }
 80a2b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a2ba0:	68db      	ldr	r3, [r3, #12]
 80a2ba2:	4718      	bx	r3
    }
 80a2ba4:	bd10      	pop	{r4, pc}

080a2ba6 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 80a2ba6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a2ba8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a2baa:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a2bae:	2201      	movs	r2, #1
 80a2bb0:	689b      	ldr	r3, [r3, #8]
 80a2bb2:	f10d 0107 	add.w	r1, sp, #7
 80a2bb6:	4798      	blx	r3
}
 80a2bb8:	b003      	add	sp, #12
 80a2bba:	f85d fb04 	ldr.w	pc, [sp], #4

080a2bbe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a2bbe:	b538      	push	{r3, r4, r5, lr}
 80a2bc0:	680b      	ldr	r3, [r1, #0]
 80a2bc2:	4604      	mov	r4, r0
 80a2bc4:	6003      	str	r3, [r0, #0]
 80a2bc6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a2bc8:	6843      	ldr	r3, [r0, #4]
 80a2bca:	429d      	cmp	r5, r3
 80a2bcc:	d00c      	beq.n	80a2be8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a2bce:	b115      	cbz	r5, 80a2bd6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a2bd0:	686b      	ldr	r3, [r5, #4]
 80a2bd2:	3301      	adds	r3, #1
 80a2bd4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a2bd6:	6860      	ldr	r0, [r4, #4]
 80a2bd8:	b128      	cbz	r0, 80a2be6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a2bda:	6843      	ldr	r3, [r0, #4]
 80a2bdc:	3b01      	subs	r3, #1
 80a2bde:	6043      	str	r3, [r0, #4]
 80a2be0:	b90b      	cbnz	r3, 80a2be6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a2be2:	f7ff ffd0 	bl	80a2b86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a2be6:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a2be8:	4620      	mov	r0, r4
 80a2bea:	bd38      	pop	{r3, r4, r5, pc}

080a2bec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2bec:	460b      	mov	r3, r1
 80a2bee:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a2bf0:	2200      	movs	r2, #0
 80a2bf2:	b510      	push	{r4, lr}
 80a2bf4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2bf6:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a2bfa:	6083      	str	r3, [r0, #8]
    if (t) {
 80a2bfc:	b90b      	cbnz	r3, 80a2c02 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a2bfe:	4620      	mov	r0, r4
 80a2c00:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a2c02:	f7ff ffdc 	bl	80a2bbe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a2c06:	e7fa      	b.n	80a2bfe <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a2c08 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a2c08:	4603      	mov	r3, r0
    if (!t_) {
 80a2c0a:	6880      	ldr	r0, [r0, #8]
 80a2c0c:	b320      	cbz	r0, 80a2c58 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a2c0e:	7802      	ldrb	r2, [r0, #0]
 80a2c10:	2a03      	cmp	r2, #3
 80a2c12:	d81a      	bhi.n	80a2c4a <_ZNK5spark9JSONValue4typeEv+0x42>
 80a2c14:	e8df f002 	tbb	[pc, r2]
 80a2c18:	1b021704 	.word	0x1b021704
 80a2c1c:	2005      	movs	r0, #5
 80a2c1e:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a2c20:	681b      	ldr	r3, [r3, #0]
 80a2c22:	685a      	ldr	r2, [r3, #4]
 80a2c24:	6843      	ldr	r3, [r0, #4]
 80a2c26:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a2c28:	282d      	cmp	r0, #45	; 0x2d
 80a2c2a:	d012      	beq.n	80a2c52 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a2c2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a2c30:	2b09      	cmp	r3, #9
 80a2c32:	d90e      	bls.n	80a2c52 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a2c34:	2874      	cmp	r0, #116	; 0x74
 80a2c36:	d00e      	beq.n	80a2c56 <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a2c38:	2866      	cmp	r0, #102	; 0x66
 80a2c3a:	d00c      	beq.n	80a2c56 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a2c3c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a2c40:	4258      	negs	r0, r3
 80a2c42:	4158      	adcs	r0, r3
 80a2c44:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a2c46:	2006      	movs	r0, #6
 80a2c48:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a2c4a:	2000      	movs	r0, #0
 80a2c4c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a2c4e:	2004      	movs	r0, #4
 80a2c50:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a2c52:	2003      	movs	r0, #3
 80a2c54:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a2c56:	2002      	movs	r0, #2
}
 80a2c58:	4770      	bx	lr

080a2c5a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a2c5a:	b510      	push	{r4, lr}
 80a2c5c:	4604      	mov	r4, r0
    switch (type()) {
 80a2c5e:	f7ff ffd3 	bl	80a2c08 <_ZNK5spark9JSONValue4typeEv>
 80a2c62:	2802      	cmp	r0, #2
 80a2c64:	d00e      	beq.n	80a2c84 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a2c66:	1ec3      	subs	r3, r0, #3
 80a2c68:	b2db      	uxtb	r3, r3
 80a2c6a:	2b01      	cmp	r3, #1
 80a2c6c:	d814      	bhi.n	80a2c98 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a2c6e:	6822      	ldr	r2, [r4, #0]
 80a2c70:	68a3      	ldr	r3, [r4, #8]
 80a2c72:	6850      	ldr	r0, [r2, #4]
 80a2c74:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a2c76:	220a      	movs	r2, #10
}
 80a2c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a2c7c:	2100      	movs	r1, #0
 80a2c7e:	4418      	add	r0, r3
 80a2c80:	f000 bb2e 	b.w	80a32e0 <strtol>
        const char* const s = d_->json + t_->start;
 80a2c84:	6822      	ldr	r2, [r4, #0]
 80a2c86:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a2c88:	6852      	ldr	r2, [r2, #4]
 80a2c8a:	685b      	ldr	r3, [r3, #4]
 80a2c8c:	5cd0      	ldrb	r0, [r2, r3]
 80a2c8e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a2c92:	4258      	negs	r0, r3
 80a2c94:	4158      	adcs	r0, r3
}
 80a2c96:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a2c98:	2000      	movs	r0, #0
 80a2c9a:	e7fc      	b.n	80a2c96 <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a2c9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2c9c:	460b      	mov	r3, r1
 80a2c9e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a2ca0:	2200      	movs	r2, #0
 80a2ca2:	b510      	push	{r4, lr}
 80a2ca4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2ca6:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a2caa:	480d      	ldr	r0, [pc, #52]	; (80a2ce0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a2cac:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a2cb0:	b1a3      	cbz	r3, 80a2cdc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a2cb2:	781a      	ldrb	r2, [r3, #0]
 80a2cb4:	2a03      	cmp	r2, #3
 80a2cb6:	d006      	beq.n	80a2cc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a2cb8:	b982      	cbnz	r2, 80a2cdc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a2cba:	680a      	ldr	r2, [r1, #0]
 80a2cbc:	6850      	ldr	r0, [r2, #4]
 80a2cbe:	685a      	ldr	r2, [r3, #4]
 80a2cc0:	5c82      	ldrb	r2, [r0, r2]
 80a2cc2:	2a6e      	cmp	r2, #110	; 0x6e
 80a2cc4:	d007      	beq.n	80a2cd6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a2cc6:	680a      	ldr	r2, [r1, #0]
 80a2cc8:	6858      	ldr	r0, [r3, #4]
 80a2cca:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a2ccc:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a2cce:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a2cd0:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a2cd2:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a2cd4:	60e3      	str	r3, [r4, #12]
 80a2cd6:	4620      	mov	r0, r4
 80a2cd8:	f7ff ff71 	bl	80a2bbe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a2cdc:	4620      	mov	r0, r4
 80a2cde:	bd10      	pop	{r4, pc}
 80a2ce0:	080a33ed 	.word	0x080a33ed

080a2ce4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2ce4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a2ce6:	2500      	movs	r5, #0
 80a2ce8:	460b      	mov	r3, r1
 80a2cea:	4604      	mov	r4, r0
 80a2cec:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2cee:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a2cf2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a2cf6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a2cfa:	b14b      	cbz	r3, 80a2d10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a2cfc:	781a      	ldrb	r2, [r3, #0]
 80a2cfe:	2a01      	cmp	r2, #1
 80a2d00:	d106      	bne.n	80a2d10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a2d02:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a2d06:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a2d08:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a2d0a:	6143      	str	r3, [r0, #20]
 80a2d0c:	f7ff ff57 	bl	80a2bbe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a2d10:	4620      	mov	r0, r4
 80a2d12:	bd38      	pop	{r3, r4, r5, pc}

080a2d14 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a2d14:	b510      	push	{r4, lr}
    if (!n_) {
 80a2d16:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a2d18:	4604      	mov	r4, r0
    if (!n_) {
 80a2d1a:	b163      	cbz	r3, 80a2d36 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a2d1c:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a2d1e:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a2d20:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a2d22:	3010      	adds	r0, #16
 80a2d24:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a2d26:	6120      	str	r0, [r4, #16]
    --n_;
 80a2d28:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a2d2a:	b113      	cbz	r3, 80a2d32 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a2d2c:	f7ff feda 	bl	80a2ae4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a2d30:	60a0      	str	r0, [r4, #8]
    return true;
 80a2d32:	2001      	movs	r0, #1
 80a2d34:	e000      	b.n	80a2d38 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a2d36:	4618      	mov	r0, r3
}
 80a2d38:	bd10      	pop	{r4, pc}

080a2d3a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2d3a:	b510      	push	{r4, lr}
    write('}');
 80a2d3c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2d3e:	4604      	mov	r4, r0
    write('}');
 80a2d40:	f7ff ff31 	bl	80a2ba6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a2d44:	2301      	movs	r3, #1
}
 80a2d46:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2d48:	7123      	strb	r3, [r4, #4]
}
 80a2d4a:	bd10      	pop	{r4, pc}

080a2d4c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a2d4c:	b508      	push	{r3, lr}
    switch (state_) {
 80a2d4e:	7903      	ldrb	r3, [r0, #4]
 80a2d50:	2b01      	cmp	r3, #1
 80a2d52:	d002      	beq.n	80a2d5a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a2d54:	2b02      	cmp	r3, #2
 80a2d56:	d004      	beq.n	80a2d62 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a2d58:	bd08      	pop	{r3, pc}
        write(',');
 80a2d5a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a2d5c:	f7ff ff23 	bl	80a2ba6 <_ZN5spark10JSONWriter5writeEc>
}
 80a2d60:	e7fa      	b.n	80a2d58 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a2d62:	213a      	movs	r1, #58	; 0x3a
 80a2d64:	e7fa      	b.n	80a2d5c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a2d66 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a2d66:	b510      	push	{r4, lr}
 80a2d68:	4604      	mov	r4, r0
    writeSeparator();
 80a2d6a:	f7ff ffef 	bl	80a2d4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a2d6e:	4620      	mov	r0, r4
 80a2d70:	217b      	movs	r1, #123	; 0x7b
 80a2d72:	f7ff ff18 	bl	80a2ba6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a2d76:	2300      	movs	r3, #0
}
 80a2d78:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a2d7a:	7123      	strb	r3, [r4, #4]
}
 80a2d7c:	bd10      	pop	{r4, pc}
	...

080a2d80 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a2d80:	b538      	push	{r3, r4, r5, lr}
 80a2d82:	4604      	mov	r4, r0
 80a2d84:	460d      	mov	r5, r1
    writeSeparator();
 80a2d86:	f7ff ffe1 	bl	80a2d4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a2d8a:	6823      	ldr	r3, [r4, #0]
 80a2d8c:	4620      	mov	r0, r4
 80a2d8e:	462a      	mov	r2, r5
 80a2d90:	68db      	ldr	r3, [r3, #12]
 80a2d92:	4903      	ldr	r1, [pc, #12]	; (80a2da0 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a2d94:	4798      	blx	r3
    state_ = NEXT;
 80a2d96:	2301      	movs	r3, #1
}
 80a2d98:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2d9a:	7123      	strb	r3, [r4, #4]
}
 80a2d9c:	bd38      	pop	{r3, r4, r5, pc}
 80a2d9e:	bf00      	nop
 80a2da0:	080a33c7 	.word	0x080a33c7

080a2da4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a2da4:	b538      	push	{r3, r4, r5, lr}
 80a2da6:	4604      	mov	r4, r0
 80a2da8:	460d      	mov	r5, r1
    writeSeparator();
 80a2daa:	f7ff ffcf 	bl	80a2d4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a2dae:	6823      	ldr	r3, [r4, #0]
 80a2db0:	4620      	mov	r0, r4
 80a2db2:	462a      	mov	r2, r5
 80a2db4:	68db      	ldr	r3, [r3, #12]
 80a2db6:	4903      	ldr	r1, [pc, #12]	; (80a2dc4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a2db8:	4798      	blx	r3
    state_ = NEXT;
 80a2dba:	2301      	movs	r3, #1
}
 80a2dbc:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2dbe:	7123      	strb	r3, [r4, #4]
}
 80a2dc0:	bd38      	pop	{r3, r4, r5, pc}
 80a2dc2:	bf00      	nop
 80a2dc4:	080a35cc 	.word	0x080a35cc

080a2dc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a2dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2dcc:	460d      	mov	r5, r1
 80a2dce:	4617      	mov	r7, r2
    write('"');
 80a2dd0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a2dd2:	4604      	mov	r4, r0
    write('"');
 80a2dd4:	f7ff fee7 	bl	80a2ba6 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a2dd8:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a2dda:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a2e74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a2dde:	442f      	add	r7, r5
    while (s != end) {
 80a2de0:	42bd      	cmp	r5, r7
 80a2de2:	462a      	mov	r2, r5
 80a2de4:	d038      	beq.n	80a2e58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a2de6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a2dea:	2e22      	cmp	r6, #34	; 0x22
 80a2dec:	d003      	beq.n	80a2df6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a2dee:	2e5c      	cmp	r6, #92	; 0x5c
 80a2df0:	d001      	beq.n	80a2df6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a2df2:	2e1f      	cmp	r6, #31
 80a2df4:	d8f4      	bhi.n	80a2de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a2df6:	6823      	ldr	r3, [r4, #0]
 80a2df8:	1a52      	subs	r2, r2, r1
 80a2dfa:	4620      	mov	r0, r4
 80a2dfc:	689b      	ldr	r3, [r3, #8]
 80a2dfe:	4798      	blx	r3
            write('\\');
 80a2e00:	215c      	movs	r1, #92	; 0x5c
 80a2e02:	4620      	mov	r0, r4
 80a2e04:	f7ff fecf 	bl	80a2ba6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a2e08:	2e0d      	cmp	r6, #13
 80a2e0a:	d80a      	bhi.n	80a2e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a2e0c:	2e07      	cmp	r6, #7
 80a2e0e:	d91c      	bls.n	80a2e4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a2e10:	f1a6 0308 	sub.w	r3, r6, #8
 80a2e14:	2b05      	cmp	r3, #5
 80a2e16:	d818      	bhi.n	80a2e4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a2e18:	e8df f003 	tbb	[pc, r3]
 80a2e1c:	17110f0d 	.word	0x17110f0d
 80a2e20:	1513      	.short	0x1513
 80a2e22:	2e22      	cmp	r6, #34	; 0x22
 80a2e24:	d001      	beq.n	80a2e2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a2e26:	2e5c      	cmp	r6, #92	; 0x5c
 80a2e28:	d10f      	bne.n	80a2e4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a2e2a:	4631      	mov	r1, r6
                write('b');
 80a2e2c:	4620      	mov	r0, r4
 80a2e2e:	f7ff feba 	bl	80a2ba6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a2e32:	4629      	mov	r1, r5
    while (s != end) {
 80a2e34:	e7d4      	b.n	80a2de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a2e36:	2162      	movs	r1, #98	; 0x62
 80a2e38:	e7f8      	b.n	80a2e2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a2e3a:	2174      	movs	r1, #116	; 0x74
 80a2e3c:	e7f6      	b.n	80a2e2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a2e3e:	216e      	movs	r1, #110	; 0x6e
 80a2e40:	e7f4      	b.n	80a2e2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a2e42:	2166      	movs	r1, #102	; 0x66
 80a2e44:	e7f2      	b.n	80a2e2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a2e46:	2172      	movs	r1, #114	; 0x72
 80a2e48:	e7f0      	b.n	80a2e2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a2e4a:	6823      	ldr	r3, [r4, #0]
 80a2e4c:	4632      	mov	r2, r6
 80a2e4e:	4641      	mov	r1, r8
 80a2e50:	4620      	mov	r0, r4
 80a2e52:	68db      	ldr	r3, [r3, #12]
 80a2e54:	4798      	blx	r3
                break;
 80a2e56:	e7ec      	b.n	80a2e32 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a2e58:	428d      	cmp	r5, r1
 80a2e5a:	d004      	beq.n	80a2e66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a2e5c:	6823      	ldr	r3, [r4, #0]
 80a2e5e:	4620      	mov	r0, r4
 80a2e60:	689b      	ldr	r3, [r3, #8]
 80a2e62:	1a6a      	subs	r2, r5, r1
 80a2e64:	4798      	blx	r3
    }
    write('"');
 80a2e66:	2122      	movs	r1, #34	; 0x22
 80a2e68:	4620      	mov	r0, r4
 80a2e6a:	f7ff fe9c 	bl	80a2ba6 <_ZN5spark10JSONWriter5writeEc>
}
 80a2e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2e72:	bf00      	nop
 80a2e74:	080a35cf 	.word	0x080a35cf

080a2e78 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a2e78:	b570      	push	{r4, r5, r6, lr}
 80a2e7a:	4604      	mov	r4, r0
 80a2e7c:	460d      	mov	r5, r1
 80a2e7e:	4616      	mov	r6, r2
    writeSeparator();
 80a2e80:	f7ff ff64 	bl	80a2d4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a2e84:	4620      	mov	r0, r4
 80a2e86:	4632      	mov	r2, r6
 80a2e88:	4629      	mov	r1, r5
 80a2e8a:	f7ff ff9d 	bl	80a2dc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a2e8e:	2302      	movs	r3, #2
}
 80a2e90:	4620      	mov	r0, r4
    state_ = VALUE;
 80a2e92:	7123      	strb	r3, [r4, #4]
}
 80a2e94:	bd70      	pop	{r4, r5, r6, pc}

080a2e96 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a2e96:	b570      	push	{r4, r5, r6, lr}
 80a2e98:	4604      	mov	r4, r0
 80a2e9a:	460d      	mov	r5, r1
 80a2e9c:	4616      	mov	r6, r2
    writeSeparator();
 80a2e9e:	f7ff ff55 	bl	80a2d4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a2ea2:	4620      	mov	r0, r4
 80a2ea4:	4632      	mov	r2, r6
 80a2ea6:	4629      	mov	r1, r5
 80a2ea8:	f7ff ff8e 	bl	80a2dc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a2eac:	2301      	movs	r3, #1
}
 80a2eae:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2eb0:	7123      	strb	r3, [r4, #4]
}
 80a2eb2:	bd70      	pop	{r4, r5, r6, pc}

080a2eb4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a2eb4:	b510      	push	{r4, lr}
 80a2eb6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2eb8:	6880      	ldr	r0, [r0, #8]
 80a2eba:	b108      	cbz	r0, 80a2ec0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2ebc:	f7fd fba2 	bl	80a0604 <os_mutex_recursive_destroy>
 80a2ec0:	4620      	mov	r0, r4
 80a2ec2:	bd10      	pop	{r4, pc}

080a2ec4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2ec4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2ec6:	b570      	push	{r4, r5, r6, lr}
 80a2ec8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2eca:	d901      	bls.n	80a2ed0 <pinAvailable+0xc>
    return false;
 80a2ecc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2ece:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2ed0:	f1a0 030d 	sub.w	r3, r0, #13
 80a2ed4:	2b02      	cmp	r3, #2
 80a2ed6:	d90b      	bls.n	80a2ef0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2ed8:	2801      	cmp	r0, #1
 80a2eda:	d826      	bhi.n	80a2f2a <pinAvailable+0x66>
 80a2edc:	f000 f87a 	bl	80a2fd4 <_Z19__fetch_global_Wirev>
 80a2ee0:	2100      	movs	r1, #0
 80a2ee2:	7c00      	ldrb	r0, [r0, #16]
 80a2ee4:	f7fd fc1e 	bl	80a0724 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2ee8:	f080 0001 	eor.w	r0, r0, #1
 80a2eec:	b2c0      	uxtb	r0, r0
 80a2eee:	e7ee      	b.n	80a2ece <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2ef0:	4e13      	ldr	r6, [pc, #76]	; (80a2f40 <pinAvailable+0x7c>)
 80a2ef2:	7831      	ldrb	r1, [r6, #0]
 80a2ef4:	f3bf 8f5b 	dmb	ish
 80a2ef8:	f011 0501 	ands.w	r5, r1, #1
 80a2efc:	d10f      	bne.n	80a2f1e <pinAvailable+0x5a>
 80a2efe:	4630      	mov	r0, r6
 80a2f00:	f7fd f8da 	bl	80a00b8 <__cxa_guard_acquire>
 80a2f04:	b158      	cbz	r0, 80a2f1e <pinAvailable+0x5a>
 80a2f06:	4629      	mov	r1, r5
 80a2f08:	480e      	ldr	r0, [pc, #56]	; (80a2f44 <pinAvailable+0x80>)
 80a2f0a:	f7fd fd9b 	bl	80a0a44 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2f0e:	4630      	mov	r0, r6
 80a2f10:	f7fd f8d7 	bl	80a00c2 <__cxa_guard_release>
 80a2f14:	4a0c      	ldr	r2, [pc, #48]	; (80a2f48 <pinAvailable+0x84>)
 80a2f16:	490d      	ldr	r1, [pc, #52]	; (80a2f4c <pinAvailable+0x88>)
 80a2f18:	480a      	ldr	r0, [pc, #40]	; (80a2f44 <pinAvailable+0x80>)
 80a2f1a:	f000 f883 	bl	80a3024 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2f1e:	4b09      	ldr	r3, [pc, #36]	; (80a2f44 <pinAvailable+0x80>)
 80a2f20:	7818      	ldrb	r0, [r3, #0]
 80a2f22:	f7fd fc19 	bl	80a0758 <hal_spi_is_enabled>
 80a2f26:	2800      	cmp	r0, #0
 80a2f28:	d1d0      	bne.n	80a2ecc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2f2a:	3c12      	subs	r4, #18
 80a2f2c:	2c01      	cmp	r4, #1
 80a2f2e:	d805      	bhi.n	80a2f3c <pinAvailable+0x78>
 80a2f30:	f7ff fc96 	bl	80a2860 <_Z22__fetch_global_Serial1v>
 80a2f34:	7c00      	ldrb	r0, [r0, #16]
 80a2f36:	f7fd fbb5 	bl	80a06a4 <hal_usart_is_enabled>
 80a2f3a:	e7d5      	b.n	80a2ee8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2f3c:	2001      	movs	r0, #1
 80a2f3e:	e7c6      	b.n	80a2ece <pinAvailable+0xa>
 80a2f40:	20000584 	.word	0x20000584
 80a2f44:	20000588 	.word	0x20000588
 80a2f48:	20000080 	.word	0x20000080
 80a2f4c:	080a2eb5 	.word	0x080a2eb5

080a2f50 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2f50:	2817      	cmp	r0, #23
{
 80a2f52:	b538      	push	{r3, r4, r5, lr}
 80a2f54:	4604      	mov	r4, r0
 80a2f56:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2f58:	d80a      	bhi.n	80a2f70 <pinMode+0x20>
 80a2f5a:	29ff      	cmp	r1, #255	; 0xff
 80a2f5c:	d008      	beq.n	80a2f70 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2f5e:	f7ff ffb1 	bl	80a2ec4 <pinAvailable>
 80a2f62:	b128      	cbz	r0, 80a2f70 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2f64:	4629      	mov	r1, r5
 80a2f66:	4620      	mov	r0, r4
}
 80a2f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2f6c:	f7fd bb12 	b.w	80a0594 <HAL_Pin_Mode>
}
 80a2f70:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2f74 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2f74:	2300      	movs	r3, #0
 80a2f76:	b513      	push	{r0, r1, r4, lr}
 80a2f78:	4c07      	ldr	r4, [pc, #28]	; (80a2f98 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2f7a:	461a      	mov	r2, r3
 80a2f7c:	4619      	mov	r1, r3
 80a2f7e:	4620      	mov	r0, r4
 80a2f80:	9300      	str	r3, [sp, #0]
 80a2f82:	f7ff fb05 	bl	80a2590 <_ZN9IPAddressC1Ehhhh>
 80a2f86:	4620      	mov	r0, r4
 80a2f88:	4a04      	ldr	r2, [pc, #16]	; (80a2f9c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2f8a:	4905      	ldr	r1, [pc, #20]	; (80a2fa0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2f8c:	b002      	add	sp, #8
 80a2f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2f92:	f000 b847 	b.w	80a3024 <__aeabi_atexit>
 80a2f96:	bf00      	nop
 80a2f98:	20000598 	.word	0x20000598
 80a2f9c:	20000080 	.word	0x20000080
 80a2fa0:	080a24e1 	.word	0x080a24e1

080a2fa4 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a2fa4:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a2fa6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2fa8:	2520      	movs	r5, #32
 80a2faa:	8043      	strh	r3, [r0, #2]
 80a2fac:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2fae:	4e08      	ldr	r6, [pc, #32]	; (80a2fd0 <_Z17acquireWireBufferv+0x2c>)
{
 80a2fb0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2fb2:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2fb4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2fb6:	6085      	str	r5, [r0, #8]
 80a2fb8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2fba:	4628      	mov	r0, r5
 80a2fbc:	f000 f83b 	bl	80a3036 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2fc0:	4631      	mov	r1, r6
	};
 80a2fc2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2fc4:	4628      	mov	r0, r5
 80a2fc6:	f000 f836 	bl	80a3036 <_ZnajRKSt9nothrow_t>
	};
 80a2fca:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a2fcc:	4620      	mov	r0, r4
 80a2fce:	bd70      	pop	{r4, r5, r6, pc}
 80a2fd0:	080a35d5 	.word	0x080a35d5

080a2fd4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2fd4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2fd6:	4d0f      	ldr	r5, [pc, #60]	; (80a3014 <_Z19__fetch_global_Wirev+0x40>)
{
 80a2fd8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2fda:	7829      	ldrb	r1, [r5, #0]
 80a2fdc:	f3bf 8f5b 	dmb	ish
 80a2fe0:	f011 0401 	ands.w	r4, r1, #1
 80a2fe4:	d113      	bne.n	80a300e <_Z19__fetch_global_Wirev+0x3a>
 80a2fe6:	4628      	mov	r0, r5
 80a2fe8:	f7fd f866 	bl	80a00b8 <__cxa_guard_acquire>
 80a2fec:	b178      	cbz	r0, 80a300e <_Z19__fetch_global_Wirev+0x3a>
 80a2fee:	a801      	add	r0, sp, #4
 80a2ff0:	f7ff ffd8 	bl	80a2fa4 <_Z17acquireWireBufferv>
 80a2ff4:	4621      	mov	r1, r4
 80a2ff6:	aa01      	add	r2, sp, #4
 80a2ff8:	4807      	ldr	r0, [pc, #28]	; (80a3018 <_Z19__fetch_global_Wirev+0x44>)
 80a2ffa:	f7ff fc99 	bl	80a2930 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2ffe:	4628      	mov	r0, r5
 80a3000:	f7fd f85f 	bl	80a00c2 <__cxa_guard_release>
 80a3004:	4a05      	ldr	r2, [pc, #20]	; (80a301c <_Z19__fetch_global_Wirev+0x48>)
 80a3006:	4906      	ldr	r1, [pc, #24]	; (80a3020 <_Z19__fetch_global_Wirev+0x4c>)
 80a3008:	4803      	ldr	r0, [pc, #12]	; (80a3018 <_Z19__fetch_global_Wirev+0x44>)
 80a300a:	f000 f80b 	bl	80a3024 <__aeabi_atexit>
	return wire;
}
 80a300e:	4802      	ldr	r0, [pc, #8]	; (80a3018 <_Z19__fetch_global_Wirev+0x44>)
 80a3010:	b007      	add	sp, #28
 80a3012:	bd30      	pop	{r4, r5, pc}
 80a3014:	200005b0 	.word	0x200005b0
 80a3018:	200005b4 	.word	0x200005b4
 80a301c:	20000080 	.word	0x20000080
 80a3020:	080a28d9 	.word	0x080a28d9

080a3024 <__aeabi_atexit>:
 80a3024:	460b      	mov	r3, r1
 80a3026:	4601      	mov	r1, r0
 80a3028:	4618      	mov	r0, r3
 80a302a:	f000 b809 	b.w	80a3040 <__cxa_atexit>

080a302e <_ZdlPvj>:
 80a302e:	f7fd b836 	b.w	80a009e <_ZdlPv>

080a3032 <_ZnwjRKSt9nothrow_t>:
 80a3032:	f7fd b830 	b.w	80a0096 <_Znwj>

080a3036 <_ZnajRKSt9nothrow_t>:
 80a3036:	f7fd b830 	b.w	80a009a <_Znaj>

080a303a <_ZSt25__throw_bad_function_callv>:
 80a303a:	b508      	push	{r3, lr}
 80a303c:	f7fd fcea 	bl	80a0a14 <abort>

080a3040 <__cxa_atexit>:
 80a3040:	b510      	push	{r4, lr}
 80a3042:	4604      	mov	r4, r0
 80a3044:	4804      	ldr	r0, [pc, #16]	; (80a3058 <__cxa_atexit+0x18>)
 80a3046:	4613      	mov	r3, r2
 80a3048:	b120      	cbz	r0, 80a3054 <__cxa_atexit+0x14>
 80a304a:	460a      	mov	r2, r1
 80a304c:	2002      	movs	r0, #2
 80a304e:	4621      	mov	r1, r4
 80a3050:	f3af 8000 	nop.w
 80a3054:	bd10      	pop	{r4, pc}
 80a3056:	bf00      	nop
 80a3058:	00000000 	.word	0x00000000

080a305c <memcpy>:
 80a305c:	440a      	add	r2, r1
 80a305e:	4291      	cmp	r1, r2
 80a3060:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3064:	d100      	bne.n	80a3068 <memcpy+0xc>
 80a3066:	4770      	bx	lr
 80a3068:	b510      	push	{r4, lr}
 80a306a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a306e:	4291      	cmp	r1, r2
 80a3070:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3074:	d1f9      	bne.n	80a306a <memcpy+0xe>
 80a3076:	bd10      	pop	{r4, pc}

080a3078 <memmove>:
 80a3078:	4288      	cmp	r0, r1
 80a307a:	b510      	push	{r4, lr}
 80a307c:	eb01 0402 	add.w	r4, r1, r2
 80a3080:	d902      	bls.n	80a3088 <memmove+0x10>
 80a3082:	4284      	cmp	r4, r0
 80a3084:	4623      	mov	r3, r4
 80a3086:	d807      	bhi.n	80a3098 <memmove+0x20>
 80a3088:	1e43      	subs	r3, r0, #1
 80a308a:	42a1      	cmp	r1, r4
 80a308c:	d008      	beq.n	80a30a0 <memmove+0x28>
 80a308e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3092:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3096:	e7f8      	b.n	80a308a <memmove+0x12>
 80a3098:	4601      	mov	r1, r0
 80a309a:	4402      	add	r2, r0
 80a309c:	428a      	cmp	r2, r1
 80a309e:	d100      	bne.n	80a30a2 <memmove+0x2a>
 80a30a0:	bd10      	pop	{r4, pc}
 80a30a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a30a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a30aa:	e7f7      	b.n	80a309c <memmove+0x24>

080a30ac <memset>:
 80a30ac:	4603      	mov	r3, r0
 80a30ae:	4402      	add	r2, r0
 80a30b0:	4293      	cmp	r3, r2
 80a30b2:	d100      	bne.n	80a30b6 <memset+0xa>
 80a30b4:	4770      	bx	lr
 80a30b6:	f803 1b01 	strb.w	r1, [r3], #1
 80a30ba:	e7f9      	b.n	80a30b0 <memset+0x4>

080a30bc <srand>:
 80a30bc:	b538      	push	{r3, r4, r5, lr}
 80a30be:	4b0d      	ldr	r3, [pc, #52]	; (80a30f4 <srand+0x38>)
 80a30c0:	4604      	mov	r4, r0
 80a30c2:	681d      	ldr	r5, [r3, #0]
 80a30c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a30c6:	b97b      	cbnz	r3, 80a30e8 <srand+0x2c>
 80a30c8:	2018      	movs	r0, #24
 80a30ca:	f7fd fc7b 	bl	80a09c4 <malloc>
 80a30ce:	4a0a      	ldr	r2, [pc, #40]	; (80a30f8 <srand+0x3c>)
 80a30d0:	4b0a      	ldr	r3, [pc, #40]	; (80a30fc <srand+0x40>)
 80a30d2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a30d4:	e9c0 2300 	strd	r2, r3, [r0]
 80a30d8:	4b09      	ldr	r3, [pc, #36]	; (80a3100 <srand+0x44>)
 80a30da:	2201      	movs	r2, #1
 80a30dc:	6083      	str	r3, [r0, #8]
 80a30de:	230b      	movs	r3, #11
 80a30e0:	8183      	strh	r3, [r0, #12]
 80a30e2:	2300      	movs	r3, #0
 80a30e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a30e8:	2200      	movs	r2, #0
 80a30ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a30ec:	611c      	str	r4, [r3, #16]
 80a30ee:	615a      	str	r2, [r3, #20]
 80a30f0:	bd38      	pop	{r3, r4, r5, pc}
 80a30f2:	bf00      	nop
 80a30f4:	2000001c 	.word	0x2000001c
 80a30f8:	abcd330e 	.word	0xabcd330e
 80a30fc:	e66d1234 	.word	0xe66d1234
 80a3100:	0005deec 	.word	0x0005deec

080a3104 <strchr>:
 80a3104:	4603      	mov	r3, r0
 80a3106:	b2c9      	uxtb	r1, r1
 80a3108:	4618      	mov	r0, r3
 80a310a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a310e:	b112      	cbz	r2, 80a3116 <strchr+0x12>
 80a3110:	428a      	cmp	r2, r1
 80a3112:	d1f9      	bne.n	80a3108 <strchr+0x4>
 80a3114:	4770      	bx	lr
 80a3116:	2900      	cmp	r1, #0
 80a3118:	bf18      	it	ne
 80a311a:	2000      	movne	r0, #0
 80a311c:	4770      	bx	lr

080a311e <strchrnul>:
 80a311e:	b510      	push	{r4, lr}
 80a3120:	4604      	mov	r4, r0
 80a3122:	f7ff ffef 	bl	80a3104 <strchr>
 80a3126:	b918      	cbnz	r0, 80a3130 <strchrnul+0x12>
 80a3128:	4620      	mov	r0, r4
 80a312a:	f000 f830 	bl	80a318e <strlen>
 80a312e:	4420      	add	r0, r4
 80a3130:	bd10      	pop	{r4, pc}

080a3132 <strcmp>:
 80a3132:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3136:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a313a:	2a01      	cmp	r2, #1
 80a313c:	bf28      	it	cs
 80a313e:	429a      	cmpcs	r2, r3
 80a3140:	d0f7      	beq.n	80a3132 <strcmp>
 80a3142:	1ad0      	subs	r0, r2, r3
 80a3144:	4770      	bx	lr

080a3146 <strcpy>:
 80a3146:	4603      	mov	r3, r0
 80a3148:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a314c:	f803 2b01 	strb.w	r2, [r3], #1
 80a3150:	2a00      	cmp	r2, #0
 80a3152:	d1f9      	bne.n	80a3148 <strcpy+0x2>
 80a3154:	4770      	bx	lr
	...

080a3158 <strdup>:
 80a3158:	4b02      	ldr	r3, [pc, #8]	; (80a3164 <strdup+0xc>)
 80a315a:	4601      	mov	r1, r0
 80a315c:	6818      	ldr	r0, [r3, #0]
 80a315e:	f000 b803 	b.w	80a3168 <_strdup_r>
 80a3162:	bf00      	nop
 80a3164:	2000001c 	.word	0x2000001c

080a3168 <_strdup_r>:
 80a3168:	b570      	push	{r4, r5, r6, lr}
 80a316a:	4604      	mov	r4, r0
 80a316c:	4608      	mov	r0, r1
 80a316e:	460d      	mov	r5, r1
 80a3170:	f000 f80d 	bl	80a318e <strlen>
 80a3174:	1c46      	adds	r6, r0, #1
 80a3176:	4631      	mov	r1, r6
 80a3178:	4620      	mov	r0, r4
 80a317a:	f7fd fc53 	bl	80a0a24 <_malloc_r>
 80a317e:	4604      	mov	r4, r0
 80a3180:	b118      	cbz	r0, 80a318a <_strdup_r+0x22>
 80a3182:	4632      	mov	r2, r6
 80a3184:	4629      	mov	r1, r5
 80a3186:	f7ff ff69 	bl	80a305c <memcpy>
 80a318a:	4620      	mov	r0, r4
 80a318c:	bd70      	pop	{r4, r5, r6, pc}

080a318e <strlen>:
 80a318e:	4603      	mov	r3, r0
 80a3190:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3194:	2a00      	cmp	r2, #0
 80a3196:	d1fb      	bne.n	80a3190 <strlen+0x2>
 80a3198:	1a18      	subs	r0, r3, r0
 80a319a:	3801      	subs	r0, #1
 80a319c:	4770      	bx	lr

080a319e <strncmp>:
 80a319e:	b510      	push	{r4, lr}
 80a31a0:	b16a      	cbz	r2, 80a31be <strncmp+0x20>
 80a31a2:	3901      	subs	r1, #1
 80a31a4:	1884      	adds	r4, r0, r2
 80a31a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a31aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a31ae:	4293      	cmp	r3, r2
 80a31b0:	d103      	bne.n	80a31ba <strncmp+0x1c>
 80a31b2:	42a0      	cmp	r0, r4
 80a31b4:	d001      	beq.n	80a31ba <strncmp+0x1c>
 80a31b6:	2b00      	cmp	r3, #0
 80a31b8:	d1f5      	bne.n	80a31a6 <strncmp+0x8>
 80a31ba:	1a98      	subs	r0, r3, r2
 80a31bc:	bd10      	pop	{r4, pc}
 80a31be:	4610      	mov	r0, r2
 80a31c0:	e7fc      	b.n	80a31bc <strncmp+0x1e>

080a31c2 <strrchr>:
 80a31c2:	b538      	push	{r3, r4, r5, lr}
 80a31c4:	4603      	mov	r3, r0
 80a31c6:	460c      	mov	r4, r1
 80a31c8:	b969      	cbnz	r1, 80a31e6 <strrchr+0x24>
 80a31ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a31ce:	f7ff bf99 	b.w	80a3104 <strchr>
 80a31d2:	4605      	mov	r5, r0
 80a31d4:	1c43      	adds	r3, r0, #1
 80a31d6:	4621      	mov	r1, r4
 80a31d8:	4618      	mov	r0, r3
 80a31da:	f7ff ff93 	bl	80a3104 <strchr>
 80a31de:	2800      	cmp	r0, #0
 80a31e0:	d1f7      	bne.n	80a31d2 <strrchr+0x10>
 80a31e2:	4628      	mov	r0, r5
 80a31e4:	bd38      	pop	{r3, r4, r5, pc}
 80a31e6:	2500      	movs	r5, #0
 80a31e8:	e7f5      	b.n	80a31d6 <strrchr+0x14>
	...

080a31ec <_strtol_l.isra.0>:
 80a31ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a31f0:	468c      	mov	ip, r1
 80a31f2:	4686      	mov	lr, r0
 80a31f4:	4e39      	ldr	r6, [pc, #228]	; (80a32dc <_strtol_l.isra.0+0xf0>)
 80a31f6:	4660      	mov	r0, ip
 80a31f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a31fc:	5da5      	ldrb	r5, [r4, r6]
 80a31fe:	f015 0508 	ands.w	r5, r5, #8
 80a3202:	d1f8      	bne.n	80a31f6 <_strtol_l.isra.0+0xa>
 80a3204:	2c2d      	cmp	r4, #45	; 0x2d
 80a3206:	d133      	bne.n	80a3270 <_strtol_l.isra.0+0x84>
 80a3208:	f04f 0801 	mov.w	r8, #1
 80a320c:	f89c 4000 	ldrb.w	r4, [ip]
 80a3210:	f100 0c02 	add.w	ip, r0, #2
 80a3214:	2b00      	cmp	r3, #0
 80a3216:	d05c      	beq.n	80a32d2 <_strtol_l.isra.0+0xe6>
 80a3218:	2b10      	cmp	r3, #16
 80a321a:	d10c      	bne.n	80a3236 <_strtol_l.isra.0+0x4a>
 80a321c:	2c30      	cmp	r4, #48	; 0x30
 80a321e:	d10a      	bne.n	80a3236 <_strtol_l.isra.0+0x4a>
 80a3220:	f89c 0000 	ldrb.w	r0, [ip]
 80a3224:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3228:	2858      	cmp	r0, #88	; 0x58
 80a322a:	d14d      	bne.n	80a32c8 <_strtol_l.isra.0+0xdc>
 80a322c:	2310      	movs	r3, #16
 80a322e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a3232:	f10c 0c02 	add.w	ip, ip, #2
 80a3236:	2600      	movs	r6, #0
 80a3238:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a323c:	3f01      	subs	r7, #1
 80a323e:	fbb7 f9f3 	udiv	r9, r7, r3
 80a3242:	4630      	mov	r0, r6
 80a3244:	fb03 7a19 	mls	sl, r3, r9, r7
 80a3248:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a324c:	2d09      	cmp	r5, #9
 80a324e:	d818      	bhi.n	80a3282 <_strtol_l.isra.0+0x96>
 80a3250:	462c      	mov	r4, r5
 80a3252:	42a3      	cmp	r3, r4
 80a3254:	dd24      	ble.n	80a32a0 <_strtol_l.isra.0+0xb4>
 80a3256:	1c75      	adds	r5, r6, #1
 80a3258:	d007      	beq.n	80a326a <_strtol_l.isra.0+0x7e>
 80a325a:	4581      	cmp	r9, r0
 80a325c:	d31d      	bcc.n	80a329a <_strtol_l.isra.0+0xae>
 80a325e:	d101      	bne.n	80a3264 <_strtol_l.isra.0+0x78>
 80a3260:	45a2      	cmp	sl, r4
 80a3262:	db1a      	blt.n	80a329a <_strtol_l.isra.0+0xae>
 80a3264:	2601      	movs	r6, #1
 80a3266:	fb00 4003 	mla	r0, r0, r3, r4
 80a326a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a326e:	e7eb      	b.n	80a3248 <_strtol_l.isra.0+0x5c>
 80a3270:	2c2b      	cmp	r4, #43	; 0x2b
 80a3272:	bf08      	it	eq
 80a3274:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a3278:	46a8      	mov	r8, r5
 80a327a:	bf08      	it	eq
 80a327c:	f100 0c02 	addeq.w	ip, r0, #2
 80a3280:	e7c8      	b.n	80a3214 <_strtol_l.isra.0+0x28>
 80a3282:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a3286:	2d19      	cmp	r5, #25
 80a3288:	d801      	bhi.n	80a328e <_strtol_l.isra.0+0xa2>
 80a328a:	3c37      	subs	r4, #55	; 0x37
 80a328c:	e7e1      	b.n	80a3252 <_strtol_l.isra.0+0x66>
 80a328e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a3292:	2d19      	cmp	r5, #25
 80a3294:	d804      	bhi.n	80a32a0 <_strtol_l.isra.0+0xb4>
 80a3296:	3c57      	subs	r4, #87	; 0x57
 80a3298:	e7db      	b.n	80a3252 <_strtol_l.isra.0+0x66>
 80a329a:	f04f 36ff 	mov.w	r6, #4294967295
 80a329e:	e7e4      	b.n	80a326a <_strtol_l.isra.0+0x7e>
 80a32a0:	1c73      	adds	r3, r6, #1
 80a32a2:	d106      	bne.n	80a32b2 <_strtol_l.isra.0+0xc6>
 80a32a4:	2322      	movs	r3, #34	; 0x22
 80a32a6:	4638      	mov	r0, r7
 80a32a8:	f8ce 3000 	str.w	r3, [lr]
 80a32ac:	b942      	cbnz	r2, 80a32c0 <_strtol_l.isra.0+0xd4>
 80a32ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a32b2:	f1b8 0f00 	cmp.w	r8, #0
 80a32b6:	d000      	beq.n	80a32ba <_strtol_l.isra.0+0xce>
 80a32b8:	4240      	negs	r0, r0
 80a32ba:	2a00      	cmp	r2, #0
 80a32bc:	d0f7      	beq.n	80a32ae <_strtol_l.isra.0+0xc2>
 80a32be:	b10e      	cbz	r6, 80a32c4 <_strtol_l.isra.0+0xd8>
 80a32c0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a32c4:	6011      	str	r1, [r2, #0]
 80a32c6:	e7f2      	b.n	80a32ae <_strtol_l.isra.0+0xc2>
 80a32c8:	2430      	movs	r4, #48	; 0x30
 80a32ca:	2b00      	cmp	r3, #0
 80a32cc:	d1b3      	bne.n	80a3236 <_strtol_l.isra.0+0x4a>
 80a32ce:	2308      	movs	r3, #8
 80a32d0:	e7b1      	b.n	80a3236 <_strtol_l.isra.0+0x4a>
 80a32d2:	2c30      	cmp	r4, #48	; 0x30
 80a32d4:	d0a4      	beq.n	80a3220 <_strtol_l.isra.0+0x34>
 80a32d6:	230a      	movs	r3, #10
 80a32d8:	e7ad      	b.n	80a3236 <_strtol_l.isra.0+0x4a>
 80a32da:	bf00      	nop
 80a32dc:	080a35d7 	.word	0x080a35d7

080a32e0 <strtol>:
 80a32e0:	4613      	mov	r3, r2
 80a32e2:	460a      	mov	r2, r1
 80a32e4:	4601      	mov	r1, r0
 80a32e6:	4802      	ldr	r0, [pc, #8]	; (80a32f0 <strtol+0x10>)
 80a32e8:	6800      	ldr	r0, [r0, #0]
 80a32ea:	f7ff bf7f 	b.w	80a31ec <_strtol_l.isra.0>
 80a32ee:	bf00      	nop
 80a32f0:	2000001c 	.word	0x2000001c

080a32f4 <dynalib_user>:
 80a32f4:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a3304:	00000000 2c64255b 252c6425 70005d64     ....[%d,%d,%d].p
 80a3314:	696c6275 64656873 7325203a 00000000     ublished: %s....

080a3324 <_ZTVN5spark10LogHandlerE>:
	...
 80a3334:	080a00a5 080a00c9                       ........

080a333c <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a3344:	080a0105 080a0139 080a1ad1 080a00cb     ....9...........
 80a3354:	65656873 73655474 77003174 6e697269     sheetTest1.wirin
 80a3364:	79530067 6d657473 656c7320 63207065     g.System sleep c
 80a3374:	69666e6f 61727567 6e6f6974 20736920     onfiguration is 
 80a3384:	61766e69 2e64696c 75616200 65530064     invalid..baud.Se
 80a3394:	6c616972 42535500 69726553 00316c61     rial.USBSerial1.
 80a33a4:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 80a33b4:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 80a33c4:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
 80a33d4:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
 80a33e4:	20736c69 0d00203d 006d000a 00660063     ils = ....m.c.f.
 80a33f4:	66006e6c 0074006e 65646f63 74656400     ln.fn.t.code.det
 80a3404:	006c6961                                ail.

080a3408 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a3410:	080a0e21 080a0e47 080a0e07 080a2b13     !...G........+..

080a3420 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a3428:	080a12fd 080a1315 080a1ad1 080a00cb     ................

080a3438 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a3440:	080a1329 080a133d 080a1c79 080a0e0f     )...=...y.......

080a3450 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a3458:	080a0e1f 080a0e55 080a1a0d 080a0e11     ....U...........

080a3468 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a3470:	080a0e1d 080a0e63 080a1225 080a0e7f     ....c...%.......
 80a3480:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 80a3490:	007a2553 74637361 00656d69              S%z.asctime.

080a349c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a34a4:	080a1fa9 080a1faf 080a1fed 080a1fbd     ................
 80a34b4:	080a1fab                                ....

080a34b8 <_ZTV9IPAddress>:
	...
 80a34c0:	080a24e3 080a24e1 080a2515              .$...$...%..

080a34cc <_ZTV9USBSerial>:
	...
 80a34d4:	080a25ad 080a2613 080a25eb 080a0cf5     .%...&...%......
 80a34e4:	080a25dd 080a25af 080a25bf 080a260d     .%...%...%...&..
 80a34f4:	080a25cf 080a25a9                       .%...%..

080a34fc <_ZTV11USARTSerial>:
	...
 80a3504:	080a27a9 080a2811 080a27ed 080a0cf5     .'...(...'......
 80a3514:	080a27bd 080a27d9 080a27cb 080a27e7     .'...'...'...'..
 80a3524:	080a27ab 080a27af                       .'...'..

080a352c <_ZTV7TwoWire>:
	...
 80a3534:	080a28d9 080a2923 080a28fb 080a28db     .(..#)...(...(..
 80a3544:	080a2903 080a290b 080a2913 080a291b     .)...)...)...)..

080a3554 <_ZTVN5spark9WiFiClassE>:
	...
 80a355c:	080a29eb 080a29e1 080a29d7 080a2955     .)...)...)..U)..
 80a356c:	080a0dfb 080a29cb 080a2a49 080a2a51     .....)..I*..Q*..
 80a357c:	080a29bf 080a29b7 080a29ad 080a29a3     .)...)...)...)..
 80a358c:	080a295f                                _)..

080a3590 <_ZTVN5spark12NetworkClassE>:
	...
 80a3598:	080a2a09 080a2a13 080a2a1d 080a2a27     .*...*...*..'*..
 80a35a8:	080a2a31 080a2a3d 080a2a49 080a2a51     1*..=*..I*..Q*..
 80a35b8:	080a2a59 080a2a65 080a2a6d 080a2a77     Y*..e*..m*..w*..
 80a35c8:	080a2a81 75007525 78343025               .*..%u.u%04x.

080a35d5 <_ZSt7nothrow>:
	...

080a35d6 <_ctype_>:
 80a35d6:	20202000 20202020 28282020 20282828     .         ((((( 
 80a35e6:	20202020 20202020 20202020 20202020                     
 80a35f6:	10108820 10101010 10101010 10101010      ...............
 80a3606:	04040410 04040404 10040404 10101010     ................
 80a3616:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a3626:	01010101 01010101 01010101 10101010     ................
 80a3636:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a3646:	02020202 02020202 02020202 10101010     ................
 80a3656:	00000020 00000000 00000000 00000000      ...............
	...

080a36d7 <link_const_variable_data_end>:
	...

080a36d8 <link_constructors_location>:
 80a36d8:	080a04d9 	.word	0x080a04d9
 80a36dc:	080a0ba1 	.word	0x080a0ba1
 80a36e0:	080a1ac1 	.word	0x080a1ac1
 80a36e4:	080a1ded 	.word	0x080a1ded
 80a36e8:	080a1e41 	.word	0x080a1e41
 80a36ec:	080a29f5 	.word	0x080a29f5
 80a36f0:	080a2ad1 	.word	0x080a2ad1
 80a36f4:	080a2f75 	.word	0x080a2f75

080a36f8 <link_constructors_end>:
	...
