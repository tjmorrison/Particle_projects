
c:/Users/tjmor/OneDrive/Documents/Particle_projects/Radar_PIR_BCA_V1/target/2.1.0/photon/Radar_PIR_BCA_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003584  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a35a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a35a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000560  20000074  20000074  00030074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3618  080a3618  00023618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3640  080a3640  00023640  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010d8f9  00000000  00000000  00023644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001456c  00000000  00000000  00130f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d474  00000000  00000000  001454a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002328  00000000  00000000  0016291d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005a08  00000000  00000000  00164c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026c28  00000000  00000000  0016a64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ceff  00000000  00000000  00191275  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5b20  00000000  00000000  001be174  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005b60  00000000  00000000  00273c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 ff65 	bl	80a2efc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 ff87 	bl	80a2f4c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a35a4 	.word	0x080a35a4
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000074 	.word	0x20000074
 80a0054:	200005d4 	.word	0x200005d4
 80a0058:	200005d4 	.word	0x200005d4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fedb 	bl	80a1e18 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a3578 	.word	0x080a3578
 80a0080:	080a3598 	.word	0x080a3598

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b861 	b.w	80a014a <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f8c1 	bl	80a0210 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 be83 	b.w	80a1d9c <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bbff 	b.w	80a0898 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bbfd 	b.w	80a0898 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bc03 	b.w	80a08a8 <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f000 fb16 	bl	80a06dc <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a04b9 	.word	0x080a04b9

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ca:	6a00      	ldr	r0, [r0, #32]
 80a00cc:	6803      	ldr	r3, [r0, #0]
 80a00ce:	68db      	ldr	r3, [r3, #12]
 80a00d0:	4718      	bx	r3
	...

080a00d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	4b09      	ldr	r3, [pc, #36]	; (80a0100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a00da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a00dc:	f000 ff4e 	bl	80a0f7c <_ZN5spark10LogManager8instanceEv>
 80a00e0:	4621      	mov	r1, r4
 80a00e2:	f001 f97d 	bl	80a13e0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a00e6:	f002 fa37 	bl	80a2558 <_Z16_fetch_usbserialv>
 80a00ea:	f002 fa1b 	bl	80a2524 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a00ee:	4620      	mov	r0, r4
 80a00f0:	4b04      	ldr	r3, [pc, #16]	; (80a0104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a00f2:	f840 3b04 	str.w	r3, [r0], #4
 80a00f6:	f001 f861 	bl	80a11bc <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a00fa:	4620      	mov	r0, r4
 80a00fc:	bd10      	pop	{r4, pc}
 80a00fe:	bf00      	nop
 80a0100:	080a31e4 	.word	0x080a31e4
 80a0104:	080a31cc 	.word	0x080a31cc

080a0108 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a0108:	b510      	push	{r4, lr}
 80a010a:	4604      	mov	r4, r0
    }
 80a010c:	f7ff ffe2 	bl	80a00d4 <_ZN5spark16SerialLogHandlerD1Ev>
 80a0110:	4620      	mov	r0, r4
 80a0112:	2124      	movs	r1, #36	; 0x24
 80a0114:	f002 fedb 	bl	80a2ece <_ZdlPvj>
 80a0118:	4620      	mov	r0, r4
 80a011a:	bd10      	pop	{r4, pc}

080a011c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a011c:	b40e      	push	{r1, r2, r3}
 80a011e:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0120:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a0122:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a0124:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a0126:	b08d      	sub	sp, #52	; 0x34
 80a0128:	aa0f      	add	r2, sp, #60	; 0x3c
 80a012a:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a012e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0132:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a0136:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0138:	201e      	movs	r0, #30
 80a013a:	aa04      	add	r2, sp, #16
 80a013c:	f000 fade 	bl	80a06fc <log_message_v>
}
 80a0140:	b00d      	add	sp, #52	; 0x34
 80a0142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0146:	b003      	add	sp, #12
 80a0148:	4770      	bx	lr

080a014a <setup>:




// setup() runs once, when the device is first turned on.
void setup() {
 80a014a:	b508      	push	{r3, lr}
    
  //Make variable public
  //Particle.variable("Signal_data_matri", signal_data);
 
  //Set the digital pins to input
  pinMode(D2, INPUT);
 80a014c:	2100      	movs	r1, #0
 80a014e:	2002      	movs	r0, #2
 80a0150:	f002 fe3c 	bl	80a2dcc <pinMode>
  pinMode(D3, INPUT);
 80a0154:	2100      	movs	r1, #0
 80a0156:	2003      	movs	r0, #3
 80a0158:	f002 fe38 	bl	80a2dcc <pinMode>
  pinMode(D4, INPUT);

}
 80a015c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(D4, INPUT);
 80a0160:	2100      	movs	r1, #0
 80a0162:	2004      	movs	r0, #4
 80a0164:	f002 be32 	b.w	80a2dcc <pinMode>

080a0168 <_Z20PublishToGoogleSheetv>:
    }
     
}

//Publish to google sheets function
void PublishToGoogleSheet() {
 80a0168:	b510      	push	{r4, lr}
    char buf[128];

    snprintf(buf, sizeof(buf), "[%d,%d,%d]", signal_data[1][3],signal_data[2][3],signal_data[3][3]);
 80a016a:	4b18      	ldr	r3, [pc, #96]	; (80a01cc <_Z20PublishToGoogleSheetv+0x64>)
void PublishToGoogleSheet() {
 80a016c:	b0a4      	sub	sp, #144	; 0x90
    snprintf(buf, sizeof(buf), "[%d,%d,%d]", signal_data[1][3],signal_data[2][3],signal_data[3][3]);
 80a016e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80a0170:	2180      	movs	r1, #128	; 0x80
 80a0172:	9201      	str	r2, [sp, #4]
 80a0174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80a0176:	a804      	add	r0, sp, #16
 80a0178:	9200      	str	r2, [sp, #0]
 80a017a:	699b      	ldr	r3, [r3, #24]
 80a017c:	4a14      	ldr	r2, [pc, #80]	; (80a01d0 <_Z20PublishToGoogleSheetv+0x68>)
 80a017e:	f000 fba3 	bl	80a08c8 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0182:	4b14      	ldr	r3, [pc, #80]	; (80a01d4 <_Z20PublishToGoogleSheetv+0x6c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0184:	4914      	ldr	r1, [pc, #80]	; (80a01d8 <_Z20PublishToGoogleSheetv+0x70>)
 80a0186:	781b      	ldrb	r3, [r3, #0]
 80a0188:	aa04      	add	r2, sp, #16
 80a018a:	f88d 3000 	strb.w	r3, [sp]
 80a018e:	6809      	ldr	r1, [r1, #0]
 80a0190:	233c      	movs	r3, #60	; 0x3c
 80a0192:	a802      	add	r0, sp, #8
 80a0194:	f001 ff98 	bl	80a20c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0198:	9c03      	ldr	r4, [sp, #12]
 80a019a:	b17c      	cbz	r4, 80a01bc <_Z20PublishToGoogleSheetv+0x54>
      if (--_M_use_count == 0)
 80a019c:	6863      	ldr	r3, [r4, #4]
 80a019e:	3b01      	subs	r3, #1
 80a01a0:	6063      	str	r3, [r4, #4]
 80a01a2:	b95b      	cbnz	r3, 80a01bc <_Z20PublishToGoogleSheetv+0x54>
          _M_dispose();
 80a01a4:	6823      	ldr	r3, [r4, #0]
 80a01a6:	4620      	mov	r0, r4
 80a01a8:	689b      	ldr	r3, [r3, #8]
 80a01aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a01ac:	68a3      	ldr	r3, [r4, #8]
 80a01ae:	3b01      	subs	r3, #1
 80a01b0:	60a3      	str	r3, [r4, #8]
 80a01b2:	b91b      	cbnz	r3, 80a01bc <_Z20PublishToGoogleSheetv+0x54>
            _M_destroy();
 80a01b4:	6823      	ldr	r3, [r4, #0]
 80a01b6:	4620      	mov	r0, r4
 80a01b8:	68db      	ldr	r3, [r3, #12]
 80a01ba:	4798      	blx	r3

    Particle.publish(eventName, buf, PRIVATE);
    Log.info("published: %s", buf);
 80a01bc:	4907      	ldr	r1, [pc, #28]	; (80a01dc <_Z20PublishToGoogleSheetv+0x74>)
 80a01be:	4808      	ldr	r0, [pc, #32]	; (80a01e0 <_Z20PublishToGoogleSheetv+0x78>)
 80a01c0:	aa04      	add	r2, sp, #16
 80a01c2:	f7ff ffab 	bl	80a011c <_ZNK5spark6Logger4infoEPKcz>
}
 80a01c6:	b024      	add	sp, #144	; 0x90
 80a01c8:	bd10      	pop	{r4, pc}
 80a01ca:	bf00      	nop
 80a01cc:	200000a4 	.word	0x200000a4
 80a01d0:	080a31a8 	.word	0x080a31a8
 80a01d4:	20000078 	.word	0x20000078
 80a01d8:	20000000 	.word	0x20000000
 80a01dc:	080a31b3 	.word	0x080a31b3
 80a01e0:	200000e4 	.word	0x200000e4

080a01e4 <_Z8CheckDIOPA3_i>:

//Function to handle DIO input
void CheckDIO(int signal_data[][3]){
 80a01e4:	b510      	push	{r4, lr}
      }
    }
    else{
      if (signal_data[ii][2] == HIGH){
        // we have just turned off
        signal_data[ii][2] = LOW;
 80a01e6:	2400      	movs	r4, #0
 80a01e8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    if (signal_data[ii][1] == HIGH){ // check if the input is HIGH
 80a01ec:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 80a01f0:	2a01      	cmp	r2, #1
 80a01f2:	d108      	bne.n	80a0206 <_Z8CheckDIOPA3_i+0x22>
      if (signal_data[ii][2] == LOW){
 80a01f4:	b91b      	cbnz	r3, 80a01fe <_Z8CheckDIOPA3_i+0x1a>
        signal_data[ii][3] = signal_data[ii][3]+1; // we only count at the start of motion
 80a01f6:	68c3      	ldr	r3, [r0, #12]
        signal_data[ii][2] = HIGH;
 80a01f8:	6082      	str	r2, [r0, #8]
        signal_data[ii][3] = signal_data[ii][3]+1; // we only count at the start of motion
 80a01fa:	3301      	adds	r3, #1
 80a01fc:	60c3      	str	r3, [r0, #12]
  for (int ii = 0; ii < 3; ii++){
 80a01fe:	300c      	adds	r0, #12
 80a0200:	4288      	cmp	r0, r1
 80a0202:	d1f3      	bne.n	80a01ec <_Z8CheckDIOPA3_i+0x8>
      }
    } // end DIO logic
  }
}
 80a0204:	bd10      	pop	{r4, pc}
      if (signal_data[ii][2] == HIGH){
 80a0206:	2b01      	cmp	r3, #1
        signal_data[ii][2] = LOW;
 80a0208:	bf08      	it	eq
 80a020a:	6084      	streq	r4, [r0, #8]
 80a020c:	e7f7      	b.n	80a01fe <_Z8CheckDIOPA3_i+0x1a>
	...

080a0210 <loop>:
void loop() {
 80a0210:	b5f0      	push	{r4, r5, r6, r7, lr}
  signal_data[1][1] =  digitalRead(Pin_Radar);
 80a0212:	2002      	movs	r0, #2
void loop() {
 80a0214:	b08b      	sub	sp, #44	; 0x2c
  signal_data[1][1] =  digitalRead(Pin_Radar);
 80a0216:	f002 fdea 	bl	80a2dee <digitalRead>
 80a021a:	4e2c      	ldr	r6, [pc, #176]	; (80a02cc <loop+0xbc>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 80a021c:	2500      	movs	r5, #0
 80a021e:	6130      	str	r0, [r6, #16]
  signal_data[2][1] =  digitalRead(Pin_PIR);
 80a0220:	2003      	movs	r0, #3
 80a0222:	f002 fde4 	bl	80a2dee <digitalRead>
 80a0226:	61f0      	str	r0, [r6, #28]
  signal_data[3][1] = digitalRead(Pin_Beacon);
 80a0228:	2004      	movs	r0, #4
 80a022a:	f002 fde0 	bl	80a2dee <digitalRead>
 80a022e:	62b0      	str	r0, [r6, #40]	; 0x28
  CheckDIO(signal_data);
 80a0230:	4630      	mov	r0, r6
 80a0232:	f7ff ffd7 	bl	80a01e4 <_Z8CheckDIOPA3_i>
        : config_(config) {
 80a0236:	ab05      	add	r3, sp, #20
 80a0238:	9304      	str	r3, [sp, #16]
              valid_(true) {
 80a023a:	2301      	movs	r3, #1
        config_.size = sizeof(hal_sleep_config_t);
 80a023c:	4f24      	ldr	r7, [pc, #144]	; (80a02d0 <loop+0xc0>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 80a023e:	2010      	movs	r0, #16
 80a0240:	4924      	ldr	r1, [pc, #144]	; (80a02d4 <loop+0xc4>)
        config_.wakeup_sources = nullptr;
 80a0242:	e9cd 5507 	strd	r5, r5, [sp, #28]
              valid_(true) {
 80a0246:	f8ad 5019 	strh.w	r5, [sp, #25]
 80a024a:	f88d 501b 	strb.w	r5, [sp, #27]
 80a024e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        config_.size = sizeof(hal_sleep_config_t);
 80a0252:	9705      	str	r7, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 80a0254:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 80a0258:	f002 fe3b 	bl	80a2ed2 <_ZnwjRKSt9nothrow_t>
 80a025c:	4604      	mov	r4, r0
 80a025e:	2800      	cmp	r0, #0
 80a0260:	d02f      	beq.n	80a02c2 <loop+0xb2>
 80a0262:	2210      	movs	r2, #16
 80a0264:	4629      	mov	r1, r5
 80a0266:	f002 fe71 	bl	80a2f4c <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 80a026a:	2304      	movs	r3, #4
 80a026c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 80a026e:	9b08      	ldr	r3, [sp, #32]
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 80a0270:	6027      	str	r7, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
 80a0272:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
 80a0274:	4b18      	ldr	r3, [pc, #96]	; (80a02d8 <loop+0xc8>)
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 80a0276:	9408      	str	r4, [sp, #32]
            wakeupSource->ms = ms;
 80a0278:	60e3      	str	r3, [r4, #12]
  System.sleep(config);
 80a027a:	a801      	add	r0, sp, #4
 80a027c:	a904      	add	r1, sp, #16
 80a027e:	f000 fb95 	bl	80a09ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a0282:	9801      	ldr	r0, [sp, #4]
 80a0284:	b108      	cbz	r0, 80a028a <loop+0x7a>
            free(wakeupSource_);
 80a0286:	f000 fb0f 	bl	80a08a8 <free>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a028a:	f000 f91d 	bl	80a04c8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPublish >= publishPeriod.count()) {
 80a028e:	4c13      	ldr	r4, [pc, #76]	; (80a02dc <loop+0xcc>)
 80a0290:	6823      	ldr	r3, [r4, #0]
 80a0292:	1ac0      	subs	r0, r0, r3
 80a0294:	4b12      	ldr	r3, [pc, #72]	; (80a02e0 <loop+0xd0>)
 80a0296:	4298      	cmp	r0, r3
 80a0298:	d30b      	bcc.n	80a02b2 <loop+0xa2>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a029a:	f000 fae5 	bl	80a0868 <spark_cloud_flag_connected>
        if (Particle.connected()) {
 80a029e:	b140      	cbz	r0, 80a02b2 <loop+0xa2>
 80a02a0:	f000 f912 	bl	80a04c8 <HAL_Timer_Get_Milli_Seconds>
            lastPublish = millis();
 80a02a4:	6020      	str	r0, [r4, #0]
            PublishToGoogleSheet();
 80a02a6:	f7ff ff5f 	bl	80a0168 <_Z20PublishToGoogleSheetv>
            signal_data[1][3] = 0; 
 80a02aa:	2300      	movs	r3, #0
 80a02ac:	61b3      	str	r3, [r6, #24]
            signal_data[2][3] = 0; 
 80a02ae:	6273      	str	r3, [r6, #36]	; 0x24
            signal_data[3][3] = 0; 
 80a02b0:	6333      	str	r3, [r6, #48]	; 0x30
        auto wakeupSource = config_.wakeup_sources;
 80a02b2:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
 80a02b4:	b140      	cbz	r0, 80a02c8 <loop+0xb8>
            auto next = wakeupSource->next;
 80a02b6:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
 80a02b8:	210c      	movs	r1, #12
 80a02ba:	f002 fe08 	bl	80a2ece <_ZdlPvj>
            wakeupSource = next;
 80a02be:	4620      	mov	r0, r4
        while (wakeupSource) {
 80a02c0:	e7f8      	b.n	80a02b4 <loop+0xa4>
                valid_ = false;
 80a02c2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
 80a02c6:	e7d8      	b.n	80a027a <loop+0x6a>
}
 80a02c8:	b00b      	add	sp, #44	; 0x2c
 80a02ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a02cc:	200000a4 	.word	0x200000a4
 80a02d0:	00030010 	.word	0x00030010
 80a02d4:	080a3475 	.word	0x080a3475
 80a02d8:	000927c0 	.word	0x000927c0
 80a02dc:	2000007c 	.word	0x2000007c
 80a02e0:	0036ee80 	.word	0x0036ee80

080a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a02e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a02e6:	2614      	movs	r6, #20
 80a02e8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a02ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a02ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a02f2:	42ae      	cmp	r6, r5
 80a02f4:	d004      	beq.n	80a0300 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a02f6:	4628      	mov	r0, r5
 80a02f8:	f000 fbda 	bl	80a0ab0 <_ZN6StringD1Ev>
 80a02fc:	3514      	adds	r5, #20
 80a02fe:	e7f8      	b.n	80a02f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a0300:	6820      	ldr	r0, [r4, #0]
 80a0302:	f000 fad1 	bl	80a08a8 <free>
    AllocatorT::free(data_);
}
 80a0306:	4620      	mov	r0, r4
 80a0308:	bd70      	pop	{r4, r5, r6, pc}

080a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a030a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a030e:	4604      	mov	r4, r0
 80a0310:	460d      	mov	r5, r1
 80a0312:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a0314:	d916      	bls.n	80a0344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0316:	4290      	cmp	r0, r2
 80a0318:	d215      	bcs.n	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a031a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a031e:	1a75      	subs	r5, r6, r1
 80a0320:	f1a1 0714 	sub.w	r7, r1, #20
 80a0324:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a0326:	42b7      	cmp	r7, r6
 80a0328:	d01c      	beq.n	80a0364 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a032a:	b12c      	cbz	r4, 80a0338 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a032c:	4631      	mov	r1, r6
 80a032e:	4620      	mov	r0, r4
 80a0330:	f000 fc25 	bl	80a0b7e <_ZN6StringC1EOS_>
 80a0334:	7c33      	ldrb	r3, [r6, #16]
 80a0336:	7423      	strb	r3, [r4, #16]
 80a0338:	4630      	mov	r0, r6
 80a033a:	f000 fbb9 	bl	80a0ab0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a033e:	3e14      	subs	r6, #20
 80a0340:	3c14      	subs	r4, #20
 80a0342:	e7f0      	b.n	80a0326 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a0344:	d00e      	beq.n	80a0364 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0346:	42b5      	cmp	r5, r6
 80a0348:	d00c      	beq.n	80a0364 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a034a:	b12c      	cbz	r4, 80a0358 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a034c:	4629      	mov	r1, r5
 80a034e:	4620      	mov	r0, r4
 80a0350:	f000 fc15 	bl	80a0b7e <_ZN6StringC1EOS_>
 80a0354:	7c2b      	ldrb	r3, [r5, #16]
 80a0356:	7423      	strb	r3, [r4, #16]
 80a0358:	4628      	mov	r0, r5
 80a035a:	f000 fba9 	bl	80a0ab0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a035e:	3514      	adds	r5, #20
 80a0360:	3414      	adds	r4, #20
 80a0362:	e7f0      	b.n	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a0364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a0366:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a036c:	e9c0 3300 	strd	r3, r3, [r0]
 80a0370:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0372:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0374:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0376:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0378:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a037a:	dd24      	ble.n	80a03c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a037c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a0380:	fb08 f007 	mul.w	r0, r8, r7
 80a0384:	f000 fa88 	bl	80a0898 <malloc>
            if (!d) {
 80a0388:	4605      	mov	r5, r0
 80a038a:	b1e0      	cbz	r0, 80a03c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a038c:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a0390:	fb08 1202 	mla	r2, r8, r2, r1
 80a0394:	f7ff ffb9 	bl	80a030a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a0398:	6820      	ldr	r0, [r4, #0]
 80a039a:	f000 fa85 	bl	80a08a8 <free>
        data_ = d;
 80a039e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a03a0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a03a2:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a03a6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a03aa:	45b8      	cmp	r8, r7
 80a03ac:	d009      	beq.n	80a03c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a03ae:	4639      	mov	r1, r7
 80a03b0:	4628      	mov	r0, r5
 80a03b2:	f000 fbfe 	bl	80a0bb2 <_ZN6StringC1ERKS_>
 80a03b6:	7c3b      	ldrb	r3, [r7, #16]
 80a03b8:	3514      	adds	r5, #20
 80a03ba:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a03be:	3714      	adds	r7, #20
 80a03c0:	e7f3      	b.n	80a03aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a03c2:	6873      	ldr	r3, [r6, #4]
 80a03c4:	6063      	str	r3, [r4, #4]
}
 80a03c6:	4620      	mov	r0, r4
 80a03c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a03cc <_GLOBAL__sub_I_logHandler>:
        val_(val) {
 80a03cc:	2001      	movs	r0, #1
}
 80a03ce:	b570      	push	{r4, r5, r6, lr}
 80a03d0:	4b22      	ldr	r3, [pc, #136]	; (80a045c <_GLOBAL__sub_I_logHandler+0x90>)
 80a03d2:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 80a03d4:	2100      	movs	r1, #0
 80a03d6:	7018      	strb	r0, [r3, #0]
 80a03d8:	f000 f9b0 	bl	80a073c <system_thread_set_state>
        capacity_(0) {
 80a03dc:	2300      	movs	r3, #0
 80a03de:	e9cd 3300 	strd	r3, r3, [sp]
 80a03e2:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 80a03e4:	f002 f8b8 	bl	80a2558 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a03e8:	4c1d      	ldr	r4, [pc, #116]	; (80a0460 <_GLOBAL__sub_I_logHandler+0x94>)
 80a03ea:	4605      	mov	r5, r0
 80a03ec:	4626      	mov	r6, r4
 80a03ee:	4669      	mov	r1, sp
 80a03f0:	a803      	add	r0, sp, #12
 80a03f2:	f7ff ffb8 	bl	80a0366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a03f6:	a903      	add	r1, sp, #12
 80a03f8:	a806      	add	r0, sp, #24
 80a03fa:	f7ff ffb4 	bl	80a0366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a03fe:	4b19      	ldr	r3, [pc, #100]	; (80a0464 <_GLOBAL__sub_I_logHandler+0x98>)
 80a0400:	a906      	add	r1, sp, #24
 80a0402:	f846 3b04 	str.w	r3, [r6], #4
 80a0406:	a809      	add	r0, sp, #36	; 0x24
 80a0408:	f7ff ffad 	bl	80a0366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a040c:	aa09      	add	r2, sp, #36	; 0x24
 80a040e:	211e      	movs	r1, #30
 80a0410:	4630      	mov	r0, r6
 80a0412:	f001 f937 	bl	80a1684 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0416:	a809      	add	r0, sp, #36	; 0x24
 80a0418:	f7ff ff64 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a041c:	a806      	add	r0, sp, #24
 80a041e:	f7ff ff61 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0422:	4b11      	ldr	r3, [pc, #68]	; (80a0468 <_GLOBAL__sub_I_logHandler+0x9c>)
 80a0424:	a803      	add	r0, sp, #12
 80a0426:	6023      	str	r3, [r4, #0]
 80a0428:	6225      	str	r5, [r4, #32]
 80a042a:	f7ff ff5b 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a042e:	4b0f      	ldr	r3, [pc, #60]	; (80a046c <_GLOBAL__sub_I_logHandler+0xa0>)
 80a0430:	6023      	str	r3, [r4, #0]
        Serial.begin();
 80a0432:	f002 f891 	bl	80a2558 <_Z16_fetch_usbserialv>
 80a0436:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a043a:	f002 f86f 	bl	80a251c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a043e:	f000 fd9d 	bl	80a0f7c <_ZN5spark10LogManager8instanceEv>
 80a0442:	4621      	mov	r1, r4
 80a0444:	f001 f8b1 	bl	80a15aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;//
 80a0448:	4668      	mov	r0, sp
 80a044a:	f7ff ff4b 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a044e:	4620      	mov	r0, r4
 80a0450:	4a07      	ldr	r2, [pc, #28]	; (80a0470 <_GLOBAL__sub_I_logHandler+0xa4>)
 80a0452:	4908      	ldr	r1, [pc, #32]	; (80a0474 <_GLOBAL__sub_I_logHandler+0xa8>)
 80a0454:	f002 fd36 	bl	80a2ec4 <__aeabi_atexit>
}
 80a0458:	b00c      	add	sp, #48	; 0x30
 80a045a:	bd70      	pop	{r4, r5, r6, pc}
 80a045c:	20000078 	.word	0x20000078
 80a0460:	20000080 	.word	0x20000080
 80a0464:	080a31cc 	.word	0x080a31cc
 80a0468:	080a32c8 	.word	0x080a32c8
 80a046c:	080a31e4 	.word	0x080a31e4
 80a0470:	20000074 	.word	0x20000074
 80a0474:	080a00d5 	.word	0x080a00d5

080a0478 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <HAL_Pin_Mode+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	689b      	ldr	r3, [r3, #8]
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601b0 	.word	0x080601b0

080a0488 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <HAL_Get_Pin_Mode+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	68db      	ldr	r3, [r3, #12]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601b0 	.word	0x080601b0

080a0498 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <HAL_GPIO_Read+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	695b      	ldr	r3, [r3, #20]
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601b0 	.word	0x080601b0

080a04a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <HAL_RNG_GetRandomNumber+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	685b      	ldr	r3, [r3, #4]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	0806019c 	.word	0x0806019c

080a04b8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <HAL_Delay_Microseconds+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	68db      	ldr	r3, [r3, #12]
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	0806019c 	.word	0x0806019c

080a04c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	695b      	ldr	r3, [r3, #20]
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	0806019c 	.word	0x0806019c

080a04d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <os_mutex_recursive_create+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601d0 	.word	0x080601d0

080a04e8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <os_mutex_recursive_destroy+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601d0 	.word	0x080601d0

080a04f8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <os_mutex_recursive_lock+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601d0 	.word	0x080601d0

080a0508 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <os_mutex_recursive_unlock+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601d0 	.word	0x080601d0

080a0518 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <hal_usart_init+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	699b      	ldr	r3, [r3, #24]
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601c4 	.word	0x080601c4

080a0528 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <hal_usart_end+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	6a1b      	ldr	r3, [r3, #32]
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601c4 	.word	0x080601c4

080a0538 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <hal_usart_write+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601c4 	.word	0x080601c4

080a0548 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <hal_usart_available+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601c4 	.word	0x080601c4

080a0558 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <hal_usart_read+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601c4 	.word	0x080601c4

080a0568 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <hal_usart_peek+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601c4 	.word	0x080601c4

080a0578 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <hal_usart_flush+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601c4 	.word	0x080601c4

080a0588 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <hal_usart_is_enabled+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601c4 	.word	0x080601c4

080a0598 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <hal_usart_available_data_for_write+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	080601c4 	.word	0x080601c4

080a05a8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b02      	ldr	r3, [pc, #8]	; (80a05b4 <hal_usart_begin_config+0xc>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a05b0:	9301      	str	r3, [sp, #4]
 80a05b2:	bd08      	pop	{r3, pc}
 80a05b4:	080601c4 	.word	0x080601c4

080a05b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a05b8:	b508      	push	{r3, lr}
 80a05ba:	4b02      	ldr	r3, [pc, #8]	; (80a05c4 <hal_i2c_write+0xc>)
 80a05bc:	681b      	ldr	r3, [r3, #0]
 80a05be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a05c0:	9301      	str	r3, [sp, #4]
 80a05c2:	bd08      	pop	{r3, pc}
 80a05c4:	080601ac 	.word	0x080601ac

080a05c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a05c8:	b508      	push	{r3, lr}
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <hal_i2c_available+0xc>)
 80a05cc:	681b      	ldr	r3, [r3, #0]
 80a05ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a05d0:	9301      	str	r3, [sp, #4]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	080601ac 	.word	0x080601ac

080a05d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <hal_i2c_read+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601ac 	.word	0x080601ac

080a05e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <hal_i2c_peek+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601ac 	.word	0x080601ac

080a05f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <hal_i2c_flush+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601ac 	.word	0x080601ac

080a0608 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <hal_i2c_is_enabled+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601ac 	.word	0x080601ac

080a0618 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b03      	ldr	r3, [pc, #12]	; (80a0628 <hal_i2c_init+0x10>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0622:	9301      	str	r3, [sp, #4]
 80a0624:	bd08      	pop	{r3, pc}
 80a0626:	0000      	.short	0x0000
 80a0628:	080601ac 	.word	0x080601ac

080a062c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <hal_spi_init+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	69db      	ldr	r3, [r3, #28]
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601b4 	.word	0x080601b4

080a063c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <hal_spi_is_enabled+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	6a1b      	ldr	r3, [r3, #32]
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601b4 	.word	0x080601b4

080a064c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <HAL_USB_USART_Init+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	681b      	ldr	r3, [r3, #0]
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601d8 	.word	0x080601d8

080a065c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <HAL_USB_USART_Begin+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	685b      	ldr	r3, [r3, #4]
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601d8 	.word	0x080601d8

080a066c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <HAL_USB_USART_End+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	689b      	ldr	r3, [r3, #8]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601d8 	.word	0x080601d8

080a067c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <HAL_USB_USART_Available_Data+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	691b      	ldr	r3, [r3, #16]
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601d8 	.word	0x080601d8

080a068c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	695b      	ldr	r3, [r3, #20]
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601d8 	.word	0x080601d8

080a069c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <HAL_USB_USART_Receive_Data+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	699b      	ldr	r3, [r3, #24]
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601d8 	.word	0x080601d8

080a06ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <HAL_USB_USART_Send_Data+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	69db      	ldr	r3, [r3, #28]
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601d8 	.word	0x080601d8

080a06bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <HAL_USB_USART_Flush_Data+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	6a1b      	ldr	r3, [r3, #32]
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601d8 	.word	0x080601d8

080a06cc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <inet_gethostbyname+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601c0 	.word	0x080601c0

080a06dc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <panic_+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080201a8 	.word	0x080201a8

080a06ec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <log_message+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080201a8 	.word	0x080201a8

080a06fc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <log_message_v+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080201a8 	.word	0x080201a8

080a070c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b02      	ldr	r3, [pc, #8]	; (80a0718 <log_level_name+0xc>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0714:	9301      	str	r3, [sp, #4]
 80a0716:	bd08      	pop	{r3, pc}
 80a0718:	080201a8 	.word	0x080201a8

080a071c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b02      	ldr	r3, [pc, #8]	; (80a0728 <log_set_callbacks+0xc>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0724:	9301      	str	r3, [sp, #4]
 80a0726:	bd08      	pop	{r3, pc}
 80a0728:	080201a8 	.word	0x080201a8

080a072c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <set_system_mode+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	685b      	ldr	r3, [r3, #4]
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601a4 	.word	0x080601a4

080a073c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <system_thread_set_state+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601a4 	.word	0x080601a4

080a074c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <application_thread_current+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601a4 	.word	0x080601a4

080a075c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <application_thread_invoke+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601a4 	.word	0x080601a4

080a076c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b03      	ldr	r3, [pc, #12]	; (80a077c <system_ctrl_set_app_request_handler+0x10>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0776:	9301      	str	r3, [sp, #4]
 80a0778:	bd08      	pop	{r3, pc}
 80a077a:	0000      	.short	0x0000
 80a077c:	080601a4 	.word	0x080601a4

080a0780 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b03      	ldr	r3, [pc, #12]	; (80a0790 <system_ctrl_set_result+0x10>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a078a:	9301      	str	r3, [sp, #4]
 80a078c:	bd08      	pop	{r3, pc}
 80a078e:	0000      	.short	0x0000
 80a0790:	080601a4 	.word	0x080601a4

080a0794 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 80a0794:	b508      	push	{r3, lr}
 80a0796:	4b03      	ldr	r3, [pc, #12]	; (80a07a4 <system_sleep_ext+0x10>)
 80a0798:	681b      	ldr	r3, [r3, #0]
 80a079a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80a079e:	9301      	str	r3, [sp, #4]
 80a07a0:	bd08      	pop	{r3, pc}
 80a07a2:	0000      	.short	0x0000
 80a07a4:	080601a4 	.word	0x080601a4

080a07a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <network_connect+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	685b      	ldr	r3, [r3, #4]
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601c8 	.word	0x080601c8

080a07b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <network_connecting+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	689b      	ldr	r3, [r3, #8]
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601c8 	.word	0x080601c8

080a07c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <network_disconnect+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	68db      	ldr	r3, [r3, #12]
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601c8 	.word	0x080601c8

080a07d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <network_ready+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	691b      	ldr	r3, [r3, #16]
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601c8 	.word	0x080601c8

080a07e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <network_on+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	695b      	ldr	r3, [r3, #20]
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c8 	.word	0x080601c8

080a07f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <network_off+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	699b      	ldr	r3, [r3, #24]
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601c8 	.word	0x080601c8

080a0808 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <network_listen+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	69db      	ldr	r3, [r3, #28]
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601c8 	.word	0x080601c8

080a0818 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <network_listening+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6a1b      	ldr	r3, [r3, #32]
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601c8 	.word	0x080601c8

080a0828 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <network_set_listen_timeout+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601c8 	.word	0x080601c8

080a0838 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <network_get_listen_timeout+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601c8 	.word	0x080601c8

080a0848 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <network_is_on+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601c8 	.word	0x080601c8

080a0858 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <network_is_off+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601c8 	.word	0x080601c8

080a0868 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <spark_cloud_flag_connected+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	695b      	ldr	r3, [r3, #20]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601cc 	.word	0x080601cc

080a0878 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <spark_send_event+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	6a1b      	ldr	r3, [r3, #32]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601cc 	.word	0x080601cc

080a0888 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601cc 	.word	0x080601cc

080a0898 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <malloc+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	681b      	ldr	r3, [r3, #0]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601a0 	.word	0x080601a0

080a08a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <free+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	685b      	ldr	r3, [r3, #4]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601a0 	.word	0x080601a0

080a08b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <realloc+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	689b      	ldr	r3, [r3, #8]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601a0 	.word	0x080601a0

080a08c8 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <snprintf+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	69db      	ldr	r3, [r3, #28]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601a0 	.word	0x080601a0

080a08d8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <vsnprintf+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601a0 	.word	0x080601a0

080a08e8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <abort+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601a0 	.word	0x080601a0

080a08f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <_malloc_r+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601a0 	.word	0x080601a0

080a0908 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <newlib_impure_ptr_callback+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601a0 	.word	0x080601a0

080a0918 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0918:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a091a:	2600      	movs	r6, #0
 80a091c:	4604      	mov	r4, r0
 80a091e:	460d      	mov	r5, r1
 80a0920:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0924:	f7ff fdd8 	bl	80a04d8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0928:	4628      	mov	r0, r5
    _spi = spi;
 80a092a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a092c:	f7ff fe7e 	bl	80a062c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0930:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0932:	6066      	str	r6, [r4, #4]
}
 80a0934:	bd70      	pop	{r4, r5, r6, pc}

080a0936 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0936:	b510      	push	{r4, lr}
 80a0938:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a093a:	6800      	ldr	r0, [r0, #0]
 80a093c:	b118      	cbz	r0, 80a0946 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a093e:	f7ff ffb3 	bl	80a08a8 <free>
            wakeupSource_ = nullptr;
 80a0942:	2300      	movs	r3, #0
 80a0944:	6023      	str	r3, [r4, #0]
        }
    }
 80a0946:	bd10      	pop	{r4, pc}

080a0948 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0948:	b510      	push	{r4, lr}
 80a094a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a094c:	f7ff fff3 	bl	80a0936 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0950:	4620      	mov	r0, r4
 80a0952:	bd10      	pop	{r4, pc}

080a0954 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a0954:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80a0956:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a095a:	460d      	mov	r5, r1
        error_ = result.error_;
 80a095c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80a095e:	460b      	mov	r3, r1
 80a0960:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80a0964:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80a0966:	f8c0 2006 	str.w	r2, [r0, #6]
 80a096a:	889b      	ldrh	r3, [r3, #4]
 80a096c:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80a096e:	f7ff ffe2 	bl	80a0936 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 80a0972:	682b      	ldr	r3, [r5, #0]
 80a0974:	b113      	cbz	r3, 80a097c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80a0976:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80a0978:	2300      	movs	r3, #0
 80a097a:	602b      	str	r3, [r5, #0]
    }
 80a097c:	4620      	mov	r0, r4
 80a097e:	bd38      	pop	{r3, r4, r5, pc}

080a0980 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 80a0980:	b538      	push	{r3, r4, r5, lr}
 80a0982:	460c      	mov	r4, r1
 80a0984:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 80a0986:	f7ff ffd6 	bl	80a0936 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 80a098a:	b144      	cbz	r4, 80a099e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 80a098c:	8820      	ldrh	r0, [r4, #0]
 80a098e:	f7ff ff83 	bl	80a0898 <malloc>
 80a0992:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 80a0994:	b128      	cbz	r0, 80a09a2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 80a0996:	4621      	mov	r1, r4
 80a0998:	8822      	ldrh	r2, [r4, #0]
 80a099a:	f002 faaf 	bl	80a2efc <memcpy>
        return SYSTEM_ERROR_NONE;
 80a099e:	2000      	movs	r0, #0
    }
 80a09a0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 80a09a2:	4801      	ldr	r0, [pc, #4]	; (80a09a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 80a09a4:	e7fc      	b.n	80a09a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 80a09a6:	bf00      	nop
 80a09a8:	fffffefc 	.word	0xfffffefc

080a09ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 80a09ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a09ae:	4d2d      	ldr	r5, [pc, #180]	; (80a0a64 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 80a09b0:	7d0b      	ldrb	r3, [r1, #20]
 80a09b2:	4604      	mov	r4, r0
 80a09b4:	b08b      	sub	sp, #44	; 0x2c
 80a09b6:	4608      	mov	r0, r1
 80a09b8:	1daf      	adds	r7, r5, #6
 80a09ba:	2b00      	cmp	r3, #0
 80a09bc:	d038      	beq.n	80a0a30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 80a09be:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 80a09c0:	791b      	ldrb	r3, [r3, #4]
 80a09c2:	2b00      	cmp	r3, #0
 80a09c4:	d034      	beq.n	80a0a30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 80a09c6:	2200      	movs	r2, #0
    SleepResult() {}
 80a09c8:	4b27      	ldr	r3, [pc, #156]	; (80a0a68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 80a09ca:	a902      	add	r1, sp, #8
 80a09cc:	3004      	adds	r0, #4
 80a09ce:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 80a09d0:	9202      	str	r2, [sp, #8]
 80a09d2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 80a09d6:	f88d 200e 	strb.w	r2, [sp, #14]
 80a09da:	f7ff fedb 	bl	80a0794 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 80a09de:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 80a09e2:	b200      	sxth	r0, r0
 80a09e4:	f8c5 3006 	str.w	r3, [r5, #6]
 80a09e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 80a09ec:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 80a09f0:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80a09f2:	9902      	ldr	r1, [sp, #8]
 80a09f4:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 80a09f6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 80a09f8:	f7ff ffc2 	bl	80a0980 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 80a09fc:	a802      	add	r0, sp, #8
 80a09fe:	f7ff ff9a 	bl	80a0936 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 80a0a02:	2300      	movs	r3, #0
 80a0a04:	6023      	str	r3, [r4, #0]
 80a0a06:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80a0a08:	71a3      	strb	r3, [r4, #6]
 80a0a0a:	8123      	strh	r3, [r4, #8]
 80a0a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0a10:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 80a0a12:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80a0a16:	4620      	mov	r0, r4
        error_ = result.error_;
 80a0a18:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 80a0a1a:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 80a0a1c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 80a0a1e:	f8c4 3006 	str.w	r3, [r4, #6]
 80a0a22:	88bb      	ldrh	r3, [r7, #4]
 80a0a24:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 80a0a26:	f7ff ffab 	bl	80a0980 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	b00b      	add	sp, #44	; 0x2c
 80a0a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 80a0a30:	2600      	movs	r6, #0
 80a0a32:	2320      	movs	r3, #32
 80a0a34:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80a0a38:	4b0c      	ldr	r3, [pc, #48]	; (80a0a6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 80a0a3a:	2032      	movs	r0, #50	; 0x32
 80a0a3c:	9300      	str	r3, [sp, #0]
 80a0a3e:	490c      	ldr	r1, [pc, #48]	; (80a0a70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 80a0a40:	4633      	mov	r3, r6
 80a0a42:	aa02      	add	r2, sp, #8
 80a0a44:	f7ff fe52 	bl	80a06ec <log_message>
    SleepResult() {}
 80a0a48:	4b07      	ldr	r3, [pc, #28]	; (80a0a68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 80a0a4a:	a902      	add	r1, sp, #8
 80a0a4c:	9304      	str	r3, [sp, #16]
        error_ = error;
 80a0a4e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 80a0a52:	4804      	ldr	r0, [pc, #16]	; (80a0a64 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 80a0a54:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 80a0a56:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 80a0a5a:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a0a5e:	f7ff ff79 	bl	80a0954 <_ZN17SystemSleepResultaSEOS_>
 80a0a62:	e7cb      	b.n	80a09fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 80a0a64:	200000c8 	.word	0x200000c8
 80a0a68:	ffff0000 	.word	0xffff0000
 80a0a6c:	080a3206 	.word	0x080a3206
 80a0a70:	080a31ff 	.word	0x080a31ff

080a0a74 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0a74:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0a76:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0a78:	b510      	push	{r4, lr}
 80a0a7a:	4b08      	ldr	r3, [pc, #32]	; (80a0a9c <_GLOBAL__sub_I_System+0x28>)
 80a0a7c:	4c08      	ldr	r4, [pc, #32]	; (80a0aa0 <_GLOBAL__sub_I_System+0x2c>)
 80a0a7e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0a80:	4b08      	ldr	r3, [pc, #32]	; (80a0aa4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0a82:	6020      	str	r0, [r4, #0]
 80a0a84:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0a86:	71a0      	strb	r0, [r4, #6]
 80a0a88:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0a8a:	f7ff fe4f 	bl	80a072c <set_system_mode>
SystemClass System;
 80a0a8e:	4620      	mov	r0, r4
 80a0a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0a94:	4a04      	ldr	r2, [pc, #16]	; (80a0aa8 <_GLOBAL__sub_I_System+0x34>)
 80a0a96:	4905      	ldr	r1, [pc, #20]	; (80a0aac <_GLOBAL__sub_I_System+0x38>)
 80a0a98:	f002 ba14 	b.w	80a2ec4 <__aeabi_atexit>
 80a0a9c:	200000d4 	.word	0x200000d4
 80a0aa0:	200000c8 	.word	0x200000c8
 80a0aa4:	ffff0000 	.word	0xffff0000
 80a0aa8:	20000074 	.word	0x20000074
 80a0aac:	080a0949 	.word	0x080a0949

080a0ab0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0ab0:	b510      	push	{r4, lr}
 80a0ab2:	4604      	mov	r4, r0
{
	free(buffer);
 80a0ab4:	6800      	ldr	r0, [r0, #0]
 80a0ab6:	f7ff fef7 	bl	80a08a8 <free>
}
 80a0aba:	4620      	mov	r0, r4
 80a0abc:	bd10      	pop	{r4, pc}

080a0abe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0abe:	b510      	push	{r4, lr}
 80a0ac0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0ac2:	6800      	ldr	r0, [r0, #0]
 80a0ac4:	b108      	cbz	r0, 80a0aca <_ZN6String10invalidateEv+0xc>
 80a0ac6:	f7ff feef 	bl	80a08a8 <free>
	buffer = NULL;
 80a0aca:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0acc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0ad0:	6023      	str	r3, [r4, #0]
}
 80a0ad2:	bd10      	pop	{r4, pc}

080a0ad4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0ad4:	b538      	push	{r3, r4, r5, lr}
 80a0ad6:	4604      	mov	r4, r0
 80a0ad8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0ada:	6800      	ldr	r0, [r0, #0]
 80a0adc:	3101      	adds	r1, #1
 80a0ade:	f7ff feeb 	bl	80a08b8 <realloc>
	if (newbuffer) {
 80a0ae2:	b110      	cbz	r0, 80a0aea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0ae4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0ae8:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0aea:	bd38      	pop	{r3, r4, r5, pc}

080a0aec <_ZN6String7reserveEj>:
{
 80a0aec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0aee:	6803      	ldr	r3, [r0, #0]
{
 80a0af0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0af2:	b123      	cbz	r3, 80a0afe <_ZN6String7reserveEj+0x12>
 80a0af4:	6843      	ldr	r3, [r0, #4]
 80a0af6:	428b      	cmp	r3, r1
 80a0af8:	d301      	bcc.n	80a0afe <_ZN6String7reserveEj+0x12>
 80a0afa:	2001      	movs	r0, #1
}
 80a0afc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	f7ff ffe8 	bl	80a0ad4 <_ZN6String12changeBufferEj>
 80a0b04:	2800      	cmp	r0, #0
 80a0b06:	d0f9      	beq.n	80a0afc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0b08:	68a3      	ldr	r3, [r4, #8]
 80a0b0a:	2b00      	cmp	r3, #0
 80a0b0c:	d1f5      	bne.n	80a0afa <_ZN6String7reserveEj+0xe>
 80a0b0e:	6822      	ldr	r2, [r4, #0]
 80a0b10:	7013      	strb	r3, [r2, #0]
 80a0b12:	e7f2      	b.n	80a0afa <_ZN6String7reserveEj+0xe>

080a0b14 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0b14:	b570      	push	{r4, r5, r6, lr}
 80a0b16:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0b18:	4611      	mov	r1, r2
{
 80a0b1a:	4604      	mov	r4, r0
 80a0b1c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0b1e:	f7ff ffe5 	bl	80a0aec <_ZN6String7reserveEj>
 80a0b22:	b920      	cbnz	r0, 80a0b2e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0b24:	4620      	mov	r0, r4
 80a0b26:	f7ff ffca 	bl	80a0abe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0b2a:	4620      	mov	r0, r4
 80a0b2c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0b2e:	462a      	mov	r2, r5
 80a0b30:	4631      	mov	r1, r6
 80a0b32:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0b34:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0b36:	f002 f9e1 	bl	80a2efc <memcpy>
	buffer[len] = 0;
 80a0b3a:	2100      	movs	r1, #0
 80a0b3c:	6822      	ldr	r2, [r4, #0]
 80a0b3e:	68a3      	ldr	r3, [r4, #8]
 80a0b40:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0b42:	e7f2      	b.n	80a0b2a <_ZN6String4copyEPKcj+0x16>

080a0b44 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a0b44:	b538      	push	{r3, r4, r5, lr}
 80a0b46:	4605      	mov	r5, r0
	if (buffer) {
 80a0b48:	6800      	ldr	r0, [r0, #0]
{
 80a0b4a:	460c      	mov	r4, r1
	if (buffer) {
 80a0b4c:	b168      	cbz	r0, 80a0b6a <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a0b4e:	686a      	ldr	r2, [r5, #4]
 80a0b50:	688b      	ldr	r3, [r1, #8]
 80a0b52:	429a      	cmp	r2, r3
 80a0b54:	d307      	bcc.n	80a0b66 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a0b56:	6809      	ldr	r1, [r1, #0]
 80a0b58:	f002 fa45 	bl	80a2fe6 <strcpy>
			len = rhs.len;
 80a0b5c:	68a3      	ldr	r3, [r4, #8]
 80a0b5e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a0b60:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a0b62:	60a3      	str	r3, [r4, #8]
}
 80a0b64:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a0b66:	f7ff fe9f 	bl	80a08a8 <free>
	buffer = rhs.buffer;
 80a0b6a:	6823      	ldr	r3, [r4, #0]
 80a0b6c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a0b6e:	6863      	ldr	r3, [r4, #4]
 80a0b70:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a0b72:	68a3      	ldr	r3, [r4, #8]
 80a0b74:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a0b76:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a0b78:	e9c4 3300 	strd	r3, r3, [r4]
 80a0b7c:	e7f1      	b.n	80a0b62 <_ZN6String4moveERS_+0x1e>

080a0b7e <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a0b7e:	2300      	movs	r3, #0
String::String(String &&rval)
 80a0b80:	b510      	push	{r4, lr}
 80a0b82:	4604      	mov	r4, r0
	capacity = 0;
 80a0b84:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0b88:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0b8a:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a0b8c:	f7ff ffda 	bl	80a0b44 <_ZN6String4moveERS_>
}
 80a0b90:	4620      	mov	r0, r4
 80a0b92:	bd10      	pop	{r4, pc}

080a0b94 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0b94:	4288      	cmp	r0, r1
{
 80a0b96:	b510      	push	{r4, lr}
 80a0b98:	460b      	mov	r3, r1
 80a0b9a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0b9c:	d004      	beq.n	80a0ba8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0b9e:	6809      	ldr	r1, [r1, #0]
 80a0ba0:	b121      	cbz	r1, 80a0bac <_ZN6StringaSERKS_+0x18>
 80a0ba2:	689a      	ldr	r2, [r3, #8]
 80a0ba4:	f7ff ffb6 	bl	80a0b14 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0ba8:	4620      	mov	r0, r4
 80a0baa:	bd10      	pop	{r4, pc}
	else invalidate();
 80a0bac:	f7ff ff87 	bl	80a0abe <_ZN6String10invalidateEv>
 80a0bb0:	e7fa      	b.n	80a0ba8 <_ZN6StringaSERKS_+0x14>

080a0bb2 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a0bb2:	2300      	movs	r3, #0
String::String(const String &value)
 80a0bb4:	b510      	push	{r4, lr}
 80a0bb6:	4604      	mov	r4, r0
	capacity = 0;
 80a0bb8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0bbc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0bbe:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a0bc0:	f7ff ffe8 	bl	80a0b94 <_ZN6StringaSERKS_>
}
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	bd10      	pop	{r4, pc}

080a0bc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bca:	4606      	mov	r6, r0
 80a0bcc:	460d      	mov	r5, r1
  size_t n = 0;
 80a0bce:	2400      	movs	r4, #0
 80a0bd0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0bd2:	42bd      	cmp	r5, r7
 80a0bd4:	d00c      	beq.n	80a0bf0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0bd6:	6833      	ldr	r3, [r6, #0]
 80a0bd8:	4630      	mov	r0, r6
 80a0bda:	689b      	ldr	r3, [r3, #8]
 80a0bdc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0be0:	4798      	blx	r3
     if (chunk>=0)
 80a0be2:	1e03      	subs	r3, r0, #0
 80a0be4:	db01      	blt.n	80a0bea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0be6:	441c      	add	r4, r3
  while (size--) {
 80a0be8:	e7f3      	b.n	80a0bd2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0bea:	2c00      	cmp	r4, #0
 80a0bec:	bf08      	it	eq
 80a0bee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0bf0:	4620      	mov	r0, r4
 80a0bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0bf4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0bf4:	b570      	push	{r4, r5, r6, lr}
 80a0bf6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0bf8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0bfa:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0bfc:	b149      	cbz	r1, 80a0c12 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0bfe:	f002 fa16 	bl	80a302e <strlen>
 80a0c02:	682b      	ldr	r3, [r5, #0]
 80a0c04:	4602      	mov	r2, r0
 80a0c06:	4621      	mov	r1, r4
 80a0c08:	4628      	mov	r0, r5
    }
 80a0c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0c0e:	68db      	ldr	r3, [r3, #12]
 80a0c10:	4718      	bx	r3
    }
 80a0c12:	bd70      	pop	{r4, r5, r6, pc}

080a0c14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0c14:	6803      	ldr	r3, [r0, #0]
 80a0c16:	689b      	ldr	r3, [r3, #8]
 80a0c18:	4718      	bx	r3

080a0c1a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0c1a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0c1c:	210d      	movs	r1, #13
{
 80a0c1e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0c20:	f7ff fff8 	bl	80a0c14 <_ZN5Print5printEc>
  n += print('\n');
 80a0c24:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0c26:	4604      	mov	r4, r0
  n += print('\n');
 80a0c28:	4628      	mov	r0, r5
 80a0c2a:	f7ff fff3 	bl	80a0c14 <_ZN5Print5printEc>
  return n;
}
 80a0c2e:	4420      	add	r0, r4
 80a0c30:	bd38      	pop	{r3, r4, r5, pc}

080a0c32 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0c32:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0c34:	2a01      	cmp	r2, #1
 80a0c36:	bf98      	it	ls
 80a0c38:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0c3a:	b530      	push	{r4, r5, lr}
 80a0c3c:	b08b      	sub	sp, #44	; 0x2c
 80a0c3e:	460c      	mov	r4, r1
  *str = '\0';
 80a0c40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0c44:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0c46:	4625      	mov	r5, r4
 80a0c48:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0c4c:	fb04 5312 	mls	r3, r4, r2, r5
 80a0c50:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c52:	2b09      	cmp	r3, #9
 80a0c54:	bf94      	ite	ls
 80a0c56:	3330      	addls	r3, #48	; 0x30
 80a0c58:	3337      	addhi	r3, #55	; 0x37
 80a0c5a:	b2db      	uxtb	r3, r3
  } while(n);
 80a0c5c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c5e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0c62:	d9f0      	bls.n	80a0c46 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0c64:	f7ff ffc6 	bl	80a0bf4 <_ZN5Print5writeEPKc>
}
 80a0c68:	b00b      	add	sp, #44	; 0x2c
 80a0c6a:	bd30      	pop	{r4, r5, pc}

080a0c6c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a0c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c70:	b086      	sub	sp, #24
 80a0c72:	af00      	add	r7, sp, #0
 80a0c74:	4605      	mov	r5, r0
 80a0c76:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a0c78:	1d38      	adds	r0, r7, #4
 80a0c7a:	2114      	movs	r1, #20
{
 80a0c7c:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a0c7e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a0c80:	f7ff fe2a 	bl	80a08d8 <vsnprintf>

    if (n<bufsize)
 80a0c84:	2813      	cmp	r0, #19
 80a0c86:	d80e      	bhi.n	80a0ca6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a0c88:	4628      	mov	r0, r5
 80a0c8a:	1d39      	adds	r1, r7, #4
 80a0c8c:	f7ff ffb2 	bl	80a0bf4 <_ZN5Print5writeEPKc>
 80a0c90:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a0c92:	b11e      	cbz	r6, 80a0c9c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a0c94:	4628      	mov	r0, r5
 80a0c96:	f7ff ffc0 	bl	80a0c1a <_ZN5Print7printlnEv>
 80a0c9a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a0c9c:	4620      	mov	r0, r4
 80a0c9e:	3718      	adds	r7, #24
 80a0ca0:	46bd      	mov	sp, r7
 80a0ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a0ca6:	f100 0308 	add.w	r3, r0, #8
 80a0caa:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a0cae:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a0cb0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a0cb4:	4622      	mov	r2, r4
 80a0cb6:	1c41      	adds	r1, r0, #1
 80a0cb8:	683b      	ldr	r3, [r7, #0]
 80a0cba:	4668      	mov	r0, sp
 80a0cbc:	f7ff fe0c 	bl	80a08d8 <vsnprintf>
  return write(str);
 80a0cc0:	4669      	mov	r1, sp
 80a0cc2:	4628      	mov	r0, r5
 80a0cc4:	f7ff ff96 	bl	80a0bf4 <_ZN5Print5writeEPKc>
 80a0cc8:	4604      	mov	r4, r0
 80a0cca:	46c5      	mov	sp, r8
 80a0ccc:	e7e1      	b.n	80a0c92 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a0cce <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0cce:	2300      	movs	r3, #0
 80a0cd0:	6840      	ldr	r0, [r0, #4]
 80a0cd2:	461a      	mov	r2, r3
 80a0cd4:	4619      	mov	r1, r3
 80a0cd6:	f7ff bd87 	b.w	80a07e8 <network_on>

080a0cda <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a0cda:	6880      	ldr	r0, [r0, #8]
 80a0cdc:	6803      	ldr	r3, [r0, #0]
 80a0cde:	68db      	ldr	r3, [r3, #12]
 80a0ce0:	4718      	bx	r3

080a0ce2 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a0ce2:	4770      	bx	lr

080a0ce4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a0ce4:	4608      	mov	r0, r1
 80a0ce6:	b111      	cbz	r1, 80a0cee <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a0ce8:	680b      	ldr	r3, [r1, #0]
 80a0cea:	685b      	ldr	r3, [r3, #4]
 80a0cec:	4718      	bx	r3
}
 80a0cee:	4770      	bx	lr

080a0cf0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a0cf0:	4770      	bx	lr

080a0cf2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a0cf2:	4770      	bx	lr

080a0cf4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a0cf4:	4770      	bx	lr

080a0cf6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a0cf6:	b538      	push	{r3, r4, r5, lr}
 80a0cf8:	4604      	mov	r4, r0
 80a0cfa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a0cfc:	6800      	ldr	r0, [r0, #0]
 80a0cfe:	212e      	movs	r1, #46	; 0x2e
 80a0d00:	f002 f95d 	bl	80a2fbe <strchrnul>
    size = s - category;
 80a0d04:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a0d06:	4602      	mov	r2, r0
    size = s - category;
 80a0d08:	1ac0      	subs	r0, r0, r3
 80a0d0a:	6028      	str	r0, [r5, #0]
    if (size) {
 80a0d0c:	b120      	cbz	r0, 80a0d18 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a0d0e:	7813      	ldrb	r3, [r2, #0]
 80a0d10:	b103      	cbz	r3, 80a0d14 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a0d12:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d14:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d16:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a0d18:	bd38      	pop	{r3, r4, r5, pc}

080a0d1a <_ZN5spark16JSONStreamWriterD0Ev>:
 80a0d1a:	b510      	push	{r4, lr}
 80a0d1c:	4604      	mov	r4, r0
 80a0d1e:	210c      	movs	r1, #12
 80a0d20:	f002 f8d5 	bl	80a2ece <_ZdlPvj>
 80a0d24:	4620      	mov	r0, r4
 80a0d26:	bd10      	pop	{r4, pc}

080a0d28 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a0d28:	b510      	push	{r4, lr}
 80a0d2a:	4604      	mov	r4, r0
 80a0d2c:	2104      	movs	r1, #4
 80a0d2e:	f002 f8ce 	bl	80a2ece <_ZdlPvj>
 80a0d32:	4620      	mov	r0, r4
 80a0d34:	bd10      	pop	{r4, pc}

080a0d36 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a0d36:	b510      	push	{r4, lr}
 80a0d38:	4604      	mov	r4, r0
 80a0d3a:	2104      	movs	r1, #4
 80a0d3c:	f002 f8c7 	bl	80a2ece <_ZdlPvj>
 80a0d40:	4620      	mov	r0, r4
 80a0d42:	bd10      	pop	{r4, pc}

080a0d44 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a0d44:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a0d46:	f002 f944 	bl	80a2fd2 <strcmp>
}
 80a0d4a:	fab0 f080 	clz	r0, r0
 80a0d4e:	0940      	lsrs	r0, r0, #5
 80a0d50:	bd08      	pop	{r3, pc}

080a0d52 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a0d52:	b510      	push	{r4, lr}
 80a0d54:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a0d56:	f001 fbff 	bl	80a2558 <_Z16_fetch_usbserialv>
 80a0d5a:	4284      	cmp	r4, r0
 80a0d5c:	d105      	bne.n	80a0d6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a0d5e:	f001 fbfb 	bl	80a2558 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a0d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a0d66:	f001 bbdd 	b.w	80a2524 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a0d6a:	f001 fc33 	bl	80a25d4 <_Z17_fetch_usbserial1v>
 80a0d6e:	4284      	cmp	r4, r0
 80a0d70:	d102      	bne.n	80a0d78 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a0d72:	f001 fc2f 	bl	80a25d4 <_Z17_fetch_usbserial1v>
 80a0d76:	e7f4      	b.n	80a0d62 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a0d78:	f001 fcb0 	bl	80a26dc <_Z22__fetch_global_Serial1v>
 80a0d7c:	4284      	cmp	r4, r0
 80a0d7e:	d105      	bne.n	80a0d8c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a0d80:	f001 fcac 	bl	80a26dc <_Z22__fetch_global_Serial1v>
}
 80a0d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a0d88:	f001 bca5 	b.w	80a26d6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a0d8c:	b12c      	cbz	r4, 80a0d9a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a0d8e:	6823      	ldr	r3, [r4, #0]
 80a0d90:	4620      	mov	r0, r4
}
 80a0d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0d96:	685b      	ldr	r3, [r3, #4]
 80a0d98:	4718      	bx	r3
 80a0d9a:	bd10      	pop	{r4, pc}

080a0d9c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a0d9c:	b538      	push	{r3, r4, r5, lr}
 80a0d9e:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a0da0:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a0da2:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a0da4:	f002 f943 	bl	80a302e <strlen>
 80a0da8:	4621      	mov	r1, r4
 80a0daa:	4602      	mov	r2, r0
 80a0dac:	4628      	mov	r0, r5
}
 80a0dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a0db2:	f001 bfae 	b.w	80a2d12 <_ZN5spark10JSONWriter5valueEPKcj>

080a0db6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a0db6:	b570      	push	{r4, r5, r6, lr}
 80a0db8:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a0dba:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a0dbc:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a0dbe:	f002 f936 	bl	80a302e <strlen>
 80a0dc2:	6823      	ldr	r3, [r4, #0]
 80a0dc4:	4602      	mov	r2, r0
 80a0dc6:	4629      	mov	r1, r5
 80a0dc8:	4620      	mov	r0, r4
}
 80a0dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a0dce:	68db      	ldr	r3, [r3, #12]
 80a0dd0:	4718      	bx	r3

080a0dd2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a0dd2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a0dd4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a0dd6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a0dda:	2201      	movs	r2, #1
 80a0ddc:	68db      	ldr	r3, [r3, #12]
 80a0dde:	f10d 0107 	add.w	r1, sp, #7
 80a0de2:	4798      	blx	r3
}
 80a0de4:	b003      	add	sp, #12
 80a0de6:	f85d fb04 	ldr.w	pc, [sp], #4

080a0dea <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a0dea:	b40e      	push	{r1, r2, r3}
 80a0dec:	b503      	push	{r0, r1, lr}
 80a0dee:	ab03      	add	r3, sp, #12
 80a0df0:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a0df4:	2100      	movs	r1, #0
 80a0df6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a0df8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a0dfa:	f7ff ff37 	bl	80a0c6c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a0dfe:	b002      	add	sp, #8
 80a0e00:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0e04:	b003      	add	sp, #12
 80a0e06:	4770      	bx	lr

080a0e08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a0e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a0e0c:	f04f 0814 	mov.w	r8, #20
 80a0e10:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a0e14:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a0e16:	464c      	mov	r4, r9
 80a0e18:	fb08 f505 	mul.w	r5, r8, r5
 80a0e1c:	9300      	str	r3, [sp, #0]
 80a0e1e:	10ab      	asrs	r3, r5, #2
 80a0e20:	4d17      	ldr	r5, [pc, #92]	; (80a0e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a0e22:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a0e24:	2d00      	cmp	r5, #0
 80a0e26:	dd23      	ble.n	80a0e70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a0e28:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a0e2a:	fb08 f006 	mul.w	r0, r8, r6
 80a0e2e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a0e32:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a0e36:	463a      	mov	r2, r7
 80a0e38:	455f      	cmp	r7, fp
 80a0e3a:	bf28      	it	cs
 80a0e3c:	465a      	movcs	r2, fp
 80a0e3e:	5820      	ldr	r0, [r4, r0]
 80a0e40:	9101      	str	r1, [sp, #4]
 80a0e42:	f002 f8fc 	bl	80a303e <strncmp>
                if (cmp == 0) {
 80a0e46:	2301      	movs	r3, #1
 80a0e48:	9901      	ldr	r1, [sp, #4]
 80a0e4a:	b978      	cbnz	r0, 80a0e6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a0e4c:	455f      	cmp	r7, fp
 80a0e4e:	d103      	bne.n	80a0e58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a0e50:	9a00      	ldr	r2, [sp, #0]
 80a0e52:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a0e54:	4635      	mov	r5, r6
 80a0e56:	e7e5      	b.n	80a0e24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a0e58:	bf8c      	ite	hi
 80a0e5a:	2001      	movhi	r0, #1
 80a0e5c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a0e5e:	2800      	cmp	r0, #0
 80a0e60:	d0f8      	beq.n	80a0e54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a0e62:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a0e64:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a0e68:	3e01      	subs	r6, #1
 80a0e6a:	e7f3      	b.n	80a0e54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a0e6c:	0fc0      	lsrs	r0, r0, #31
 80a0e6e:	e7f6      	b.n	80a0e5e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a0e70:	eba4 0409 	sub.w	r4, r4, r9
}
 80a0e74:	4802      	ldr	r0, [pc, #8]	; (80a0e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a0e76:	10a4      	asrs	r4, r4, #2
 80a0e78:	4360      	muls	r0, r4
 80a0e7a:	b003      	add	sp, #12
 80a0e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e80:	cccccccd 	.word	0xcccccccd

080a0e84 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a0e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a0e86:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a0e88:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a0e8a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a0e8c:	b303      	cbz	r3, 80a0ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a0e8e:	b1f9      	cbz	r1, 80a0ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a0e90:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a0e92:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a0e96:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a0e98:	a903      	add	r1, sp, #12
 80a0e9a:	a801      	add	r0, sp, #4
 80a0e9c:	f7ff ff2b 	bl	80a0cf6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a0ea0:	4601      	mov	r1, r0
 80a0ea2:	b1a8      	cbz	r0, 80a0ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a0ea4:	f10d 030b 	add.w	r3, sp, #11
 80a0ea8:	4620      	mov	r0, r4
 80a0eaa:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a0eac:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a0eb0:	f7ff ffaa 	bl	80a0e08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a0eb4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a0eb8:	b153      	cbz	r3, 80a0ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a0eba:	2314      	movs	r3, #20
 80a0ebc:	6824      	ldr	r4, [r4, #0]
 80a0ebe:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a0ec2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a0ec6:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a0ec8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a0eca:	bfa8      	it	ge
 80a0ecc:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a0ece:	e7e3      	b.n	80a0e98 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a0ed0:	4630      	mov	r0, r6
 80a0ed2:	b004      	add	sp, #16
 80a0ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0ed8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a0ed8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a0eda:	4c0a      	ldr	r4, [pc, #40]	; (80a0f04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a0edc:	7823      	ldrb	r3, [r4, #0]
 80a0ede:	f3bf 8f5b 	dmb	ish
 80a0ee2:	07db      	lsls	r3, r3, #31
 80a0ee4:	d40b      	bmi.n	80a0efe <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a0ee6:	4620      	mov	r0, r4
 80a0ee8:	f7ff f8e6 	bl	80a00b8 <__cxa_guard_acquire>
 80a0eec:	b138      	cbz	r0, 80a0efe <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	f7ff f8e7 	bl	80a00c2 <__cxa_guard_release>
 80a0ef4:	4a04      	ldr	r2, [pc, #16]	; (80a0f08 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a0ef6:	4905      	ldr	r1, [pc, #20]	; (80a0f0c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a0ef8:	4805      	ldr	r0, [pc, #20]	; (80a0f10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a0efa:	f001 ffe3 	bl	80a2ec4 <__aeabi_atexit>
}
 80a0efe:	4804      	ldr	r0, [pc, #16]	; (80a0f10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a0f00:	bd10      	pop	{r4, pc}
 80a0f02:	bf00      	nop
 80a0f04:	200000dc 	.word	0x200000dc
 80a0f08:	20000074 	.word	0x20000074
 80a0f0c:	080a0cf3 	.word	0x080a0cf3
 80a0f10:	20000004 	.word	0x20000004

080a0f14 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a0f14:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a0f16:	4c0a      	ldr	r4, [pc, #40]	; (80a0f40 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a0f18:	7823      	ldrb	r3, [r4, #0]
 80a0f1a:	f3bf 8f5b 	dmb	ish
 80a0f1e:	07db      	lsls	r3, r3, #31
 80a0f20:	d40b      	bmi.n	80a0f3a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a0f22:	4620      	mov	r0, r4
 80a0f24:	f7ff f8c8 	bl	80a00b8 <__cxa_guard_acquire>
 80a0f28:	b138      	cbz	r0, 80a0f3a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a0f2a:	4620      	mov	r0, r4
 80a0f2c:	f7ff f8c9 	bl	80a00c2 <__cxa_guard_release>
 80a0f30:	4a04      	ldr	r2, [pc, #16]	; (80a0f44 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a0f32:	4905      	ldr	r1, [pc, #20]	; (80a0f48 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a0f34:	4805      	ldr	r0, [pc, #20]	; (80a0f4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a0f36:	f001 ffc5 	bl	80a2ec4 <__aeabi_atexit>
    return &factory;
}
 80a0f3a:	4804      	ldr	r0, [pc, #16]	; (80a0f4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a0f3c:	bd10      	pop	{r4, pc}
 80a0f3e:	bf00      	nop
 80a0f40:	200000e0 	.word	0x200000e0
 80a0f44:	20000074 	.word	0x20000074
 80a0f48:	080a0cf1 	.word	0x080a0cf1
 80a0f4c:	20000008 	.word	0x20000008

080a0f50 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a0f50:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a0f52:	2500      	movs	r5, #0
 80a0f54:	4604      	mov	r4, r0
 80a0f56:	e9c0 5500 	strd	r5, r5, [r0]
 80a0f5a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a0f5e:	6085      	str	r5, [r0, #8]
 80a0f60:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 80a0f62:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 80a0f66:	f7ff fab7 	bl	80a04d8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a0f6a:	f7ff ffb5 	bl	80a0ed8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a0f6e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a0f70:	f7ff ffd0 	bl	80a0f14 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a0f74:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a0f76:	6220      	str	r0, [r4, #32]
}
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	bd38      	pop	{r3, r4, r5, pc}

080a0f7c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a0f7c:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a0f7e:	4c0b      	ldr	r4, [pc, #44]	; (80a0fac <_ZN5spark10LogManager8instanceEv+0x30>)
 80a0f80:	7823      	ldrb	r3, [r4, #0]
 80a0f82:	f3bf 8f5b 	dmb	ish
 80a0f86:	07db      	lsls	r3, r3, #31
 80a0f88:	d40e      	bmi.n	80a0fa8 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a0f8a:	4620      	mov	r0, r4
 80a0f8c:	f7ff f894 	bl	80a00b8 <__cxa_guard_acquire>
 80a0f90:	b150      	cbz	r0, 80a0fa8 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a0f92:	4807      	ldr	r0, [pc, #28]	; (80a0fb0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a0f94:	f7ff ffdc 	bl	80a0f50 <_ZN5spark10LogManagerC1Ev>
 80a0f98:	4620      	mov	r0, r4
 80a0f9a:	f7ff f892 	bl	80a00c2 <__cxa_guard_release>
 80a0f9e:	4a05      	ldr	r2, [pc, #20]	; (80a0fb4 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a0fa0:	4905      	ldr	r1, [pc, #20]	; (80a0fb8 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a0fa2:	4803      	ldr	r0, [pc, #12]	; (80a0fb0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a0fa4:	f001 ff8e 	bl	80a2ec4 <__aeabi_atexit>
    return &mgr;
}
 80a0fa8:	4801      	ldr	r0, [pc, #4]	; (80a0fb0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a0faa:	bd10      	pop	{r4, pc}
 80a0fac:	200000d8 	.word	0x200000d8
 80a0fb0:	200000e8 	.word	0x200000e8
 80a0fb4:	20000074 	.word	0x20000074
 80a0fb8:	080a146b 	.word	0x080a146b

080a0fbc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a0fbc:	2300      	movs	r3, #0
 80a0fbe:	4a02      	ldr	r2, [pc, #8]	; (80a0fc8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a0fc0:	4902      	ldr	r1, [pc, #8]	; (80a0fcc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a0fc2:	4803      	ldr	r0, [pc, #12]	; (80a0fd0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a0fc4:	f7ff bbaa 	b.w	80a071c <log_set_callbacks>
 80a0fc8:	080a1349 	.word	0x080a1349
 80a0fcc:	080a12d5 	.word	0x080a12d5
 80a0fd0:	080a1255 	.word	0x080a1255

080a0fd4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a0fd4:	2300      	movs	r3, #0
 80a0fd6:	461a      	mov	r2, r3
 80a0fd8:	4619      	mov	r1, r3
 80a0fda:	4618      	mov	r0, r3
 80a0fdc:	f7ff bb9e 	b.w	80a071c <log_set_callbacks>

080a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a0fe0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a0fe2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0fe4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0fe6:	b17c      	cbz	r4, 80a1008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0fe8:	6863      	ldr	r3, [r4, #4]
 80a0fea:	3b01      	subs	r3, #1
 80a0fec:	6063      	str	r3, [r4, #4]
 80a0fee:	b95b      	cbnz	r3, 80a1008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0ff0:	6823      	ldr	r3, [r4, #0]
 80a0ff2:	4620      	mov	r0, r4
 80a0ff4:	689b      	ldr	r3, [r3, #8]
 80a0ff6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0ff8:	68a3      	ldr	r3, [r4, #8]
 80a0ffa:	3b01      	subs	r3, #1
 80a0ffc:	60a3      	str	r3, [r4, #8]
 80a0ffe:	b91b      	cbnz	r3, 80a1008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1000:	6823      	ldr	r3, [r4, #0]
 80a1002:	4620      	mov	r0, r4
 80a1004:	68db      	ldr	r3, [r3, #12]
 80a1006:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a1008:	4628      	mov	r0, r5
 80a100a:	bd38      	pop	{r3, r4, r5, pc}

080a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a100c:	680b      	ldr	r3, [r1, #0]
 80a100e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1010:	b113      	cbz	r3, 80a1018 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a1012:	685a      	ldr	r2, [r3, #4]
 80a1014:	3201      	adds	r2, #1
 80a1016:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a1018:	4770      	bx	lr

080a101a <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a101a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a101c:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a101e:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1020:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1024:	a801      	add	r0, sp, #4
 80a1026:	9300      	str	r3, [sp, #0]
 80a1028:	f7ff fff0 	bl	80a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a102c:	466a      	mov	r2, sp
 80a102e:	4629      	mov	r1, r5
 80a1030:	4620      	mov	r0, r4
 80a1032:	f001 fd19 	bl	80a2a68 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1036:	a801      	add	r0, sp, #4
 80a1038:	f7ff ffd2 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a103c:	4620      	mov	r0, r4
 80a103e:	b003      	add	sp, #12
 80a1040:	bd30      	pop	{r4, r5, pc}

080a1042 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a1042:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1044:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a1046:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1048:	f851 3b04 	ldr.w	r3, [r1], #4
 80a104c:	a801      	add	r0, sp, #4
 80a104e:	9300      	str	r3, [sp, #0]
 80a1050:	f7ff ffdc 	bl	80a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1054:	466a      	mov	r2, sp
 80a1056:	4629      	mov	r1, r5
 80a1058:	4620      	mov	r0, r4
 80a105a:	f001 fd81 	bl	80a2b60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a105e:	a801      	add	r0, sp, #4
 80a1060:	f7ff ffbe 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1064:	4620      	mov	r0, r4
 80a1066:	b003      	add	sp, #12
 80a1068:	bd30      	pop	{r4, r5, pc}

080a106a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a106a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a106c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a106e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1070:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1074:	a801      	add	r0, sp, #4
 80a1076:	9300      	str	r3, [sp, #0]
 80a1078:	f7ff ffc8 	bl	80a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a107c:	466a      	mov	r2, sp
 80a107e:	4629      	mov	r1, r5
 80a1080:	4620      	mov	r0, r4
 80a1082:	f001 fd49 	bl	80a2b18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1086:	a801      	add	r0, sp, #4
 80a1088:	f7ff ffaa 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a108c:	4620      	mov	r0, r4
 80a108e:	b003      	add	sp, #12
 80a1090:	bd30      	pop	{r4, r5, pc}
	...

080a1094 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1094:	b570      	push	{r4, r5, r6, lr}
 80a1096:	b08a      	sub	sp, #40	; 0x28
 80a1098:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a109a:	4601      	mov	r1, r0
 80a109c:	a804      	add	r0, sp, #16
 80a109e:	f7ff ffd0 	bl	80a1042 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a10a2:	4e14      	ldr	r6, [pc, #80]	; (80a10f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a10a4:	a804      	add	r0, sp, #16
 80a10a6:	f001 fd73 	bl	80a2b90 <_ZN5spark18JSONObjectIterator4nextEv>
 80a10aa:	b1e8      	cbz	r0, 80a10e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a10ac:	4668      	mov	r0, sp
 80a10ae:	a904      	add	r1, sp, #16
 80a10b0:	f7ff ffdb 	bl	80a106a <_ZNK5spark18JSONObjectIterator4nameEv>
 80a10b4:	4631      	mov	r1, r6
 80a10b6:	9802      	ldr	r0, [sp, #8]
 80a10b8:	f7ff fe44 	bl	80a0d44 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a10bc:	4604      	mov	r4, r0
 80a10be:	b110      	cbz	r0, 80a10c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a10c0:	1e2c      	subs	r4, r5, #0
 80a10c2:	bf18      	it	ne
 80a10c4:	2401      	movne	r4, #1
 80a10c6:	a801      	add	r0, sp, #4
 80a10c8:	f7ff ff8a 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10cc:	2c00      	cmp	r4, #0
 80a10ce:	d0e9      	beq.n	80a10a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a10d0:	4668      	mov	r0, sp
 80a10d2:	a904      	add	r1, sp, #16
 80a10d4:	f7ff ffa1 	bl	80a101a <_ZNK5spark18JSONObjectIterator5valueEv>
 80a10d8:	4668      	mov	r0, sp
 80a10da:	f001 fcfc 	bl	80a2ad6 <_ZNK5spark9JSONValue5toIntEv>
 80a10de:	6028      	str	r0, [r5, #0]
 80a10e0:	a801      	add	r0, sp, #4
 80a10e2:	f7ff ff7d 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10e6:	e7dd      	b.n	80a10a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a10e8:	a805      	add	r0, sp, #20
 80a10ea:	f7ff ff79 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a10ee:	b00a      	add	sp, #40	; 0x28
 80a10f0:	bd70      	pop	{r4, r5, r6, pc}
 80a10f2:	bf00      	nop
 80a10f4:	080a322d 	.word	0x080a322d

080a10f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a10f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a10fa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a10fc:	4919      	ldr	r1, [pc, #100]	; (80a1164 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a10fe:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1100:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a1102:	f001 ff66 	bl	80a2fd2 <strcmp>
 80a1106:	b948      	cbnz	r0, 80a111c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a1108:	f001 fa26 	bl	80a2558 <_Z16_fetch_usbserialv>
 80a110c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1110:	f001 fa04 	bl	80a251c <_ZN9USBSerial5beginEl>
        return &Serial;
 80a1114:	f001 fa20 	bl	80a2558 <_Z16_fetch_usbserialv>
}
 80a1118:	b003      	add	sp, #12
 80a111a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a111c:	4620      	mov	r0, r4
 80a111e:	4912      	ldr	r1, [pc, #72]	; (80a1168 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a1120:	f001 ff57 	bl	80a2fd2 <strcmp>
 80a1124:	b940      	cbnz	r0, 80a1138 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a1126:	f001 fa55 	bl	80a25d4 <_Z17_fetch_usbserial1v>
 80a112a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a112e:	f001 f9f5 	bl	80a251c <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a1132:	f001 fa4f 	bl	80a25d4 <_Z17_fetch_usbserial1v>
 80a1136:	e7ef      	b.n	80a1118 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a1138:	4620      	mov	r0, r4
 80a113a:	490c      	ldr	r1, [pc, #48]	; (80a116c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a113c:	f001 ff49 	bl	80a2fd2 <strcmp>
 80a1140:	b970      	cbnz	r0, 80a1160 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a1142:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a1146:	a901      	add	r1, sp, #4
 80a1148:	4628      	mov	r0, r5
        int baud = 9600;
 80a114a:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a114c:	f7ff ffa2 	bl	80a1094 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a1150:	f001 fac4 	bl	80a26dc <_Z22__fetch_global_Serial1v>
 80a1154:	9901      	ldr	r1, [sp, #4]
 80a1156:	f001 fabb 	bl	80a26d0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a115a:	f001 fabf 	bl	80a26dc <_Z22__fetch_global_Serial1v>
 80a115e:	e7db      	b.n	80a1118 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a1160:	2000      	movs	r0, #0
 80a1162:	e7d9      	b.n	80a1118 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a1164:	080a3232 	.word	0x080a3232
 80a1168:	080a3239 	.word	0x080a3239
 80a116c:	080a323c 	.word	0x080a323c

080a1170 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1170:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a1172:	2614      	movs	r6, #20
 80a1174:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1178:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a117a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a117e:	42ae      	cmp	r6, r5
 80a1180:	d005      	beq.n	80a118e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a1182:	f105 0008 	add.w	r0, r5, #8
 80a1186:	f7ff fff3 	bl	80a1170 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a118a:	3514      	adds	r5, #20
 80a118c:	e7f7      	b.n	80a117e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a118e:	6820      	ldr	r0, [r4, #0]
 80a1190:	f7ff fb8a 	bl	80a08a8 <free>
}
 80a1194:	4620      	mov	r0, r4
 80a1196:	bd70      	pop	{r4, r5, r6, pc}

080a1198 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1198:	b570      	push	{r4, r5, r6, lr}
 80a119a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a119c:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a11a0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a11a4:	42ae      	cmp	r6, r5
 80a11a6:	d004      	beq.n	80a11b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a11a8:	4628      	mov	r0, r5
 80a11aa:	f7ff fc81 	bl	80a0ab0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a11ae:	3510      	adds	r5, #16
 80a11b0:	e7f8      	b.n	80a11a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a11b2:	6820      	ldr	r0, [r4, #0]
 80a11b4:	f7ff fb78 	bl	80a08a8 <free>
}
 80a11b8:	4620      	mov	r0, r4
 80a11ba:	bd70      	pop	{r4, r5, r6, pc}

080a11bc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a11bc:	b510      	push	{r4, lr}
 80a11be:	4604      	mov	r4, r0
 80a11c0:	300c      	adds	r0, #12
 80a11c2:	f7ff ffd5 	bl	80a1170 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a11c6:	4620      	mov	r0, r4
 80a11c8:	f7ff ffe6 	bl	80a1198 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a11cc:	4620      	mov	r0, r4
 80a11ce:	bd10      	pop	{r4, pc}

080a11d0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a11d0:	b510      	push	{r4, lr}
 80a11d2:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a11d4:	4b03      	ldr	r3, [pc, #12]	; (80a11e4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a11d6:	f840 3b04 	str.w	r3, [r0], #4
 80a11da:	f7ff ffef 	bl	80a11bc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a11de:	4620      	mov	r0, r4
 80a11e0:	bd10      	pop	{r4, pc}
 80a11e2:	bf00      	nop
 80a11e4:	080a31cc 	.word	0x080a31cc

080a11e8 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a11e8:	b510      	push	{r4, lr}
 80a11ea:	4604      	mov	r4, r0
 80a11ec:	f7ff fff0 	bl	80a11d0 <_ZN5spark16StreamLogHandlerD1Ev>
 80a11f0:	4620      	mov	r0, r4
 80a11f2:	2124      	movs	r1, #36	; 0x24
 80a11f4:	f001 fe6b 	bl	80a2ece <_ZdlPvj>
 80a11f8:	4620      	mov	r0, r4
 80a11fa:	bd10      	pop	{r4, pc}

080a11fc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a11fc:	b510      	push	{r4, lr}
 80a11fe:	4604      	mov	r4, r0
 80a1200:	4b02      	ldr	r3, [pc, #8]	; (80a120c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a1202:	6003      	str	r3, [r0, #0]
 80a1204:	f7ff ffe4 	bl	80a11d0 <_ZN5spark16StreamLogHandlerD1Ev>
 80a1208:	4620      	mov	r0, r4
 80a120a:	bd10      	pop	{r4, pc}
 80a120c:	080a32e0 	.word	0x080a32e0

080a1210 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a1210:	b510      	push	{r4, lr}
 80a1212:	4604      	mov	r4, r0
 80a1214:	f7ff fff2 	bl	80a11fc <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a1218:	4620      	mov	r0, r4
 80a121a:	2124      	movs	r1, #36	; 0x24
 80a121c:	f001 fe57 	bl	80a2ece <_ZdlPvj>
 80a1220:	4620      	mov	r0, r4
 80a1222:	bd10      	pop	{r4, pc}

080a1224 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a1224:	2200      	movs	r2, #0
 80a1226:	e9c0 2200 	strd	r2, r2, [r0]
 80a122a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a122c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a122e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1230:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1232:	6004      	str	r4, [r0, #0]
 80a1234:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1236:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1238:	6044      	str	r4, [r0, #4]
 80a123a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a123c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a123e:	6084      	str	r4, [r0, #8]
}
 80a1240:	bd10      	pop	{r4, pc}

080a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a1242:	b510      	push	{r4, lr}
 80a1244:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a1246:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1248:	6818      	ldr	r0, [r3, #0]
 80a124a:	f7ff f95d 	bl	80a0508 <os_mutex_recursive_unlock>
 80a124e:	4620      	mov	r0, r4
 80a1250:	bd10      	pop	{r4, pc}
	...

080a1254 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a1254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1258:	b087      	sub	sp, #28
 80a125a:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a125c:	4b1c      	ldr	r3, [pc, #112]	; (80a12d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a125e:	4680      	mov	r8, r0
 80a1260:	685b      	ldr	r3, [r3, #4]
 80a1262:	4689      	mov	r9, r1
 80a1264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a1268:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a126a:	b96b      	cbnz	r3, 80a1288 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a126c:	f7ff fe86 	bl	80a0f7c <_ZN5spark10LogManager8instanceEv>
 80a1270:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1272:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a1276:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1278:	9305      	str	r3, [sp, #20]
 80a127a:	f7ff f93d 	bl	80a04f8 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a127e:	7b23      	ldrb	r3, [r4, #12]
 80a1280:	b12b      	cbz	r3, 80a128e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a1282:	a805      	add	r0, sp, #20
 80a1284:	f7ff ffdd 	bl	80a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a1288:	b007      	add	sp, #28
 80a128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a128e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a1290:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a1294:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a1296:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a129a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a129e:	45aa      	cmp	sl, r5
 80a12a0:	d012      	beq.n	80a12c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a12a2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a12a6:	4631      	mov	r1, r6
 80a12a8:	1d38      	adds	r0, r7, #4
 80a12aa:	f7ff fdeb 	bl	80a0e84 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a12ae:	4581      	cmp	r9, r0
 80a12b0:	d3f5      	bcc.n	80a129e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a12b2:	9a03      	ldr	r2, [sp, #12]
 80a12b4:	683b      	ldr	r3, [r7, #0]
 80a12b6:	9200      	str	r2, [sp, #0]
 80a12b8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a12bc:	464a      	mov	r2, r9
 80a12be:	4633      	mov	r3, r6
 80a12c0:	4641      	mov	r1, r8
 80a12c2:	4638      	mov	r0, r7
 80a12c4:	47d8      	blx	fp
 80a12c6:	e7ea      	b.n	80a129e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a12c8:	2300      	movs	r3, #0
 80a12ca:	7323      	strb	r3, [r4, #12]
 80a12cc:	e7d9      	b.n	80a1282 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a12ce:	bf00      	nop
 80a12d0:	e000ed00 	.word	0xe000ed00

080a12d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a12d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a12d8:	469b      	mov	fp, r3
 80a12da:	4b1a      	ldr	r3, [pc, #104]	; (80a1344 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a12dc:	4680      	mov	r8, r0
 80a12de:	685b      	ldr	r3, [r3, #4]
 80a12e0:	4689      	mov	r9, r1
 80a12e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a12e6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a12e8:	b96b      	cbnz	r3, 80a1306 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a12ea:	f7ff fe47 	bl	80a0f7c <_ZN5spark10LogManager8instanceEv>
 80a12ee:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a12f0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a12f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a12f6:	9301      	str	r3, [sp, #4]
 80a12f8:	f7ff f8fe 	bl	80a04f8 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a12fc:	7b23      	ldrb	r3, [r4, #12]
 80a12fe:	b12b      	cbz	r3, 80a130c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a1300:	a801      	add	r0, sp, #4
 80a1302:	f7ff ff9e 	bl	80a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a1306:	b003      	add	sp, #12
 80a1308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a130c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a130e:	b2f6      	uxtb	r6, r6
 80a1310:	7323      	strb	r3, [r4, #12]
 80a1312:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a1316:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a131a:	4555      	cmp	r5, sl
 80a131c:	d00e      	beq.n	80a133c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a131e:	f855 7b04 	ldr.w	r7, [r5], #4
 80a1322:	4659      	mov	r1, fp
 80a1324:	1d38      	adds	r0, r7, #4
 80a1326:	f7ff fdad 	bl	80a0e84 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a132a:	4286      	cmp	r6, r0
 80a132c:	d3f5      	bcc.n	80a131a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a132e:	683b      	ldr	r3, [r7, #0]
 80a1330:	464a      	mov	r2, r9
 80a1332:	4641      	mov	r1, r8
 80a1334:	4638      	mov	r0, r7
 80a1336:	68db      	ldr	r3, [r3, #12]
 80a1338:	4798      	blx	r3
 80a133a:	e7ee      	b.n	80a131a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a133c:	2300      	movs	r3, #0
 80a133e:	7323      	strb	r3, [r4, #12]
 80a1340:	e7de      	b.n	80a1300 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a1342:	bf00      	nop
 80a1344:	e000ed00 	.word	0xe000ed00

080a1348 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a1348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a134c:	4b16      	ldr	r3, [pc, #88]	; (80a13a8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a134e:	4605      	mov	r5, r0
 80a1350:	685b      	ldr	r3, [r3, #4]
 80a1352:	460f      	mov	r7, r1
 80a1354:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a1358:	bb1b      	cbnz	r3, 80a13a2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a135a:	f7ff fe0f 	bl	80a0f7c <_ZN5spark10LogManager8instanceEv>
 80a135e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1360:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1364:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a1366:	9301      	str	r3, [sp, #4]
 80a1368:	f7ff f8c6 	bl	80a04f8 <os_mutex_recursive_lock>
 80a136c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a1370:	2446      	movs	r4, #70	; 0x46
 80a1372:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a1376:	45b0      	cmp	r8, r6
 80a1378:	d109      	bne.n	80a138e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a137a:	a801      	add	r0, sp, #4
 80a137c:	f7ff ff61 	bl	80a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a1380:	42a5      	cmp	r5, r4
 80a1382:	bfb4      	ite	lt
 80a1384:	2000      	movlt	r0, #0
 80a1386:	2001      	movge	r0, #1
}
 80a1388:	b002      	add	sp, #8
 80a138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a138e:	f856 0b04 	ldr.w	r0, [r6], #4
 80a1392:	4639      	mov	r1, r7
 80a1394:	3004      	adds	r0, #4
 80a1396:	f7ff fd75 	bl	80a0e84 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a139a:	4284      	cmp	r4, r0
 80a139c:	bfa8      	it	ge
 80a139e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a13a0:	e7e9      	b.n	80a1376 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a13a2:	2000      	movs	r0, #0
 80a13a4:	e7f0      	b.n	80a1388 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a13a6:	bf00      	nop
 80a13a8:	e000ed00 	.word	0xe000ed00

080a13ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a13ac:	460b      	mov	r3, r1
 80a13ae:	b570      	push	{r4, r5, r6, lr}
 80a13b0:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a13b2:	c805      	ldmia	r0, {r0, r2}
 80a13b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a13b8:	4282      	cmp	r2, r0
 80a13ba:	d007      	beq.n	80a13cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a13bc:	4601      	mov	r1, r0
            if (*p == value) {
 80a13be:	681d      	ldr	r5, [r3, #0]
 80a13c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80a13c4:	42ae      	cmp	r6, r5
 80a13c6:	d003      	beq.n	80a13d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a13c8:	4608      	mov	r0, r1
 80a13ca:	e7f5      	b.n	80a13b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a13cc:	2000      	movs	r0, #0
}
 80a13ce:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a13d0:	1a52      	subs	r2, r2, r1
 80a13d2:	f001 fda1 	bl	80a2f18 <memmove>
    --size_;
 80a13d6:	6863      	ldr	r3, [r4, #4]
    return true;
 80a13d8:	2001      	movs	r0, #1
    --size_;
 80a13da:	3b01      	subs	r3, #1
 80a13dc:	6063      	str	r3, [r4, #4]
    return true;
 80a13de:	e7f6      	b.n	80a13ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a13e0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a13e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a13e2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a13e4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a13e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a13ea:	9101      	str	r1, [sp, #4]
 80a13ec:	9303      	str	r3, [sp, #12]
 80a13ee:	f7ff f883 	bl	80a04f8 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a13f2:	4620      	mov	r0, r4
 80a13f4:	a901      	add	r1, sp, #4
 80a13f6:	f7ff ffd9 	bl	80a13ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a13fa:	b118      	cbz	r0, 80a1404 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a13fc:	6863      	ldr	r3, [r4, #4]
 80a13fe:	b90b      	cbnz	r3, 80a1404 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a1400:	f7ff fde8 	bl	80a0fd4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1404:	a803      	add	r0, sp, #12
 80a1406:	f7ff ff1c 	bl	80a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a140a:	b004      	add	sp, #16
 80a140c:	bd10      	pop	{r4, pc}

080a140e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a140e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a1410:	b570      	push	{r4, r5, r6, lr}
 80a1412:	4604      	mov	r4, r0
 80a1414:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a1418:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a141c:	42ae      	cmp	r6, r5
 80a141e:	d015      	beq.n	80a144c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a1420:	4620      	mov	r0, r4
 80a1422:	f105 0110 	add.w	r1, r5, #16
 80a1426:	f7ff ffc1 	bl	80a13ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a142a:	6863      	ldr	r3, [r4, #4]
 80a142c:	b90b      	cbnz	r3, 80a1432 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a142e:	f7ff fdd1 	bl	80a0fd4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a1432:	69e0      	ldr	r0, [r4, #28]
 80a1434:	6929      	ldr	r1, [r5, #16]
 80a1436:	6803      	ldr	r3, [r0, #0]
 80a1438:	68db      	ldr	r3, [r3, #12]
 80a143a:	4798      	blx	r3
        if (h.stream) {
 80a143c:	6969      	ldr	r1, [r5, #20]
 80a143e:	b119      	cbz	r1, 80a1448 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a1440:	6a20      	ldr	r0, [r4, #32]
 80a1442:	6803      	ldr	r3, [r0, #0]
 80a1444:	68db      	ldr	r3, [r3, #12]
 80a1446:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a1448:	3518      	adds	r5, #24
 80a144a:	e7e7      	b.n	80a141c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a144c:	2618      	movs	r6, #24
 80a144e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a1452:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1456:	42ae      	cmp	r6, r5
 80a1458:	d004      	beq.n	80a1464 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a145a:	4628      	mov	r0, r5
 80a145c:	f7ff fb28 	bl	80a0ab0 <_ZN6StringD1Ev>
 80a1460:	3518      	adds	r5, #24
 80a1462:	e7f8      	b.n	80a1456 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a1464:	2300      	movs	r3, #0
 80a1466:	6163      	str	r3, [r4, #20]
}
 80a1468:	bd70      	pop	{r4, r5, r6, pc}

080a146a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a146a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a146c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a146e:	f7ff fdb1 	bl	80a0fd4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1472:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a1476:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	f7ff f83d 	bl	80a04f8 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a147e:	4620      	mov	r0, r4
 80a1480:	f7ff ffc5 	bl	80a140e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a1484:	a801      	add	r0, sp, #4
 80a1486:	f7ff fedc 	bl	80a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a148a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a148c:	b108      	cbz	r0, 80a1492 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a148e:	f7ff f82b 	bl	80a04e8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a1492:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a1496:	2618      	movs	r6, #24
 80a1498:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a149c:	42ae      	cmp	r6, r5
 80a149e:	d004      	beq.n	80a14aa <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a14a0:	4628      	mov	r0, r5
 80a14a2:	f7ff fb05 	bl	80a0ab0 <_ZN6StringD1Ev>
 80a14a6:	3518      	adds	r5, #24
 80a14a8:	e7f8      	b.n	80a149c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a14aa:	6920      	ldr	r0, [r4, #16]
 80a14ac:	f7ff f9fc 	bl	80a08a8 <free>
 80a14b0:	6820      	ldr	r0, [r4, #0]
 80a14b2:	f7ff f9f9 	bl	80a08a8 <free>
}
 80a14b6:	4620      	mov	r0, r4
 80a14b8:	b002      	add	sp, #8
 80a14ba:	bd70      	pop	{r4, r5, r6, pc}

080a14bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a14bc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a14be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14c0:	4606      	mov	r6, r0
 80a14c2:	460c      	mov	r4, r1
 80a14c4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a14c6:	d927      	bls.n	80a1518 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a14c8:	4290      	cmp	r0, r2
 80a14ca:	d226      	bcs.n	80a151a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a14cc:	2600      	movs	r6, #0
            --end;
 80a14ce:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a14d2:	1a6c      	subs	r4, r5, r1
 80a14d4:	f1a1 0714 	sub.w	r7, r1, #20
 80a14d8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a14da:	42af      	cmp	r7, r5
 80a14dc:	d03d      	beq.n	80a155a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a14de:	b1a4      	cbz	r4, 80a150a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a14e0:	682b      	ldr	r3, [r5, #0]
 80a14e2:	6023      	str	r3, [r4, #0]
 80a14e4:	88ab      	ldrh	r3, [r5, #4]
 80a14e6:	80a3      	strh	r3, [r4, #4]
 80a14e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a14ec:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a14f0:	6126      	str	r6, [r4, #16]
 80a14f2:	80e3      	strh	r3, [r4, #6]
 80a14f4:	68ab      	ldr	r3, [r5, #8]
 80a14f6:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a14f8:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a14fa:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a14fc:	68ea      	ldr	r2, [r5, #12]
 80a14fe:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1500:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1502:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1504:	692a      	ldr	r2, [r5, #16]
 80a1506:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1508:	612b      	str	r3, [r5, #16]
 80a150a:	f105 0008 	add.w	r0, r5, #8
 80a150e:	f7ff fe2f 	bl	80a1170 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a1512:	3d14      	subs	r5, #20
 80a1514:	3c14      	subs	r4, #20
 80a1516:	e7e0      	b.n	80a14da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a1518:	d01f      	beq.n	80a155a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a151a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a151c:	42ac      	cmp	r4, r5
 80a151e:	d01c      	beq.n	80a155a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a1520:	b1a6      	cbz	r6, 80a154c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a1522:	6823      	ldr	r3, [r4, #0]
 80a1524:	6033      	str	r3, [r6, #0]
 80a1526:	88a3      	ldrh	r3, [r4, #4]
 80a1528:	80b3      	strh	r3, [r6, #4]
 80a152a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a152e:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a1532:	6137      	str	r7, [r6, #16]
 80a1534:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a1536:	68a3      	ldr	r3, [r4, #8]
 80a1538:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a153a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a153c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a153e:	68e2      	ldr	r2, [r4, #12]
 80a1540:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1542:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1544:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1546:	6922      	ldr	r2, [r4, #16]
 80a1548:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a154a:	6123      	str	r3, [r4, #16]
 80a154c:	f104 0008 	add.w	r0, r4, #8
 80a1550:	f7ff fe0e 	bl	80a1170 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a1554:	3414      	adds	r4, #20
 80a1556:	3614      	adds	r6, #20
 80a1558:	e7e0      	b.n	80a151c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a155c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a155e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a1562:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a1564:	4604      	mov	r4, r0
 80a1566:	460e      	mov	r6, r1
 80a1568:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a156a:	db0d      	blt.n	80a1588 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a156c:	3501      	adds	r5, #1
        if (n > 0) {
 80a156e:	2d00      	cmp	r5, #0
 80a1570:	6800      	ldr	r0, [r0, #0]
 80a1572:	dd04      	ble.n	80a157e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a1574:	00a9      	lsls	r1, r5, #2
 80a1576:	f7ff f99f 	bl	80a08b8 <realloc>
            if (!d) {
 80a157a:	b918      	cbnz	r0, 80a1584 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a157e:	f7ff f993 	bl	80a08a8 <free>
        T* d = nullptr;
 80a1582:	2000      	movs	r0, #0
        data_ = d;
 80a1584:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a1586:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a1588:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a158a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a158c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a1590:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a1592:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a1596:	1d08      	adds	r0, r1, #4
 80a1598:	f001 fcbe 	bl	80a2f18 <memmove>
    new(p) T(std::move(value));
 80a159c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a15a0:	6863      	ldr	r3, [r4, #4]
    return true;
 80a15a2:	2001      	movs	r0, #1
    ++size_;
 80a15a4:	3301      	adds	r3, #1
 80a15a6:	6063      	str	r3, [r4, #4]
    return true;
 80a15a8:	e7e8      	b.n	80a157c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a15aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a15aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a15ac:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a15ae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a15b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a15b4:	460d      	mov	r5, r1
 80a15b6:	9301      	str	r3, [sp, #4]
 80a15b8:	f7fe ff9e 	bl	80a04f8 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a15bc:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a15c0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a15c4:	4283      	cmp	r3, r0
 80a15c6:	461a      	mov	r2, r3
 80a15c8:	d00a      	beq.n	80a15e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a15ca:	6812      	ldr	r2, [r2, #0]
 80a15cc:	3304      	adds	r3, #4
 80a15ce:	42aa      	cmp	r2, r5
 80a15d0:	d1f8      	bne.n	80a15c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a15d2:	a801      	add	r0, sp, #4
 80a15d4:	f7ff fe35 	bl	80a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a15d8:	2500      	movs	r5, #0
}
 80a15da:	4628      	mov	r0, r5
 80a15dc:	b003      	add	sp, #12
 80a15de:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a15e0:	462a      	mov	r2, r5
 80a15e2:	4620      	mov	r0, r4
 80a15e4:	f7ff ffba 	bl	80a155c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a15e8:	4605      	mov	r5, r0
 80a15ea:	2800      	cmp	r0, #0
 80a15ec:	d0f1      	beq.n	80a15d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a15ee:	6863      	ldr	r3, [r4, #4]
 80a15f0:	2b01      	cmp	r3, #1
 80a15f2:	d101      	bne.n	80a15f8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a15f4:	f7ff fce2 	bl	80a0fbc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a15f8:	a801      	add	r0, sp, #4
 80a15fa:	f7ff fe22 	bl	80a1242 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a15fe:	e7ec      	b.n	80a15da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a1600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a1600:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a1602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1604:	4604      	mov	r4, r0
 80a1606:	460d      	mov	r5, r1
 80a1608:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a160a:	d914      	bls.n	80a1636 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a160c:	4290      	cmp	r0, r2
 80a160e:	d213      	bcs.n	80a1638 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a1610:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a1614:	1a75      	subs	r5, r6, r1
 80a1616:	f1a1 0710 	sub.w	r7, r1, #16
 80a161a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a161c:	42b7      	cmp	r7, r6
 80a161e:	d018      	beq.n	80a1652 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a1620:	b11c      	cbz	r4, 80a162a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a1622:	4631      	mov	r1, r6
 80a1624:	4620      	mov	r0, r4
 80a1626:	f7ff faaa 	bl	80a0b7e <_ZN6StringC1EOS_>
                end->~T();
 80a162a:	4630      	mov	r0, r6
 80a162c:	f7ff fa40 	bl	80a0ab0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a1630:	3e10      	subs	r6, #16
 80a1632:	3c10      	subs	r4, #16
 80a1634:	e7f2      	b.n	80a161c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a1636:	d00c      	beq.n	80a1652 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a1638:	42b5      	cmp	r5, r6
 80a163a:	d00a      	beq.n	80a1652 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a163c:	b11c      	cbz	r4, 80a1646 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a163e:	4629      	mov	r1, r5
 80a1640:	4620      	mov	r0, r4
 80a1642:	f7ff fa9c 	bl	80a0b7e <_ZN6StringC1EOS_>
                p->~T();
 80a1646:	4628      	mov	r0, r5
 80a1648:	f7ff fa32 	bl	80a0ab0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a164c:	3510      	adds	r5, #16
 80a164e:	3410      	adds	r4, #16
 80a1650:	e7f2      	b.n	80a1638 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a1652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1654 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a1654:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a1656:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a1658:	4605      	mov	r5, r0
        if (n > 0) {
 80a165a:	dd11      	ble.n	80a1680 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a165c:	0130      	lsls	r0, r6, #4
 80a165e:	f7ff f91b 	bl	80a0898 <malloc>
            if (!d) {
 80a1662:	4604      	mov	r4, r0
 80a1664:	b158      	cbz	r0, 80a167e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a1666:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a166a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a166e:	f7ff ffc7 	bl	80a1600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a1672:	6828      	ldr	r0, [r5, #0]
 80a1674:	f7ff f918 	bl	80a08a8 <free>
        return true;
 80a1678:	2001      	movs	r0, #1
        data_ = d;
 80a167a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a167c:	60ae      	str	r6, [r5, #8]
    }
 80a167e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a1680:	2400      	movs	r4, #0
 80a1682:	e7f6      	b.n	80a1672 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a1684 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a1684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1688:	4691      	mov	r9, r2
        capacity_(0) {
 80a168a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a168c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a168e:	b097      	sub	sp, #92	; 0x5c
 80a1690:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a1692:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a1696:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a1698:	4299      	cmp	r1, r3
        capacity_(0) {
 80a169a:	e9c0 3300 	strd	r3, r3, [r0]
 80a169e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a16a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a16a6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a16aa:	7602      	strb	r2, [r0, #24]
 80a16ac:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a16ae:	dc23      	bgt.n	80a16f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a16b0:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a16b4:	2314      	movs	r3, #20
 80a16b6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a16ba:	42af      	cmp	r7, r5
 80a16bc:	d03b      	beq.n	80a1736 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a16be:	4629      	mov	r1, r5
 80a16c0:	a80d      	add	r0, sp, #52	; 0x34
 80a16c2:	f7ff fa5c 	bl	80a0b7e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a16c6:	a90d      	add	r1, sp, #52	; 0x34
 80a16c8:	a811      	add	r0, sp, #68	; 0x44
 80a16ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a16cc:	f7ff fa57 	bl	80a0b7e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a16d0:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a16d4:	4299      	cmp	r1, r3
 80a16d6:	da1b      	bge.n	80a1710 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a16d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a16da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a16dc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a16e0:	4631      	mov	r1, r6
 80a16e2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a16e6:	f106 0010 	add.w	r0, r6, #16
 80a16ea:	f7ff ff89 	bl	80a1600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a16ee:	b9ee      	cbnz	r6, 80a172c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a16f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a16f2:	3301      	adds	r3, #1
 80a16f4:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a16f6:	e011      	b.n	80a171c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a16f8:	a80a      	add	r0, sp, #40	; 0x28
 80a16fa:	f7ff ffab 	bl	80a1654 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a16fe:	2800      	cmp	r0, #0
 80a1700:	d1d6      	bne.n	80a16b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a1702:	a80a      	add	r0, sp, #40	; 0x28
 80a1704:	f7ff fd48 	bl	80a1198 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1708:	4620      	mov	r0, r4
 80a170a:	b017      	add	sp, #92	; 0x5c
 80a170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1710:	3101      	adds	r1, #1
 80a1712:	a80a      	add	r0, sp, #40	; 0x28
 80a1714:	f7ff ff9e 	bl	80a1654 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1718:	2800      	cmp	r0, #0
 80a171a:	d1dd      	bne.n	80a16d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a171c:	a811      	add	r0, sp, #68	; 0x44
 80a171e:	f7ff f9c7 	bl	80a0ab0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a1722:	a80d      	add	r0, sp, #52	; 0x34
 80a1724:	f7ff f9c4 	bl	80a0ab0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a1728:	3514      	adds	r5, #20
 80a172a:	e7c6      	b.n	80a16ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a172c:	4630      	mov	r0, r6
 80a172e:	a911      	add	r1, sp, #68	; 0x44
 80a1730:	f7ff fa25 	bl	80a0b7e <_ZN6StringC1EOS_>
 80a1734:	e7dc      	b.n	80a16f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a1736:	2600      	movs	r6, #0
 80a1738:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a173c:	4637      	mov	r7, r6
 80a173e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a1742:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a1744:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a1748:	429e      	cmp	r6, r3
 80a174a:	f280 8097 	bge.w	80a187c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a174e:	0133      	lsls	r3, r6, #4
 80a1750:	58d3      	ldr	r3, [r2, r3]
 80a1752:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a1754:	b90b      	cbnz	r3, 80a175a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a1756:	3601      	adds	r6, #1
 80a1758:	e7f4      	b.n	80a1744 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a175a:	fb0a f306 	mul.w	r3, sl, r6
 80a175e:	9709      	str	r7, [sp, #36]	; 0x24
 80a1760:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a1762:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a1764:	a909      	add	r1, sp, #36	; 0x24
 80a1766:	a808      	add	r0, sp, #32
 80a1768:	f7ff fac5 	bl	80a0cf6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a176c:	4683      	mov	fp, r0
 80a176e:	2800      	cmp	r0, #0
 80a1770:	d0f1      	beq.n	80a1756 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1772:	4601      	mov	r1, r0
 80a1774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1776:	4628      	mov	r0, r5
 80a1778:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a177c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1780:	f7ff fb42 	bl	80a0e08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1784:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1788:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a178a:	f1b8 0f00 	cmp.w	r8, #0
 80a178e:	d166      	bne.n	80a185e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a1790:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a1794:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a1798:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a179c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a17a0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a17a4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a17a8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a17ac:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a17b0:	4293      	cmp	r3, r2
 80a17b2:	db1a      	blt.n	80a17ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a17b4:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a17b8:	f1bb 0f00 	cmp.w	fp, #0
 80a17bc:	dd4a      	ble.n	80a1854 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a17be:	fb0a f00b 	mul.w	r0, sl, fp
 80a17c2:	f7ff f869 	bl	80a0898 <malloc>
            if (!d) {
 80a17c6:	9004      	str	r0, [sp, #16]
 80a17c8:	2800      	cmp	r0, #0
 80a17ca:	d045      	beq.n	80a1858 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a17cc:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a17d0:	fb0a 1202 	mla	r2, sl, r2, r1
 80a17d4:	f7ff fe72 	bl	80a14bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a17d8:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a17da:	6828      	ldr	r0, [r5, #0]
 80a17dc:	9304      	str	r3, [sp, #16]
 80a17de:	f7ff f863 	bl	80a08a8 <free>
        data_ = d;
 80a17e2:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a17e4:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a17e8:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a17ea:	9b01      	ldr	r3, [sp, #4]
 80a17ec:	f8d5 b000 	ldr.w	fp, [r5]
 80a17f0:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a17f4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a17f6:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a17fa:	f101 0014 	add.w	r0, r1, #20
 80a17fe:	fb0a b202 	mla	r2, sl, r2, fp
 80a1802:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a1804:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a1806:	f7ff fe59 	bl	80a14bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a180a:	9904      	ldr	r1, [sp, #16]
 80a180c:	b1a9      	cbz	r1, 80a183a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a180e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a1810:	9b05      	ldr	r3, [sp, #20]
 80a1812:	f84b 2003 	str.w	r2, [fp, r3]
 80a1816:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a181a:	808b      	strh	r3, [r1, #4]
 80a181c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a1820:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a1824:	610f      	str	r7, [r1, #16]
 80a1826:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a1828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a182a:	608b      	str	r3, [r1, #8]
 80a182c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a182e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a1830:	60cb      	str	r3, [r1, #12]
 80a1832:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a1834:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a1836:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1838:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a183a:	686b      	ldr	r3, [r5, #4]
 80a183c:	3301      	adds	r3, #1
 80a183e:	606b      	str	r3, [r5, #4]
 80a1840:	a813      	add	r0, sp, #76	; 0x4c
 80a1842:	f7ff fc95 	bl	80a1170 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1846:	f1b8 0f00 	cmp.w	r8, #0
 80a184a:	d008      	beq.n	80a185e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a184c:	a80d      	add	r0, sp, #52	; 0x34
 80a184e:	f7ff fc8f 	bl	80a1170 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1852:	e756      	b.n	80a1702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a1854:	4643      	mov	r3, r8
 80a1856:	e7c0      	b.n	80a17da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1858:	f04f 0801 	mov.w	r8, #1
 80a185c:	e7f0      	b.n	80a1840 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a185e:	9b01      	ldr	r3, [sp, #4]
 80a1860:	682d      	ldr	r5, [r5, #0]
 80a1862:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a1866:	9b08      	ldr	r3, [sp, #32]
 80a1868:	781b      	ldrb	r3, [r3, #0]
 80a186a:	b92b      	cbnz	r3, 80a1878 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a186c:	f8d9 3000 	ldr.w	r3, [r9]
 80a1870:	9a02      	ldr	r2, [sp, #8]
 80a1872:	4413      	add	r3, r2
 80a1874:	7c1b      	ldrb	r3, [r3, #16]
 80a1876:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a1878:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a187a:	e773      	b.n	80a1764 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a187c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a187e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1880:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1882:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1884:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1886:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a1888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a188a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a188c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a188e:	60a2      	str	r2, [r4, #8]
 80a1890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a1892:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1894:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1896:	60e2      	str	r2, [r4, #12]
 80a1898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a189a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a189c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a189e:	6122      	str	r2, [r4, #16]
 80a18a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a18a2:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a18a4:	9b03      	ldr	r3, [sp, #12]
 80a18a6:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a18a8:	6162      	str	r2, [r4, #20]
 80a18aa:	7623      	strb	r3, [r4, #24]
 80a18ac:	e7ce      	b.n	80a184c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a18b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a18b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a18b2:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a18b4:	460e      	mov	r6, r1
 80a18b6:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a18b8:	4b08      	ldr	r3, [pc, #32]	; (80a18dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a18ba:	4611      	mov	r1, r2
 80a18bc:	f845 3b04 	str.w	r3, [r5], #4
 80a18c0:	a801      	add	r0, sp, #4
 80a18c2:	f7fe fd50 	bl	80a0366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a18c6:	4631      	mov	r1, r6
 80a18c8:	aa01      	add	r2, sp, #4
 80a18ca:	4628      	mov	r0, r5
 80a18cc:	f7ff feda 	bl	80a1684 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a18d0:	a801      	add	r0, sp, #4
 80a18d2:	f7fe fd07 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	b004      	add	sp, #16
 80a18da:	bd70      	pop	{r4, r5, r6, pc}
 80a18dc:	080a31cc 	.word	0x080a31cc

080a18e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a18e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a18e2:	460f      	mov	r7, r1
 80a18e4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a18e6:	4638      	mov	r0, r7
 80a18e8:	4925      	ldr	r1, [pc, #148]	; (80a1980 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a18ea:	4616      	mov	r6, r2
 80a18ec:	461d      	mov	r5, r3
 80a18ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a18f0:	f001 fb6f 	bl	80a2fd2 <strcmp>
 80a18f4:	bb00      	cbnz	r0, 80a1938 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a18f6:	b1e4      	cbz	r4, 80a1932 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a18f8:	4629      	mov	r1, r5
 80a18fa:	4668      	mov	r0, sp
 80a18fc:	f7ff fc92 	bl	80a1224 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1900:	2024      	movs	r0, #36	; 0x24
 80a1902:	4920      	ldr	r1, [pc, #128]	; (80a1984 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1904:	f001 fae5 	bl	80a2ed2 <_ZnwjRKSt9nothrow_t>
 80a1908:	4605      	mov	r5, r0
 80a190a:	b170      	cbz	r0, 80a192a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a190c:	4669      	mov	r1, sp
 80a190e:	a803      	add	r0, sp, #12
 80a1910:	f7fe fd29 	bl	80a0366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1914:	4631      	mov	r1, r6
 80a1916:	aa03      	add	r2, sp, #12
 80a1918:	4628      	mov	r0, r5
 80a191a:	f7ff ffc9 	bl	80a18b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a191e:	a803      	add	r0, sp, #12
 80a1920:	f7fe fce0 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a1924:	4b18      	ldr	r3, [pc, #96]	; (80a1988 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a1926:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a1928:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a192a:	4668      	mov	r0, sp
 80a192c:	f7fe fcda 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1930:	462c      	mov	r4, r5
}
 80a1932:	4620      	mov	r0, r4
 80a1934:	b007      	add	sp, #28
 80a1936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a1938:	4638      	mov	r0, r7
 80a193a:	4914      	ldr	r1, [pc, #80]	; (80a198c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a193c:	f001 fb49 	bl	80a2fd2 <strcmp>
 80a1940:	b9e0      	cbnz	r0, 80a197c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a1942:	2c00      	cmp	r4, #0
 80a1944:	d0f5      	beq.n	80a1932 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1946:	4629      	mov	r1, r5
 80a1948:	4668      	mov	r0, sp
 80a194a:	f7ff fc6b 	bl	80a1224 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a194e:	2024      	movs	r0, #36	; 0x24
 80a1950:	490c      	ldr	r1, [pc, #48]	; (80a1984 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1952:	f001 fabe 	bl	80a2ed2 <_ZnwjRKSt9nothrow_t>
 80a1956:	4605      	mov	r5, r0
 80a1958:	2800      	cmp	r0, #0
 80a195a:	d0e6      	beq.n	80a192a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a195c:	4669      	mov	r1, sp
 80a195e:	a803      	add	r0, sp, #12
 80a1960:	f7fe fd01 	bl	80a0366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1964:	4631      	mov	r1, r6
 80a1966:	aa03      	add	r2, sp, #12
 80a1968:	4628      	mov	r0, r5
 80a196a:	f7ff ffa1 	bl	80a18b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a196e:	a803      	add	r0, sp, #12
 80a1970:	f7fe fcb8 	bl	80a02e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1974:	4b06      	ldr	r3, [pc, #24]	; (80a1990 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a1976:	622c      	str	r4, [r5, #32]
 80a1978:	602b      	str	r3, [r5, #0]
}
 80a197a:	e7d6      	b.n	80a192a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a197c:	2400      	movs	r4, #0
 80a197e:	e7d8      	b.n	80a1932 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a1980:	080a3244 	.word	0x080a3244
 80a1984:	080a3475 	.word	0x080a3475
 80a1988:	080a32e0 	.word	0x080a32e0
 80a198c:	080a3248 	.word	0x080a3248
 80a1990:	080a32c8 	.word	0x080a32c8

080a1994 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a1994:	4b01      	ldr	r3, [pc, #4]	; (80a199c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1996:	4a02      	ldr	r2, [pc, #8]	; (80a19a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1998:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a199a:	4770      	bx	lr
 80a199c:	200000e4 	.word	0x200000e4
 80a19a0:	080a3259 	.word	0x080a3259

080a19a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a19a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a19a8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a19aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a19ae:	4604      	mov	r4, r0
 80a19b0:	460e      	mov	r6, r1
 80a19b2:	4617      	mov	r7, r2
 80a19b4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a19b6:	f000 fdcf 	bl	80a2558 <_Z16_fetch_usbserialv>
 80a19ba:	4581      	cmp	r9, r0
 80a19bc:	d04d      	beq.n	80a1a5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a19be:	792b      	ldrb	r3, [r5, #4]
 80a19c0:	0719      	lsls	r1, r3, #28
 80a19c2:	d504      	bpl.n	80a19ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a19c4:	4620      	mov	r0, r4
 80a19c6:	696a      	ldr	r2, [r5, #20]
 80a19c8:	4954      	ldr	r1, [pc, #336]	; (80a1b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a19ca:	f7ff fa0e 	bl	80a0dea <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a19ce:	f1b8 0f00 	cmp.w	r8, #0
 80a19d2:	d00d      	beq.n	80a19f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a19d4:	215b      	movs	r1, #91	; 0x5b
 80a19d6:	4620      	mov	r0, r4
 80a19d8:	f7ff f9fb 	bl	80a0dd2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a19dc:	4641      	mov	r1, r8
 80a19de:	4620      	mov	r0, r4
 80a19e0:	f7ff f9e9 	bl	80a0db6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a19e4:	6823      	ldr	r3, [r4, #0]
 80a19e6:	2202      	movs	r2, #2
 80a19e8:	4620      	mov	r0, r4
 80a19ea:	68db      	ldr	r3, [r3, #12]
 80a19ec:	494c      	ldr	r1, [pc, #304]	; (80a1b20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a19ee:	4798      	blx	r3
    if (attr.has_file) {
 80a19f0:	792b      	ldrb	r3, [r5, #4]
 80a19f2:	07da      	lsls	r2, r3, #31
 80a19f4:	d524      	bpl.n	80a1a40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a19f6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a19fa:	212f      	movs	r1, #47	; 0x2f
 80a19fc:	4640      	mov	r0, r8
 80a19fe:	f001 fb30 	bl	80a3062 <strrchr>
    if (s1) {
 80a1a02:	b108      	cbz	r0, 80a1a08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a1a04:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a1a08:	4641      	mov	r1, r8
 80a1a0a:	4620      	mov	r0, r4
 80a1a0c:	f7ff f9d3 	bl	80a0db6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a1a10:	792b      	ldrb	r3, [r5, #4]
 80a1a12:	079b      	lsls	r3, r3, #30
 80a1a14:	d508      	bpl.n	80a1a28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a1a16:	213a      	movs	r1, #58	; 0x3a
 80a1a18:	4620      	mov	r0, r4
 80a1a1a:	f7ff f9da 	bl	80a0dd2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a1a1e:	4620      	mov	r0, r4
 80a1a20:	68ea      	ldr	r2, [r5, #12]
 80a1a22:	4940      	ldr	r1, [pc, #256]	; (80a1b24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a1a24:	f7ff f9e1 	bl	80a0dea <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a1a28:	792a      	ldrb	r2, [r5, #4]
 80a1a2a:	6823      	ldr	r3, [r4, #0]
 80a1a2c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a1a30:	4620      	mov	r0, r4
            write(", ", 2);
 80a1a32:	f04f 0202 	mov.w	r2, #2
 80a1a36:	68db      	ldr	r3, [r3, #12]
 80a1a38:	bf14      	ite	ne
 80a1a3a:	493b      	ldrne	r1, [pc, #236]	; (80a1b28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a1a3c:	493b      	ldreq	r1, [pc, #236]	; (80a1b2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1a3e:	4798      	blx	r3
    if (attr.has_function) {
 80a1a40:	792b      	ldrb	r3, [r5, #4]
 80a1a42:	0758      	lsls	r0, r3, #29
 80a1a44:	d51d      	bpl.n	80a1a82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1a46:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1a48:	460b      	mov	r3, r1
 80a1a4a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a1a4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1a50:	b160      	cbz	r0, 80a1a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a1a52:	2820      	cmp	r0, #32
 80a1a54:	d108      	bne.n	80a1a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a1a56:	4619      	mov	r1, r3
 80a1a58:	e7f7      	b.n	80a1a4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a1a5a:	4835      	ldr	r0, [pc, #212]	; (80a1b30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a1a5c:	f000 ff49 	bl	80a28f2 <_ZN5spark12NetworkClass9listeningEv>
 80a1a60:	2800      	cmp	r0, #0
 80a1a62:	d0ac      	beq.n	80a19be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a1a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a1a68:	2828      	cmp	r0, #40	; 0x28
 80a1a6a:	d1ee      	bne.n	80a1a4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a1a6c:	6823      	ldr	r3, [r4, #0]
 80a1a6e:	1a52      	subs	r2, r2, r1
 80a1a70:	4620      	mov	r0, r4
 80a1a72:	68db      	ldr	r3, [r3, #12]
 80a1a74:	4798      	blx	r3
        write("(): ", 4);
 80a1a76:	6823      	ldr	r3, [r4, #0]
 80a1a78:	2204      	movs	r2, #4
 80a1a7a:	4620      	mov	r0, r4
 80a1a7c:	68db      	ldr	r3, [r3, #12]
 80a1a7e:	492d      	ldr	r1, [pc, #180]	; (80a1b34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a1a80:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a1a82:	2100      	movs	r1, #0
 80a1a84:	4638      	mov	r0, r7
 80a1a86:	f7fe fe41 	bl	80a070c <log_level_name>
 80a1a8a:	4601      	mov	r1, r0
    write(s);
 80a1a8c:	4620      	mov	r0, r4
 80a1a8e:	f7ff f992 	bl	80a0db6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a1a92:	6823      	ldr	r3, [r4, #0]
 80a1a94:	2202      	movs	r2, #2
 80a1a96:	4620      	mov	r0, r4
 80a1a98:	68db      	ldr	r3, [r3, #12]
 80a1a9a:	4924      	ldr	r1, [pc, #144]	; (80a1b2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1a9c:	4798      	blx	r3
    if (msg) {
 80a1a9e:	b11e      	cbz	r6, 80a1aa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a1aa0:	4631      	mov	r1, r6
 80a1aa2:	4620      	mov	r0, r4
 80a1aa4:	f7ff f987 	bl	80a0db6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a1aa8:	792b      	ldrb	r3, [r5, #4]
 80a1aaa:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a1aae:	d02c      	beq.n	80a1b0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a1ab0:	6823      	ldr	r3, [r4, #0]
 80a1ab2:	4921      	ldr	r1, [pc, #132]	; (80a1b38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a1ab4:	68db      	ldr	r3, [r3, #12]
 80a1ab6:	2202      	movs	r2, #2
 80a1ab8:	4620      	mov	r0, r4
 80a1aba:	4798      	blx	r3
        if (attr.has_code) {
 80a1abc:	792b      	ldrb	r3, [r5, #4]
 80a1abe:	06d9      	lsls	r1, r3, #27
 80a1ac0:	d50a      	bpl.n	80a1ad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a1ac2:	6823      	ldr	r3, [r4, #0]
 80a1ac4:	2207      	movs	r2, #7
 80a1ac6:	4620      	mov	r0, r4
 80a1ac8:	491c      	ldr	r1, [pc, #112]	; (80a1b3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a1aca:	68db      	ldr	r3, [r3, #12]
 80a1acc:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a1ace:	4620      	mov	r0, r4
 80a1ad0:	69aa      	ldr	r2, [r5, #24]
 80a1ad2:	491b      	ldr	r1, [pc, #108]	; (80a1b40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a1ad4:	f7ff f989 	bl	80a0dea <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a1ad8:	792b      	ldrb	r3, [r5, #4]
 80a1ada:	069a      	lsls	r2, r3, #26
 80a1adc:	d511      	bpl.n	80a1b02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a1ade:	06db      	lsls	r3, r3, #27
 80a1ae0:	d505      	bpl.n	80a1aee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a1ae2:	6823      	ldr	r3, [r4, #0]
 80a1ae4:	2202      	movs	r2, #2
 80a1ae6:	4620      	mov	r0, r4
 80a1ae8:	68db      	ldr	r3, [r3, #12]
 80a1aea:	490f      	ldr	r1, [pc, #60]	; (80a1b28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a1aec:	4798      	blx	r3
            write("details = ", 10);
 80a1aee:	6823      	ldr	r3, [r4, #0]
 80a1af0:	4620      	mov	r0, r4
 80a1af2:	4914      	ldr	r1, [pc, #80]	; (80a1b44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a1af4:	220a      	movs	r2, #10
 80a1af6:	68db      	ldr	r3, [r3, #12]
 80a1af8:	4798      	blx	r3
            write(attr.details);
 80a1afa:	4620      	mov	r0, r4
 80a1afc:	69e9      	ldr	r1, [r5, #28]
 80a1afe:	f7ff f95a 	bl	80a0db6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a1b02:	215d      	movs	r1, #93	; 0x5d
 80a1b04:	4620      	mov	r0, r4
 80a1b06:	f7ff f964 	bl	80a0dd2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a1b0a:	6823      	ldr	r3, [r4, #0]
 80a1b0c:	4620      	mov	r0, r4
}
 80a1b0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a1b12:	2202      	movs	r2, #2
 80a1b14:	68db      	ldr	r3, [r3, #12]
 80a1b16:	490c      	ldr	r1, [pc, #48]	; (80a1b48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a1b18:	4718      	bx	r3
 80a1b1a:	bf00      	nop
 80a1b1c:	080a325d 	.word	0x080a325d
 80a1b20:	080a3264 	.word	0x080a3264
 80a1b24:	080a3267 	.word	0x080a3267
 80a1b28:	080a326a 	.word	0x080a326a
 80a1b2c:	080a326f 	.word	0x080a326f
 80a1b30:	20000588 	.word	0x20000588
 80a1b34:	080a326d 	.word	0x080a326d
 80a1b38:	080a3272 	.word	0x080a3272
 80a1b3c:	080a3275 	.word	0x080a3275
 80a1b40:	080a327d 	.word	0x080a327d
 80a1b44:	080a3280 	.word	0x080a3280
 80a1b48:	080a328b 	.word	0x080a328b

080a1b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1b50:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a1b52:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1b56:	4605      	mov	r5, r0
 80a1b58:	460f      	mov	r7, r1
 80a1b5a:	4690      	mov	r8, r2
 80a1b5c:	461e      	mov	r6, r3
 80a1b5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a1b60:	f000 fcfa 	bl	80a2558 <_Z16_fetch_usbserialv>
 80a1b64:	4581      	cmp	r9, r0
 80a1b66:	d105      	bne.n	80a1b74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a1b68:	4849      	ldr	r0, [pc, #292]	; (80a1c90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a1b6a:	f000 fec2 	bl	80a28f2 <_ZN5spark12NetworkClass9listeningEv>
 80a1b6e:	2800      	cmp	r0, #0
 80a1b70:	f040 808a 	bne.w	80a1c88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a1b74:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a1b78:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a1b7a:	4a46      	ldr	r2, [pc, #280]	; (80a1c94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a1b7c:	a801      	add	r0, sp, #4
 80a1b7e:	9201      	str	r2, [sp, #4]
 80a1b80:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a1b82:	f88d 9008 	strb.w	r9, [sp, #8]
 80a1b86:	f001 f82c 	bl	80a2be2 <_ZN5spark10JSONWriter11beginObjectEv>
 80a1b8a:	4649      	mov	r1, r9
 80a1b8c:	4640      	mov	r0, r8
 80a1b8e:	f7fe fdbd 	bl	80a070c <log_level_name>
 80a1b92:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a1b94:	4940      	ldr	r1, [pc, #256]	; (80a1c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a1b96:	2201      	movs	r2, #1
 80a1b98:	a801      	add	r0, sp, #4
 80a1b9a:	f001 f8ab 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1b9e:	4641      	mov	r1, r8
 80a1ba0:	f7ff f8fc 	bl	80a0d9c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a1ba4:	b13f      	cbz	r7, 80a1bb6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a1ba6:	493d      	ldr	r1, [pc, #244]	; (80a1c9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a1ba8:	2201      	movs	r2, #1
 80a1baa:	a801      	add	r0, sp, #4
 80a1bac:	f001 f8a2 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1bb0:	4639      	mov	r1, r7
 80a1bb2:	f7ff f8f3 	bl	80a0d9c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a1bb6:	b13e      	cbz	r6, 80a1bc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a1bb8:	4939      	ldr	r1, [pc, #228]	; (80a1ca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a1bba:	2201      	movs	r2, #1
 80a1bbc:	a801      	add	r0, sp, #4
 80a1bbe:	f001 f899 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1bc2:	4631      	mov	r1, r6
 80a1bc4:	f7ff f8ea 	bl	80a0d9c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a1bc8:	7923      	ldrb	r3, [r4, #4]
 80a1bca:	07df      	lsls	r7, r3, #31
 80a1bcc:	d50e      	bpl.n	80a1bec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a1bce:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a1bd0:	212f      	movs	r1, #47	; 0x2f
 80a1bd2:	4630      	mov	r0, r6
 80a1bd4:	f001 fa45 	bl	80a3062 <strrchr>
    if (s1) {
 80a1bd8:	b100      	cbz	r0, 80a1bdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a1bda:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a1bdc:	4931      	ldr	r1, [pc, #196]	; (80a1ca4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a1bde:	2201      	movs	r2, #1
 80a1be0:	a801      	add	r0, sp, #4
 80a1be2:	f001 f887 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1be6:	4631      	mov	r1, r6
 80a1be8:	f7ff f8d8 	bl	80a0d9c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a1bec:	7923      	ldrb	r3, [r4, #4]
 80a1bee:	079e      	lsls	r6, r3, #30
 80a1bf0:	d507      	bpl.n	80a1c02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a1bf2:	492d      	ldr	r1, [pc, #180]	; (80a1ca8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a1bf4:	2202      	movs	r2, #2
 80a1bf6:	a801      	add	r0, sp, #4
 80a1bf8:	f001 f87c 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1bfc:	68e1      	ldr	r1, [r4, #12]
 80a1bfe:	f000 fffd 	bl	80a2bfc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a1c02:	7923      	ldrb	r3, [r4, #4]
 80a1c04:	0758      	lsls	r0, r3, #29
 80a1c06:	d514      	bpl.n	80a1c32 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1c08:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1c0a:	4633      	mov	r3, r6
 80a1c0c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a1c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1c12:	b12a      	cbz	r2, 80a1c20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a1c14:	2a20      	cmp	r2, #32
 80a1c16:	d101      	bne.n	80a1c1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a1c18:	461e      	mov	r6, r3
 80a1c1a:	e7f7      	b.n	80a1c0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a1c1c:	2a28      	cmp	r2, #40	; 0x28
 80a1c1e:	d1f5      	bne.n	80a1c0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a1c20:	2202      	movs	r2, #2
 80a1c22:	4922      	ldr	r1, [pc, #136]	; (80a1cac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a1c24:	a801      	add	r0, sp, #4
 80a1c26:	f001 f865 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c2a:	4631      	mov	r1, r6
 80a1c2c:	1bba      	subs	r2, r7, r6
 80a1c2e:	f001 f870 	bl	80a2d12 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a1c32:	7923      	ldrb	r3, [r4, #4]
 80a1c34:	0719      	lsls	r1, r3, #28
 80a1c36:	d507      	bpl.n	80a1c48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a1c38:	491d      	ldr	r1, [pc, #116]	; (80a1cb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a1c3a:	2201      	movs	r2, #1
 80a1c3c:	a801      	add	r0, sp, #4
 80a1c3e:	f001 f859 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c42:	6961      	ldr	r1, [r4, #20]
 80a1c44:	f000 ffec 	bl	80a2c20 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a1c48:	7923      	ldrb	r3, [r4, #4]
 80a1c4a:	06da      	lsls	r2, r3, #27
 80a1c4c:	d508      	bpl.n	80a1c60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a1c4e:	2204      	movs	r2, #4
 80a1c50:	4918      	ldr	r1, [pc, #96]	; (80a1cb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a1c52:	eb0d 0002 	add.w	r0, sp, r2
 80a1c56:	f001 f84d 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c5a:	69a1      	ldr	r1, [r4, #24]
 80a1c5c:	f000 ffce 	bl	80a2bfc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a1c60:	7923      	ldrb	r3, [r4, #4]
 80a1c62:	069b      	lsls	r3, r3, #26
 80a1c64:	d507      	bpl.n	80a1c76 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a1c66:	4914      	ldr	r1, [pc, #80]	; (80a1cb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a1c68:	2206      	movs	r2, #6
 80a1c6a:	a801      	add	r0, sp, #4
 80a1c6c:	f001 f842 	bl	80a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c70:	69e1      	ldr	r1, [r4, #28]
 80a1c72:	f7ff f893 	bl	80a0d9c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a1c76:	a801      	add	r0, sp, #4
 80a1c78:	f000 ff9d 	bl	80a2bb6 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a1c7c:	6a28      	ldr	r0, [r5, #32]
 80a1c7e:	2202      	movs	r2, #2
 80a1c80:	6803      	ldr	r3, [r0, #0]
 80a1c82:	490e      	ldr	r1, [pc, #56]	; (80a1cbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a1c84:	68db      	ldr	r3, [r3, #12]
 80a1c86:	4798      	blx	r3
}
 80a1c88:	b005      	add	sp, #20
 80a1c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1c8e:	bf00      	nop
 80a1c90:	20000588 	.word	0x20000588
 80a1c94:	080a32b0 	.word	0x080a32b0
 80a1c98:	080a3237 	.word	0x080a3237
 80a1c9c:	080a328e 	.word	0x080a328e
 80a1ca0:	080a3290 	.word	0x080a3290
 80a1ca4:	080a3292 	.word	0x080a3292
 80a1ca8:	080a3294 	.word	0x080a3294
 80a1cac:	080a3297 	.word	0x080a3297
 80a1cb0:	080a329a 	.word	0x080a329a
 80a1cb4:	080a329c 	.word	0x080a329c
 80a1cb8:	080a32a1 	.word	0x080a32a1
 80a1cbc:	080a328b 	.word	0x080a328b

080a1cc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1cc0:	4b02      	ldr	r3, [pc, #8]	; (80a1ccc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1cc2:	681a      	ldr	r2, [r3, #0]
 80a1cc4:	4b02      	ldr	r3, [pc, #8]	; (80a1cd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1cc6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1cc8:	4770      	bx	lr
 80a1cca:	bf00      	nop
 80a1ccc:	2000000c 	.word	0x2000000c
 80a1cd0:	20000110 	.word	0x20000110

080a1cd4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1cd4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1cd6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1cd8:	4604      	mov	r4, r0
      if (_M_manager)
 80a1cda:	b113      	cbz	r3, 80a1ce2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1cdc:	2203      	movs	r2, #3
 80a1cde:	4601      	mov	r1, r0
 80a1ce0:	4798      	blx	r3
    }
 80a1ce2:	4620      	mov	r0, r4
 80a1ce4:	bd10      	pop	{r4, pc}

080a1ce6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1ce6:	b510      	push	{r4, lr}
 80a1ce8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1cea:	f7ff fff3 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
 80a1cee:	4620      	mov	r0, r4
 80a1cf0:	bd10      	pop	{r4, pc}

080a1cf2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a1cf2:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1cf4:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1cf6:	460b      	mov	r3, r1
 80a1cf8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1cfa:	c803      	ldmia	r0, {r0, r1}
 80a1cfc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1d00:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1d04:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1d0c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1d10:	b002      	add	sp, #8
 80a1d12:	bd10      	pop	{r4, pc}

080a1d14 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1d14:	2300      	movs	r3, #0
 80a1d16:	4803      	ldr	r0, [pc, #12]	; (80a1d24 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1d18:	4a03      	ldr	r2, [pc, #12]	; (80a1d28 <_GLOBAL__sub_I_RGB+0x14>)
 80a1d1a:	4904      	ldr	r1, [pc, #16]	; (80a1d2c <_GLOBAL__sub_I_RGB+0x18>)
 80a1d1c:	6083      	str	r3, [r0, #8]
 80a1d1e:	f001 b8d1 	b.w	80a2ec4 <__aeabi_atexit>
 80a1d22:	bf00      	nop
 80a1d24:	20000114 	.word	0x20000114
 80a1d28:	20000074 	.word	0x20000074
 80a1d2c:	080a1ce7 	.word	0x080a1ce7

080a1d30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1d30:	4b01      	ldr	r3, [pc, #4]	; (80a1d38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1d32:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1d34:	4770      	bx	lr
 80a1d36:	bf00      	nop
 80a1d38:	20000010 	.word	0x20000010

080a1d3c <serialEventRun>:
{
 80a1d3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1d3e:	4b13      	ldr	r3, [pc, #76]	; (80a1d8c <serialEventRun+0x50>)
 80a1d40:	b143      	cbz	r3, 80a1d54 <serialEventRun+0x18>
 80a1d42:	f000 fc09 	bl	80a2558 <_Z16_fetch_usbserialv>
 80a1d46:	6803      	ldr	r3, [r0, #0]
 80a1d48:	691b      	ldr	r3, [r3, #16]
 80a1d4a:	4798      	blx	r3
 80a1d4c:	2800      	cmp	r0, #0
 80a1d4e:	dd01      	ble.n	80a1d54 <serialEventRun+0x18>
        serialEvent();
 80a1d50:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1d54:	4b0e      	ldr	r3, [pc, #56]	; (80a1d90 <serialEventRun+0x54>)
 80a1d56:	b143      	cbz	r3, 80a1d6a <serialEventRun+0x2e>
 80a1d58:	f000 fcc0 	bl	80a26dc <_Z22__fetch_global_Serial1v>
 80a1d5c:	6803      	ldr	r3, [r0, #0]
 80a1d5e:	691b      	ldr	r3, [r3, #16]
 80a1d60:	4798      	blx	r3
 80a1d62:	2800      	cmp	r0, #0
 80a1d64:	dd01      	ble.n	80a1d6a <serialEventRun+0x2e>
        serialEvent1();
 80a1d66:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1d6a:	4b0a      	ldr	r3, [pc, #40]	; (80a1d94 <serialEventRun+0x58>)
 80a1d6c:	b10b      	cbz	r3, 80a1d72 <serialEventRun+0x36>
 80a1d6e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1d72:	4b09      	ldr	r3, [pc, #36]	; (80a1d98 <serialEventRun+0x5c>)
 80a1d74:	b143      	cbz	r3, 80a1d88 <serialEventRun+0x4c>
 80a1d76:	f000 fc2d 	bl	80a25d4 <_Z17_fetch_usbserial1v>
 80a1d7a:	6803      	ldr	r3, [r0, #0]
 80a1d7c:	691b      	ldr	r3, [r3, #16]
 80a1d7e:	4798      	blx	r3
 80a1d80:	2800      	cmp	r0, #0
 80a1d82:	dd01      	ble.n	80a1d88 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1d84:	f3af 8000 	nop.w
}
 80a1d88:	bd08      	pop	{r3, pc}
 80a1d8a:	bf00      	nop
	...

080a1d9c <_post_loop>:
{
 80a1d9c:	b508      	push	{r3, lr}
	serialEventRun();
 80a1d9e:	f7ff ffcd 	bl	80a1d3c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1da2:	f7fe fb91 	bl	80a04c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1da6:	4b01      	ldr	r3, [pc, #4]	; (80a1dac <_post_loop+0x10>)
 80a1da8:	6018      	str	r0, [r3, #0]
}
 80a1daa:	bd08      	pop	{r3, pc}
 80a1dac:	200005a0 	.word	0x200005a0

080a1db0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1db0:	4802      	ldr	r0, [pc, #8]	; (80a1dbc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1db2:	4a03      	ldr	r2, [pc, #12]	; (80a1dc0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1db4:	4903      	ldr	r1, [pc, #12]	; (80a1dc4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1db6:	1a12      	subs	r2, r2, r0
 80a1db8:	f001 b8a0 	b.w	80a2efc <memcpy>
 80a1dbc:	40024000 	.word	0x40024000
 80a1dc0:	40024004 	.word	0x40024004
 80a1dc4:	080a35a0 	.word	0x080a35a0

080a1dc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1dc8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1dca:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1dcc:	461a      	mov	r2, r3
 80a1dce:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1dd2:	9300      	str	r3, [sp, #0]
 80a1dd4:	f7fe fcd4 	bl	80a0780 <system_ctrl_set_result>
}
 80a1dd8:	b003      	add	sp, #12
 80a1dda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1de0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1de0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1de2:	8843      	ldrh	r3, [r0, #2]
 80a1de4:	2b0a      	cmp	r3, #10
 80a1de6:	d008      	beq.n	80a1dfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1de8:	2b50      	cmp	r3, #80	; 0x50
 80a1dea:	d10b      	bne.n	80a1e04 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1dec:	4b09      	ldr	r3, [pc, #36]	; (80a1e14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1dee:	681b      	ldr	r3, [r3, #0]
 80a1df0:	b14b      	cbz	r3, 80a1e06 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1df2:	b003      	add	sp, #12
 80a1df4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1df8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1dfa:	f7ff ffe5 	bl	80a1dc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1dfe:	b003      	add	sp, #12
 80a1e00:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e04:	2300      	movs	r3, #0
 80a1e06:	461a      	mov	r2, r3
 80a1e08:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e0c:	9300      	str	r3, [sp, #0]
 80a1e0e:	f7fe fcb7 	bl	80a0780 <system_ctrl_set_result>
}
 80a1e12:	e7f4      	b.n	80a1dfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1e14:	20000128 	.word	0x20000128

080a1e18 <module_user_init_hook>:
{
 80a1e18:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e1a:	4c12      	ldr	r4, [pc, #72]	; (80a1e64 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1e1c:	2100      	movs	r1, #0
 80a1e1e:	4812      	ldr	r0, [pc, #72]	; (80a1e68 <module_user_init_hook+0x50>)
 80a1e20:	f7fe fd72 	bl	80a0908 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e24:	4d11      	ldr	r5, [pc, #68]	; (80a1e6c <module_user_init_hook+0x54>)
 80a1e26:	6823      	ldr	r3, [r4, #0]
 80a1e28:	42ab      	cmp	r3, r5
 80a1e2a:	bf0c      	ite	eq
 80a1e2c:	2201      	moveq	r2, #1
 80a1e2e:	2200      	movne	r2, #0
 80a1e30:	4b0f      	ldr	r3, [pc, #60]	; (80a1e70 <module_user_init_hook+0x58>)
 80a1e32:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1e34:	d002      	beq.n	80a1e3c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1e36:	f7ff ffbb 	bl	80a1db0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1e3a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1e3c:	f7fe fb34 	bl	80a04a8 <HAL_RNG_GetRandomNumber>
 80a1e40:	4604      	mov	r4, r0
    srand(seed);
 80a1e42:	f001 f88b 	bl	80a2f5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1e46:	4b0b      	ldr	r3, [pc, #44]	; (80a1e74 <module_user_init_hook+0x5c>)
 80a1e48:	b113      	cbz	r3, 80a1e50 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1e4a:	4620      	mov	r0, r4
 80a1e4c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1e50:	2100      	movs	r1, #0
 80a1e52:	4808      	ldr	r0, [pc, #32]	; (80a1e74 <module_user_init_hook+0x5c>)
 80a1e54:	f7fe fd18 	bl	80a0888 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1e5c:	2100      	movs	r1, #0
 80a1e5e:	4806      	ldr	r0, [pc, #24]	; (80a1e78 <module_user_init_hook+0x60>)
 80a1e60:	f7fe bc84 	b.w	80a076c <system_ctrl_set_app_request_handler>
 80a1e64:	40024000 	.word	0x40024000
 80a1e68:	080a1d31 	.word	0x080a1d31
 80a1e6c:	9a271c1e 	.word	0x9a271c1e
 80a1e70:	20000124 	.word	0x20000124
 80a1e74:	00000000 	.word	0x00000000
 80a1e78:	080a1de1 	.word	0x080a1de1

080a1e7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1e7c:	4770      	bx	lr

080a1e7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a1e7e:	2000      	movs	r0, #0
 80a1e80:	4770      	bx	lr

080a1e82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1e82:	b510      	push	{r4, lr}
 80a1e84:	4604      	mov	r4, r0
 80a1e86:	2110      	movs	r1, #16
 80a1e88:	f001 f821 	bl	80a2ece <_ZdlPvj>
 80a1e8c:	4620      	mov	r0, r4
 80a1e8e:	bd10      	pop	{r4, pc}

080a1e90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a1e90:	b508      	push	{r3, lr}
      { delete this; }
 80a1e92:	f7ff fff6 	bl	80a1e82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1e96:	bd08      	pop	{r3, pc}

080a1e98 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1e98:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1e9a:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1e9c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1ea0:	6002      	str	r2, [r0, #0]
 80a1ea2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1ea4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ea6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1ea8:	680c      	ldr	r4, [r1, #0]
 80a1eaa:	8085      	strh	r5, [r0, #4]
 80a1eac:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1eae:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1eb0:	bd30      	pop	{r4, r5, pc}

080a1eb2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1eb2:	b510      	push	{r4, lr}
 80a1eb4:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1eb6:	6800      	ldr	r0, [r0, #0]
 80a1eb8:	f7fe fcf6 	bl	80a08a8 <free>
}
 80a1ebc:	4620      	mov	r0, r4
 80a1ebe:	bd10      	pop	{r4, pc}

080a1ec0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1ec0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1ec2:	68c4      	ldr	r4, [r0, #12]
 80a1ec4:	b1f4      	cbz	r4, 80a1f04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1ec6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1ec8:	2b02      	cmp	r3, #2
 80a1eca:	d103      	bne.n	80a1ed4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1ecc:	f104 000c 	add.w	r0, r4, #12
 80a1ed0:	f7ff ffef 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1ed4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1ed6:	b135      	cbz	r5, 80a1ee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a1ed8:	4628      	mov	r0, r5
 80a1eda:	f7ff fefb 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
 80a1ede:	2110      	movs	r1, #16
 80a1ee0:	4628      	mov	r0, r5
 80a1ee2:	f000 fff4 	bl	80a2ece <_ZdlPvj>
 80a1ee6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1ee8:	b135      	cbz	r5, 80a1ef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1eea:	4628      	mov	r0, r5
 80a1eec:	f7ff fef2 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
 80a1ef0:	2110      	movs	r1, #16
 80a1ef2:	4628      	mov	r0, r5
 80a1ef4:	f000 ffeb 	bl	80a2ece <_ZdlPvj>
 80a1ef8:	4620      	mov	r0, r4
 80a1efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1efe:	2114      	movs	r1, #20
 80a1f00:	f000 bfe5 	b.w	80a2ece <_ZdlPvj>
 80a1f04:	bd38      	pop	{r3, r4, r5, pc}

080a1f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1f08:	460e      	mov	r6, r1
 80a1f0a:	4604      	mov	r4, r0
 80a1f0c:	f856 3b04 	ldr.w	r3, [r6], #4
 80a1f10:	460d      	mov	r5, r1
 80a1f12:	a801      	add	r0, sp, #4
 80a1f14:	4631      	mov	r1, r6
 80a1f16:	9300      	str	r3, [sp, #0]
 80a1f18:	f7ff f878 	bl	80a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1f1c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1f1e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1f20:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a1f22:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1f24:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a1f26:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a1f28:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1f2a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a1f2c:	f7ff f858 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1f30:	4630      	mov	r0, r6
 80a1f32:	f7ff f855 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a1f36:	4628      	mov	r0, r5
 80a1f38:	2108      	movs	r1, #8
 80a1f3a:	f000 ffc8 	bl	80a2ece <_ZdlPvj>
        return p;
    }
 80a1f3e:	4620      	mov	r0, r4
 80a1f40:	b002      	add	sp, #8
 80a1f42:	bd70      	pop	{r4, r5, r6, pc}

080a1f44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1f44:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1f46:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1f48:	b90a      	cbnz	r2, 80a1f4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1f4a:	f000 ffc6 	bl	80a2eda <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1f4e:	68c3      	ldr	r3, [r0, #12]
    }
 80a1f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1f54:	4718      	bx	r3

080a1f56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1f56:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1f58:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a1f5a:	f100 0110 	add.w	r1, r0, #16
 80a1f5e:	f7ff fff1 	bl	80a1f44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a1f62:	bd08      	pop	{r3, pc}

080a1f64 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a1f64:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1f66:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1f68:	b90a      	cbnz	r2, 80a1f6e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1f6a:	f000 ffb6 	bl	80a2eda <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1f6e:	68c3      	ldr	r3, [r0, #12]
    }
 80a1f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1f74:	4718      	bx	r3

080a1f76 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1f76:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a1f78:	6800      	ldr	r0, [r0, #0]
 80a1f7a:	f100 0110 	add.w	r1, r0, #16
 80a1f7e:	f7ff fff1 	bl	80a1f64 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a1f82:	bd08      	pop	{r3, pc}

080a1f84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1f84:	b538      	push	{r3, r4, r5, lr}
 80a1f86:	2300      	movs	r3, #0
 80a1f88:	4604      	mov	r4, r0
 80a1f8a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1f8c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1f8e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1f90:	f7fe f881 	bl	80a0096 <_Znwj>
 80a1f94:	b128      	cbz	r0, 80a1fa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1f96:	2301      	movs	r3, #1
 80a1f98:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1f9c:	4b02      	ldr	r3, [pc, #8]	; (80a1fa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1f9e:	60c5      	str	r5, [r0, #12]
 80a1fa0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1fa2:	6020      	str	r0, [r4, #0]
	}
 80a1fa4:	4620      	mov	r0, r4
 80a1fa6:	bd38      	pop	{r3, r4, r5, pc}
 80a1fa8:	080a3344 	.word	0x080a3344

080a1fac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1fac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1fae:	2300      	movs	r3, #0
 80a1fb0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1fb2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1fb4:	4604      	mov	r4, r0
 80a1fb6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1fb8:	b12b      	cbz	r3, 80a1fc6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1fba:	2202      	movs	r2, #2
 80a1fbc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1fbe:	68eb      	ldr	r3, [r5, #12]
 80a1fc0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1fc2:	68ab      	ldr	r3, [r5, #8]
 80a1fc4:	60a3      	str	r3, [r4, #8]
    }
 80a1fc6:	4620      	mov	r0, r4
 80a1fc8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1fcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1fce:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1fd0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1fd2:	4668      	mov	r0, sp
 80a1fd4:	f7ff ff60 	bl	80a1e98 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1fd8:	f04f 0302 	mov.w	r3, #2
 80a1fdc:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1fe0:	2a00      	cmp	r2, #0
 80a1fe2:	d103      	bne.n	80a1fec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1fe4:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a1fe8:	2900      	cmp	r1, #0
 80a1fea:	d1f7      	bne.n	80a1fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1fec:	d125      	bne.n	80a203a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a1fee:	f104 050c 	add.w	r5, r4, #12
 80a1ff2:	4669      	mov	r1, sp
 80a1ff4:	4628      	mov	r0, r5
 80a1ff6:	f7ff ff4f 	bl	80a1e98 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1ffa:	2301      	movs	r3, #1
 80a1ffc:	f3bf 8f5b 	dmb	ish
 80a2000:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2002:	2000      	movs	r0, #0
 80a2004:	f3bf 8f5b 	dmb	ish
 80a2008:	f104 0308 	add.w	r3, r4, #8
 80a200c:	e853 6f00 	ldrex	r6, [r3]
 80a2010:	e843 0200 	strex	r2, r0, [r3]
 80a2014:	2a00      	cmp	r2, #0
 80a2016:	d1f9      	bne.n	80a200c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a2018:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a201c:	b16e      	cbz	r6, 80a203a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a201e:	f7fe fb95 	bl	80a074c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2022:	b178      	cbz	r0, 80a2044 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2024:	4629      	mov	r1, r5
 80a2026:	4630      	mov	r0, r6
 80a2028:	f7ff ff8c 	bl	80a1f44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a202c:	4630      	mov	r0, r6
 80a202e:	f7ff fe51 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a2032:	2110      	movs	r1, #16
 80a2034:	4630      	mov	r0, r6
 80a2036:	f000 ff4a 	bl	80a2ece <_ZdlPvj>
        p_->setError(std::move(error));
 80a203a:	4668      	mov	r0, sp
 80a203c:	f7ff ff39 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
    }
 80a2040:	b009      	add	sp, #36	; 0x24
 80a2042:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2044:	4631      	mov	r1, r6
 80a2046:	a802      	add	r0, sp, #8
 80a2048:	f7ff ffb0 	bl	80a1fac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a204c:	68e0      	ldr	r0, [r4, #12]
 80a204e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2052:	b108      	cbz	r0, 80a2058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a2054:	f000 ffd0 	bl	80a2ff8 <strdup>
        type_(type) {
 80a2058:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a205a:	2010      	movs	r0, #16
 80a205c:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2060:	f7fe f819 	bl	80a0096 <_Znwj>
 80a2064:	4605      	mov	r5, r0
 80a2066:	b1e8      	cbz	r0, 80a20a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a2068:	2700      	movs	r7, #0
 80a206a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a206c:	2018      	movs	r0, #24
 80a206e:	f7fe f812 	bl	80a0096 <_Znwj>
 80a2072:	4604      	mov	r4, r0
 80a2074:	b188      	cbz	r0, 80a209a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a2076:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a2078:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a207a:	a802      	add	r0, sp, #8
 80a207c:	f7ff fe39 	bl	80a1cf2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2080:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2082:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2084:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2086:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2088:	9204      	str	r2, [sp, #16]
 80a208a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a208c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a208e:	60e3      	str	r3, [r4, #12]
 80a2090:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a2094:	9205      	str	r2, [sp, #20]
 80a2096:	f7ff feff 	bl	80a1e98 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a209a:	4b08      	ldr	r3, [pc, #32]	; (80a20bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a209c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a209e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a20a0:	4b07      	ldr	r3, [pc, #28]	; (80a20c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a20a2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a20a4:	a806      	add	r0, sp, #24
 80a20a6:	f7ff ff04 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a20aa:	a802      	add	r0, sp, #8
 80a20ac:	f7ff fe12 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a20b0:	2200      	movs	r2, #0
 80a20b2:	4629      	mov	r1, r5
 80a20b4:	4803      	ldr	r0, [pc, #12]	; (80a20c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a20b6:	f7fe fb51 	bl	80a075c <application_thread_invoke>
 80a20ba:	e7b7      	b.n	80a202c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a20bc:	080a1f57 	.word	0x080a1f57
 80a20c0:	080a21ed 	.word	0x080a21ed
 80a20c4:	080a272d 	.word	0x080a272d

080a20c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a20c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a20cc:	b08a      	sub	sp, #40	; 0x28
 80a20ce:	4605      	mov	r5, r0
 80a20d0:	460c      	mov	r4, r1
 80a20d2:	4617      	mov	r7, r2
 80a20d4:	4698      	mov	r8, r3
 80a20d6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a20da:	f7fe fbc5 	bl	80a0868 <spark_cloud_flag_connected>
 80a20de:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a20e0:	4682      	mov	sl, r0
 80a20e2:	bb38      	cbnz	r0, 80a2134 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a20e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a20e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a20ea:	a905      	add	r1, sp, #20
 80a20ec:	4630      	mov	r0, r6
 80a20ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a20f2:	f7ff fed1 	bl	80a1e98 <_ZN8particle5ErrorC1EOS0_>
 80a20f6:	2014      	movs	r0, #20
 80a20f8:	f7fd ffcd 	bl	80a0096 <_Znwj>
 80a20fc:	4604      	mov	r4, r0
 80a20fe:	b148      	cbz	r0, 80a2114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2100:	2302      	movs	r3, #2
 80a2102:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2104:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2106:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a210a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a210c:	4631      	mov	r1, r6
 80a210e:	300c      	adds	r0, #12
 80a2110:	f7ff fec2 	bl	80a1e98 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2114:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a2116:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2118:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a211c:	f7ff ff32 	bl	80a1f84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2120:	4630      	mov	r0, r6
 80a2122:	f7ff fec6 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2126:	a805      	add	r0, sp, #20
 80a2128:	f7ff fec3 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a212c:	4628      	mov	r0, r5
 80a212e:	b00a      	add	sp, #40	; 0x28
 80a2130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2134:	230c      	movs	r3, #12
 80a2136:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a213a:	2014      	movs	r0, #20
 80a213c:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a2140:	9307      	str	r3, [sp, #28]
 80a2142:	f7fd ffa8 	bl	80a0096 <_Znwj>
 80a2146:	4601      	mov	r1, r0
 80a2148:	b128      	cbz	r0, 80a2156 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a214a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a214e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2152:	f880 a001 	strb.w	sl, [r0, #1]
 80a2156:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2158:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a215a:	f7ff ff13 	bl	80a1f84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a215e:	4b22      	ldr	r3, [pc, #136]	; (80a21e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2160:	2008      	movs	r0, #8
 80a2162:	9308      	str	r3, [sp, #32]
 80a2164:	f7fd ff97 	bl	80a0096 <_Znwj>
 80a2168:	4682      	mov	sl, r0
 80a216a:	b128      	cbz	r0, 80a2178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a216c:	9b03      	ldr	r3, [sp, #12]
 80a216e:	a904      	add	r1, sp, #16
 80a2170:	f840 3b04 	str.w	r3, [r0], #4
 80a2174:	f7fe ff4a 	bl	80a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2178:	4642      	mov	r2, r8
 80a217a:	4639      	mov	r1, r7
 80a217c:	4620      	mov	r0, r4
 80a217e:	9600      	str	r6, [sp, #0]
 80a2180:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a2184:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2188:	f7fe fb76 	bl	80a0878 <spark_send_event>
 80a218c:	b9b8      	cbnz	r0, 80a21be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a218e:	9b03      	ldr	r3, [sp, #12]
 80a2190:	785b      	ldrb	r3, [r3, #1]
 80a2192:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2196:	b993      	cbnz	r3, 80a21be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a2198:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a219c:	a905      	add	r1, sp, #20
 80a219e:	a803      	add	r0, sp, #12
 80a21a0:	9205      	str	r2, [sp, #20]
 80a21a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a21a6:	f7ff ff11 	bl	80a1fcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a21aa:	a805      	add	r0, sp, #20
 80a21ac:	f7ff fe81 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a21b0:	a805      	add	r0, sp, #20
 80a21b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a21b4:	f7ff fea7 	bl	80a1f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a21b8:	a806      	add	r0, sp, #24
 80a21ba:	f7fe ff11 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a21be:	9b03      	ldr	r3, [sp, #12]
 80a21c0:	a904      	add	r1, sp, #16
 80a21c2:	a806      	add	r0, sp, #24
 80a21c4:	9305      	str	r3, [sp, #20]
 80a21c6:	f7fe ff21 	bl	80a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a21ca:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a21cc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a21ce:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a21d0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a21d2:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a21d4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a21d6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a21d8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a21da:	f7fe ff01 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a21de:	a804      	add	r0, sp, #16
 80a21e0:	f7fe fefe 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a21e4:	e7a2      	b.n	80a212c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a21e6:	bf00      	nop
 80a21e8:	080a22b1 	.word	0x080a22b1

080a21ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a21ec:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a21ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21f0:	4605      	mov	r5, r0
	  switch (__op)
 80a21f2:	d007      	beq.n	80a2204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a21f4:	2a03      	cmp	r2, #3
 80a21f6:	d018      	beq.n	80a222a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a21f8:	2a01      	cmp	r2, #1
 80a21fa:	d101      	bne.n	80a2200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a21fc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a21fe:	6003      	str	r3, [r0, #0]
	}
 80a2200:	2000      	movs	r0, #0
 80a2202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2204:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a2206:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2208:	f7fd ff45 	bl	80a0096 <_Znwj>
 80a220c:	4604      	mov	r4, r0
 80a220e:	b150      	cbz	r0, 80a2226 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2210:	4631      	mov	r1, r6
 80a2212:	f7ff fecb 	bl	80a1fac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2216:	6930      	ldr	r0, [r6, #16]
 80a2218:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a221c:	b108      	cbz	r0, 80a2222 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a221e:	f000 feeb 	bl	80a2ff8 <strdup>
        type_(type) {
 80a2222:	6120      	str	r0, [r4, #16]
 80a2224:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a2226:	602c      	str	r4, [r5, #0]
	}
 80a2228:	e7ea      	b.n	80a2200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a222a:	6804      	ldr	r4, [r0, #0]
 80a222c:	2c00      	cmp	r4, #0
 80a222e:	d0e7      	beq.n	80a2200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a2230:	f104 0010 	add.w	r0, r4, #16
 80a2234:	f7ff fe3d 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2238:	4620      	mov	r0, r4
 80a223a:	f7ff fd4b 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a223e:	2118      	movs	r1, #24
 80a2240:	4620      	mov	r0, r4
 80a2242:	f000 fe44 	bl	80a2ece <_ZdlPvj>
 80a2246:	e7db      	b.n	80a2200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a2248 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a2248:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a224a:	2300      	movs	r3, #0
 80a224c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a224e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a2250:	4604      	mov	r4, r0
 80a2252:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a2254:	b12b      	cbz	r3, 80a2262 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2256:	2202      	movs	r2, #2
 80a2258:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a225a:	68eb      	ldr	r3, [r5, #12]
 80a225c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a225e:	68ab      	ldr	r3, [r5, #8]
 80a2260:	60a3      	str	r3, [r4, #8]
    }
 80a2262:	4620      	mov	r0, r4
 80a2264:	bd38      	pop	{r3, r4, r5, pc}

080a2266 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a2266:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2268:	b570      	push	{r4, r5, r6, lr}
 80a226a:	4604      	mov	r4, r0
	  switch (__op)
 80a226c:	d007      	beq.n	80a227e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a226e:	2a03      	cmp	r2, #3
 80a2270:	d012      	beq.n	80a2298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a2272:	2a01      	cmp	r2, #1
 80a2274:	d101      	bne.n	80a227a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a2276:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2278:	6003      	str	r3, [r0, #0]
	}
 80a227a:	2000      	movs	r0, #0
 80a227c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a227e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a2280:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2282:	f7fd ff08 	bl	80a0096 <_Znwj>
 80a2286:	4605      	mov	r5, r0
 80a2288:	b120      	cbz	r0, 80a2294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a228a:	4631      	mov	r1, r6
 80a228c:	f7ff ffdc 	bl	80a2248 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2290:	7c33      	ldrb	r3, [r6, #16]
 80a2292:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a2294:	6025      	str	r5, [r4, #0]
	}
 80a2296:	e7f0      	b.n	80a227a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a2298:	6804      	ldr	r4, [r0, #0]
 80a229a:	2c00      	cmp	r4, #0
 80a229c:	d0ed      	beq.n	80a227a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a229e:	4620      	mov	r0, r4
 80a22a0:	f7ff fd18 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a22a4:	2114      	movs	r1, #20
 80a22a6:	4620      	mov	r0, r4
 80a22a8:	f000 fe11 	bl	80a2ece <_ZdlPvj>
 80a22ac:	e7e5      	b.n	80a227a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a22b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a22b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a22b2:	4604      	mov	r4, r0
 80a22b4:	b089      	sub	sp, #36	; 0x24
 80a22b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a22b8:	a801      	add	r0, sp, #4
 80a22ba:	4611      	mov	r1, r2
 80a22bc:	f7ff fe23 	bl	80a1f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a22c0:	b1a4      	cbz	r4, 80a22ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a22c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a22c4:	b11d      	cbz	r5, 80a22ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a22c6:	4628      	mov	r0, r5
 80a22c8:	f000 fe96 	bl	80a2ff8 <strdup>
 80a22cc:	4605      	mov	r5, r0
 80a22ce:	a801      	add	r0, sp, #4
 80a22d0:	a903      	add	r1, sp, #12
        type_(type) {
 80a22d2:	9503      	str	r5, [sp, #12]
 80a22d4:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a22d8:	f7ff fe78 	bl	80a1fcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a22dc:	a803      	add	r0, sp, #12
 80a22de:	f7ff fde8 	bl	80a1eb2 <_ZN8particle5ErrorD1Ev>
 80a22e2:	a802      	add	r0, sp, #8
 80a22e4:	f7fe fe7c 	bl	80a0fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a22e8:	b009      	add	sp, #36	; 0x24
 80a22ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a22ec:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a22ee:	9d01      	ldr	r5, [sp, #4]
 80a22f0:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a22f4:	2a00      	cmp	r2, #0
 80a22f6:	d103      	bne.n	80a2300 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a22f8:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a22fc:	2900      	cmp	r1, #0
 80a22fe:	d1f7      	bne.n	80a22f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a2300:	d1ef      	bne.n	80a22e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a2302:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2304:	f3bf 8f5b 	dmb	ish
 80a2308:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a230a:	f3bf 8f5b 	dmb	ish
 80a230e:	1d2b      	adds	r3, r5, #4
 80a2310:	e853 6f00 	ldrex	r6, [r3]
 80a2314:	e843 4200 	strex	r2, r4, [r3]
 80a2318:	2a00      	cmp	r2, #0
 80a231a:	d1f9      	bne.n	80a2310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a231c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2320:	2e00      	cmp	r6, #0
 80a2322:	d0de      	beq.n	80a22e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a2324:	4620      	mov	r0, r4
 80a2326:	f7fe fa11 	bl	80a074c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a232a:	4607      	mov	r7, r0
 80a232c:	b160      	cbz	r0, 80a2348 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a232e:	4630      	mov	r0, r6
 80a2330:	f105 010c 	add.w	r1, r5, #12
 80a2334:	f7ff fe16 	bl	80a1f64 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a2338:	4630      	mov	r0, r6
 80a233a:	f7ff fccb 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a233e:	2110      	movs	r1, #16
 80a2340:	4630      	mov	r0, r6
 80a2342:	f000 fdc4 	bl	80a2ece <_ZdlPvj>
 80a2346:	e7cc      	b.n	80a22e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2348:	4631      	mov	r1, r6
 80a234a:	a803      	add	r0, sp, #12
 80a234c:	f7ff ff7c 	bl	80a2248 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2350:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2352:	2010      	movs	r0, #16
 80a2354:	f88d 301c 	strb.w	r3, [sp, #28]
 80a2358:	f7fd fe9d 	bl	80a0096 <_Znwj>
 80a235c:	4605      	mov	r5, r0
 80a235e:	b1d0      	cbz	r0, 80a2396 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a2360:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2362:	2014      	movs	r0, #20
 80a2364:	f7fd fe97 	bl	80a0096 <_Znwj>
 80a2368:	4604      	mov	r4, r0
 80a236a:	b178      	cbz	r0, 80a238c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a236c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a236e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a2370:	a803      	add	r0, sp, #12
 80a2372:	f7ff fcbe 	bl	80a1cf2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2376:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2378:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a237a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a237c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a237e:	9205      	str	r2, [sp, #20]
 80a2380:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2382:	60e3      	str	r3, [r4, #12]
 80a2384:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a2388:	9206      	str	r2, [sp, #24]
 80a238a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a238c:	4b06      	ldr	r3, [pc, #24]	; (80a23a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a238e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2390:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2392:	4b06      	ldr	r3, [pc, #24]	; (80a23ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a2394:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a2396:	a803      	add	r0, sp, #12
 80a2398:	f7ff fc9c 	bl	80a1cd4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a239c:	2200      	movs	r2, #0
 80a239e:	4629      	mov	r1, r5
 80a23a0:	4803      	ldr	r0, [pc, #12]	; (80a23b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a23a2:	f7fe f9db 	bl	80a075c <application_thread_invoke>
 80a23a6:	e7c7      	b.n	80a2338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a23a8:	080a1f77 	.word	0x080a1f77
 80a23ac:	080a2267 	.word	0x080a2267
 80a23b0:	080a272d 	.word	0x080a272d

080a23b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a23b4:	4770      	bx	lr

080a23b6 <_ZN9IPAddressD0Ev>:
 80a23b6:	b510      	push	{r4, lr}
 80a23b8:	4604      	mov	r4, r0
 80a23ba:	2118      	movs	r1, #24
 80a23bc:	f000 fd87 	bl	80a2ece <_ZdlPvj>
 80a23c0:	4620      	mov	r0, r4
 80a23c2:	bd10      	pop	{r4, pc}

080a23c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a23c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a23c6:	460e      	mov	r6, r1
 80a23c8:	2400      	movs	r4, #0
 80a23ca:	f100 0708 	add.w	r7, r0, #8
 80a23ce:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a23d0:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a23d4:	220a      	movs	r2, #10
 80a23d6:	4630      	mov	r0, r6
 80a23d8:	f7fe fc2b 	bl	80a0c32 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a23dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a23de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a23e0:	d101      	bne.n	80a23e6 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a23e2:	4620      	mov	r0, r4
 80a23e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a23e6:	2c00      	cmp	r4, #0
 80a23e8:	d0f2      	beq.n	80a23d0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a23ea:	212e      	movs	r1, #46	; 0x2e
 80a23ec:	4630      	mov	r0, r6
 80a23ee:	f7fe fc11 	bl	80a0c14 <_ZN5Print5printEc>
 80a23f2:	4404      	add	r4, r0
 80a23f4:	e7ec      	b.n	80a23d0 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a23f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a23f8:	b510      	push	{r4, lr}
 80a23fa:	4604      	mov	r4, r0
 80a23fc:	4b04      	ldr	r3, [pc, #16]	; (80a2410 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a23fe:	2211      	movs	r2, #17
 80a2400:	2100      	movs	r1, #0
 80a2402:	f840 3b04 	str.w	r3, [r0], #4
 80a2406:	f000 fda1 	bl	80a2f4c <memset>
}
 80a240a:	4620      	mov	r0, r4
 80a240c:	bd10      	pop	{r4, pc}
 80a240e:	bf00      	nop
 80a2410:	080a3360 	.word	0x080a3360

080a2414 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2414:	4603      	mov	r3, r0
 80a2416:	4a07      	ldr	r2, [pc, #28]	; (80a2434 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2418:	b510      	push	{r4, lr}
 80a241a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a241e:	f101 0210 	add.w	r2, r1, #16
 80a2422:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2426:	4291      	cmp	r1, r2
 80a2428:	f843 4b04 	str.w	r4, [r3], #4
 80a242c:	d1f9      	bne.n	80a2422 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a242e:	780a      	ldrb	r2, [r1, #0]
 80a2430:	701a      	strb	r2, [r3, #0]
}
 80a2432:	bd10      	pop	{r4, pc}
 80a2434:	080a3360 	.word	0x080a3360

080a2438 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a2438:	4a02      	ldr	r2, [pc, #8]	; (80a2444 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a243a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a243e:	2204      	movs	r2, #4
 80a2440:	7502      	strb	r2, [r0, #20]
}
 80a2442:	4770      	bx	lr
 80a2444:	080a3360 	.word	0x080a3360

080a2448 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2448:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a244a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a244e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2452:	2304      	movs	r3, #4
 80a2454:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2458:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a245c:	6044      	str	r4, [r0, #4]
 80a245e:	7503      	strb	r3, [r0, #20]
}
 80a2460:	bd10      	pop	{r4, pc}
	...

080a2464 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2466:	4d04      	ldr	r5, [pc, #16]	; (80a2478 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2468:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a246a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a246e:	9500      	str	r5, [sp, #0]
 80a2470:	f7ff ffea 	bl	80a2448 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2474:	b003      	add	sp, #12
 80a2476:	bd30      	pop	{r4, r5, pc}
 80a2478:	080a3360 	.word	0x080a3360

080a247c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a247c:	7441      	strb	r1, [r0, #17]
}
 80a247e:	4770      	bx	lr

080a2480 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2480:	4770      	bx	lr

080a2482 <_ZN9USBSerial4readEv>:
{
 80a2482:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2484:	2100      	movs	r1, #0
 80a2486:	7c00      	ldrb	r0, [r0, #16]
 80a2488:	f7fe f908 	bl	80a069c <HAL_USB_USART_Receive_Data>
}
 80a248c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2490:	bd08      	pop	{r3, pc}

080a2492 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a2492:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2494:	2101      	movs	r1, #1
 80a2496:	7c00      	ldrb	r0, [r0, #16]
 80a2498:	f7fe f900 	bl	80a069c <HAL_USB_USART_Receive_Data>
}
 80a249c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a24a0:	bd08      	pop	{r3, pc}

080a24a2 <_ZN9USBSerial17availableForWriteEv>:
{
 80a24a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a24a4:	7c00      	ldrb	r0, [r0, #16]
 80a24a6:	f7fe f8f1 	bl	80a068c <HAL_USB_USART_Available_Data_For_Write>
}
 80a24aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24ae:	bd08      	pop	{r3, pc}

080a24b0 <_ZN9USBSerial9availableEv>:
{
 80a24b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a24b2:	7c00      	ldrb	r0, [r0, #16]
 80a24b4:	f7fe f8e2 	bl	80a067c <HAL_USB_USART_Available_Data>
}
 80a24b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24bc:	bd08      	pop	{r3, pc}

080a24be <_ZN9USBSerial5writeEh>:
{
 80a24be:	b538      	push	{r3, r4, r5, lr}
 80a24c0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24c2:	7c00      	ldrb	r0, [r0, #16]
{
 80a24c4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24c6:	f7fe f8e1 	bl	80a068c <HAL_USB_USART_Available_Data_For_Write>
 80a24ca:	2800      	cmp	r0, #0
 80a24cc:	dc01      	bgt.n	80a24d2 <_ZN9USBSerial5writeEh+0x14>
 80a24ce:	7c60      	ldrb	r0, [r4, #17]
 80a24d0:	b128      	cbz	r0, 80a24de <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a24d2:	4629      	mov	r1, r5
 80a24d4:	7c20      	ldrb	r0, [r4, #16]
 80a24d6:	f7fe f8e9 	bl	80a06ac <HAL_USB_USART_Send_Data>
 80a24da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a24de:	bd38      	pop	{r3, r4, r5, pc}

080a24e0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a24e0:	7c00      	ldrb	r0, [r0, #16]
 80a24e2:	f7fe b8eb 	b.w	80a06bc <HAL_USB_USART_Flush_Data>

080a24e6 <_ZN9USBSerialD0Ev>:
 80a24e6:	b510      	push	{r4, lr}
 80a24e8:	4604      	mov	r4, r0
 80a24ea:	2114      	movs	r1, #20
 80a24ec:	f000 fcef 	bl	80a2ece <_ZdlPvj>
 80a24f0:	4620      	mov	r0, r4
 80a24f2:	bd10      	pop	{r4, pc}

080a24f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a24f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a24f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a24fa:	4604      	mov	r4, r0
 80a24fc:	4608      	mov	r0, r1
 80a24fe:	2100      	movs	r1, #0
 80a2500:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2504:	4b04      	ldr	r3, [pc, #16]	; (80a2518 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2506:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2508:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a250a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a250c:	4611      	mov	r1, r2
  _blocking = true;
 80a250e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2510:	f7fe f89c 	bl	80a064c <HAL_USB_USART_Init>
}
 80a2514:	4620      	mov	r0, r4
 80a2516:	bd10      	pop	{r4, pc}
 80a2518:	080a3374 	.word	0x080a3374

080a251c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a251c:	2200      	movs	r2, #0
 80a251e:	7c00      	ldrb	r0, [r0, #16]
 80a2520:	f7fe b89c 	b.w	80a065c <HAL_USB_USART_Begin>

080a2524 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a2524:	7c00      	ldrb	r0, [r0, #16]
 80a2526:	f7fe b8a1 	b.w	80a066c <HAL_USB_USART_End>
	...

080a252c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a252c:	b510      	push	{r4, lr}
 80a252e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2530:	2214      	movs	r2, #20
 80a2532:	2100      	movs	r1, #0
 80a2534:	f000 fd0a 	bl	80a2f4c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2538:	4b05      	ldr	r3, [pc, #20]	; (80a2550 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a253a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a253c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a253e:	4b05      	ldr	r3, [pc, #20]	; (80a2554 <_Z19acquireSerialBufferv+0x28>)
 80a2540:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2542:	f240 1301 	movw	r3, #257	; 0x101
 80a2546:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2548:	2381      	movs	r3, #129	; 0x81
 80a254a:	8223      	strh	r3, [r4, #16]
}
 80a254c:	bd10      	pop	{r4, pc}
 80a254e:	bf00      	nop
 80a2550:	2000015c 	.word	0x2000015c
 80a2554:	2000025d 	.word	0x2000025d

080a2558 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2558:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a255a:	4d0f      	ldr	r5, [pc, #60]	; (80a2598 <_Z16_fetch_usbserialv+0x40>)
{
 80a255c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a255e:	a801      	add	r0, sp, #4
 80a2560:	f7ff ffe4 	bl	80a252c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2564:	7829      	ldrb	r1, [r5, #0]
 80a2566:	f3bf 8f5b 	dmb	ish
 80a256a:	f011 0401 	ands.w	r4, r1, #1
 80a256e:	d110      	bne.n	80a2592 <_Z16_fetch_usbserialv+0x3a>
 80a2570:	4628      	mov	r0, r5
 80a2572:	f7fd fda1 	bl	80a00b8 <__cxa_guard_acquire>
 80a2576:	b160      	cbz	r0, 80a2592 <_Z16_fetch_usbserialv+0x3a>
 80a2578:	4621      	mov	r1, r4
 80a257a:	aa01      	add	r2, sp, #4
 80a257c:	4807      	ldr	r0, [pc, #28]	; (80a259c <_Z16_fetch_usbserialv+0x44>)
 80a257e:	f7ff ffb9 	bl	80a24f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2582:	4628      	mov	r0, r5
 80a2584:	f7fd fd9d 	bl	80a00c2 <__cxa_guard_release>
 80a2588:	4a05      	ldr	r2, [pc, #20]	; (80a25a0 <_Z16_fetch_usbserialv+0x48>)
 80a258a:	4906      	ldr	r1, [pc, #24]	; (80a25a4 <_Z16_fetch_usbserialv+0x4c>)
 80a258c:	4803      	ldr	r0, [pc, #12]	; (80a259c <_Z16_fetch_usbserialv+0x44>)
 80a258e:	f000 fc99 	bl	80a2ec4 <__aeabi_atexit>
	return _usbserial;
}
 80a2592:	4802      	ldr	r0, [pc, #8]	; (80a259c <_Z16_fetch_usbserialv+0x44>)
 80a2594:	b007      	add	sp, #28
 80a2596:	bd30      	pop	{r4, r5, pc}
 80a2598:	2000012c 	.word	0x2000012c
 80a259c:	20000134 	.word	0x20000134
 80a25a0:	20000074 	.word	0x20000074
 80a25a4:	080a2481 	.word	0x080a2481

080a25a8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a25a8:	b510      	push	{r4, lr}
 80a25aa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a25ac:	2214      	movs	r2, #20
 80a25ae:	2100      	movs	r1, #0
 80a25b0:	f000 fccc 	bl	80a2f4c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25b4:	4b05      	ldr	r3, [pc, #20]	; (80a25cc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a25b6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a25b8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a25ba:	4b05      	ldr	r3, [pc, #20]	; (80a25d0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a25bc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25be:	f240 1301 	movw	r3, #257	; 0x101
 80a25c2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25c4:	2381      	movs	r3, #129	; 0x81
 80a25c6:	8223      	strh	r3, [r4, #16]
}
 80a25c8:	bd10      	pop	{r4, pc}
 80a25ca:	bf00      	nop
 80a25cc:	200002de 	.word	0x200002de
 80a25d0:	200003df 	.word	0x200003df

080a25d4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a25d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25d6:	4c0f      	ldr	r4, [pc, #60]	; (80a2614 <_Z17_fetch_usbserial1v+0x40>)
{
 80a25d8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a25da:	a801      	add	r0, sp, #4
 80a25dc:	f7ff ffe4 	bl	80a25a8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25e0:	7823      	ldrb	r3, [r4, #0]
 80a25e2:	f3bf 8f5b 	dmb	ish
 80a25e6:	07db      	lsls	r3, r3, #31
 80a25e8:	d410      	bmi.n	80a260c <_Z17_fetch_usbserial1v+0x38>
 80a25ea:	4620      	mov	r0, r4
 80a25ec:	f7fd fd64 	bl	80a00b8 <__cxa_guard_acquire>
 80a25f0:	b160      	cbz	r0, 80a260c <_Z17_fetch_usbserial1v+0x38>
 80a25f2:	2101      	movs	r1, #1
 80a25f4:	aa01      	add	r2, sp, #4
 80a25f6:	4808      	ldr	r0, [pc, #32]	; (80a2618 <_Z17_fetch_usbserial1v+0x44>)
 80a25f8:	f7ff ff7c 	bl	80a24f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25fc:	4620      	mov	r0, r4
 80a25fe:	f7fd fd60 	bl	80a00c2 <__cxa_guard_release>
 80a2602:	4a06      	ldr	r2, [pc, #24]	; (80a261c <_Z17_fetch_usbserial1v+0x48>)
 80a2604:	4906      	ldr	r1, [pc, #24]	; (80a2620 <_Z17_fetch_usbserial1v+0x4c>)
 80a2606:	4804      	ldr	r0, [pc, #16]	; (80a2618 <_Z17_fetch_usbserial1v+0x44>)
 80a2608:	f000 fc5c 	bl	80a2ec4 <__aeabi_atexit>
  return _usbserial1;
}
 80a260c:	4802      	ldr	r0, [pc, #8]	; (80a2618 <_Z17_fetch_usbserial1v+0x44>)
 80a260e:	b006      	add	sp, #24
 80a2610:	bd10      	pop	{r4, pc}
 80a2612:	bf00      	nop
 80a2614:	20000130 	.word	0x20000130
 80a2618:	20000148 	.word	0x20000148
 80a261c:	20000074 	.word	0x20000074
 80a2620:	080a2481 	.word	0x080a2481

080a2624 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2624:	4770      	bx	lr

080a2626 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2626:	7441      	strb	r1, [r0, #17]
}
 80a2628:	4770      	bx	lr

080a262a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a262a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a262c:	7c00      	ldrb	r0, [r0, #16]
 80a262e:	f7fd ffb3 	bl	80a0598 <hal_usart_available_data_for_write>
}
 80a2632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2636:	bd08      	pop	{r3, pc}

080a2638 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2638:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a263a:	7c00      	ldrb	r0, [r0, #16]
 80a263c:	f7fd ff84 	bl	80a0548 <hal_usart_available>
}
 80a2640:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2644:	bd08      	pop	{r3, pc}

080a2646 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2646:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2648:	7c00      	ldrb	r0, [r0, #16]
 80a264a:	f7fd ff8d 	bl	80a0568 <hal_usart_peek>
}
 80a264e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2652:	bd08      	pop	{r3, pc}

080a2654 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2654:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2656:	7c00      	ldrb	r0, [r0, #16]
 80a2658:	f7fd ff7e 	bl	80a0558 <hal_usart_read>
}
 80a265c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2660:	bd08      	pop	{r3, pc}

080a2662 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2662:	7c00      	ldrb	r0, [r0, #16]
 80a2664:	f7fd bf88 	b.w	80a0578 <hal_usart_flush>

080a2668 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2668:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a266a:	7c46      	ldrb	r6, [r0, #17]
{
 80a266c:	4604      	mov	r4, r0
 80a266e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2670:	b12e      	cbz	r6, 80a267e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a2672:	4629      	mov	r1, r5
 80a2674:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a267a:	f7fd bf5d 	b.w	80a0538 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a267e:	7c00      	ldrb	r0, [r0, #16]
 80a2680:	f7fd ff8a 	bl	80a0598 <hal_usart_available_data_for_write>
 80a2684:	2800      	cmp	r0, #0
 80a2686:	dcf4      	bgt.n	80a2672 <_ZN11USARTSerial5writeEh+0xa>
}
 80a2688:	4630      	mov	r0, r6
 80a268a:	bd70      	pop	{r4, r5, r6, pc}

080a268c <_ZN11USARTSerialD0Ev>:
 80a268c:	b510      	push	{r4, lr}
 80a268e:	4604      	mov	r4, r0
 80a2690:	2114      	movs	r1, #20
 80a2692:	f000 fc1c 	bl	80a2ece <_ZdlPvj>
 80a2696:	4620      	mov	r0, r4
 80a2698:	bd10      	pop	{r4, pc}
	...

080a269c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a269c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a26a0:	b510      	push	{r4, lr}
 80a26a2:	4604      	mov	r4, r0
 80a26a4:	4608      	mov	r0, r1
 80a26a6:	4611      	mov	r1, r2
 80a26a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a26ac:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a26b0:	4a04      	ldr	r2, [pc, #16]	; (80a26c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a26b2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a26b4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a26b6:	2201      	movs	r2, #1
 80a26b8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a26ba:	461a      	mov	r2, r3
 80a26bc:	f7fd ff2c 	bl	80a0518 <hal_usart_init>
}
 80a26c0:	4620      	mov	r0, r4
 80a26c2:	bd10      	pop	{r4, pc}
 80a26c4:	080a33a4 	.word	0x080a33a4

080a26c8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a26c8:	2300      	movs	r3, #0
 80a26ca:	7c00      	ldrb	r0, [r0, #16]
 80a26cc:	f7fd bf6c 	b.w	80a05a8 <hal_usart_begin_config>

080a26d0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a26d0:	2200      	movs	r2, #0
 80a26d2:	f7ff bff9 	b.w	80a26c8 <_ZN11USARTSerial5beginEmm>

080a26d6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a26d6:	7c00      	ldrb	r0, [r0, #16]
 80a26d8:	f7fd bf26 	b.w	80a0528 <hal_usart_end>

080a26dc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a26dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a26de:	4d0d      	ldr	r5, [pc, #52]	; (80a2714 <_Z22__fetch_global_Serial1v+0x38>)
 80a26e0:	7829      	ldrb	r1, [r5, #0]
 80a26e2:	f3bf 8f5b 	dmb	ish
 80a26e6:	f011 0401 	ands.w	r4, r1, #1
 80a26ea:	d111      	bne.n	80a2710 <_Z22__fetch_global_Serial1v+0x34>
 80a26ec:	4628      	mov	r0, r5
 80a26ee:	f7fd fce3 	bl	80a00b8 <__cxa_guard_acquire>
 80a26f2:	b168      	cbz	r0, 80a2710 <_Z22__fetch_global_Serial1v+0x34>
 80a26f4:	4621      	mov	r1, r4
 80a26f6:	4a08      	ldr	r2, [pc, #32]	; (80a2718 <_Z22__fetch_global_Serial1v+0x3c>)
 80a26f8:	4b08      	ldr	r3, [pc, #32]	; (80a271c <_Z22__fetch_global_Serial1v+0x40>)
 80a26fa:	4809      	ldr	r0, [pc, #36]	; (80a2720 <_Z22__fetch_global_Serial1v+0x44>)
 80a26fc:	f7ff ffce 	bl	80a269c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2700:	4628      	mov	r0, r5
 80a2702:	f7fd fcde 	bl	80a00c2 <__cxa_guard_release>
 80a2706:	4a07      	ldr	r2, [pc, #28]	; (80a2724 <_Z22__fetch_global_Serial1v+0x48>)
 80a2708:	4907      	ldr	r1, [pc, #28]	; (80a2728 <_Z22__fetch_global_Serial1v+0x4c>)
 80a270a:	4805      	ldr	r0, [pc, #20]	; (80a2720 <_Z22__fetch_global_Serial1v+0x44>)
 80a270c:	f000 fbda 	bl	80a2ec4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2710:	4803      	ldr	r0, [pc, #12]	; (80a2720 <_Z22__fetch_global_Serial1v+0x44>)
 80a2712:	bd38      	pop	{r3, r4, r5, pc}
 80a2714:	20000460 	.word	0x20000460
 80a2718:	20000464 	.word	0x20000464
 80a271c:	200004e8 	.word	0x200004e8
 80a2720:	2000056c 	.word	0x2000056c
 80a2724:	20000074 	.word	0x20000074
 80a2728:	080a2625 	.word	0x080a2625

080a272c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a272c:	b510      	push	{r4, lr}
      if (_M_empty())
 80a272e:	6883      	ldr	r3, [r0, #8]
 80a2730:	4604      	mov	r4, r0
 80a2732:	b90b      	cbnz	r3, 80a2738 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2734:	f000 fbd1 	bl	80a2eda <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2738:	68c3      	ldr	r3, [r0, #12]
 80a273a:	4798      	blx	r3
      if (_M_manager)
 80a273c:	68a3      	ldr	r3, [r4, #8]
 80a273e:	b11b      	cbz	r3, 80a2748 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2740:	2203      	movs	r2, #3
 80a2742:	4621      	mov	r1, r4
 80a2744:	4620      	mov	r0, r4
 80a2746:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2748:	4620      	mov	r0, r4
}
 80a274a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a274e:	2110      	movs	r1, #16
 80a2750:	f000 bbbd 	b.w	80a2ece <_ZdlPvj>

080a2754 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2754:	4770      	bx	lr

080a2756 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2758:	4606      	mov	r6, r0
 80a275a:	4615      	mov	r5, r2
 80a275c:	460c      	mov	r4, r1
 80a275e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2760:	42bc      	cmp	r4, r7
 80a2762:	d006      	beq.n	80a2772 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2764:	6833      	ldr	r3, [r6, #0]
 80a2766:	4630      	mov	r0, r6
 80a2768:	689b      	ldr	r3, [r3, #8]
 80a276a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a276e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2770:	e7f6      	b.n	80a2760 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a2772:	4628      	mov	r0, r5
 80a2774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2776 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2776:	2200      	movs	r2, #0
 80a2778:	7c00      	ldrb	r0, [r0, #16]
 80a277a:	f7fd bf1d 	b.w	80a05b8 <hal_i2c_write>

080a277e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a277e:	2100      	movs	r1, #0
 80a2780:	7c00      	ldrb	r0, [r0, #16]
 80a2782:	f7fd bf21 	b.w	80a05c8 <hal_i2c_available>

080a2786 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a2786:	2100      	movs	r1, #0
 80a2788:	7c00      	ldrb	r0, [r0, #16]
 80a278a:	f7fd bf25 	b.w	80a05d8 <hal_i2c_read>

080a278e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a278e:	2100      	movs	r1, #0
 80a2790:	7c00      	ldrb	r0, [r0, #16]
 80a2792:	f7fd bf29 	b.w	80a05e8 <hal_i2c_peek>

080a2796 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a2796:	2100      	movs	r1, #0
 80a2798:	7c00      	ldrb	r0, [r0, #16]
 80a279a:	f7fd bf2d 	b.w	80a05f8 <hal_i2c_flush>

080a279e <_ZN7TwoWireD0Ev>:
 80a279e:	b510      	push	{r4, lr}
 80a27a0:	4604      	mov	r4, r0
 80a27a2:	2114      	movs	r1, #20
 80a27a4:	f000 fb93 	bl	80a2ece <_ZdlPvj>
 80a27a8:	4620      	mov	r0, r4
 80a27aa:	bd10      	pop	{r4, pc}

080a27ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a27ac:	b510      	push	{r4, lr}
 80a27ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a27b2:	4604      	mov	r4, r0
 80a27b4:	4608      	mov	r0, r1
 80a27b6:	2100      	movs	r1, #0
 80a27b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a27bc:	4b03      	ldr	r3, [pc, #12]	; (80a27cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a27be:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a27c0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a27c2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a27c4:	f7fd ff28 	bl	80a0618 <hal_i2c_init>
}
 80a27c8:	4620      	mov	r0, r4
 80a27ca:	bd10      	pop	{r4, pc}
 80a27cc:	080a33d4 	.word	0x080a33d4

080a27d0 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a27d0:	2200      	movs	r2, #0
 80a27d2:	6840      	ldr	r0, [r0, #4]
 80a27d4:	4611      	mov	r1, r2
 80a27d6:	f7fd bfff 	b.w	80a07d8 <network_ready>

080a27da <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a27da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a27dc:	4615      	mov	r5, r2
 80a27de:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a27e0:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a27e2:	460e      	mov	r6, r1
 80a27e4:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a27e6:	2100      	movs	r1, #0
 80a27e8:	a803      	add	r0, sp, #12
 80a27ea:	f000 fbaf 	bl	80a2f4c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a27ee:	4628      	mov	r0, r5
 80a27f0:	f000 fc1d 	bl	80a302e <strlen>
 80a27f4:	2700      	movs	r7, #0
 80a27f6:	b281      	uxth	r1, r0
 80a27f8:	6873      	ldr	r3, [r6, #4]
 80a27fa:	4628      	mov	r0, r5
 80a27fc:	9700      	str	r7, [sp, #0]
 80a27fe:	aa03      	add	r2, sp, #12
 80a2800:	f7fd ff64 	bl	80a06cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2804:	b130      	cbz	r0, 80a2814 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2806:	4639      	mov	r1, r7
 80a2808:	4620      	mov	r0, r4
 80a280a:	f7ff fe15 	bl	80a2438 <_ZN9IPAddressC1Em>
    }
 80a280e:	4620      	mov	r0, r4
 80a2810:	b009      	add	sp, #36	; 0x24
 80a2812:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2814:	4620      	mov	r0, r4
 80a2816:	a903      	add	r1, sp, #12
 80a2818:	f7ff fdfc 	bl	80a2414 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a281c:	e7f7      	b.n	80a280e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a281e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a281e:	2200      	movs	r2, #0
 80a2820:	6840      	ldr	r0, [r0, #4]
 80a2822:	4611      	mov	r1, r2
 80a2824:	f7fd bff8 	b.w	80a0818 <network_listening>

080a2828 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2828:	2200      	movs	r2, #0
 80a282a:	6840      	ldr	r0, [r0, #4]
 80a282c:	4611      	mov	r1, r2
 80a282e:	f7fe b803 	b.w	80a0838 <network_get_listen_timeout>

080a2832 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2832:	2200      	movs	r2, #0
 80a2834:	6840      	ldr	r0, [r0, #4]
 80a2836:	f7fd bff7 	b.w	80a0828 <network_set_listen_timeout>

080a283a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a283a:	2200      	movs	r2, #0
 80a283c:	6840      	ldr	r0, [r0, #4]
 80a283e:	f081 0101 	eor.w	r1, r1, #1
 80a2842:	f7fd bfe1 	b.w	80a0808 <network_listen>

080a2846 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2846:	2300      	movs	r3, #0
 80a2848:	6840      	ldr	r0, [r0, #4]
 80a284a:	461a      	mov	r2, r3
 80a284c:	4619      	mov	r1, r3
 80a284e:	f7fd bfd3 	b.w	80a07f8 <network_off>

080a2852 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2852:	2200      	movs	r2, #0
 80a2854:	6840      	ldr	r0, [r0, #4]
 80a2856:	4611      	mov	r1, r2
 80a2858:	f7fd bfae 	b.w	80a07b8 <network_connecting>

080a285c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a285c:	2200      	movs	r2, #0
 80a285e:	2102      	movs	r1, #2
 80a2860:	6840      	ldr	r0, [r0, #4]
 80a2862:	f7fd bfb1 	b.w	80a07c8 <network_disconnect>

080a2866 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2866:	2300      	movs	r3, #0
 80a2868:	6840      	ldr	r0, [r0, #4]
 80a286a:	461a      	mov	r2, r3
 80a286c:	f7fd bf9c 	b.w	80a07a8 <network_connect>

080a2870 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2870:	2204      	movs	r2, #4
 80a2872:	4b02      	ldr	r3, [pc, #8]	; (80a287c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2874:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2876:	4a02      	ldr	r2, [pc, #8]	; (80a2880 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2878:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a287a:	4770      	bx	lr
 80a287c:	20000580 	.word	0x20000580
 80a2880:	080a33fc 	.word	0x080a33fc

080a2884 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2884:	2300      	movs	r3, #0
 80a2886:	6840      	ldr	r0, [r0, #4]
 80a2888:	461a      	mov	r2, r3
 80a288a:	f7fd bf8d 	b.w	80a07a8 <network_connect>

080a288e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a288e:	2200      	movs	r2, #0
 80a2890:	2102      	movs	r1, #2
 80a2892:	6840      	ldr	r0, [r0, #4]
 80a2894:	f7fd bf98 	b.w	80a07c8 <network_disconnect>

080a2898 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2898:	2200      	movs	r2, #0
 80a289a:	6840      	ldr	r0, [r0, #4]
 80a289c:	4611      	mov	r1, r2
 80a289e:	f7fd bf8b 	b.w	80a07b8 <network_connecting>

080a28a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a28a2:	2200      	movs	r2, #0
 80a28a4:	6840      	ldr	r0, [r0, #4]
 80a28a6:	4611      	mov	r1, r2
 80a28a8:	f7fd bf96 	b.w	80a07d8 <network_ready>

080a28ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a28ac:	2300      	movs	r3, #0
 80a28ae:	6840      	ldr	r0, [r0, #4]
 80a28b0:	461a      	mov	r2, r3
 80a28b2:	4619      	mov	r1, r3
 80a28b4:	f7fd bf98 	b.w	80a07e8 <network_on>

080a28b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a28b8:	2300      	movs	r3, #0
 80a28ba:	6840      	ldr	r0, [r0, #4]
 80a28bc:	461a      	mov	r2, r3
 80a28be:	4619      	mov	r1, r3
 80a28c0:	f7fd bf9a 	b.w	80a07f8 <network_off>

080a28c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a28c4:	2100      	movs	r1, #0
 80a28c6:	6840      	ldr	r0, [r0, #4]
 80a28c8:	f7fd bfbe 	b.w	80a0848 <network_is_on>

080a28cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a28cc:	2100      	movs	r1, #0
 80a28ce:	6840      	ldr	r0, [r0, #4]
 80a28d0:	f7fd bfc2 	b.w	80a0858 <network_is_off>

080a28d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a28d4:	2200      	movs	r2, #0
 80a28d6:	6840      	ldr	r0, [r0, #4]
 80a28d8:	f081 0101 	eor.w	r1, r1, #1
 80a28dc:	f7fd bf94 	b.w	80a0808 <network_listen>

080a28e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a28e0:	2200      	movs	r2, #0
 80a28e2:	6840      	ldr	r0, [r0, #4]
 80a28e4:	f7fd bfa0 	b.w	80a0828 <network_set_listen_timeout>

080a28e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a28e8:	2200      	movs	r2, #0
 80a28ea:	6840      	ldr	r0, [r0, #4]
 80a28ec:	4611      	mov	r1, r2
 80a28ee:	f7fd bfa3 	b.w	80a0838 <network_get_listen_timeout>

080a28f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a28f2:	2200      	movs	r2, #0
 80a28f4:	6840      	ldr	r0, [r0, #4]
 80a28f6:	4611      	mov	r1, r2
 80a28f8:	f7fd bf8e 	b.w	80a0818 <network_listening>

080a28fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a28fc:	b570      	push	{r4, r5, r6, lr}
 80a28fe:	4615      	mov	r5, r2
 80a2900:	b08e      	sub	sp, #56	; 0x38
 80a2902:	4604      	mov	r4, r0
    IPAddress addr;
 80a2904:	a808      	add	r0, sp, #32
 80a2906:	f7ff fd77 	bl	80a23f8 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a290a:	2211      	movs	r2, #17
 80a290c:	2100      	movs	r1, #0
 80a290e:	a803      	add	r0, sp, #12
 80a2910:	f000 fb1c 	bl	80a2f4c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2914:	2600      	movs	r6, #0
 80a2916:	4628      	mov	r0, r5
 80a2918:	f000 fb89 	bl	80a302e <strlen>
 80a291c:	4b0a      	ldr	r3, [pc, #40]	; (80a2948 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a291e:	9600      	str	r6, [sp, #0]
 80a2920:	b281      	uxth	r1, r0
 80a2922:	685b      	ldr	r3, [r3, #4]
 80a2924:	4628      	mov	r0, r5
 80a2926:	aa03      	add	r2, sp, #12
 80a2928:	f7fd fed0 	bl	80a06cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a292c:	b130      	cbz	r0, 80a293c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a292e:	4631      	mov	r1, r6
 80a2930:	4620      	mov	r0, r4
 80a2932:	f7ff fd81 	bl	80a2438 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2936:	4620      	mov	r0, r4
 80a2938:	b00e      	add	sp, #56	; 0x38
 80a293a:	bd70      	pop	{r4, r5, r6, pc}
 80a293c:	4620      	mov	r0, r4
 80a293e:	a903      	add	r1, sp, #12
 80a2940:	f7ff fd68 	bl	80a2414 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2944:	e7f7      	b.n	80a2936 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2946:	bf00      	nop
 80a2948:	20000580 	.word	0x20000580

080a294c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a294c:	4b02      	ldr	r3, [pc, #8]	; (80a2958 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a294e:	4a03      	ldr	r2, [pc, #12]	; (80a295c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2950:	601a      	str	r2, [r3, #0]
 80a2952:	2200      	movs	r2, #0
 80a2954:	605a      	str	r2, [r3, #4]

} // spark
 80a2956:	4770      	bx	lr
 80a2958:	20000588 	.word	0x20000588
 80a295c:	080a3438 	.word	0x080a3438

080a2960 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a2960:	2201      	movs	r2, #1
 80a2962:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a2966:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a296a:	4618      	mov	r0, r3
 80a296c:	2901      	cmp	r1, #1
 80a296e:	d108      	bne.n	80a2982 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a2970:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a2974:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a2978:	3a01      	subs	r2, #1
 80a297a:	f103 0310 	add.w	r3, r3, #16
 80a297e:	d1f2      	bne.n	80a2966 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a2980:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a2982:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a2984:	bf04      	itt	eq
 80a2986:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a298a:	1852      	addeq	r2, r2, r1
 80a298c:	e7f4      	b.n	80a2978 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a298e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a298e:	b40e      	push	{r1, r2, r3}
 80a2990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2994:	b087      	sub	sp, #28
 80a2996:	af00      	add	r7, sp, #0
 80a2998:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a299c:	f855 8b04 	ldr.w	r8, [r5], #4
 80a29a0:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a29a2:	462b      	mov	r3, r5
 80a29a4:	4642      	mov	r2, r8
 80a29a6:	2110      	movs	r1, #16
 80a29a8:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a29ac:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a29ae:	f7fd ff93 	bl	80a08d8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a29b2:	280f      	cmp	r0, #15
 80a29b4:	d91b      	bls.n	80a29ee <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a29b6:	f100 0308 	add.w	r3, r0, #8
 80a29ba:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a29be:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a29c0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a29c4:	4642      	mov	r2, r8
 80a29c6:	1c41      	adds	r1, r0, #1
 80a29c8:	462b      	mov	r3, r5
 80a29ca:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a29cc:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a29ce:	f7fd ff83 	bl	80a08d8 <vsnprintf>
        if (n > 0) {
 80a29d2:	1e02      	subs	r2, r0, #0
 80a29d4:	dd04      	ble.n	80a29e0 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a29d6:	6823      	ldr	r3, [r4, #0]
 80a29d8:	4669      	mov	r1, sp
 80a29da:	4620      	mov	r0, r4
 80a29dc:	689b      	ldr	r3, [r3, #8]
 80a29de:	4798      	blx	r3
 80a29e0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a29e2:	371c      	adds	r7, #28
 80a29e4:	46bd      	mov	sp, r7
 80a29e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a29ea:	b003      	add	sp, #12
 80a29ec:	4770      	bx	lr
    } else if (n > 0) {
 80a29ee:	2800      	cmp	r0, #0
 80a29f0:	d0f7      	beq.n	80a29e2 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a29f2:	6823      	ldr	r3, [r4, #0]
 80a29f4:	4602      	mov	r2, r0
 80a29f6:	689b      	ldr	r3, [r3, #8]
 80a29f8:	4620      	mov	r0, r4
 80a29fa:	f107 0108 	add.w	r1, r7, #8
 80a29fe:	4798      	blx	r3
}
 80a2a00:	e7ef      	b.n	80a29e2 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a2a02 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2a02:	b510      	push	{r4, lr}
 80a2a04:	4604      	mov	r4, r0
          _M_dispose();
 80a2a06:	6803      	ldr	r3, [r0, #0]
 80a2a08:	689b      	ldr	r3, [r3, #8]
 80a2a0a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2a0c:	68a3      	ldr	r3, [r4, #8]
 80a2a0e:	3b01      	subs	r3, #1
 80a2a10:	60a3      	str	r3, [r4, #8]
 80a2a12:	b92b      	cbnz	r3, 80a2a20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a2a14:	6823      	ldr	r3, [r4, #0]
 80a2a16:	4620      	mov	r0, r4
    }
 80a2a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a2a1c:	68db      	ldr	r3, [r3, #12]
 80a2a1e:	4718      	bx	r3
    }
 80a2a20:	bd10      	pop	{r4, pc}

080a2a22 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 80a2a22:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a2a24:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a2a26:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a2a2a:	2201      	movs	r2, #1
 80a2a2c:	689b      	ldr	r3, [r3, #8]
 80a2a2e:	f10d 0107 	add.w	r1, sp, #7
 80a2a32:	4798      	blx	r3
}
 80a2a34:	b003      	add	sp, #12
 80a2a36:	f85d fb04 	ldr.w	pc, [sp], #4

080a2a3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a2a3a:	b538      	push	{r3, r4, r5, lr}
 80a2a3c:	680b      	ldr	r3, [r1, #0]
 80a2a3e:	4604      	mov	r4, r0
 80a2a40:	6003      	str	r3, [r0, #0]
 80a2a42:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a2a44:	6843      	ldr	r3, [r0, #4]
 80a2a46:	429d      	cmp	r5, r3
 80a2a48:	d00c      	beq.n	80a2a64 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a2a4a:	b115      	cbz	r5, 80a2a52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a2a4c:	686b      	ldr	r3, [r5, #4]
 80a2a4e:	3301      	adds	r3, #1
 80a2a50:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a2a52:	6860      	ldr	r0, [r4, #4]
 80a2a54:	b128      	cbz	r0, 80a2a62 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a2a56:	6843      	ldr	r3, [r0, #4]
 80a2a58:	3b01      	subs	r3, #1
 80a2a5a:	6043      	str	r3, [r0, #4]
 80a2a5c:	b90b      	cbnz	r3, 80a2a62 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a2a5e:	f7ff ffd0 	bl	80a2a02 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a2a62:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a2a64:	4620      	mov	r0, r4
 80a2a66:	bd38      	pop	{r3, r4, r5, pc}

080a2a68 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2a68:	460b      	mov	r3, r1
 80a2a6a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a2a6c:	2200      	movs	r2, #0
 80a2a6e:	b510      	push	{r4, lr}
 80a2a70:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2a72:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a2a76:	6083      	str	r3, [r0, #8]
    if (t) {
 80a2a78:	b90b      	cbnz	r3, 80a2a7e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a2a7a:	4620      	mov	r0, r4
 80a2a7c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a2a7e:	f7ff ffdc 	bl	80a2a3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a2a82:	e7fa      	b.n	80a2a7a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a2a84 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a2a84:	4603      	mov	r3, r0
    if (!t_) {
 80a2a86:	6880      	ldr	r0, [r0, #8]
 80a2a88:	b320      	cbz	r0, 80a2ad4 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a2a8a:	7802      	ldrb	r2, [r0, #0]
 80a2a8c:	2a03      	cmp	r2, #3
 80a2a8e:	d81a      	bhi.n	80a2ac6 <_ZNK5spark9JSONValue4typeEv+0x42>
 80a2a90:	e8df f002 	tbb	[pc, r2]
 80a2a94:	1b021704 	.word	0x1b021704
 80a2a98:	2005      	movs	r0, #5
 80a2a9a:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a2a9c:	681b      	ldr	r3, [r3, #0]
 80a2a9e:	685a      	ldr	r2, [r3, #4]
 80a2aa0:	6843      	ldr	r3, [r0, #4]
 80a2aa2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a2aa4:	282d      	cmp	r0, #45	; 0x2d
 80a2aa6:	d012      	beq.n	80a2ace <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a2aa8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a2aac:	2b09      	cmp	r3, #9
 80a2aae:	d90e      	bls.n	80a2ace <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a2ab0:	2874      	cmp	r0, #116	; 0x74
 80a2ab2:	d00e      	beq.n	80a2ad2 <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a2ab4:	2866      	cmp	r0, #102	; 0x66
 80a2ab6:	d00c      	beq.n	80a2ad2 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a2ab8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a2abc:	4258      	negs	r0, r3
 80a2abe:	4158      	adcs	r0, r3
 80a2ac0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a2ac2:	2006      	movs	r0, #6
 80a2ac4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a2ac6:	2000      	movs	r0, #0
 80a2ac8:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a2aca:	2004      	movs	r0, #4
 80a2acc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a2ace:	2003      	movs	r0, #3
 80a2ad0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a2ad2:	2002      	movs	r0, #2
}
 80a2ad4:	4770      	bx	lr

080a2ad6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a2ad6:	b510      	push	{r4, lr}
 80a2ad8:	4604      	mov	r4, r0
    switch (type()) {
 80a2ada:	f7ff ffd3 	bl	80a2a84 <_ZNK5spark9JSONValue4typeEv>
 80a2ade:	2802      	cmp	r0, #2
 80a2ae0:	d00e      	beq.n	80a2b00 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a2ae2:	1ec3      	subs	r3, r0, #3
 80a2ae4:	b2db      	uxtb	r3, r3
 80a2ae6:	2b01      	cmp	r3, #1
 80a2ae8:	d814      	bhi.n	80a2b14 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a2aea:	6822      	ldr	r2, [r4, #0]
 80a2aec:	68a3      	ldr	r3, [r4, #8]
 80a2aee:	6850      	ldr	r0, [r2, #4]
 80a2af0:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a2af2:	220a      	movs	r2, #10
}
 80a2af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a2af8:	2100      	movs	r1, #0
 80a2afa:	4418      	add	r0, r3
 80a2afc:	f000 bb40 	b.w	80a3180 <strtol>
        const char* const s = d_->json + t_->start;
 80a2b00:	6822      	ldr	r2, [r4, #0]
 80a2b02:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a2b04:	6852      	ldr	r2, [r2, #4]
 80a2b06:	685b      	ldr	r3, [r3, #4]
 80a2b08:	5cd0      	ldrb	r0, [r2, r3]
 80a2b0a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a2b0e:	4258      	negs	r0, r3
 80a2b10:	4158      	adcs	r0, r3
}
 80a2b12:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a2b14:	2000      	movs	r0, #0
 80a2b16:	e7fc      	b.n	80a2b12 <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a2b18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2b18:	460b      	mov	r3, r1
 80a2b1a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a2b1c:	2200      	movs	r2, #0
 80a2b1e:	b510      	push	{r4, lr}
 80a2b20:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2b22:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a2b26:	480d      	ldr	r0, [pc, #52]	; (80a2b5c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a2b28:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a2b2c:	b1a3      	cbz	r3, 80a2b58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a2b2e:	781a      	ldrb	r2, [r3, #0]
 80a2b30:	2a03      	cmp	r2, #3
 80a2b32:	d006      	beq.n	80a2b42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a2b34:	b982      	cbnz	r2, 80a2b58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a2b36:	680a      	ldr	r2, [r1, #0]
 80a2b38:	6850      	ldr	r0, [r2, #4]
 80a2b3a:	685a      	ldr	r2, [r3, #4]
 80a2b3c:	5c82      	ldrb	r2, [r0, r2]
 80a2b3e:	2a6e      	cmp	r2, #110	; 0x6e
 80a2b40:	d007      	beq.n	80a2b52 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a2b42:	680a      	ldr	r2, [r1, #0]
 80a2b44:	6858      	ldr	r0, [r3, #4]
 80a2b46:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a2b48:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a2b4a:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a2b4c:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a2b4e:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a2b50:	60e3      	str	r3, [r4, #12]
 80a2b52:	4620      	mov	r0, r4
 80a2b54:	f7ff ff71 	bl	80a2a3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a2b58:	4620      	mov	r0, r4
 80a2b5a:	bd10      	pop	{r4, pc}
 80a2b5c:	080a328d 	.word	0x080a328d

080a2b60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2b60:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a2b62:	2500      	movs	r5, #0
 80a2b64:	460b      	mov	r3, r1
 80a2b66:	4604      	mov	r4, r0
 80a2b68:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2b6a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a2b6e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a2b72:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a2b76:	b14b      	cbz	r3, 80a2b8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a2b78:	781a      	ldrb	r2, [r3, #0]
 80a2b7a:	2a01      	cmp	r2, #1
 80a2b7c:	d106      	bne.n	80a2b8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a2b7e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a2b82:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a2b84:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a2b86:	6143      	str	r3, [r0, #20]
 80a2b88:	f7ff ff57 	bl	80a2a3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a2b8c:	4620      	mov	r0, r4
 80a2b8e:	bd38      	pop	{r3, r4, r5, pc}

080a2b90 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a2b90:	b510      	push	{r4, lr}
    if (!n_) {
 80a2b92:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a2b94:	4604      	mov	r4, r0
    if (!n_) {
 80a2b96:	b163      	cbz	r3, 80a2bb2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a2b98:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a2b9a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a2b9c:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a2b9e:	3010      	adds	r0, #16
 80a2ba0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a2ba2:	6120      	str	r0, [r4, #16]
    --n_;
 80a2ba4:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a2ba6:	b113      	cbz	r3, 80a2bae <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a2ba8:	f7ff feda 	bl	80a2960 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a2bac:	60a0      	str	r0, [r4, #8]
    return true;
 80a2bae:	2001      	movs	r0, #1
 80a2bb0:	e000      	b.n	80a2bb4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a2bb2:	4618      	mov	r0, r3
}
 80a2bb4:	bd10      	pop	{r4, pc}

080a2bb6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2bb6:	b510      	push	{r4, lr}
    write('}');
 80a2bb8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2bba:	4604      	mov	r4, r0
    write('}');
 80a2bbc:	f7ff ff31 	bl	80a2a22 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a2bc0:	2301      	movs	r3, #1
}
 80a2bc2:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2bc4:	7123      	strb	r3, [r4, #4]
}
 80a2bc6:	bd10      	pop	{r4, pc}

080a2bc8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a2bc8:	b508      	push	{r3, lr}
    switch (state_) {
 80a2bca:	7903      	ldrb	r3, [r0, #4]
 80a2bcc:	2b01      	cmp	r3, #1
 80a2bce:	d002      	beq.n	80a2bd6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a2bd0:	2b02      	cmp	r3, #2
 80a2bd2:	d004      	beq.n	80a2bde <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a2bd4:	bd08      	pop	{r3, pc}
        write(',');
 80a2bd6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a2bd8:	f7ff ff23 	bl	80a2a22 <_ZN5spark10JSONWriter5writeEc>
}
 80a2bdc:	e7fa      	b.n	80a2bd4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a2bde:	213a      	movs	r1, #58	; 0x3a
 80a2be0:	e7fa      	b.n	80a2bd8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a2be2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a2be2:	b510      	push	{r4, lr}
 80a2be4:	4604      	mov	r4, r0
    writeSeparator();
 80a2be6:	f7ff ffef 	bl	80a2bc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a2bea:	4620      	mov	r0, r4
 80a2bec:	217b      	movs	r1, #123	; 0x7b
 80a2bee:	f7ff ff18 	bl	80a2a22 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a2bf2:	2300      	movs	r3, #0
}
 80a2bf4:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a2bf6:	7123      	strb	r3, [r4, #4]
}
 80a2bf8:	bd10      	pop	{r4, pc}
	...

080a2bfc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a2bfc:	b538      	push	{r3, r4, r5, lr}
 80a2bfe:	4604      	mov	r4, r0
 80a2c00:	460d      	mov	r5, r1
    writeSeparator();
 80a2c02:	f7ff ffe1 	bl	80a2bc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a2c06:	6823      	ldr	r3, [r4, #0]
 80a2c08:	4620      	mov	r0, r4
 80a2c0a:	462a      	mov	r2, r5
 80a2c0c:	68db      	ldr	r3, [r3, #12]
 80a2c0e:	4903      	ldr	r1, [pc, #12]	; (80a2c1c <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a2c10:	4798      	blx	r3
    state_ = NEXT;
 80a2c12:	2301      	movs	r3, #1
}
 80a2c14:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2c16:	7123      	strb	r3, [r4, #4]
}
 80a2c18:	bd38      	pop	{r3, r4, r5, pc}
 80a2c1a:	bf00      	nop
 80a2c1c:	080a3267 	.word	0x080a3267

080a2c20 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a2c20:	b538      	push	{r3, r4, r5, lr}
 80a2c22:	4604      	mov	r4, r0
 80a2c24:	460d      	mov	r5, r1
    writeSeparator();
 80a2c26:	f7ff ffcf 	bl	80a2bc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a2c2a:	6823      	ldr	r3, [r4, #0]
 80a2c2c:	4620      	mov	r0, r4
 80a2c2e:	462a      	mov	r2, r5
 80a2c30:	68db      	ldr	r3, [r3, #12]
 80a2c32:	4903      	ldr	r1, [pc, #12]	; (80a2c40 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a2c34:	4798      	blx	r3
    state_ = NEXT;
 80a2c36:	2301      	movs	r3, #1
}
 80a2c38:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2c3a:	7123      	strb	r3, [r4, #4]
}
 80a2c3c:	bd38      	pop	{r3, r4, r5, pc}
 80a2c3e:	bf00      	nop
 80a2c40:	080a346c 	.word	0x080a346c

080a2c44 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a2c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c48:	460d      	mov	r5, r1
 80a2c4a:	4617      	mov	r7, r2
    write('"');
 80a2c4c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a2c4e:	4604      	mov	r4, r0
    write('"');
 80a2c50:	f7ff fee7 	bl	80a2a22 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a2c54:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a2c56:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a2cf0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a2c5a:	442f      	add	r7, r5
    while (s != end) {
 80a2c5c:	42bd      	cmp	r5, r7
 80a2c5e:	462a      	mov	r2, r5
 80a2c60:	d038      	beq.n	80a2cd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a2c62:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a2c66:	2e22      	cmp	r6, #34	; 0x22
 80a2c68:	d003      	beq.n	80a2c72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a2c6a:	2e5c      	cmp	r6, #92	; 0x5c
 80a2c6c:	d001      	beq.n	80a2c72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a2c6e:	2e1f      	cmp	r6, #31
 80a2c70:	d8f4      	bhi.n	80a2c5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a2c72:	6823      	ldr	r3, [r4, #0]
 80a2c74:	1a52      	subs	r2, r2, r1
 80a2c76:	4620      	mov	r0, r4
 80a2c78:	689b      	ldr	r3, [r3, #8]
 80a2c7a:	4798      	blx	r3
            write('\\');
 80a2c7c:	215c      	movs	r1, #92	; 0x5c
 80a2c7e:	4620      	mov	r0, r4
 80a2c80:	f7ff fecf 	bl	80a2a22 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a2c84:	2e0d      	cmp	r6, #13
 80a2c86:	d80a      	bhi.n	80a2c9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a2c88:	2e07      	cmp	r6, #7
 80a2c8a:	d91c      	bls.n	80a2cc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a2c8c:	f1a6 0308 	sub.w	r3, r6, #8
 80a2c90:	2b05      	cmp	r3, #5
 80a2c92:	d818      	bhi.n	80a2cc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a2c94:	e8df f003 	tbb	[pc, r3]
 80a2c98:	17110f0d 	.word	0x17110f0d
 80a2c9c:	1513      	.short	0x1513
 80a2c9e:	2e22      	cmp	r6, #34	; 0x22
 80a2ca0:	d001      	beq.n	80a2ca6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a2ca2:	2e5c      	cmp	r6, #92	; 0x5c
 80a2ca4:	d10f      	bne.n	80a2cc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a2ca6:	4631      	mov	r1, r6
                write('b');
 80a2ca8:	4620      	mov	r0, r4
 80a2caa:	f7ff feba 	bl	80a2a22 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a2cae:	4629      	mov	r1, r5
    while (s != end) {
 80a2cb0:	e7d4      	b.n	80a2c5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a2cb2:	2162      	movs	r1, #98	; 0x62
 80a2cb4:	e7f8      	b.n	80a2ca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a2cb6:	2174      	movs	r1, #116	; 0x74
 80a2cb8:	e7f6      	b.n	80a2ca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a2cba:	216e      	movs	r1, #110	; 0x6e
 80a2cbc:	e7f4      	b.n	80a2ca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a2cbe:	2166      	movs	r1, #102	; 0x66
 80a2cc0:	e7f2      	b.n	80a2ca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a2cc2:	2172      	movs	r1, #114	; 0x72
 80a2cc4:	e7f0      	b.n	80a2ca8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a2cc6:	6823      	ldr	r3, [r4, #0]
 80a2cc8:	4632      	mov	r2, r6
 80a2cca:	4641      	mov	r1, r8
 80a2ccc:	4620      	mov	r0, r4
 80a2cce:	68db      	ldr	r3, [r3, #12]
 80a2cd0:	4798      	blx	r3
                break;
 80a2cd2:	e7ec      	b.n	80a2cae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a2cd4:	428d      	cmp	r5, r1
 80a2cd6:	d004      	beq.n	80a2ce2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a2cd8:	6823      	ldr	r3, [r4, #0]
 80a2cda:	4620      	mov	r0, r4
 80a2cdc:	689b      	ldr	r3, [r3, #8]
 80a2cde:	1a6a      	subs	r2, r5, r1
 80a2ce0:	4798      	blx	r3
    }
    write('"');
 80a2ce2:	2122      	movs	r1, #34	; 0x22
 80a2ce4:	4620      	mov	r0, r4
 80a2ce6:	f7ff fe9c 	bl	80a2a22 <_ZN5spark10JSONWriter5writeEc>
}
 80a2cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2cee:	bf00      	nop
 80a2cf0:	080a346f 	.word	0x080a346f

080a2cf4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a2cf4:	b570      	push	{r4, r5, r6, lr}
 80a2cf6:	4604      	mov	r4, r0
 80a2cf8:	460d      	mov	r5, r1
 80a2cfa:	4616      	mov	r6, r2
    writeSeparator();
 80a2cfc:	f7ff ff64 	bl	80a2bc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a2d00:	4620      	mov	r0, r4
 80a2d02:	4632      	mov	r2, r6
 80a2d04:	4629      	mov	r1, r5
 80a2d06:	f7ff ff9d 	bl	80a2c44 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a2d0a:	2302      	movs	r3, #2
}
 80a2d0c:	4620      	mov	r0, r4
    state_ = VALUE;
 80a2d0e:	7123      	strb	r3, [r4, #4]
}
 80a2d10:	bd70      	pop	{r4, r5, r6, pc}

080a2d12 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a2d12:	b570      	push	{r4, r5, r6, lr}
 80a2d14:	4604      	mov	r4, r0
 80a2d16:	460d      	mov	r5, r1
 80a2d18:	4616      	mov	r6, r2
    writeSeparator();
 80a2d1a:	f7ff ff55 	bl	80a2bc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a2d1e:	4620      	mov	r0, r4
 80a2d20:	4632      	mov	r2, r6
 80a2d22:	4629      	mov	r1, r5
 80a2d24:	f7ff ff8e 	bl	80a2c44 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a2d28:	2301      	movs	r3, #1
}
 80a2d2a:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2d2c:	7123      	strb	r3, [r4, #4]
}
 80a2d2e:	bd70      	pop	{r4, r5, r6, pc}

080a2d30 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a2d30:	b510      	push	{r4, lr}
 80a2d32:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2d34:	6880      	ldr	r0, [r0, #8]
 80a2d36:	b108      	cbz	r0, 80a2d3c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2d38:	f7fd fbd6 	bl	80a04e8 <os_mutex_recursive_destroy>
 80a2d3c:	4620      	mov	r0, r4
 80a2d3e:	bd10      	pop	{r4, pc}

080a2d40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2d40:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2d42:	b570      	push	{r4, r5, r6, lr}
 80a2d44:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2d46:	d901      	bls.n	80a2d4c <pinAvailable+0xc>
    return false;
 80a2d48:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2d4a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2d4c:	f1a0 030d 	sub.w	r3, r0, #13
 80a2d50:	2b02      	cmp	r3, #2
 80a2d52:	d90b      	bls.n	80a2d6c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2d54:	2801      	cmp	r0, #1
 80a2d56:	d826      	bhi.n	80a2da6 <pinAvailable+0x66>
 80a2d58:	f000 f88c 	bl	80a2e74 <_Z19__fetch_global_Wirev>
 80a2d5c:	2100      	movs	r1, #0
 80a2d5e:	7c00      	ldrb	r0, [r0, #16]
 80a2d60:	f7fd fc52 	bl	80a0608 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2d64:	f080 0001 	eor.w	r0, r0, #1
 80a2d68:	b2c0      	uxtb	r0, r0
 80a2d6a:	e7ee      	b.n	80a2d4a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2d6c:	4e13      	ldr	r6, [pc, #76]	; (80a2dbc <pinAvailable+0x7c>)
 80a2d6e:	7831      	ldrb	r1, [r6, #0]
 80a2d70:	f3bf 8f5b 	dmb	ish
 80a2d74:	f011 0501 	ands.w	r5, r1, #1
 80a2d78:	d10f      	bne.n	80a2d9a <pinAvailable+0x5a>
 80a2d7a:	4630      	mov	r0, r6
 80a2d7c:	f7fd f99c 	bl	80a00b8 <__cxa_guard_acquire>
 80a2d80:	b158      	cbz	r0, 80a2d9a <pinAvailable+0x5a>
 80a2d82:	4629      	mov	r1, r5
 80a2d84:	480e      	ldr	r0, [pc, #56]	; (80a2dc0 <pinAvailable+0x80>)
 80a2d86:	f7fd fdc7 	bl	80a0918 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2d8a:	4630      	mov	r0, r6
 80a2d8c:	f7fd f999 	bl	80a00c2 <__cxa_guard_release>
 80a2d90:	4a0c      	ldr	r2, [pc, #48]	; (80a2dc4 <pinAvailable+0x84>)
 80a2d92:	490d      	ldr	r1, [pc, #52]	; (80a2dc8 <pinAvailable+0x88>)
 80a2d94:	480a      	ldr	r0, [pc, #40]	; (80a2dc0 <pinAvailable+0x80>)
 80a2d96:	f000 f895 	bl	80a2ec4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2d9a:	4b09      	ldr	r3, [pc, #36]	; (80a2dc0 <pinAvailable+0x80>)
 80a2d9c:	7818      	ldrb	r0, [r3, #0]
 80a2d9e:	f7fd fc4d 	bl	80a063c <hal_spi_is_enabled>
 80a2da2:	2800      	cmp	r0, #0
 80a2da4:	d1d0      	bne.n	80a2d48 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2da6:	3c12      	subs	r4, #18
 80a2da8:	2c01      	cmp	r4, #1
 80a2daa:	d805      	bhi.n	80a2db8 <pinAvailable+0x78>
 80a2dac:	f7ff fc96 	bl	80a26dc <_Z22__fetch_global_Serial1v>
 80a2db0:	7c00      	ldrb	r0, [r0, #16]
 80a2db2:	f7fd fbe9 	bl	80a0588 <hal_usart_is_enabled>
 80a2db6:	e7d5      	b.n	80a2d64 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2db8:	2001      	movs	r0, #1
 80a2dba:	e7c6      	b.n	80a2d4a <pinAvailable+0xa>
 80a2dbc:	20000590 	.word	0x20000590
 80a2dc0:	20000594 	.word	0x20000594
 80a2dc4:	20000074 	.word	0x20000074
 80a2dc8:	080a2d31 	.word	0x080a2d31

080a2dcc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2dcc:	2817      	cmp	r0, #23
{
 80a2dce:	b538      	push	{r3, r4, r5, lr}
 80a2dd0:	4604      	mov	r4, r0
 80a2dd2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2dd4:	d80a      	bhi.n	80a2dec <pinMode+0x20>
 80a2dd6:	29ff      	cmp	r1, #255	; 0xff
 80a2dd8:	d008      	beq.n	80a2dec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2dda:	f7ff ffb1 	bl	80a2d40 <pinAvailable>
 80a2dde:	b128      	cbz	r0, 80a2dec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2de0:	4629      	mov	r1, r5
 80a2de2:	4620      	mov	r0, r4
}
 80a2de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2de8:	f7fd bb46 	b.w	80a0478 <HAL_Pin_Mode>
}
 80a2dec:	bd38      	pop	{r3, r4, r5, pc}

080a2dee <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2dee:	b510      	push	{r4, lr}
 80a2df0:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2df2:	f7fd fb49 	bl	80a0488 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2df6:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2df8:	b2db      	uxtb	r3, r3
 80a2dfa:	2b01      	cmp	r3, #1
 80a2dfc:	d908      	bls.n	80a2e10 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2dfe:	4620      	mov	r0, r4
 80a2e00:	f7ff ff9e 	bl	80a2d40 <pinAvailable>
 80a2e04:	b120      	cbz	r0, 80a2e10 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2e06:	4620      	mov	r0, r4
}
 80a2e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2e0c:	f7fd bb44 	b.w	80a0498 <HAL_GPIO_Read>
}
 80a2e10:	2000      	movs	r0, #0
 80a2e12:	bd10      	pop	{r4, pc}

080a2e14 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2e14:	2300      	movs	r3, #0
 80a2e16:	b513      	push	{r0, r1, r4, lr}
 80a2e18:	4c07      	ldr	r4, [pc, #28]	; (80a2e38 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2e1a:	461a      	mov	r2, r3
 80a2e1c:	4619      	mov	r1, r3
 80a2e1e:	4620      	mov	r0, r4
 80a2e20:	9300      	str	r3, [sp, #0]
 80a2e22:	f7ff fb1f 	bl	80a2464 <_ZN9IPAddressC1Ehhhh>
 80a2e26:	4620      	mov	r0, r4
 80a2e28:	4a04      	ldr	r2, [pc, #16]	; (80a2e3c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2e2a:	4905      	ldr	r1, [pc, #20]	; (80a2e40 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2e2c:	b002      	add	sp, #8
 80a2e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2e32:	f000 b847 	b.w	80a2ec4 <__aeabi_atexit>
 80a2e36:	bf00      	nop
 80a2e38:	200005a4 	.word	0x200005a4
 80a2e3c:	20000074 	.word	0x20000074
 80a2e40:	080a23b5 	.word	0x080a23b5

080a2e44 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a2e44:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a2e46:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2e48:	2520      	movs	r5, #32
 80a2e4a:	8043      	strh	r3, [r0, #2]
 80a2e4c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e4e:	4e08      	ldr	r6, [pc, #32]	; (80a2e70 <_Z17acquireWireBufferv+0x2c>)
{
 80a2e50:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2e52:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e54:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2e56:	6085      	str	r5, [r0, #8]
 80a2e58:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e5a:	4628      	mov	r0, r5
 80a2e5c:	f000 f83b 	bl	80a2ed6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e60:	4631      	mov	r1, r6
	};
 80a2e62:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e64:	4628      	mov	r0, r5
 80a2e66:	f000 f836 	bl	80a2ed6 <_ZnajRKSt9nothrow_t>
	};
 80a2e6a:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a2e6c:	4620      	mov	r0, r4
 80a2e6e:	bd70      	pop	{r4, r5, r6, pc}
 80a2e70:	080a3475 	.word	0x080a3475

080a2e74 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2e74:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2e76:	4d0f      	ldr	r5, [pc, #60]	; (80a2eb4 <_Z19__fetch_global_Wirev+0x40>)
{
 80a2e78:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2e7a:	7829      	ldrb	r1, [r5, #0]
 80a2e7c:	f3bf 8f5b 	dmb	ish
 80a2e80:	f011 0401 	ands.w	r4, r1, #1
 80a2e84:	d113      	bne.n	80a2eae <_Z19__fetch_global_Wirev+0x3a>
 80a2e86:	4628      	mov	r0, r5
 80a2e88:	f7fd f916 	bl	80a00b8 <__cxa_guard_acquire>
 80a2e8c:	b178      	cbz	r0, 80a2eae <_Z19__fetch_global_Wirev+0x3a>
 80a2e8e:	a801      	add	r0, sp, #4
 80a2e90:	f7ff ffd8 	bl	80a2e44 <_Z17acquireWireBufferv>
 80a2e94:	4621      	mov	r1, r4
 80a2e96:	aa01      	add	r2, sp, #4
 80a2e98:	4807      	ldr	r0, [pc, #28]	; (80a2eb8 <_Z19__fetch_global_Wirev+0x44>)
 80a2e9a:	f7ff fc87 	bl	80a27ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2e9e:	4628      	mov	r0, r5
 80a2ea0:	f7fd f90f 	bl	80a00c2 <__cxa_guard_release>
 80a2ea4:	4a05      	ldr	r2, [pc, #20]	; (80a2ebc <_Z19__fetch_global_Wirev+0x48>)
 80a2ea6:	4906      	ldr	r1, [pc, #24]	; (80a2ec0 <_Z19__fetch_global_Wirev+0x4c>)
 80a2ea8:	4803      	ldr	r0, [pc, #12]	; (80a2eb8 <_Z19__fetch_global_Wirev+0x44>)
 80a2eaa:	f000 f80b 	bl	80a2ec4 <__aeabi_atexit>
	return wire;
}
 80a2eae:	4802      	ldr	r0, [pc, #8]	; (80a2eb8 <_Z19__fetch_global_Wirev+0x44>)
 80a2eb0:	b007      	add	sp, #28
 80a2eb2:	bd30      	pop	{r4, r5, pc}
 80a2eb4:	200005bc 	.word	0x200005bc
 80a2eb8:	200005c0 	.word	0x200005c0
 80a2ebc:	20000074 	.word	0x20000074
 80a2ec0:	080a2755 	.word	0x080a2755

080a2ec4 <__aeabi_atexit>:
 80a2ec4:	460b      	mov	r3, r1
 80a2ec6:	4601      	mov	r1, r0
 80a2ec8:	4618      	mov	r0, r3
 80a2eca:	f000 b809 	b.w	80a2ee0 <__cxa_atexit>

080a2ece <_ZdlPvj>:
 80a2ece:	f7fd b8e6 	b.w	80a009e <_ZdlPv>

080a2ed2 <_ZnwjRKSt9nothrow_t>:
 80a2ed2:	f7fd b8e0 	b.w	80a0096 <_Znwj>

080a2ed6 <_ZnajRKSt9nothrow_t>:
 80a2ed6:	f7fd b8e0 	b.w	80a009a <_Znaj>

080a2eda <_ZSt25__throw_bad_function_callv>:
 80a2eda:	b508      	push	{r3, lr}
 80a2edc:	f7fd fd04 	bl	80a08e8 <abort>

080a2ee0 <__cxa_atexit>:
 80a2ee0:	b510      	push	{r4, lr}
 80a2ee2:	4604      	mov	r4, r0
 80a2ee4:	4804      	ldr	r0, [pc, #16]	; (80a2ef8 <__cxa_atexit+0x18>)
 80a2ee6:	4613      	mov	r3, r2
 80a2ee8:	b120      	cbz	r0, 80a2ef4 <__cxa_atexit+0x14>
 80a2eea:	460a      	mov	r2, r1
 80a2eec:	2002      	movs	r0, #2
 80a2eee:	4621      	mov	r1, r4
 80a2ef0:	f3af 8000 	nop.w
 80a2ef4:	bd10      	pop	{r4, pc}
 80a2ef6:	bf00      	nop
 80a2ef8:	00000000 	.word	0x00000000

080a2efc <memcpy>:
 80a2efc:	440a      	add	r2, r1
 80a2efe:	4291      	cmp	r1, r2
 80a2f00:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2f04:	d100      	bne.n	80a2f08 <memcpy+0xc>
 80a2f06:	4770      	bx	lr
 80a2f08:	b510      	push	{r4, lr}
 80a2f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2f0e:	4291      	cmp	r1, r2
 80a2f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2f14:	d1f9      	bne.n	80a2f0a <memcpy+0xe>
 80a2f16:	bd10      	pop	{r4, pc}

080a2f18 <memmove>:
 80a2f18:	4288      	cmp	r0, r1
 80a2f1a:	b510      	push	{r4, lr}
 80a2f1c:	eb01 0402 	add.w	r4, r1, r2
 80a2f20:	d902      	bls.n	80a2f28 <memmove+0x10>
 80a2f22:	4284      	cmp	r4, r0
 80a2f24:	4623      	mov	r3, r4
 80a2f26:	d807      	bhi.n	80a2f38 <memmove+0x20>
 80a2f28:	1e43      	subs	r3, r0, #1
 80a2f2a:	42a1      	cmp	r1, r4
 80a2f2c:	d008      	beq.n	80a2f40 <memmove+0x28>
 80a2f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a2f36:	e7f8      	b.n	80a2f2a <memmove+0x12>
 80a2f38:	4601      	mov	r1, r0
 80a2f3a:	4402      	add	r2, r0
 80a2f3c:	428a      	cmp	r2, r1
 80a2f3e:	d100      	bne.n	80a2f42 <memmove+0x2a>
 80a2f40:	bd10      	pop	{r4, pc}
 80a2f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a2f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a2f4a:	e7f7      	b.n	80a2f3c <memmove+0x24>

080a2f4c <memset>:
 80a2f4c:	4603      	mov	r3, r0
 80a2f4e:	4402      	add	r2, r0
 80a2f50:	4293      	cmp	r3, r2
 80a2f52:	d100      	bne.n	80a2f56 <memset+0xa>
 80a2f54:	4770      	bx	lr
 80a2f56:	f803 1b01 	strb.w	r1, [r3], #1
 80a2f5a:	e7f9      	b.n	80a2f50 <memset+0x4>

080a2f5c <srand>:
 80a2f5c:	b538      	push	{r3, r4, r5, lr}
 80a2f5e:	4b0d      	ldr	r3, [pc, #52]	; (80a2f94 <srand+0x38>)
 80a2f60:	4604      	mov	r4, r0
 80a2f62:	681d      	ldr	r5, [r3, #0]
 80a2f64:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2f66:	b97b      	cbnz	r3, 80a2f88 <srand+0x2c>
 80a2f68:	2018      	movs	r0, #24
 80a2f6a:	f7fd fc95 	bl	80a0898 <malloc>
 80a2f6e:	4a0a      	ldr	r2, [pc, #40]	; (80a2f98 <srand+0x3c>)
 80a2f70:	4b0a      	ldr	r3, [pc, #40]	; (80a2f9c <srand+0x40>)
 80a2f72:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2f74:	e9c0 2300 	strd	r2, r3, [r0]
 80a2f78:	4b09      	ldr	r3, [pc, #36]	; (80a2fa0 <srand+0x44>)
 80a2f7a:	2201      	movs	r2, #1
 80a2f7c:	6083      	str	r3, [r0, #8]
 80a2f7e:	230b      	movs	r3, #11
 80a2f80:	8183      	strh	r3, [r0, #12]
 80a2f82:	2300      	movs	r3, #0
 80a2f84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2f88:	2200      	movs	r2, #0
 80a2f8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2f8c:	611c      	str	r4, [r3, #16]
 80a2f8e:	615a      	str	r2, [r3, #20]
 80a2f90:	bd38      	pop	{r3, r4, r5, pc}
 80a2f92:	bf00      	nop
 80a2f94:	20000010 	.word	0x20000010
 80a2f98:	abcd330e 	.word	0xabcd330e
 80a2f9c:	e66d1234 	.word	0xe66d1234
 80a2fa0:	0005deec 	.word	0x0005deec

080a2fa4 <strchr>:
 80a2fa4:	4603      	mov	r3, r0
 80a2fa6:	b2c9      	uxtb	r1, r1
 80a2fa8:	4618      	mov	r0, r3
 80a2faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2fae:	b112      	cbz	r2, 80a2fb6 <strchr+0x12>
 80a2fb0:	428a      	cmp	r2, r1
 80a2fb2:	d1f9      	bne.n	80a2fa8 <strchr+0x4>
 80a2fb4:	4770      	bx	lr
 80a2fb6:	2900      	cmp	r1, #0
 80a2fb8:	bf18      	it	ne
 80a2fba:	2000      	movne	r0, #0
 80a2fbc:	4770      	bx	lr

080a2fbe <strchrnul>:
 80a2fbe:	b510      	push	{r4, lr}
 80a2fc0:	4604      	mov	r4, r0
 80a2fc2:	f7ff ffef 	bl	80a2fa4 <strchr>
 80a2fc6:	b918      	cbnz	r0, 80a2fd0 <strchrnul+0x12>
 80a2fc8:	4620      	mov	r0, r4
 80a2fca:	f000 f830 	bl	80a302e <strlen>
 80a2fce:	4420      	add	r0, r4
 80a2fd0:	bd10      	pop	{r4, pc}

080a2fd2 <strcmp>:
 80a2fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2fda:	2a01      	cmp	r2, #1
 80a2fdc:	bf28      	it	cs
 80a2fde:	429a      	cmpcs	r2, r3
 80a2fe0:	d0f7      	beq.n	80a2fd2 <strcmp>
 80a2fe2:	1ad0      	subs	r0, r2, r3
 80a2fe4:	4770      	bx	lr

080a2fe6 <strcpy>:
 80a2fe6:	4603      	mov	r3, r0
 80a2fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2fec:	f803 2b01 	strb.w	r2, [r3], #1
 80a2ff0:	2a00      	cmp	r2, #0
 80a2ff2:	d1f9      	bne.n	80a2fe8 <strcpy+0x2>
 80a2ff4:	4770      	bx	lr
	...

080a2ff8 <strdup>:
 80a2ff8:	4b02      	ldr	r3, [pc, #8]	; (80a3004 <strdup+0xc>)
 80a2ffa:	4601      	mov	r1, r0
 80a2ffc:	6818      	ldr	r0, [r3, #0]
 80a2ffe:	f000 b803 	b.w	80a3008 <_strdup_r>
 80a3002:	bf00      	nop
 80a3004:	20000010 	.word	0x20000010

080a3008 <_strdup_r>:
 80a3008:	b570      	push	{r4, r5, r6, lr}
 80a300a:	4604      	mov	r4, r0
 80a300c:	4608      	mov	r0, r1
 80a300e:	460d      	mov	r5, r1
 80a3010:	f000 f80d 	bl	80a302e <strlen>
 80a3014:	1c46      	adds	r6, r0, #1
 80a3016:	4631      	mov	r1, r6
 80a3018:	4620      	mov	r0, r4
 80a301a:	f7fd fc6d 	bl	80a08f8 <_malloc_r>
 80a301e:	4604      	mov	r4, r0
 80a3020:	b118      	cbz	r0, 80a302a <_strdup_r+0x22>
 80a3022:	4632      	mov	r2, r6
 80a3024:	4629      	mov	r1, r5
 80a3026:	f7ff ff69 	bl	80a2efc <memcpy>
 80a302a:	4620      	mov	r0, r4
 80a302c:	bd70      	pop	{r4, r5, r6, pc}

080a302e <strlen>:
 80a302e:	4603      	mov	r3, r0
 80a3030:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3034:	2a00      	cmp	r2, #0
 80a3036:	d1fb      	bne.n	80a3030 <strlen+0x2>
 80a3038:	1a18      	subs	r0, r3, r0
 80a303a:	3801      	subs	r0, #1
 80a303c:	4770      	bx	lr

080a303e <strncmp>:
 80a303e:	b510      	push	{r4, lr}
 80a3040:	b16a      	cbz	r2, 80a305e <strncmp+0x20>
 80a3042:	3901      	subs	r1, #1
 80a3044:	1884      	adds	r4, r0, r2
 80a3046:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a304a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a304e:	4293      	cmp	r3, r2
 80a3050:	d103      	bne.n	80a305a <strncmp+0x1c>
 80a3052:	42a0      	cmp	r0, r4
 80a3054:	d001      	beq.n	80a305a <strncmp+0x1c>
 80a3056:	2b00      	cmp	r3, #0
 80a3058:	d1f5      	bne.n	80a3046 <strncmp+0x8>
 80a305a:	1a98      	subs	r0, r3, r2
 80a305c:	bd10      	pop	{r4, pc}
 80a305e:	4610      	mov	r0, r2
 80a3060:	e7fc      	b.n	80a305c <strncmp+0x1e>

080a3062 <strrchr>:
 80a3062:	b538      	push	{r3, r4, r5, lr}
 80a3064:	4603      	mov	r3, r0
 80a3066:	460c      	mov	r4, r1
 80a3068:	b969      	cbnz	r1, 80a3086 <strrchr+0x24>
 80a306a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a306e:	f7ff bf99 	b.w	80a2fa4 <strchr>
 80a3072:	4605      	mov	r5, r0
 80a3074:	1c43      	adds	r3, r0, #1
 80a3076:	4621      	mov	r1, r4
 80a3078:	4618      	mov	r0, r3
 80a307a:	f7ff ff93 	bl	80a2fa4 <strchr>
 80a307e:	2800      	cmp	r0, #0
 80a3080:	d1f7      	bne.n	80a3072 <strrchr+0x10>
 80a3082:	4628      	mov	r0, r5
 80a3084:	bd38      	pop	{r3, r4, r5, pc}
 80a3086:	2500      	movs	r5, #0
 80a3088:	e7f5      	b.n	80a3076 <strrchr+0x14>
	...

080a308c <_strtol_l.isra.0>:
 80a308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3090:	468c      	mov	ip, r1
 80a3092:	4686      	mov	lr, r0
 80a3094:	4e39      	ldr	r6, [pc, #228]	; (80a317c <_strtol_l.isra.0+0xf0>)
 80a3096:	4660      	mov	r0, ip
 80a3098:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a309c:	5da5      	ldrb	r5, [r4, r6]
 80a309e:	f015 0508 	ands.w	r5, r5, #8
 80a30a2:	d1f8      	bne.n	80a3096 <_strtol_l.isra.0+0xa>
 80a30a4:	2c2d      	cmp	r4, #45	; 0x2d
 80a30a6:	d133      	bne.n	80a3110 <_strtol_l.isra.0+0x84>
 80a30a8:	f04f 0801 	mov.w	r8, #1
 80a30ac:	f89c 4000 	ldrb.w	r4, [ip]
 80a30b0:	f100 0c02 	add.w	ip, r0, #2
 80a30b4:	2b00      	cmp	r3, #0
 80a30b6:	d05c      	beq.n	80a3172 <_strtol_l.isra.0+0xe6>
 80a30b8:	2b10      	cmp	r3, #16
 80a30ba:	d10c      	bne.n	80a30d6 <_strtol_l.isra.0+0x4a>
 80a30bc:	2c30      	cmp	r4, #48	; 0x30
 80a30be:	d10a      	bne.n	80a30d6 <_strtol_l.isra.0+0x4a>
 80a30c0:	f89c 0000 	ldrb.w	r0, [ip]
 80a30c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a30c8:	2858      	cmp	r0, #88	; 0x58
 80a30ca:	d14d      	bne.n	80a3168 <_strtol_l.isra.0+0xdc>
 80a30cc:	2310      	movs	r3, #16
 80a30ce:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a30d2:	f10c 0c02 	add.w	ip, ip, #2
 80a30d6:	2600      	movs	r6, #0
 80a30d8:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a30dc:	3f01      	subs	r7, #1
 80a30de:	fbb7 f9f3 	udiv	r9, r7, r3
 80a30e2:	4630      	mov	r0, r6
 80a30e4:	fb03 7a19 	mls	sl, r3, r9, r7
 80a30e8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a30ec:	2d09      	cmp	r5, #9
 80a30ee:	d818      	bhi.n	80a3122 <_strtol_l.isra.0+0x96>
 80a30f0:	462c      	mov	r4, r5
 80a30f2:	42a3      	cmp	r3, r4
 80a30f4:	dd24      	ble.n	80a3140 <_strtol_l.isra.0+0xb4>
 80a30f6:	1c75      	adds	r5, r6, #1
 80a30f8:	d007      	beq.n	80a310a <_strtol_l.isra.0+0x7e>
 80a30fa:	4581      	cmp	r9, r0
 80a30fc:	d31d      	bcc.n	80a313a <_strtol_l.isra.0+0xae>
 80a30fe:	d101      	bne.n	80a3104 <_strtol_l.isra.0+0x78>
 80a3100:	45a2      	cmp	sl, r4
 80a3102:	db1a      	blt.n	80a313a <_strtol_l.isra.0+0xae>
 80a3104:	2601      	movs	r6, #1
 80a3106:	fb00 4003 	mla	r0, r0, r3, r4
 80a310a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a310e:	e7eb      	b.n	80a30e8 <_strtol_l.isra.0+0x5c>
 80a3110:	2c2b      	cmp	r4, #43	; 0x2b
 80a3112:	bf08      	it	eq
 80a3114:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a3118:	46a8      	mov	r8, r5
 80a311a:	bf08      	it	eq
 80a311c:	f100 0c02 	addeq.w	ip, r0, #2
 80a3120:	e7c8      	b.n	80a30b4 <_strtol_l.isra.0+0x28>
 80a3122:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a3126:	2d19      	cmp	r5, #25
 80a3128:	d801      	bhi.n	80a312e <_strtol_l.isra.0+0xa2>
 80a312a:	3c37      	subs	r4, #55	; 0x37
 80a312c:	e7e1      	b.n	80a30f2 <_strtol_l.isra.0+0x66>
 80a312e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a3132:	2d19      	cmp	r5, #25
 80a3134:	d804      	bhi.n	80a3140 <_strtol_l.isra.0+0xb4>
 80a3136:	3c57      	subs	r4, #87	; 0x57
 80a3138:	e7db      	b.n	80a30f2 <_strtol_l.isra.0+0x66>
 80a313a:	f04f 36ff 	mov.w	r6, #4294967295
 80a313e:	e7e4      	b.n	80a310a <_strtol_l.isra.0+0x7e>
 80a3140:	1c73      	adds	r3, r6, #1
 80a3142:	d106      	bne.n	80a3152 <_strtol_l.isra.0+0xc6>
 80a3144:	2322      	movs	r3, #34	; 0x22
 80a3146:	4638      	mov	r0, r7
 80a3148:	f8ce 3000 	str.w	r3, [lr]
 80a314c:	b942      	cbnz	r2, 80a3160 <_strtol_l.isra.0+0xd4>
 80a314e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3152:	f1b8 0f00 	cmp.w	r8, #0
 80a3156:	d000      	beq.n	80a315a <_strtol_l.isra.0+0xce>
 80a3158:	4240      	negs	r0, r0
 80a315a:	2a00      	cmp	r2, #0
 80a315c:	d0f7      	beq.n	80a314e <_strtol_l.isra.0+0xc2>
 80a315e:	b10e      	cbz	r6, 80a3164 <_strtol_l.isra.0+0xd8>
 80a3160:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a3164:	6011      	str	r1, [r2, #0]
 80a3166:	e7f2      	b.n	80a314e <_strtol_l.isra.0+0xc2>
 80a3168:	2430      	movs	r4, #48	; 0x30
 80a316a:	2b00      	cmp	r3, #0
 80a316c:	d1b3      	bne.n	80a30d6 <_strtol_l.isra.0+0x4a>
 80a316e:	2308      	movs	r3, #8
 80a3170:	e7b1      	b.n	80a30d6 <_strtol_l.isra.0+0x4a>
 80a3172:	2c30      	cmp	r4, #48	; 0x30
 80a3174:	d0a4      	beq.n	80a30c0 <_strtol_l.isra.0+0x34>
 80a3176:	230a      	movs	r3, #10
 80a3178:	e7ad      	b.n	80a30d6 <_strtol_l.isra.0+0x4a>
 80a317a:	bf00      	nop
 80a317c:	080a3477 	.word	0x080a3477

080a3180 <strtol>:
 80a3180:	4613      	mov	r3, r2
 80a3182:	460a      	mov	r2, r1
 80a3184:	4601      	mov	r1, r0
 80a3186:	4802      	ldr	r0, [pc, #8]	; (80a3190 <strtol+0x10>)
 80a3188:	6800      	ldr	r0, [r0, #0]
 80a318a:	f7ff bf7f 	b.w	80a308c <_strtol_l.isra.0>
 80a318e:	bf00      	nop
 80a3190:	20000010 	.word	0x20000010

080a3194 <dynalib_user>:
 80a3194:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a31a4:	00000000 2c64255b 252c6425 70005d64     ....[%d,%d,%d].p
 80a31b4:	696c6275 64656873 7325203a 00000000     ublished: %s....

080a31c4 <_ZTVN5spark10LogHandlerE>:
	...
 80a31d4:	080a00a5 080a00c9                       ........

080a31dc <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a31e4:	080a00d5 080a0109 080a19a5 080a00cb     ................
 80a31f4:	65656873 73655474 77003174 6e697269     sheetTest1.wirin
 80a3204:	79530067 6d657473 656c7320 63207065     g.System sleep c
 80a3214:	69666e6f 61727567 6e6f6974 20736920     onfiguration is 
 80a3224:	61766e69 2e64696c 75616200 65530064     invalid..baud.Se
 80a3234:	6c616972 42535500 69726553 00316c61     rial.USBSerial1.
 80a3244:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 80a3254:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 80a3264:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
 80a3274:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
 80a3284:	20736c69 0d00203d 006d000a 00660063     ils = ....m.c.f.
 80a3294:	66006e6c 0074006e 65646f63 74656400     ln.fn.t.code.det
 80a32a4:	006c6961                                ail.

080a32a8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a32b0:	080a0cf5 080a0d1b 080a0cdb 080a298f     .............)..

080a32c0 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a32c8:	080a11d1 080a11e9 080a19a5 080a00cb     ................

080a32d8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a32e0:	080a11fd 080a1211 080a1b4d 080a0ce3     ........M.......

080a32f0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a32f8:	080a0cf3 080a0d29 080a18e1 080a0ce5     ....)...........

080a3308 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a3310:	080a0cf1 080a0d37 080a10f9 080a0d53     ....7.......S...
 80a3320:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 80a3330:	007a2553 74637361 00656d69              S%z.asctime.

080a333c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3344:	080a1e7d 080a1e83 080a1ec1 080a1e91     }...............
 80a3354:	080a1e7f                                ....

080a3358 <_ZTV9IPAddress>:
	...
 80a3360:	080a23c5 080a23b5 080a23b7              .#...#...#..

080a336c <_ZTV9USBSerial>:
	...
 80a3374:	080a2481 080a24e7 080a24bf 080a0bc9     .$...$...$......
 80a3384:	080a24b1 080a2483 080a2493 080a24e1     .$...$...$...$..
 80a3394:	080a24a3 080a247d                       .$..}$..

080a339c <_ZTV11USARTSerial>:
	...
 80a33a4:	080a2625 080a268d 080a2669 080a0bc9     %&...&..i&......
 80a33b4:	080a2639 080a2655 080a2647 080a2663     9&..U&..G&..c&..
 80a33c4:	080a2627 080a262b                       '&..+&..

080a33cc <_ZTV7TwoWire>:
	...
 80a33d4:	080a2755 080a279f 080a2777 080a2757     U'...'..w'..W'..
 80a33e4:	080a277f 080a2787 080a278f 080a2797     .'...'...'...'..

080a33f4 <_ZTVN5spark9WiFiClassE>:
	...
 80a33fc:	080a2867 080a285d 080a2853 080a27d1     g(..](..S(...'..
 80a340c:	080a0ccf 080a2847 080a28c5 080a28cd     ....G(...(...(..
 80a341c:	080a283b 080a2833 080a2829 080a281f     ;(..3(..)(...(..
 80a342c:	080a27db                                .'..

080a3430 <_ZTVN5spark12NetworkClassE>:
	...
 80a3438:	080a2885 080a288f 080a2899 080a28a3     .(...(...(...(..
 80a3448:	080a28ad 080a28b9 080a28c5 080a28cd     .(...(...(...(..
 80a3458:	080a28d5 080a28e1 080a28e9 080a28f3     .(...(...(...(..
 80a3468:	080a28fd 75007525 78343025               .(..%u.u%04x.

080a3475 <_ZSt7nothrow>:
	...

080a3476 <_ctype_>:
 80a3476:	20202000 20202020 28282020 20282828     .         ((((( 
 80a3486:	20202020 20202020 20202020 20202020                     
 80a3496:	10108820 10101010 10101010 10101010      ...............
 80a34a6:	04040410 04040404 10040404 10101010     ................
 80a34b6:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a34c6:	01010101 01010101 01010101 10101010     ................
 80a34d6:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a34e6:	02020202 02020202 02020202 10101010     ................
 80a34f6:	00000020 00000000 00000000 00000000      ...............
	...

080a3577 <link_const_variable_data_end>:
	...

080a3578 <link_constructors_location>:
 80a3578:	080a03cd 	.word	0x080a03cd
 80a357c:	080a0a75 	.word	0x080a0a75
 80a3580:	080a1995 	.word	0x080a1995
 80a3584:	080a1cc1 	.word	0x080a1cc1
 80a3588:	080a1d15 	.word	0x080a1d15
 80a358c:	080a2871 	.word	0x080a2871
 80a3590:	080a294d 	.word	0x080a294d
 80a3594:	080a2e15 	.word	0x080a2e15

080a3598 <link_constructors_end>:
	...
