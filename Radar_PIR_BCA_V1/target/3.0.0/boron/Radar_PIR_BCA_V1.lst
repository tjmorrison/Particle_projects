
c:/Users/tjmor/OneDrive/Documents/Particle_projects/Radar_PIR_BCA_V1/target/3.0.0/boron/Radar_PIR_BCA_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003404  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7420  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e520  000d7424  0001e520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000025c  2003e594  2003e594  0002e594  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7498  000d7498  00027498  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d74c0  000d74c0  000274c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015400a  00000000  00000000  000274c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014d23  00000000  00000000  0017b4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00036b2f  00000000  00000000  001901f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b88  00000000  00000000  001c6d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009668  00000000  00000000  001c98a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035635  00000000  00000000  001d2f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003741f  00000000  00000000  00208545  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012afef  00000000  00000000  0023f964  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007a70  00000000  00000000  0036a954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fe9d 	bl	d6d6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 febf 	bl	d6dbc <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e520 	.word	0x2003e520
   d4048:	000d7424 	.word	0x000d7424
   d404c:	2003e594 	.word	0x2003e594
   d4050:	2003e594 	.word	0x2003e594
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fe33 	bl	d5cc8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d73f8 	.word	0x000d73f8
   d407c:	000d741c 	.word	0x000d741c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b861 	b.w	d4146 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c1 	bl	d420c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bddd 	b.w	d5c4c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bbbd 	b.w	d4810 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bbbb 	b.w	d4810 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bbc1 	b.w	d4820 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fae6 	bl	d4678 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4459 	.word	0x000d4459

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d8:	f000 ff16 	bl	d4f08 <_ZN5spark10LogManager8instanceEv>
   d40dc:	4621      	mov	r1, r4
   d40de:	f001 f906 	bl	d52ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e2:	f002 f997 	bl	d6414 <_Z16_fetch_usbserialv>
   d40e6:	f002 f989 	bl	d63fc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40ea:	4620      	mov	r0, r4
   d40ec:	4b04      	ldr	r3, [pc, #16]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40ee:	f840 3b04 	str.w	r3, [r0], #4
   d40f2:	f000 ffe9 	bl	d50c8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
   d40fa:	bf00      	nop
   d40fc:	000d7058 	.word	0x000d7058
   d4100:	000d7040 	.word	0x000d7040

000d4104 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
    }
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN5spark16SerialLogHandlerD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2124      	movs	r1, #36	; 0x24
   d4110:	f002 fe15 	bl	d6d3e <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4118:	b40e      	push	{r1, r2, r3}
   d411a:	b510      	push	{r4, lr}
   d411c:	b08d      	sub	sp, #52	; 0x34
   d411e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4120:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4122:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4126:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4128:	2300      	movs	r3, #0
   d412a:	2020      	movs	r0, #32
   d412c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4130:	e9cd 4200 	strd	r4, r2, [sp]
   d4134:	201e      	movs	r0, #30
   d4136:	aa04      	add	r2, sp, #16
   d4138:	f000 faa6 	bl	d4688 <log_message_v>
}
   d413c:	b00d      	add	sp, #52	; 0x34
   d413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4142:	b003      	add	sp, #12
   d4144:	4770      	bx	lr

000d4146 <setup>:




// setup() runs once, when the device is first turned on.
void setup() {
   d4146:	b508      	push	{r3, lr}
    
  //Make variable public
  //Particle.variable("Signal_data_matri", signal_data);
 
  //Set the digital pins to input
  pinMode(D2, INPUT);
   d4148:	2100      	movs	r1, #0
   d414a:	2002      	movs	r0, #2
   d414c:	f002 fd8e 	bl	d6c6c <pinMode>
  pinMode(D3, INPUT);
   d4150:	2100      	movs	r1, #0
   d4152:	2003      	movs	r0, #3
   d4154:	f002 fd8a 	bl	d6c6c <pinMode>
  pinMode(D4, INPUT);

}
   d4158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(D4, INPUT);
   d415c:	2100      	movs	r1, #0
   d415e:	2004      	movs	r0, #4
   d4160:	f002 bd84 	b.w	d6c6c <pinMode>

000d4164 <_Z20PublishToGoogleSheetv>:
    }
     
}

//Publish to google sheets function
void PublishToGoogleSheet() {
   d4164:	b510      	push	{r4, lr}
    char buf[128];

    snprintf(buf, sizeof(buf), "[%d,%d,%d]", signal_data[1][3],signal_data[2][3],signal_data[3][3]);
   d4166:	4b18      	ldr	r3, [pc, #96]	; (d41c8 <_Z20PublishToGoogleSheetv+0x64>)
void PublishToGoogleSheet() {
   d4168:	b0a4      	sub	sp, #144	; 0x90
    snprintf(buf, sizeof(buf), "[%d,%d,%d]", signal_data[1][3],signal_data[2][3],signal_data[3][3]);
   d416a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   d416c:	9201      	str	r2, [sp, #4]
   d416e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   d4170:	9200      	str	r2, [sp, #0]
   d4172:	699b      	ldr	r3, [r3, #24]
   d4174:	4a15      	ldr	r2, [pc, #84]	; (d41cc <_Z20PublishToGoogleSheetv+0x68>)
   d4176:	2180      	movs	r1, #128	; 0x80
   d4178:	a804      	add	r0, sp, #16
   d417a:	f000 fb61 	bl	d4840 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d417e:	4b14      	ldr	r3, [pc, #80]	; (d41d0 <_Z20PublishToGoogleSheetv+0x6c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4180:	4914      	ldr	r1, [pc, #80]	; (d41d4 <_Z20PublishToGoogleSheetv+0x70>)
   d4182:	781b      	ldrb	r3, [r3, #0]
   d4184:	f88d 3000 	strb.w	r3, [sp]
   d4188:	6809      	ldr	r1, [r1, #0]
   d418a:	233c      	movs	r3, #60	; 0x3c
   d418c:	aa04      	add	r2, sp, #16
   d418e:	a802      	add	r0, sp, #8
   d4190:	f001 fef2 	bl	d5f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4194:	9c03      	ldr	r4, [sp, #12]
   d4196:	b17c      	cbz	r4, d41b8 <_Z20PublishToGoogleSheetv+0x54>
      if (--_M_use_count == 0)
   d4198:	6863      	ldr	r3, [r4, #4]
   d419a:	3b01      	subs	r3, #1
   d419c:	6063      	str	r3, [r4, #4]
   d419e:	b95b      	cbnz	r3, d41b8 <_Z20PublishToGoogleSheetv+0x54>
          _M_dispose();
   d41a0:	6823      	ldr	r3, [r4, #0]
   d41a2:	4620      	mov	r0, r4
   d41a4:	689b      	ldr	r3, [r3, #8]
   d41a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41a8:	68a3      	ldr	r3, [r4, #8]
   d41aa:	3b01      	subs	r3, #1
   d41ac:	60a3      	str	r3, [r4, #8]
   d41ae:	b91b      	cbnz	r3, d41b8 <_Z20PublishToGoogleSheetv+0x54>
            _M_destroy();
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	4620      	mov	r0, r4
   d41b4:	68db      	ldr	r3, [r3, #12]
   d41b6:	4798      	blx	r3

    Particle.publish(eventName, buf, PRIVATE);
    Log.info("published: %s", buf);
   d41b8:	4907      	ldr	r1, [pc, #28]	; (d41d8 <_Z20PublishToGoogleSheetv+0x74>)
   d41ba:	4808      	ldr	r0, [pc, #32]	; (d41dc <_Z20PublishToGoogleSheetv+0x78>)
   d41bc:	aa04      	add	r2, sp, #16
   d41be:	f7ff ffab 	bl	d4118 <_ZNK5spark6Logger4infoEPKcz>
}
   d41c2:	b024      	add	sp, #144	; 0x90
   d41c4:	bd10      	pop	{r4, pc}
   d41c6:	bf00      	nop
   d41c8:	2003e5c4 	.word	0x2003e5c4
   d41cc:	000d701c 	.word	0x000d701c
   d41d0:	2003e598 	.word	0x2003e598
   d41d4:	2003e520 	.word	0x2003e520
   d41d8:	000d7027 	.word	0x000d7027
   d41dc:	2003e610 	.word	0x2003e610

000d41e0 <_Z8CheckDIOPA3_i>:

//Function to handle DIO input
void CheckDIO(int signal_data[][3]){
   d41e0:	b510      	push	{r4, lr}
   d41e2:	f100 0124 	add.w	r1, r0, #36	; 0x24
      }
    }
    else{
      if (signal_data[ii][2] == HIGH){
        // we have just turned off
        signal_data[ii][2] = LOW;
   d41e6:	2400      	movs	r4, #0
    if (signal_data[ii][1] == HIGH){ // check if the input is HIGH
   d41e8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   d41ec:	2a01      	cmp	r2, #1
   d41ee:	d108      	bne.n	d4202 <_Z8CheckDIOPA3_i+0x22>
      if (signal_data[ii][2] == LOW){
   d41f0:	b91b      	cbnz	r3, d41fa <_Z8CheckDIOPA3_i+0x1a>
        signal_data[ii][3] = signal_data[ii][3]+1; // we only count at the start of motion
   d41f2:	68c3      	ldr	r3, [r0, #12]
        signal_data[ii][2] = HIGH;
   d41f4:	6082      	str	r2, [r0, #8]
        signal_data[ii][3] = signal_data[ii][3]+1; // we only count at the start of motion
   d41f6:	3301      	adds	r3, #1
   d41f8:	60c3      	str	r3, [r0, #12]
  for (int ii = 0; ii < 3; ii++){
   d41fa:	300c      	adds	r0, #12
   d41fc:	4288      	cmp	r0, r1
   d41fe:	d1f3      	bne.n	d41e8 <_Z8CheckDIOPA3_i+0x8>
      }
    } // end DIO logic
  }
}
   d4200:	bd10      	pop	{r4, pc}
      if (signal_data[ii][2] == HIGH){
   d4202:	2b01      	cmp	r3, #1
        signal_data[ii][2] = LOW;
   d4204:	bf08      	it	eq
   d4206:	6084      	streq	r4, [r0, #8]
   d4208:	e7f7      	b.n	d41fa <_Z8CheckDIOPA3_i+0x1a>
	...

000d420c <loop>:
void loop() {
   d420c:	b538      	push	{r3, r4, r5, lr}
  signal_data[1][1] =  digitalRead(Pin_Radar);
   d420e:	2002      	movs	r0, #2
   d4210:	f002 fd3d 	bl	d6c8e <digitalRead>
   d4214:	4c11      	ldr	r4, [pc, #68]	; (d425c <loop+0x50>)
  if (millis() - lastPublish >= publishPeriod.count()) {
   d4216:	4d12      	ldr	r5, [pc, #72]	; (d4260 <loop+0x54>)
  signal_data[1][1] =  digitalRead(Pin_Radar);
   d4218:	6120      	str	r0, [r4, #16]
  signal_data[2][1] =  digitalRead(Pin_PIR);
   d421a:	2003      	movs	r0, #3
   d421c:	f002 fd37 	bl	d6c8e <digitalRead>
   d4220:	61e0      	str	r0, [r4, #28]
  signal_data[3][1] = digitalRead(Pin_Beacon);
   d4222:	2004      	movs	r0, #4
   d4224:	f002 fd33 	bl	d6c8e <digitalRead>
   d4228:	62a0      	str	r0, [r4, #40]	; 0x28
  CheckDIO(signal_data);
   d422a:	4620      	mov	r0, r4
   d422c:	f7ff ffd8 	bl	d41e0 <_Z8CheckDIOPA3_i>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4230:	f000 f91a 	bl	d4468 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPublish >= publishPeriod.count()) {
   d4234:	682b      	ldr	r3, [r5, #0]
   d4236:	1ac0      	subs	r0, r0, r3
   d4238:	f247 532f 	movw	r3, #29999	; 0x752f
   d423c:	4298      	cmp	r0, r3
   d423e:	d90b      	bls.n	d4258 <loop+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4240:	f000 face 	bl	d47e0 <spark_cloud_flag_connected>
        if (Particle.connected()) {
   d4244:	b140      	cbz	r0, d4258 <loop+0x4c>
   d4246:	f000 f90f 	bl	d4468 <HAL_Timer_Get_Milli_Seconds>
            lastPublish = millis();
   d424a:	6028      	str	r0, [r5, #0]
            PublishToGoogleSheet();
   d424c:	f7ff ff8a 	bl	d4164 <_Z20PublishToGoogleSheetv>
            signal_data[1][3] = 0; 
   d4250:	2300      	movs	r3, #0
   d4252:	61a3      	str	r3, [r4, #24]
            signal_data[2][3] = 0; 
   d4254:	6263      	str	r3, [r4, #36]	; 0x24
            signal_data[3][3] = 0; 
   d4256:	6323      	str	r3, [r4, #48]	; 0x30
}
   d4258:	bd38      	pop	{r3, r4, r5, pc}
   d425a:	bf00      	nop
   d425c:	2003e5c4 	.word	0x2003e5c4
   d4260:	2003e59c 	.word	0x2003e59c

000d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4264:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4266:	e9d0 5300 	ldrd	r5, r3, [r0]
   d426a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d426c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d426e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4272:	42ae      	cmp	r6, r5
   d4274:	d004      	beq.n	d4280 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4276:	4628      	mov	r0, r5
   d4278:	f000 fb80 	bl	d497c <_ZN6StringD1Ev>
   d427c:	3514      	adds	r5, #20
   d427e:	e7f8      	b.n	d4272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4280:	6820      	ldr	r0, [r4, #0]
   d4282:	f000 facd 	bl	d4820 <free>
    AllocatorT::free(data_);
}
   d4286:	4620      	mov	r0, r4
   d4288:	bd70      	pop	{r4, r5, r6, pc}

000d428a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d428a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d428e:	4604      	mov	r4, r0
   d4290:	460d      	mov	r5, r1
   d4292:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4294:	d916      	bls.n	d42c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4296:	4290      	cmp	r0, r2
   d4298:	d215      	bcs.n	d42c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d429a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d429e:	1a75      	subs	r5, r6, r1
   d42a0:	f1a1 0714 	sub.w	r7, r1, #20
   d42a4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d42a6:	42b7      	cmp	r7, r6
   d42a8:	d01c      	beq.n	d42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d42aa:	b12c      	cbz	r4, d42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d42ac:	4631      	mov	r1, r6
   d42ae:	4620      	mov	r0, r4
   d42b0:	f000 fbcc 	bl	d4a4c <_ZN6StringC1EOS_>
   d42b4:	7c33      	ldrb	r3, [r6, #16]
   d42b6:	7423      	strb	r3, [r4, #16]
   d42b8:	4630      	mov	r0, r6
   d42ba:	f000 fb5f 	bl	d497c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d42be:	3e14      	subs	r6, #20
   d42c0:	3c14      	subs	r4, #20
   d42c2:	e7f0      	b.n	d42a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d42c4:	d00e      	beq.n	d42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d42c6:	42b5      	cmp	r5, r6
   d42c8:	d00c      	beq.n	d42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d42ca:	b12c      	cbz	r4, d42d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d42cc:	4629      	mov	r1, r5
   d42ce:	4620      	mov	r0, r4
   d42d0:	f000 fbbc 	bl	d4a4c <_ZN6StringC1EOS_>
   d42d4:	7c2b      	ldrb	r3, [r5, #16]
   d42d6:	7423      	strb	r3, [r4, #16]
   d42d8:	4628      	mov	r0, r5
   d42da:	f000 fb4f 	bl	d497c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d42de:	3514      	adds	r5, #20
   d42e0:	3414      	adds	r4, #20
   d42e2:	e7f0      	b.n	d42c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d42e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d42ea:	2300      	movs	r3, #0
   d42ec:	e9c0 3300 	strd	r3, r3, [r0]
   d42f0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42f2:	684f      	ldr	r7, [r1, #4]
   d42f4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42f6:	4604      	mov	r4, r0
   d42f8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42fa:	dd23      	ble.n	d4344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d42fc:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4300:	fb08 f007 	mul.w	r0, r8, r7
   d4304:	f000 fa84 	bl	d4810 <malloc>
            if (!d) {
   d4308:	4605      	mov	r5, r0
   d430a:	b1d8      	cbz	r0, d4344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d430c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4310:	fb08 1202 	mla	r2, r8, r2, r1
   d4314:	f7ff ffb9 	bl	d428a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4318:	6820      	ldr	r0, [r4, #0]
   d431a:	f000 fa81 	bl	d4820 <free>
        data_ = d;
   d431e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4320:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4322:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4326:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d432a:	45b8      	cmp	r8, r7
   d432c:	d008      	beq.n	d4340 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d432e:	4639      	mov	r1, r7
   d4330:	4628      	mov	r0, r5
   d4332:	f000 fba5 	bl	d4a80 <_ZN6StringC1ERKS_>
   d4336:	7c3b      	ldrb	r3, [r7, #16]
   d4338:	742b      	strb	r3, [r5, #16]
   d433a:	3714      	adds	r7, #20
   d433c:	3514      	adds	r5, #20
   d433e:	e7f4      	b.n	d432a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4340:	6873      	ldr	r3, [r6, #4]
   d4342:	6063      	str	r3, [r4, #4]
}
   d4344:	4620      	mov	r0, r4
   d4346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d434c <_GLOBAL__sub_I_logHandler>:
}
   d434c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d434e:	4b23      	ldr	r3, [pc, #140]	; (d43dc <_GLOBAL__sub_I_logHandler+0x90>)
        filter_(level, filters) {
   d4350:	4c23      	ldr	r4, [pc, #140]	; (d43e0 <_GLOBAL__sub_I_logHandler+0x94>)
   d4352:	2001      	movs	r0, #1
   d4354:	b08c      	sub	sp, #48	; 0x30
   d4356:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED);
   d4358:	2100      	movs	r1, #0
   d435a:	f000 f9b5 	bl	d46c8 <system_thread_set_state>
        capacity_(0) {
   d435e:	2300      	movs	r3, #0
   d4360:	e9cd 3300 	strd	r3, r3, [sp]
   d4364:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4366:	f002 f855 	bl	d6414 <_Z16_fetch_usbserialv>
   d436a:	4669      	mov	r1, sp
   d436c:	4605      	mov	r5, r0
   d436e:	a803      	add	r0, sp, #12
   d4370:	f7ff ffb9 	bl	d42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4374:	4626      	mov	r6, r4
        stream_(&stream) {
   d4376:	a903      	add	r1, sp, #12
   d4378:	a806      	add	r0, sp, #24
   d437a:	f7ff ffb4 	bl	d42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d437e:	4b19      	ldr	r3, [pc, #100]	; (d43e4 <_GLOBAL__sub_I_logHandler+0x98>)
   d4380:	f846 3b04 	str.w	r3, [r6], #4
   d4384:	a906      	add	r1, sp, #24
   d4386:	a809      	add	r0, sp, #36	; 0x24
   d4388:	f7ff ffad 	bl	d42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d438c:	aa09      	add	r2, sp, #36	; 0x24
   d438e:	211e      	movs	r1, #30
   d4390:	4630      	mov	r0, r6
   d4392:	f001 f8ff 	bl	d5594 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4396:	a809      	add	r0, sp, #36	; 0x24
   d4398:	f7ff ff64 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d439c:	a806      	add	r0, sp, #24
   d439e:	f7ff ff61 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43a2:	4b11      	ldr	r3, [pc, #68]	; (d43e8 <_GLOBAL__sub_I_logHandler+0x9c>)
   d43a4:	6023      	str	r3, [r4, #0]
   d43a6:	a803      	add	r0, sp, #12
   d43a8:	6225      	str	r5, [r4, #32]
   d43aa:	f7ff ff5b 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43ae:	4b0f      	ldr	r3, [pc, #60]	; (d43ec <_GLOBAL__sub_I_logHandler+0xa0>)
   d43b0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d43b2:	f002 f82f 	bl	d6414 <_Z16_fetch_usbserialv>
   d43b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43ba:	f002 f81b 	bl	d63f4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d43be:	f000 fda3 	bl	d4f08 <_ZN5spark10LogManager8instanceEv>
   d43c2:	4621      	mov	r1, r4
   d43c4:	f001 f878 	bl	d54b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;//
   d43c8:	4668      	mov	r0, sp
   d43ca:	f7ff ff4b 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43ce:	4a08      	ldr	r2, [pc, #32]	; (d43f0 <_GLOBAL__sub_I_logHandler+0xa4>)
   d43d0:	4908      	ldr	r1, [pc, #32]	; (d43f4 <_GLOBAL__sub_I_logHandler+0xa8>)
   d43d2:	4620      	mov	r0, r4
   d43d4:	f002 fcae 	bl	d6d34 <__aeabi_atexit>
}
   d43d8:	b00c      	add	sp, #48	; 0x30
   d43da:	bd70      	pop	{r4, r5, r6, pc}
   d43dc:	2003e598 	.word	0x2003e598
   d43e0:	2003e5a0 	.word	0x2003e5a0
   d43e4:	000d7040 	.word	0x000d7040
   d43e8:	000d7148 	.word	0x000d7148
   d43ec:	000d7058 	.word	0x000d7058
   d43f0:	2003e594 	.word	0x2003e594
   d43f4:	000d40d1 	.word	0x000d40d1

000d43f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <netdb_freeaddrinfo+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	689b      	ldr	r3, [r3, #8]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030268 	.word	0x00030268

000d4408 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <netdb_getaddrinfo+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	68db      	ldr	r3, [r3, #12]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030268 	.word	0x00030268

000d4418 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_Pin_Mode+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	689b      	ldr	r3, [r3, #8]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003022c 	.word	0x0003022c

000d4428 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_Get_Pin_Mode+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	68db      	ldr	r3, [r3, #12]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003022c 	.word	0x0003022c

000d4438 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_GPIO_Read+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	695b      	ldr	r3, [r3, #20]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003022c 	.word	0x0003022c

000d4448 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_RNG_GetRandomNumber+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	685b      	ldr	r3, [r3, #4]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030218 	.word	0x00030218

000d4458 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_Delay_Microseconds+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	68db      	ldr	r3, [r3, #12]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030218 	.word	0x00030218

000d4468 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	695b      	ldr	r3, [r3, #20]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030218 	.word	0x00030218

000d4478 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <os_mutex_recursive_create+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030248 	.word	0x00030248

000d4488 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <os_mutex_recursive_destroy+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030248 	.word	0x00030248

000d4498 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <os_mutex_recursive_lock+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030248 	.word	0x00030248

000d44a8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <os_mutex_recursive_unlock+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030248 	.word	0x00030248

000d44b8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <inet_inet_ntop+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	695b      	ldr	r3, [r3, #20]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030264 	.word	0x00030264

000d44c8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <hal_usart_init+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	681b      	ldr	r3, [r3, #0]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003023c 	.word	0x0003023c

000d44d8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <hal_usart_end+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	689b      	ldr	r3, [r3, #8]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003023c 	.word	0x0003023c

000d44e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <hal_usart_write+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	68db      	ldr	r3, [r3, #12]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003023c 	.word	0x0003023c

000d44f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <hal_usart_available+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	691b      	ldr	r3, [r3, #16]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003023c 	.word	0x0003023c

000d4508 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <hal_usart_read+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	695b      	ldr	r3, [r3, #20]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003023c 	.word	0x0003023c

000d4518 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <hal_usart_peek+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	699b      	ldr	r3, [r3, #24]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003023c 	.word	0x0003023c

000d4528 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <hal_usart_flush+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	69db      	ldr	r3, [r3, #28]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003023c 	.word	0x0003023c

000d4538 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <hal_usart_is_enabled+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6a1b      	ldr	r3, [r3, #32]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003023c 	.word	0x0003023c

000d4548 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <hal_usart_available_data_for_write+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003023c 	.word	0x0003023c

000d4558 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <hal_usart_begin_config+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	0003023c 	.word	0x0003023c

000d4568 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <hal_i2c_write+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6a1b      	ldr	r3, [r3, #32]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030228 	.word	0x00030228

000d4578 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <hal_i2c_available+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030228 	.word	0x00030228

000d4588 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <hal_i2c_read+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030228 	.word	0x00030228

000d4598 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <hal_i2c_peek+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030228 	.word	0x00030228

000d45a8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <hal_i2c_flush+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030228 	.word	0x00030228

000d45b8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <hal_i2c_is_enabled+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030228 	.word	0x00030228

000d45c8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <hal_i2c_init+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030228 	.word	0x00030228

000d45d8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <hal_spi_init+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	69db      	ldr	r3, [r3, #28]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030230 	.word	0x00030230

000d45e8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <hal_spi_is_enabled+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6a1b      	ldr	r3, [r3, #32]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030230 	.word	0x00030230

000d45f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USB_USART_Init+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	681b      	ldr	r3, [r3, #0]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003024c 	.word	0x0003024c

000d4608 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USB_USART_Begin+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	685b      	ldr	r3, [r3, #4]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003024c 	.word	0x0003024c

000d4618 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USB_USART_End+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	689b      	ldr	r3, [r3, #8]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003024c 	.word	0x0003024c

000d4628 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USB_USART_Available_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	691b      	ldr	r3, [r3, #16]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003024c 	.word	0x0003024c

000d4638 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	695b      	ldr	r3, [r3, #20]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003024c 	.word	0x0003024c

000d4648 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USB_USART_Receive_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	699b      	ldr	r3, [r3, #24]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003024c 	.word	0x0003024c

000d4658 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_USB_USART_Send_Data+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	69db      	ldr	r3, [r3, #28]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003024c 	.word	0x0003024c

000d4668 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_USB_USART_Flush_Data+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6a1b      	ldr	r3, [r3, #32]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003024c 	.word	0x0003024c

000d4678 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <panic_+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030260 	.word	0x00030260

000d4688 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <log_message_v+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030260 	.word	0x00030260

000d4698 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <log_level_name+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030260 	.word	0x00030260

000d46a8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <log_set_callbacks+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030260 	.word	0x00030260

000d46b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <set_system_mode+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	685b      	ldr	r3, [r3, #4]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030220 	.word	0x00030220

000d46c8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <system_thread_set_state+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030220 	.word	0x00030220

000d46d8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <application_thread_current+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030220 	.word	0x00030220

000d46e8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <application_thread_invoke+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030220 	.word	0x00030220

000d46f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b03      	ldr	r3, [pc, #12]	; (d4708 <system_ctrl_set_app_request_handler+0x10>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4702:	9301      	str	r3, [sp, #4]
   d4704:	bd08      	pop	{r3, pc}
   d4706:	0000      	.short	0x0000
   d4708:	00030220 	.word	0x00030220

000d470c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b03      	ldr	r3, [pc, #12]	; (d471c <system_ctrl_set_result+0x10>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4716:	9301      	str	r3, [sp, #4]
   d4718:	bd08      	pop	{r3, pc}
   d471a:	0000      	.short	0x0000
   d471c:	00030220 	.word	0x00030220

000d4720 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <network_connect+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	685b      	ldr	r3, [r3, #4]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030240 	.word	0x00030240

000d4730 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <network_connecting+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	689b      	ldr	r3, [r3, #8]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030240 	.word	0x00030240

000d4740 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <network_disconnect+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	68db      	ldr	r3, [r3, #12]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030240 	.word	0x00030240

000d4750 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <network_ready+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	691b      	ldr	r3, [r3, #16]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030240 	.word	0x00030240

000d4760 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <network_on+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	695b      	ldr	r3, [r3, #20]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030240 	.word	0x00030240

000d4770 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <network_off+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	699b      	ldr	r3, [r3, #24]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030240 	.word	0x00030240

000d4780 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <network_listen+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	69db      	ldr	r3, [r3, #28]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030240 	.word	0x00030240

000d4790 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <network_listening+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6a1b      	ldr	r3, [r3, #32]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030240 	.word	0x00030240

000d47a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_set_listen_timeout+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_get_listen_timeout+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_is_on+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_is_off+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <spark_cloud_flag_connected+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	695b      	ldr	r3, [r3, #20]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030244 	.word	0x00030244

000d47f0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <spark_send_event+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6a1b      	ldr	r3, [r3, #32]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030244 	.word	0x00030244

000d4800 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030244 	.word	0x00030244

000d4810 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <malloc+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	681b      	ldr	r3, [r3, #0]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003021c 	.word	0x0003021c

000d4820 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <free+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	685b      	ldr	r3, [r3, #4]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003021c 	.word	0x0003021c

000d4830 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <realloc+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	689b      	ldr	r3, [r3, #8]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003021c 	.word	0x0003021c

000d4840 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <snprintf+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	69db      	ldr	r3, [r3, #28]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003021c 	.word	0x0003021c

000d4850 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <vsnprintf+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003021c 	.word	0x0003021c

000d4860 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <abort+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003021c 	.word	0x0003021c

000d4870 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <_malloc_r+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003021c 	.word	0x0003021c

000d4880 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <newlib_impure_ptr_callback+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003021c 	.word	0x0003021c

000d4890 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4890:	2200      	movs	r2, #0
   d4892:	6840      	ldr	r0, [r0, #4]
   d4894:	4611      	mov	r1, r2
   d4896:	f7ff bf7b 	b.w	d4790 <network_listening>

000d489a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d489a:	2200      	movs	r2, #0
   d489c:	6840      	ldr	r0, [r0, #4]
   d489e:	4611      	mov	r1, r2
   d48a0:	f7ff bf86 	b.w	d47b0 <network_get_listen_timeout>

000d48a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d48a4:	6840      	ldr	r0, [r0, #4]
   d48a6:	2200      	movs	r2, #0
   d48a8:	f7ff bf7a 	b.w	d47a0 <network_set_listen_timeout>

000d48ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d48ac:	6840      	ldr	r0, [r0, #4]
   d48ae:	2200      	movs	r2, #0
   d48b0:	f081 0101 	eor.w	r1, r1, #1
   d48b4:	f7ff bf64 	b.w	d4780 <network_listen>

000d48b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d48b8:	2300      	movs	r3, #0
   d48ba:	6840      	ldr	r0, [r0, #4]
   d48bc:	461a      	mov	r2, r3
   d48be:	4619      	mov	r1, r3
   d48c0:	f7ff bf56 	b.w	d4770 <network_off>

000d48c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d48c4:	2300      	movs	r3, #0
   d48c6:	6840      	ldr	r0, [r0, #4]
   d48c8:	461a      	mov	r2, r3
   d48ca:	4619      	mov	r1, r3
   d48cc:	f7ff bf48 	b.w	d4760 <network_on>

000d48d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48d0:	2200      	movs	r2, #0
   d48d2:	6840      	ldr	r0, [r0, #4]
   d48d4:	4611      	mov	r1, r2
   d48d6:	f7ff bf3b 	b.w	d4750 <network_ready>

000d48da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d48da:	2200      	movs	r2, #0
   d48dc:	6840      	ldr	r0, [r0, #4]
   d48de:	4611      	mov	r1, r2
   d48e0:	f7ff bf26 	b.w	d4730 <network_connecting>

000d48e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48e4:	6840      	ldr	r0, [r0, #4]
   d48e6:	2200      	movs	r2, #0
   d48e8:	2102      	movs	r1, #2
   d48ea:	f7ff bf29 	b.w	d4740 <network_disconnect>

000d48ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d48ee:	2300      	movs	r3, #0
   d48f0:	6840      	ldr	r0, [r0, #4]
   d48f2:	461a      	mov	r2, r3
   d48f4:	f7ff bf14 	b.w	d4720 <network_connect>

000d48f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d48f8:	4b02      	ldr	r3, [pc, #8]	; (d4904 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d48fa:	2203      	movs	r2, #3
   d48fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d48fe:	4a02      	ldr	r2, [pc, #8]	; (d4908 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4900:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4902:	4770      	bx	lr
   d4904:	2003e5e8 	.word	0x2003e5e8
   d4908:	000d707c 	.word	0x000d707c

000d490c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d490c:	b510      	push	{r4, lr}
   d490e:	4604      	mov	r4, r0
   d4910:	4608      	mov	r0, r1
{
    _spi = spi;
   d4912:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4914:	f7ff fe60 	bl	d45d8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4918:	2300      	movs	r3, #0
   d491a:	6063      	str	r3, [r4, #4]
}
   d491c:	4620      	mov	r0, r4
   d491e:	bd10      	pop	{r4, pc}

000d4920 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4920:	b510      	push	{r4, lr}
   d4922:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4924:	6800      	ldr	r0, [r0, #0]
   d4926:	b118      	cbz	r0, d4930 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4928:	f7ff ff7a 	bl	d4820 <free>
            wakeupSource_ = nullptr;
   d492c:	2300      	movs	r3, #0
   d492e:	6023      	str	r3, [r4, #0]
        }
    }
   d4930:	bd10      	pop	{r4, pc}

000d4932 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4932:	b510      	push	{r4, lr}
   d4934:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4936:	f7ff fff3 	bl	d4920 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d493a:	4620      	mov	r0, r4
   d493c:	bd10      	pop	{r4, pc}
	...

000d4940 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4940:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4942:	4b09      	ldr	r3, [pc, #36]	; (d4968 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4944:	4c09      	ldr	r4, [pc, #36]	; (d496c <_GLOBAL__sub_I_System+0x2c>)
   d4946:	2202      	movs	r2, #2
   d4948:	2000      	movs	r0, #0
   d494a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d494c:	4b08      	ldr	r3, [pc, #32]	; (d4970 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d494e:	6020      	str	r0, [r4, #0]
   d4950:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4952:	71a0      	strb	r0, [r4, #6]
   d4954:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4956:	f7ff feaf 	bl	d46b8 <set_system_mode>
SystemClass System;
   d495a:	4620      	mov	r0, r4
   d495c:	4a05      	ldr	r2, [pc, #20]	; (d4974 <_GLOBAL__sub_I_System+0x34>)
   d495e:	4906      	ldr	r1, [pc, #24]	; (d4978 <_GLOBAL__sub_I_System+0x38>)
   d4960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4964:	f002 b9e6 	b.w	d6d34 <__aeabi_atexit>
   d4968:	2003e5fc 	.word	0x2003e5fc
   d496c:	2003e5f0 	.word	0x2003e5f0
   d4970:	ffff0000 	.word	0xffff0000
   d4974:	2003e594 	.word	0x2003e594
   d4978:	000d4933 	.word	0x000d4933

000d497c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d497c:	b510      	push	{r4, lr}
   d497e:	4604      	mov	r4, r0
{
	free(buffer);
   d4980:	6800      	ldr	r0, [r0, #0]
   d4982:	f7ff ff4d 	bl	d4820 <free>
}
   d4986:	4620      	mov	r0, r4
   d4988:	bd10      	pop	{r4, pc}

000d498a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d498a:	b510      	push	{r4, lr}
   d498c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d498e:	6800      	ldr	r0, [r0, #0]
   d4990:	b108      	cbz	r0, d4996 <_ZN6String10invalidateEv+0xc>
   d4992:	f7ff ff45 	bl	d4820 <free>
	buffer = NULL;
   d4996:	2300      	movs	r3, #0
	capacity = len = 0;
   d4998:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d499c:	6023      	str	r3, [r4, #0]
}
   d499e:	bd10      	pop	{r4, pc}

000d49a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d49a0:	b538      	push	{r3, r4, r5, lr}
   d49a2:	4604      	mov	r4, r0
   d49a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d49a6:	6800      	ldr	r0, [r0, #0]
   d49a8:	3101      	adds	r1, #1
   d49aa:	f7ff ff41 	bl	d4830 <realloc>
	if (newbuffer) {
   d49ae:	b110      	cbz	r0, d49b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d49b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d49b4:	2001      	movs	r0, #1
	}
	return 0;
}
   d49b6:	bd38      	pop	{r3, r4, r5, pc}

000d49b8 <_ZN6String7reserveEj>:
{
   d49b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d49ba:	6803      	ldr	r3, [r0, #0]
{
   d49bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d49be:	b123      	cbz	r3, d49ca <_ZN6String7reserveEj+0x12>
   d49c0:	6843      	ldr	r3, [r0, #4]
   d49c2:	428b      	cmp	r3, r1
   d49c4:	d301      	bcc.n	d49ca <_ZN6String7reserveEj+0x12>
   d49c6:	2001      	movs	r0, #1
}
   d49c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d49ca:	4620      	mov	r0, r4
   d49cc:	f7ff ffe8 	bl	d49a0 <_ZN6String12changeBufferEj>
   d49d0:	2800      	cmp	r0, #0
   d49d2:	d0f9      	beq.n	d49c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d49d4:	68a3      	ldr	r3, [r4, #8]
   d49d6:	2b00      	cmp	r3, #0
   d49d8:	d1f5      	bne.n	d49c6 <_ZN6String7reserveEj+0xe>
   d49da:	6822      	ldr	r2, [r4, #0]
   d49dc:	7013      	strb	r3, [r2, #0]
   d49de:	e7f2      	b.n	d49c6 <_ZN6String7reserveEj+0xe>

000d49e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d49e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d49e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d49e4:	4611      	mov	r1, r2
   d49e6:	9201      	str	r2, [sp, #4]
{
   d49e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d49ea:	f7ff ffe5 	bl	d49b8 <_ZN6String7reserveEj>
   d49ee:	9a01      	ldr	r2, [sp, #4]
   d49f0:	b928      	cbnz	r0, d49fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d49f2:	4620      	mov	r0, r4
   d49f4:	f7ff ffc9 	bl	d498a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d49f8:	4620      	mov	r0, r4
   d49fa:	b003      	add	sp, #12
   d49fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d49fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a00:	4629      	mov	r1, r5
   d4a02:	6820      	ldr	r0, [r4, #0]
   d4a04:	f002 f9b2 	bl	d6d6c <memcpy>
	buffer[len] = 0;
   d4a08:	6822      	ldr	r2, [r4, #0]
   d4a0a:	68a3      	ldr	r3, [r4, #8]
   d4a0c:	2100      	movs	r1, #0
   d4a0e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a10:	e7f2      	b.n	d49f8 <_ZN6String4copyEPKcj+0x18>

000d4a12 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4a12:	b538      	push	{r3, r4, r5, lr}
   d4a14:	4605      	mov	r5, r0
	if (buffer) {
   d4a16:	6800      	ldr	r0, [r0, #0]
{
   d4a18:	460c      	mov	r4, r1
	if (buffer) {
   d4a1a:	b168      	cbz	r0, d4a38 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4a1c:	686a      	ldr	r2, [r5, #4]
   d4a1e:	688b      	ldr	r3, [r1, #8]
   d4a20:	429a      	cmp	r2, r3
   d4a22:	d307      	bcc.n	d4a34 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4a24:	6809      	ldr	r1, [r1, #0]
   d4a26:	f002 fa16 	bl	d6e56 <strcpy>
			len = rhs.len;
   d4a2a:	68a3      	ldr	r3, [r4, #8]
   d4a2c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4a2e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4a30:	60a3      	str	r3, [r4, #8]
}
   d4a32:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4a34:	f7ff fef4 	bl	d4820 <free>
	buffer = rhs.buffer;
   d4a38:	6823      	ldr	r3, [r4, #0]
   d4a3a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4a3c:	6863      	ldr	r3, [r4, #4]
   d4a3e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4a40:	68a3      	ldr	r3, [r4, #8]
   d4a42:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4a44:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4a46:	e9c4 3300 	strd	r3, r3, [r4]
   d4a4a:	e7f1      	b.n	d4a30 <_ZN6String4moveERS_+0x1e>

000d4a4c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4a4c:	b510      	push	{r4, lr}
	buffer = NULL;
   d4a4e:	2300      	movs	r3, #0
	capacity = 0;
   d4a50:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4a54:	4604      	mov	r4, r0
	len = 0;
   d4a56:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a58:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4a5a:	f7ff ffda 	bl	d4a12 <_ZN6String4moveERS_>
}
   d4a5e:	4620      	mov	r0, r4
   d4a60:	bd10      	pop	{r4, pc}

000d4a62 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4a62:	4288      	cmp	r0, r1
{
   d4a64:	b510      	push	{r4, lr}
   d4a66:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4a68:	d005      	beq.n	d4a76 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4a6a:	680b      	ldr	r3, [r1, #0]
   d4a6c:	b12b      	cbz	r3, d4a7a <_ZN6StringaSERKS_+0x18>
   d4a6e:	688a      	ldr	r2, [r1, #8]
   d4a70:	4619      	mov	r1, r3
   d4a72:	f7ff ffb5 	bl	d49e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4a76:	4620      	mov	r0, r4
   d4a78:	bd10      	pop	{r4, pc}
	else invalidate();
   d4a7a:	f7ff ff86 	bl	d498a <_ZN6String10invalidateEv>
   d4a7e:	e7fa      	b.n	d4a76 <_ZN6StringaSERKS_+0x14>

000d4a80 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4a80:	b510      	push	{r4, lr}
	buffer = NULL;
   d4a82:	2300      	movs	r3, #0
String::String(const String &value)
   d4a84:	4604      	mov	r4, r0
	capacity = 0;
   d4a86:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4a8a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a8c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4a8e:	f7ff ffe8 	bl	d4a62 <_ZN6StringaSERKS_>
}
   d4a92:	4620      	mov	r0, r4
   d4a94:	bd10      	pop	{r4, pc}

000d4a96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a96:	b510      	push	{r4, lr}
          _M_dispose();
   d4a98:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a9a:	4604      	mov	r4, r0
          _M_dispose();
   d4a9c:	689b      	ldr	r3, [r3, #8]
   d4a9e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4aa0:	68a3      	ldr	r3, [r4, #8]
   d4aa2:	3b01      	subs	r3, #1
   d4aa4:	60a3      	str	r3, [r4, #8]
   d4aa6:	b92b      	cbnz	r3, d4ab4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4aa8:	6823      	ldr	r3, [r4, #0]
   d4aaa:	4620      	mov	r0, r4
   d4aac:	68db      	ldr	r3, [r3, #12]
    }
   d4aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4ab2:	4718      	bx	r3
    }
   d4ab4:	bd10      	pop	{r4, pc}

000d4ab6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4ab6:	b510      	push	{r4, lr}
   d4ab8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4aba:	6800      	ldr	r0, [r0, #0]
   d4abc:	b108      	cbz	r0, d4ac2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4abe:	f7ff fce3 	bl	d4488 <os_mutex_recursive_destroy>
    }
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	bd10      	pop	{r4, pc}

000d4ac6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ac6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ac8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4aca:	4604      	mov	r4, r0
      if (_M_manager)
   d4acc:	b113      	cbz	r3, d4ad4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ace:	2203      	movs	r2, #3
   d4ad0:	4601      	mov	r1, r0
   d4ad2:	4798      	blx	r3
    }
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	bd10      	pop	{r4, pc}

000d4ad8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4ad8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4ada:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4ade:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4ae0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d4ae4:	42ae      	cmp	r6, r5
   d4ae6:	d004      	beq.n	d4af2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d4ae8:	4628      	mov	r0, r5
   d4aea:	f7ff ff47 	bl	d497c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d4aee:	3510      	adds	r5, #16
   d4af0:	e7f8      	b.n	d4ae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d4af2:	6820      	ldr	r0, [r4, #0]
   d4af4:	f7ff fe94 	bl	d4820 <free>
    AllocatorT::free(data_);
}
   d4af8:	4620      	mov	r0, r4
   d4afa:	bd70      	pop	{r4, r5, r6, pc}

000d4afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4afc:	680b      	ldr	r3, [r1, #0]
   d4afe:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4b00:	b113      	cbz	r3, d4b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4b02:	685a      	ldr	r2, [r3, #4]
   d4b04:	3201      	adds	r2, #1
   d4b06:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4b08:	4770      	bx	lr

000d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4b0a:	b510      	push	{r4, lr}
   d4b0c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4b0e:	6800      	ldr	r0, [r0, #0]
   d4b10:	b128      	cbz	r0, d4b1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4b12:	6843      	ldr	r3, [r0, #4]
   d4b14:	3b01      	subs	r3, #1
   d4b16:	6043      	str	r3, [r0, #4]
   d4b18:	b90b      	cbnz	r3, d4b1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4b1a:	f7ff ffbc 	bl	d4a96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4b1e:	4620      	mov	r0, r4
   d4b20:	bd10      	pop	{r4, pc}

000d4b22 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4b22:	b513      	push	{r0, r1, r4, lr}
   d4b24:	460b      	mov	r3, r1
   d4b26:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b28:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4b2c:	466c      	mov	r4, sp
   d4b2e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4b32:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4b36:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4b3e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4b42:	b002      	add	sp, #8
   d4b44:	bd10      	pop	{r4, pc}
	...

000d4b48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4b48:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4b4a:	4c06      	ldr	r4, [pc, #24]	; (d4b64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b4c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4b4e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4b50:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4b52:	f7ff fc91 	bl	d4478 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4b56:	4620      	mov	r0, r4
   d4b58:	4a03      	ldr	r2, [pc, #12]	; (d4b68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b5a:	4904      	ldr	r1, [pc, #16]	; (d4b6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4b60:	f002 b8e8 	b.w	d6d34 <__aeabi_atexit>
   d4b64:	2003e600 	.word	0x2003e600
   d4b68:	2003e594 	.word	0x2003e594
   d4b6c:	000d4ab7 	.word	0x000d4ab7

000d4b70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b72:	4606      	mov	r6, r0
   d4b74:	460d      	mov	r5, r1
  size_t n = 0;
   d4b76:	188f      	adds	r7, r1, r2
   d4b78:	2400      	movs	r4, #0
  while (size--) {
   d4b7a:	42bd      	cmp	r5, r7
   d4b7c:	d00c      	beq.n	d4b98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b7e:	6833      	ldr	r3, [r6, #0]
   d4b80:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b84:	689b      	ldr	r3, [r3, #8]
   d4b86:	4630      	mov	r0, r6
   d4b88:	4798      	blx	r3
     if (chunk>=0)
   d4b8a:	1e03      	subs	r3, r0, #0
   d4b8c:	db01      	blt.n	d4b92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b8e:	441c      	add	r4, r3
  while (size--) {
   d4b90:	e7f3      	b.n	d4b7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b92:	2c00      	cmp	r4, #0
   d4b94:	bf08      	it	eq
   d4b96:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b98:	4620      	mov	r0, r4
   d4b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b9c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b9c:	b513      	push	{r0, r1, r4, lr}
   d4b9e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4ba0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4ba2:	b159      	cbz	r1, d4bbc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4ba4:	9101      	str	r1, [sp, #4]
   d4ba6:	f002 f97c 	bl	d6ea2 <strlen>
   d4baa:	6823      	ldr	r3, [r4, #0]
   d4bac:	9901      	ldr	r1, [sp, #4]
   d4bae:	68db      	ldr	r3, [r3, #12]
   d4bb0:	4602      	mov	r2, r0
   d4bb2:	4620      	mov	r0, r4
    }
   d4bb4:	b002      	add	sp, #8
   d4bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4bba:	4718      	bx	r3
    }
   d4bbc:	b002      	add	sp, #8
   d4bbe:	bd10      	pop	{r4, pc}

000d4bc0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4bc0:	6803      	ldr	r3, [r0, #0]
   d4bc2:	689b      	ldr	r3, [r3, #8]
   d4bc4:	4718      	bx	r3

000d4bc6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4bc6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4bc8:	210d      	movs	r1, #13
{
   d4bca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4bcc:	f7ff fff8 	bl	d4bc0 <_ZN5Print5printEc>
  n += print('\n');
   d4bd0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4bd2:	4604      	mov	r4, r0
  n += print('\n');
   d4bd4:	4628      	mov	r0, r5
   d4bd6:	f7ff fff3 	bl	d4bc0 <_ZN5Print5printEc>
  return n;
}
   d4bda:	4420      	add	r0, r4
   d4bdc:	bd38      	pop	{r3, r4, r5, pc}

000d4bde <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4bde:	b530      	push	{r4, r5, lr}
   d4be0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4be2:	2300      	movs	r3, #0
   d4be4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4be8:	2a01      	cmp	r2, #1
   d4bea:	bf98      	it	ls
   d4bec:	220a      	movls	r2, #10
   d4bee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4bf0:	460d      	mov	r5, r1
   d4bf2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4bf6:	fb01 5312 	mls	r3, r1, r2, r5
   d4bfa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bfe:	2b09      	cmp	r3, #9
   d4c00:	bf94      	ite	ls
   d4c02:	3330      	addls	r3, #48	; 0x30
   d4c04:	3337      	addhi	r3, #55	; 0x37
   d4c06:	b2db      	uxtb	r3, r3
  } while(n);
   d4c08:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c0a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4c0e:	d9ef      	bls.n	d4bf0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4c10:	4621      	mov	r1, r4
   d4c12:	f7ff ffc3 	bl	d4b9c <_ZN5Print5writeEPKc>
}
   d4c16:	b00b      	add	sp, #44	; 0x2c
   d4c18:	bd30      	pop	{r4, r5, pc}

000d4c1a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c1e:	b086      	sub	sp, #24
   d4c20:	af00      	add	r7, sp, #0
   d4c22:	4605      	mov	r5, r0
   d4c24:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4c26:	1d38      	adds	r0, r7, #4
   d4c28:	2114      	movs	r1, #20
{
   d4c2a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4c2c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4c2e:	f7ff fe0f 	bl	d4850 <vsnprintf>

    if (n<bufsize)
   d4c32:	2813      	cmp	r0, #19
   d4c34:	d80e      	bhi.n	d4c54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4c36:	1d39      	adds	r1, r7, #4
   d4c38:	4628      	mov	r0, r5
   d4c3a:	f7ff ffaf 	bl	d4b9c <_ZN5Print5writeEPKc>
   d4c3e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4c40:	b11e      	cbz	r6, d4c4a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4c42:	4628      	mov	r0, r5
   d4c44:	f7ff ffbf 	bl	d4bc6 <_ZN5Print7printlnEv>
   d4c48:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	3718      	adds	r7, #24
   d4c4e:	46bd      	mov	sp, r7
   d4c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4c54:	f100 0308 	add.w	r3, r0, #8
   d4c58:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4c5c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4c5e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4c62:	4622      	mov	r2, r4
   d4c64:	1c41      	adds	r1, r0, #1
   d4c66:	683b      	ldr	r3, [r7, #0]
   d4c68:	4668      	mov	r0, sp
   d4c6a:	f7ff fdf1 	bl	d4850 <vsnprintf>
  return write(str);
   d4c6e:	4669      	mov	r1, sp
   d4c70:	4628      	mov	r0, r5
   d4c72:	f7ff ff93 	bl	d4b9c <_ZN5Print5writeEPKc>
   d4c76:	4604      	mov	r4, r0
   d4c78:	46c5      	mov	sp, r8
   d4c7a:	e7e1      	b.n	d4c40 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4c7c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d4c7c:	6880      	ldr	r0, [r0, #8]
   d4c7e:	6803      	ldr	r3, [r0, #0]
   d4c80:	68db      	ldr	r3, [r3, #12]
   d4c82:	4718      	bx	r3

000d4c84 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d4c84:	4770      	bx	lr

000d4c86 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d4c86:	4608      	mov	r0, r1
   d4c88:	b111      	cbz	r1, d4c90 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d4c8a:	680b      	ldr	r3, [r1, #0]
   d4c8c:	685b      	ldr	r3, [r3, #4]
   d4c8e:	4718      	bx	r3
}
   d4c90:	4770      	bx	lr

000d4c92 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4c92:	4770      	bx	lr

000d4c94 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d4c94:	4770      	bx	lr

000d4c96 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d4c96:	4770      	bx	lr

000d4c98 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d4c98:	b538      	push	{r3, r4, r5, lr}
   d4c9a:	4604      	mov	r4, r0
   d4c9c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d4c9e:	6800      	ldr	r0, [r0, #0]
   d4ca0:	212e      	movs	r1, #46	; 0x2e
   d4ca2:	f002 f8c4 	bl	d6e2e <strchrnul>
    size = s - category;
   d4ca6:	6823      	ldr	r3, [r4, #0]
   d4ca8:	1ac3      	subs	r3, r0, r3
   d4caa:	602b      	str	r3, [r5, #0]
    if (size) {
   d4cac:	b123      	cbz	r3, d4cb8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d4cae:	7803      	ldrb	r3, [r0, #0]
   d4cb0:	b103      	cbz	r3, d4cb4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d4cb2:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   d4cb4:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cb6:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d4cb8:	4618      	mov	r0, r3
   d4cba:	bd38      	pop	{r3, r4, r5, pc}

000d4cbc <_ZN5spark16JSONStreamWriterD0Ev>:
   d4cbc:	b510      	push	{r4, lr}
   d4cbe:	210c      	movs	r1, #12
   d4cc0:	4604      	mov	r4, r0
   d4cc2:	f002 f83c 	bl	d6d3e <_ZdlPvj>
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	bd10      	pop	{r4, pc}

000d4cca <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d4cca:	b510      	push	{r4, lr}
   d4ccc:	2104      	movs	r1, #4
   d4cce:	4604      	mov	r4, r0
   d4cd0:	f002 f835 	bl	d6d3e <_ZdlPvj>
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	bd10      	pop	{r4, pc}

000d4cd8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4cd8:	b510      	push	{r4, lr}
   d4cda:	2104      	movs	r1, #4
   d4cdc:	4604      	mov	r4, r0
   d4cde:	f002 f82e 	bl	d6d3e <_ZdlPvj>
   d4ce2:	4620      	mov	r0, r4
   d4ce4:	bd10      	pop	{r4, pc}

000d4ce6 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d4ce6:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d4ce8:	f002 f8ab 	bl	d6e42 <strcmp>
}
   d4cec:	fab0 f080 	clz	r0, r0
   d4cf0:	0940      	lsrs	r0, r0, #5
   d4cf2:	bd08      	pop	{r3, pc}

000d4cf4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d4cf4:	b510      	push	{r4, lr}
   d4cf6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d4cf8:	f001 fb8c 	bl	d6414 <_Z16_fetch_usbserialv>
   d4cfc:	4284      	cmp	r4, r0
   d4cfe:	d010      	beq.n	d4d22 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d4d00:	f001 fc5c 	bl	d65bc <_Z22__fetch_global_Serial1v>
   d4d04:	4284      	cmp	r4, r0
   d4d06:	d105      	bne.n	d4d14 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d4d08:	f001 fc58 	bl	d65bc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d4d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d4d10:	f001 bc51 	b.w	d65b6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d4d14:	b12c      	cbz	r4, d4d22 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d4d16:	6823      	ldr	r3, [r4, #0]
   d4d18:	4620      	mov	r0, r4
   d4d1a:	685b      	ldr	r3, [r3, #4]
}
   d4d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d20:	4718      	bx	r3
   d4d22:	bd10      	pop	{r4, pc}

000d4d24 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4d24:	b513      	push	{r0, r1, r4, lr}
   d4d26:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4d28:	4608      	mov	r0, r1
   d4d2a:	9101      	str	r1, [sp, #4]
   d4d2c:	f002 f8b9 	bl	d6ea2 <strlen>
   d4d30:	9901      	ldr	r1, [sp, #4]
   d4d32:	4602      	mov	r2, r0
   d4d34:	4620      	mov	r0, r4
}
   d4d36:	b002      	add	sp, #8
   d4d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4d3c:	f001 bf48 	b.w	d6bd0 <_ZN5spark10JSONWriter5valueEPKcj>

000d4d40 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d4d40:	b513      	push	{r0, r1, r4, lr}
   d4d42:	4604      	mov	r4, r0
    write(str, strlen(str));
   d4d44:	4608      	mov	r0, r1
   d4d46:	9101      	str	r1, [sp, #4]
   d4d48:	f002 f8ab 	bl	d6ea2 <strlen>
   d4d4c:	6823      	ldr	r3, [r4, #0]
   d4d4e:	9901      	ldr	r1, [sp, #4]
   d4d50:	68db      	ldr	r3, [r3, #12]
   d4d52:	4602      	mov	r2, r0
   d4d54:	4620      	mov	r0, r4
}
   d4d56:	b002      	add	sp, #8
   d4d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d4d5c:	4718      	bx	r3

000d4d5e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d4d5e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4d60:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d4d62:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4d66:	68db      	ldr	r3, [r3, #12]
   d4d68:	2201      	movs	r2, #1
   d4d6a:	f10d 0107 	add.w	r1, sp, #7
   d4d6e:	4798      	blx	r3
}
   d4d70:	b003      	add	sp, #12
   d4d72:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4d76:	b40e      	push	{r1, r2, r3}
   d4d78:	b503      	push	{r0, r1, lr}
   d4d7a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d4d7c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4d7e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d4d82:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d4d84:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d4d86:	f7ff ff48 	bl	d4c1a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d4d8a:	b002      	add	sp, #8
   d4d8c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4d90:	b003      	add	sp, #12
   d4d92:	4770      	bx	lr

000d4d94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d4d98:	e9d0 9500 	ldrd	r9, r5, [r0]
   d4d9c:	f04f 0814 	mov.w	r8, #20
   d4da0:	fb08 f505 	mul.w	r5, r8, r5
   d4da4:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d4da6:	10ab      	asrs	r3, r5, #2
   d4da8:	4d18      	ldr	r5, [pc, #96]	; (d4e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4daa:	4617      	mov	r7, r2
   d4dac:	435d      	muls	r5, r3
   d4dae:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d4db0:	2d00      	cmp	r5, #0
   d4db2:	dd23      	ble.n	d4dfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d4db4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d4db6:	fb08 f006 	mul.w	r0, r8, r6
   d4dba:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d4dbe:	463a      	mov	r2, r7
   d4dc0:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d4dc4:	5820      	ldr	r0, [r4, r0]
   d4dc6:	9101      	str	r1, [sp, #4]
   d4dc8:	455f      	cmp	r7, fp
   d4dca:	bf28      	it	cs
   d4dcc:	465a      	movcs	r2, fp
   d4dce:	f002 f870 	bl	d6eb2 <strncmp>
                if (cmp == 0) {
   d4dd2:	9901      	ldr	r1, [sp, #4]
   d4dd4:	2301      	movs	r3, #1
   d4dd6:	b978      	cbnz	r0, d4df8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d4dd8:	455f      	cmp	r7, fp
   d4dda:	d103      	bne.n	d4de4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d4ddc:	9a00      	ldr	r2, [sp, #0]
   d4dde:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4de0:	4635      	mov	r5, r6
   d4de2:	e7e5      	b.n	d4db0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d4de4:	bf8c      	ite	hi
   d4de6:	2001      	movhi	r0, #1
   d4de8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d4dea:	2800      	cmp	r0, #0
   d4dec:	d0f8      	beq.n	d4de0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d4dee:	1bae      	subs	r6, r5, r6
	      ++__first;
   d4df0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d4df4:	3e01      	subs	r6, #1
   d4df6:	e7f3      	b.n	d4de0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d4df8:	0fc0      	lsrs	r0, r0, #31
   d4dfa:	e7f6      	b.n	d4dea <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d4dfc:	eba4 0409 	sub.w	r4, r4, r9
}
   d4e00:	4802      	ldr	r0, [pc, #8]	; (d4e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4e02:	10a4      	asrs	r4, r4, #2
   d4e04:	4360      	muls	r0, r4
   d4e06:	b003      	add	sp, #12
   d4e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e0c:	cccccccd 	.word	0xcccccccd

000d4e10 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4e10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d4e12:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d4e14:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4e16:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d4e18:	b30b      	cbz	r3, d4e5e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d4e1a:	b301      	cbz	r1, d4e5e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d4e1c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d4e1e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d4e22:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d4e24:	a903      	add	r1, sp, #12
   d4e26:	a801      	add	r0, sp, #4
   d4e28:	f7ff ff36 	bl	d4c98 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d4e2c:	4601      	mov	r1, r0
   d4e2e:	b1b0      	cbz	r0, d4e5e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d4e30:	f10d 030b 	add.w	r3, sp, #11
   d4e34:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d4e36:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	f7ff ffaa 	bl	d4d94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d4e40:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4e44:	b15b      	cbz	r3, d4e5e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d4e46:	6824      	ldr	r4, [r4, #0]
   d4e48:	2314      	movs	r3, #20
   d4e4a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d4e4e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d4e52:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d4e56:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d4e58:	bfa8      	it	ge
   d4e5a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d4e5c:	e7e2      	b.n	d4e24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d4e5e:	4630      	mov	r0, r6
   d4e60:	b004      	add	sp, #16
   d4e62:	bd70      	pop	{r4, r5, r6, pc}

000d4e64 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d4e64:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d4e66:	4c0a      	ldr	r4, [pc, #40]	; (d4e90 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d4e68:	7823      	ldrb	r3, [r4, #0]
   d4e6a:	f3bf 8f5b 	dmb	ish
   d4e6e:	07db      	lsls	r3, r3, #31
   d4e70:	d40b      	bmi.n	d4e8a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d4e72:	4620      	mov	r0, r4
   d4e74:	f7ff f91e 	bl	d40b4 <__cxa_guard_acquire>
   d4e78:	b138      	cbz	r0, d4e8a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	f7ff f91f 	bl	d40be <__cxa_guard_release>
   d4e80:	4a04      	ldr	r2, [pc, #16]	; (d4e94 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d4e82:	4905      	ldr	r1, [pc, #20]	; (d4e98 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d4e84:	4805      	ldr	r0, [pc, #20]	; (d4e9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d4e86:	f001 ff55 	bl	d6d34 <__aeabi_atexit>
}
   d4e8a:	4804      	ldr	r0, [pc, #16]	; (d4e9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d4e8c:	bd10      	pop	{r4, pc}
   d4e8e:	bf00      	nop
   d4e90:	2003e608 	.word	0x2003e608
   d4e94:	2003e594 	.word	0x2003e594
   d4e98:	000d4c95 	.word	0x000d4c95
   d4e9c:	2003e524 	.word	0x2003e524

000d4ea0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d4ea0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d4ea2:	4c0a      	ldr	r4, [pc, #40]	; (d4ecc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d4ea4:	7823      	ldrb	r3, [r4, #0]
   d4ea6:	f3bf 8f5b 	dmb	ish
   d4eaa:	07db      	lsls	r3, r3, #31
   d4eac:	d40b      	bmi.n	d4ec6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d4eae:	4620      	mov	r0, r4
   d4eb0:	f7ff f900 	bl	d40b4 <__cxa_guard_acquire>
   d4eb4:	b138      	cbz	r0, d4ec6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	f7ff f901 	bl	d40be <__cxa_guard_release>
   d4ebc:	4a04      	ldr	r2, [pc, #16]	; (d4ed0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d4ebe:	4905      	ldr	r1, [pc, #20]	; (d4ed4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d4ec0:	4805      	ldr	r0, [pc, #20]	; (d4ed8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d4ec2:	f001 ff37 	bl	d6d34 <__aeabi_atexit>
    return &factory;
}
   d4ec6:	4804      	ldr	r0, [pc, #16]	; (d4ed8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d4ec8:	bd10      	pop	{r4, pc}
   d4eca:	bf00      	nop
   d4ecc:	2003e60c 	.word	0x2003e60c
   d4ed0:	2003e594 	.word	0x2003e594
   d4ed4:	000d4c93 	.word	0x000d4c93
   d4ed8:	2003e528 	.word	0x2003e528

000d4edc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d4edc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d4ede:	2500      	movs	r5, #0
   d4ee0:	4604      	mov	r4, r0
   d4ee2:	e9c0 5500 	strd	r5, r5, [r0]
   d4ee6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d4eea:	6085      	str	r5, [r0, #8]
   d4eec:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d4eee:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d4ef2:	f7ff fac1 	bl	d4478 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d4ef6:	f7ff ffb5 	bl	d4e64 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d4efa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4efc:	f7ff ffd0 	bl	d4ea0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d4f00:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4f02:	6220      	str	r0, [r4, #32]
}
   d4f04:	4620      	mov	r0, r4
   d4f06:	bd38      	pop	{r3, r4, r5, pc}

000d4f08 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d4f08:	b510      	push	{r4, lr}
    static LogManager mgr;
   d4f0a:	4c0b      	ldr	r4, [pc, #44]	; (d4f38 <_ZN5spark10LogManager8instanceEv+0x30>)
   d4f0c:	7823      	ldrb	r3, [r4, #0]
   d4f0e:	f3bf 8f5b 	dmb	ish
   d4f12:	07db      	lsls	r3, r3, #31
   d4f14:	d40e      	bmi.n	d4f34 <_ZN5spark10LogManager8instanceEv+0x2c>
   d4f16:	4620      	mov	r0, r4
   d4f18:	f7ff f8cc 	bl	d40b4 <__cxa_guard_acquire>
   d4f1c:	b150      	cbz	r0, d4f34 <_ZN5spark10LogManager8instanceEv+0x2c>
   d4f1e:	4807      	ldr	r0, [pc, #28]	; (d4f3c <_ZN5spark10LogManager8instanceEv+0x34>)
   d4f20:	f7ff ffdc 	bl	d4edc <_ZN5spark10LogManagerC1Ev>
   d4f24:	4620      	mov	r0, r4
   d4f26:	f7ff f8ca 	bl	d40be <__cxa_guard_release>
   d4f2a:	4a05      	ldr	r2, [pc, #20]	; (d4f40 <_ZN5spark10LogManager8instanceEv+0x38>)
   d4f2c:	4905      	ldr	r1, [pc, #20]	; (d4f44 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d4f2e:	4803      	ldr	r0, [pc, #12]	; (d4f3c <_ZN5spark10LogManager8instanceEv+0x34>)
   d4f30:	f001 ff00 	bl	d6d34 <__aeabi_atexit>
    return &mgr;
}
   d4f34:	4801      	ldr	r0, [pc, #4]	; (d4f3c <_ZN5spark10LogManager8instanceEv+0x34>)
   d4f36:	bd10      	pop	{r4, pc}
   d4f38:	2003e604 	.word	0x2003e604
   d4f3c:	2003e614 	.word	0x2003e614
   d4f40:	2003e594 	.word	0x2003e594
   d4f44:	000d5379 	.word	0x000d5379

000d4f48 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d4f48:	4a02      	ldr	r2, [pc, #8]	; (d4f54 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d4f4a:	4903      	ldr	r1, [pc, #12]	; (d4f58 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d4f4c:	4803      	ldr	r0, [pc, #12]	; (d4f5c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d4f4e:	2300      	movs	r3, #0
   d4f50:	f7ff bbaa 	b.w	d46a8 <log_set_callbacks>
   d4f54:	000d5255 	.word	0x000d5255
   d4f58:	000d51e1 	.word	0x000d51e1
   d4f5c:	000d5161 	.word	0x000d5161

000d4f60 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d4f60:	2300      	movs	r3, #0
   d4f62:	461a      	mov	r2, r3
   d4f64:	4619      	mov	r1, r3
   d4f66:	4618      	mov	r0, r3
   d4f68:	f7ff bb9e 	b.w	d46a8 <log_set_callbacks>

000d4f6c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4f6e:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f70:	f851 3b04 	ldr.w	r3, [r1], #4
   d4f74:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4f76:	4604      	mov	r4, r0
   d4f78:	a801      	add	r0, sp, #4
   d4f7a:	f7ff fdbf 	bl	d4afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d4f7e:	466a      	mov	r2, sp
   d4f80:	4629      	mov	r1, r5
   d4f82:	4620      	mov	r0, r4
   d4f84:	f001 fcce 	bl	d6924 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f88:	a801      	add	r0, sp, #4
   d4f8a:	f7ff fdbe 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4f8e:	4620      	mov	r0, r4
   d4f90:	b003      	add	sp, #12
   d4f92:	bd30      	pop	{r4, r5, pc}

000d4f94 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d4f96:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f98:	f851 3b04 	ldr.w	r3, [r1], #4
   d4f9c:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4f9e:	4604      	mov	r4, r0
   d4fa0:	a801      	add	r0, sp, #4
   d4fa2:	f7ff fdab 	bl	d4afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d4fa6:	466a      	mov	r2, sp
   d4fa8:	4629      	mov	r1, r5
   d4faa:	4620      	mov	r0, r4
   d4fac:	f001 fd36 	bl	d6a1c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4fb0:	a801      	add	r0, sp, #4
   d4fb2:	f7ff fdaa 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	b003      	add	sp, #12
   d4fba:	bd30      	pop	{r4, r5, pc}

000d4fbc <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4fbe:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fc0:	f851 3b04 	ldr.w	r3, [r1], #4
   d4fc4:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4fc6:	4604      	mov	r4, r0
   d4fc8:	a801      	add	r0, sp, #4
   d4fca:	f7ff fd97 	bl	d4afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4fce:	466a      	mov	r2, sp
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	f001 fcfe 	bl	d69d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4fd8:	a801      	add	r0, sp, #4
   d4fda:	f7ff fd96 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fde:	4620      	mov	r0, r4
   d4fe0:	b003      	add	sp, #12
   d4fe2:	bd30      	pop	{r4, r5, pc}

000d4fe4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d4fe4:	b570      	push	{r4, r5, r6, lr}
   d4fe6:	b08a      	sub	sp, #40	; 0x28
   d4fe8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d4fea:	4601      	mov	r1, r0
   d4fec:	a804      	add	r0, sp, #16
   d4fee:	f7ff ffd1 	bl	d4f94 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d4ff2:	4e14      	ldr	r6, [pc, #80]	; (d5044 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d4ff4:	a804      	add	r0, sp, #16
   d4ff6:	f001 fd29 	bl	d6a4c <_ZN5spark18JSONObjectIterator4nextEv>
   d4ffa:	b1e8      	cbz	r0, d5038 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d4ffc:	a904      	add	r1, sp, #16
   d4ffe:	4668      	mov	r0, sp
   d5000:	f7ff ffdc 	bl	d4fbc <_ZNK5spark18JSONObjectIterator4nameEv>
   d5004:	9802      	ldr	r0, [sp, #8]
   d5006:	4631      	mov	r1, r6
   d5008:	f7ff fe6d 	bl	d4ce6 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d500c:	4604      	mov	r4, r0
   d500e:	b110      	cbz	r0, d5016 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d5010:	1e2c      	subs	r4, r5, #0
   d5012:	bf18      	it	ne
   d5014:	2401      	movne	r4, #1
   d5016:	a801      	add	r0, sp, #4
   d5018:	f7ff fd77 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d501c:	2c00      	cmp	r4, #0
   d501e:	d0e9      	beq.n	d4ff4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d5020:	a904      	add	r1, sp, #16
   d5022:	4668      	mov	r0, sp
   d5024:	f7ff ffa2 	bl	d4f6c <_ZNK5spark18JSONObjectIterator5valueEv>
   d5028:	4668      	mov	r0, sp
   d502a:	f001 fcb1 	bl	d6990 <_ZNK5spark9JSONValue5toIntEv>
   d502e:	6028      	str	r0, [r5, #0]
   d5030:	a801      	add	r0, sp, #4
   d5032:	f7ff fd6a 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5036:	e7dd      	b.n	d4ff4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d5038:	a805      	add	r0, sp, #20
   d503a:	f7ff fd66 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d503e:	b00a      	add	sp, #40	; 0x28
   d5040:	bd70      	pop	{r4, r5, r6, pc}
   d5042:	bf00      	nop
   d5044:	000d70b0 	.word	0x000d70b0

000d5048 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5048:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d504a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d504c:	4620      	mov	r0, r4
   d504e:	4912      	ldr	r1, [pc, #72]	; (d5098 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5050:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d5052:	f001 fef6 	bl	d6e42 <strcmp>
   d5056:	b948      	cbnz	r0, d506c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d5058:	f001 f9dc 	bl	d6414 <_Z16_fetch_usbserialv>
   d505c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5060:	f001 f9c8 	bl	d63f4 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5064:	f001 f9d6 	bl	d6414 <_Z16_fetch_usbserialv>
}
   d5068:	b003      	add	sp, #12
   d506a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d506c:	490b      	ldr	r1, [pc, #44]	; (d509c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d506e:	4620      	mov	r0, r4
   d5070:	f001 fee7 	bl	d6e42 <strcmp>
   d5074:	b970      	cbnz	r0, d5094 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5076:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d507a:	a901      	add	r1, sp, #4
   d507c:	4628      	mov	r0, r5
        int baud = 9600;
   d507e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d5080:	f7ff ffb0 	bl	d4fe4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5084:	f001 fa9a 	bl	d65bc <_Z22__fetch_global_Serial1v>
   d5088:	9901      	ldr	r1, [sp, #4]
   d508a:	f001 fa91 	bl	d65b0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d508e:	f001 fa95 	bl	d65bc <_Z22__fetch_global_Serial1v>
   d5092:	e7e9      	b.n	d5068 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5094:	2000      	movs	r0, #0
   d5096:	e7e7      	b.n	d5068 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d5098:	000d70b5 	.word	0x000d70b5
   d509c:	000d70bc 	.word	0x000d70bc

000d50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50a0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d50a2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d50a6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50a8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d50aa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d50ae:	42ae      	cmp	r6, r5
   d50b0:	d005      	beq.n	d50be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d50b2:	f105 0008 	add.w	r0, r5, #8
   d50b6:	f7ff fff3 	bl	d50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d50ba:	3514      	adds	r5, #20
   d50bc:	e7f7      	b.n	d50ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d50be:	6820      	ldr	r0, [r4, #0]
   d50c0:	f7ff fbae 	bl	d4820 <free>
}
   d50c4:	4620      	mov	r0, r4
   d50c6:	bd70      	pop	{r4, r5, r6, pc}

000d50c8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d50c8:	b510      	push	{r4, lr}
   d50ca:	4604      	mov	r4, r0
   d50cc:	300c      	adds	r0, #12
   d50ce:	f7ff ffe7 	bl	d50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d50d2:	4620      	mov	r0, r4
   d50d4:	f7ff fd00 	bl	d4ad8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d50d8:	4620      	mov	r0, r4
   d50da:	bd10      	pop	{r4, pc}

000d50dc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d50dc:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d50de:	4b04      	ldr	r3, [pc, #16]	; (d50f0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d50e0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d50e2:	f840 3b04 	str.w	r3, [r0], #4
   d50e6:	f7ff ffef 	bl	d50c8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d50ea:	4620      	mov	r0, r4
   d50ec:	bd10      	pop	{r4, pc}
   d50ee:	bf00      	nop
   d50f0:	000d7040 	.word	0x000d7040

000d50f4 <_ZN5spark16StreamLogHandlerD0Ev>:
   d50f4:	b510      	push	{r4, lr}
   d50f6:	4604      	mov	r4, r0
   d50f8:	f7ff fff0 	bl	d50dc <_ZN5spark16StreamLogHandlerD1Ev>
   d50fc:	4620      	mov	r0, r4
   d50fe:	2124      	movs	r1, #36	; 0x24
   d5100:	f001 fe1d 	bl	d6d3e <_ZdlPvj>
   d5104:	4620      	mov	r0, r4
   d5106:	bd10      	pop	{r4, pc}

000d5108 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5108:	b510      	push	{r4, lr}
   d510a:	4b03      	ldr	r3, [pc, #12]	; (d5118 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d510c:	6003      	str	r3, [r0, #0]
   d510e:	4604      	mov	r4, r0
   d5110:	f7ff ffe4 	bl	d50dc <_ZN5spark16StreamLogHandlerD1Ev>
   d5114:	4620      	mov	r0, r4
   d5116:	bd10      	pop	{r4, pc}
   d5118:	000d7160 	.word	0x000d7160

000d511c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d511c:	b510      	push	{r4, lr}
   d511e:	4604      	mov	r4, r0
   d5120:	f7ff fff2 	bl	d5108 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5124:	4620      	mov	r0, r4
   d5126:	2124      	movs	r1, #36	; 0x24
   d5128:	f001 fe09 	bl	d6d3e <_ZdlPvj>
   d512c:	4620      	mov	r0, r4
   d512e:	bd10      	pop	{r4, pc}

000d5130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d5130:	2200      	movs	r2, #0
   d5132:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5136:	b510      	push	{r4, lr}
        capacity_(0) {
   d5138:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d513a:	680c      	ldr	r4, [r1, #0]
   d513c:	6004      	str	r4, [r0, #0]
   d513e:	684c      	ldr	r4, [r1, #4]
   d5140:	6044      	str	r4, [r0, #4]
   d5142:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5144:	600a      	str	r2, [r1, #0]
   d5146:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5148:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d514a:	608a      	str	r2, [r1, #8]
}
   d514c:	bd10      	pop	{r4, pc}

000d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d514e:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5150:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d5152:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5154:	6818      	ldr	r0, [r3, #0]
   d5156:	f7ff f9a7 	bl	d44a8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d515a:	4620      	mov	r0, r4
   d515c:	bd10      	pop	{r4, pc}
	...

000d5160 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5164:	b087      	sub	sp, #28
   d5166:	4680      	mov	r8, r0
   d5168:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d516a:	4b1c      	ldr	r3, [pc, #112]	; (d51dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d516c:	685b      	ldr	r3, [r3, #4]
   d516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5172:	4689      	mov	r9, r1
   d5174:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5176:	b96b      	cbnz	r3, d5194 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d5178:	f7ff fec6 	bl	d4f08 <_ZN5spark10LogManager8instanceEv>
   d517c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d517e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5182:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5184:	9305      	str	r3, [sp, #20]
   d5186:	f7ff f987 	bl	d4498 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d518a:	7b23      	ldrb	r3, [r4, #12]
   d518c:	b12b      	cbz	r3, d519a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d518e:	a805      	add	r0, sp, #20
   d5190:	f7ff ffdd 	bl	d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5194:	b007      	add	sp, #28
   d5196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d519a:	2301      	movs	r3, #1
   d519c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d519e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d51a2:	fa5f f989 	uxtb.w	r9, r9
   d51a6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d51aa:	45aa      	cmp	sl, r5
   d51ac:	d012      	beq.n	d51d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d51ae:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d51b2:	4631      	mov	r1, r6
   d51b4:	1d38      	adds	r0, r7, #4
   d51b6:	f7ff fe2b 	bl	d4e10 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d51ba:	4581      	cmp	r9, r0
   d51bc:	d3f5      	bcc.n	d51aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d51be:	683b      	ldr	r3, [r7, #0]
   d51c0:	9a03      	ldr	r2, [sp, #12]
   d51c2:	9200      	str	r2, [sp, #0]
   d51c4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d51c8:	464a      	mov	r2, r9
   d51ca:	4633      	mov	r3, r6
   d51cc:	4641      	mov	r1, r8
   d51ce:	4638      	mov	r0, r7
   d51d0:	47d8      	blx	fp
   d51d2:	e7ea      	b.n	d51aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d51d4:	2300      	movs	r3, #0
   d51d6:	7323      	strb	r3, [r4, #12]
   d51d8:	e7d9      	b.n	d518e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d51da:	bf00      	nop
   d51dc:	e000ed00 	.word	0xe000ed00

000d51e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d51e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51e4:	469b      	mov	fp, r3
   d51e6:	4b1a      	ldr	r3, [pc, #104]	; (d5250 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d51e8:	685b      	ldr	r3, [r3, #4]
   d51ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d51ee:	4680      	mov	r8, r0
   d51f0:	4689      	mov	r9, r1
   d51f2:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d51f4:	b96b      	cbnz	r3, d5212 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d51f6:	f7ff fe87 	bl	d4f08 <_ZN5spark10LogManager8instanceEv>
   d51fa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d51fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5200:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5202:	9301      	str	r3, [sp, #4]
   d5204:	f7ff f948 	bl	d4498 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5208:	7b23      	ldrb	r3, [r4, #12]
   d520a:	b12b      	cbz	r3, d5218 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d520c:	a801      	add	r0, sp, #4
   d520e:	f7ff ff9e 	bl	d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5212:	b003      	add	sp, #12
   d5214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d5218:	2301      	movs	r3, #1
   d521a:	7323      	strb	r3, [r4, #12]
   d521c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d5220:	b2f6      	uxtb	r6, r6
   d5222:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5226:	4555      	cmp	r5, sl
   d5228:	d00e      	beq.n	d5248 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d522a:	f855 7b04 	ldr.w	r7, [r5], #4
   d522e:	4659      	mov	r1, fp
   d5230:	1d38      	adds	r0, r7, #4
   d5232:	f7ff fded 	bl	d4e10 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5236:	4286      	cmp	r6, r0
   d5238:	d3f5      	bcc.n	d5226 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d523a:	683b      	ldr	r3, [r7, #0]
   d523c:	464a      	mov	r2, r9
   d523e:	68db      	ldr	r3, [r3, #12]
   d5240:	4641      	mov	r1, r8
   d5242:	4638      	mov	r0, r7
   d5244:	4798      	blx	r3
   d5246:	e7ee      	b.n	d5226 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d5248:	2300      	movs	r3, #0
   d524a:	7323      	strb	r3, [r4, #12]
   d524c:	e7de      	b.n	d520c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d524e:	bf00      	nop
   d5250:	e000ed00 	.word	0xe000ed00

000d5254 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5258:	4b16      	ldr	r3, [pc, #88]	; (d52b4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d525a:	685b      	ldr	r3, [r3, #4]
   d525c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5260:	4605      	mov	r5, r0
   d5262:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d5264:	bb1b      	cbnz	r3, d52ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d5266:	f7ff fe4f 	bl	d4f08 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d526a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d526e:	4604      	mov	r4, r0
   d5270:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5272:	9301      	str	r3, [sp, #4]
   d5274:	f7ff f910 	bl	d4498 <os_mutex_recursive_lock>
   d5278:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d527c:	2446      	movs	r4, #70	; 0x46
   d527e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5282:	45b0      	cmp	r8, r6
   d5284:	d109      	bne.n	d529a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d5286:	a801      	add	r0, sp, #4
   d5288:	f7ff ff61 	bl	d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d528c:	42a5      	cmp	r5, r4
   d528e:	bfb4      	ite	lt
   d5290:	2000      	movlt	r0, #0
   d5292:	2001      	movge	r0, #1
}
   d5294:	b002      	add	sp, #8
   d5296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d529a:	f856 0b04 	ldr.w	r0, [r6], #4
   d529e:	4639      	mov	r1, r7
   d52a0:	3004      	adds	r0, #4
   d52a2:	f7ff fdb5 	bl	d4e10 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d52a6:	4284      	cmp	r4, r0
   d52a8:	bfa8      	it	ge
   d52aa:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d52ac:	e7e9      	b.n	d5282 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d52ae:	2000      	movs	r0, #0
   d52b0:	e7f0      	b.n	d5294 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d52b2:	bf00      	nop
   d52b4:	e000ed00 	.word	0xe000ed00

000d52b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d52b8:	b570      	push	{r4, r5, r6, lr}
   d52ba:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d52bc:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d52c0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d52c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d52c6:	4282      	cmp	r2, r0
   d52c8:	d007      	beq.n	d52da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d52ca:	4601      	mov	r1, r0
            if (*p == value) {
   d52cc:	681d      	ldr	r5, [r3, #0]
   d52ce:	f851 6b04 	ldr.w	r6, [r1], #4
   d52d2:	42ae      	cmp	r6, r5
   d52d4:	d003      	beq.n	d52de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d52d6:	4608      	mov	r0, r1
   d52d8:	e7f5      	b.n	d52c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d52da:	2000      	movs	r0, #0
}
   d52dc:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d52de:	1a52      	subs	r2, r2, r1
   d52e0:	f001 fd52 	bl	d6d88 <memmove>
    --size_;
   d52e4:	6863      	ldr	r3, [r4, #4]
   d52e6:	3b01      	subs	r3, #1
   d52e8:	6063      	str	r3, [r4, #4]
    return true;
   d52ea:	2001      	movs	r0, #1
   d52ec:	e7f6      	b.n	d52dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d52ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d52ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d52f0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d52f4:	4604      	mov	r4, r0
   d52f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d52f8:	9101      	str	r1, [sp, #4]
   d52fa:	9303      	str	r3, [sp, #12]
   d52fc:	f7ff f8cc 	bl	d4498 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5300:	a901      	add	r1, sp, #4
   d5302:	4620      	mov	r0, r4
   d5304:	f7ff ffd8 	bl	d52b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5308:	b118      	cbz	r0, d5312 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d530a:	6863      	ldr	r3, [r4, #4]
   d530c:	b90b      	cbnz	r3, d5312 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d530e:	f7ff fe27 	bl	d4f60 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5312:	a803      	add	r0, sp, #12
   d5314:	f7ff ff1b 	bl	d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5318:	b004      	add	sp, #16
   d531a:	bd10      	pop	{r4, pc}

000d531c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d531c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d531e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d5322:	2318      	movs	r3, #24
   d5324:	4604      	mov	r4, r0
   d5326:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d532a:	42ae      	cmp	r6, r5
   d532c:	d015      	beq.n	d535a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d532e:	f105 0110 	add.w	r1, r5, #16
   d5332:	4620      	mov	r0, r4
   d5334:	f7ff ffc0 	bl	d52b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5338:	6863      	ldr	r3, [r4, #4]
   d533a:	b90b      	cbnz	r3, d5340 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d533c:	f7ff fe10 	bl	d4f60 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d5340:	69e0      	ldr	r0, [r4, #28]
   d5342:	6929      	ldr	r1, [r5, #16]
   d5344:	6803      	ldr	r3, [r0, #0]
   d5346:	68db      	ldr	r3, [r3, #12]
   d5348:	4798      	blx	r3
        if (h.stream) {
   d534a:	6969      	ldr	r1, [r5, #20]
   d534c:	b119      	cbz	r1, d5356 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d534e:	6a20      	ldr	r0, [r4, #32]
   d5350:	6803      	ldr	r3, [r0, #0]
   d5352:	68db      	ldr	r3, [r3, #12]
   d5354:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d5356:	3518      	adds	r5, #24
   d5358:	e7e7      	b.n	d532a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d535a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d535e:	2618      	movs	r6, #24
   d5360:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5364:	42ae      	cmp	r6, r5
   d5366:	d004      	beq.n	d5372 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d5368:	4628      	mov	r0, r5
   d536a:	f7ff fb07 	bl	d497c <_ZN6StringD1Ev>
   d536e:	3518      	adds	r5, #24
   d5370:	e7f8      	b.n	d5364 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d5372:	2300      	movs	r3, #0
   d5374:	6163      	str	r3, [r4, #20]
}
   d5376:	bd70      	pop	{r4, r5, r6, pc}

000d5378 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d5378:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d537a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d537c:	f7ff fdf0 	bl	d4f60 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5380:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d5384:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5386:	9301      	str	r3, [sp, #4]
   d5388:	f7ff f886 	bl	d4498 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d538c:	4620      	mov	r0, r4
   d538e:	f7ff ffc5 	bl	d531c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5392:	a801      	add	r0, sp, #4
   d5394:	f7ff fedb 	bl	d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d5398:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d539a:	b108      	cbz	r0, d53a0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d539c:	f7ff f874 	bl	d4488 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d53a0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d53a4:	2618      	movs	r6, #24
   d53a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d53aa:	42ae      	cmp	r6, r5
   d53ac:	d004      	beq.n	d53b8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d53ae:	4628      	mov	r0, r5
   d53b0:	f7ff fae4 	bl	d497c <_ZN6StringD1Ev>
   d53b4:	3518      	adds	r5, #24
   d53b6:	e7f8      	b.n	d53aa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d53b8:	6920      	ldr	r0, [r4, #16]
   d53ba:	f7ff fa31 	bl	d4820 <free>
   d53be:	6820      	ldr	r0, [r4, #0]
   d53c0:	f7ff fa2e 	bl	d4820 <free>
}
   d53c4:	4620      	mov	r0, r4
   d53c6:	b002      	add	sp, #8
   d53c8:	bd70      	pop	{r4, r5, r6, pc}

000d53ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d53ca:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d53cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53ce:	4606      	mov	r6, r0
   d53d0:	460c      	mov	r4, r1
   d53d2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d53d4:	d927      	bls.n	d5426 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d53d6:	4290      	cmp	r0, r2
   d53d8:	d226      	bcs.n	d5428 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d53da:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d53de:	1a6c      	subs	r4, r5, r1
   d53e0:	f1a1 0714 	sub.w	r7, r1, #20
   d53e4:	4404      	add	r4, r0
        capacity_(0) {
   d53e6:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d53e8:	42af      	cmp	r7, r5
   d53ea:	d03d      	beq.n	d5468 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d53ec:	b1a4      	cbz	r4, d5418 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d53ee:	682b      	ldr	r3, [r5, #0]
   d53f0:	6023      	str	r3, [r4, #0]
   d53f2:	88ab      	ldrh	r3, [r5, #4]
   d53f4:	80a3      	strh	r3, [r4, #4]
   d53f6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d53fa:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d53fc:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d5400:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5402:	68ab      	ldr	r3, [r5, #8]
   d5404:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5406:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5408:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d540a:	68ea      	ldr	r2, [r5, #12]
   d540c:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d540e:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5410:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5412:	692a      	ldr	r2, [r5, #16]
   d5414:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5416:	612b      	str	r3, [r5, #16]
   d5418:	f105 0008 	add.w	r0, r5, #8
   d541c:	f7ff fe40 	bl	d50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d5420:	3d14      	subs	r5, #20
   d5422:	3c14      	subs	r4, #20
   d5424:	e7e0      	b.n	d53e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d5426:	d01f      	beq.n	d5468 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5428:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d542a:	42ac      	cmp	r4, r5
   d542c:	d01c      	beq.n	d5468 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d542e:	b1a6      	cbz	r6, d545a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d5430:	6823      	ldr	r3, [r4, #0]
   d5432:	6033      	str	r3, [r6, #0]
   d5434:	88a3      	ldrh	r3, [r4, #4]
   d5436:	80b3      	strh	r3, [r6, #4]
   d5438:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d543c:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d543e:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d5442:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5444:	68a3      	ldr	r3, [r4, #8]
   d5446:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5448:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d544a:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d544c:	68e2      	ldr	r2, [r4, #12]
   d544e:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5450:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5452:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5454:	6922      	ldr	r2, [r4, #16]
   d5456:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5458:	6123      	str	r3, [r4, #16]
   d545a:	f104 0008 	add.w	r0, r4, #8
   d545e:	f7ff fe1f 	bl	d50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5462:	3414      	adds	r4, #20
   d5464:	3614      	adds	r6, #20
   d5466:	e7e0      	b.n	d542a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d5468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d546a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d546a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d546c:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5470:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5472:	4604      	mov	r4, r0
   d5474:	460e      	mov	r6, r1
   d5476:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5478:	db0d      	blt.n	d5496 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d547a:	3501      	adds	r5, #1
        if (n > 0) {
   d547c:	2d00      	cmp	r5, #0
   d547e:	6800      	ldr	r0, [r0, #0]
   d5480:	dd04      	ble.n	d548c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5482:	00a9      	lsls	r1, r5, #2
   d5484:	f7ff f9d4 	bl	d4830 <realloc>
            if (!d) {
   d5488:	b918      	cbnz	r0, d5492 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d548a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d548c:	f7ff f9c8 	bl	d4820 <free>
        T* d = nullptr;
   d5490:	2000      	movs	r0, #0
        data_ = d;
   d5492:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5494:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d5496:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5498:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d549a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d549e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d54a0:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d54a4:	1d08      	adds	r0, r1, #4
   d54a6:	f001 fc6f 	bl	d6d88 <memmove>
    new(p) T(std::move(value));
   d54aa:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d54ae:	6863      	ldr	r3, [r4, #4]
   d54b0:	3301      	adds	r3, #1
   d54b2:	6063      	str	r3, [r4, #4]
    return true;
   d54b4:	2001      	movs	r0, #1
   d54b6:	e7e8      	b.n	d548a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d54b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d54b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d54ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d54be:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d54c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d54c2:	9301      	str	r3, [sp, #4]
   d54c4:	460d      	mov	r5, r1
   d54c6:	f7fe ffe7 	bl	d4498 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d54ca:	e9d4 3100 	ldrd	r3, r1, [r4]
   d54ce:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d54d2:	4283      	cmp	r3, r0
   d54d4:	461a      	mov	r2, r3
   d54d6:	d00b      	beq.n	d54f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d54d8:	6812      	ldr	r2, [r2, #0]
   d54da:	42aa      	cmp	r2, r5
   d54dc:	f103 0304 	add.w	r3, r3, #4
   d54e0:	d1f7      	bne.n	d54d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d54e2:	a801      	add	r0, sp, #4
   d54e4:	f7ff fe33 	bl	d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d54e8:	2500      	movs	r5, #0
}
   d54ea:	4628      	mov	r0, r5
   d54ec:	b003      	add	sp, #12
   d54ee:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d54f0:	462a      	mov	r2, r5
   d54f2:	4620      	mov	r0, r4
   d54f4:	f7ff ffb9 	bl	d546a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d54f8:	4605      	mov	r5, r0
   d54fa:	2800      	cmp	r0, #0
   d54fc:	d0f1      	beq.n	d54e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d54fe:	6863      	ldr	r3, [r4, #4]
   d5500:	2b01      	cmp	r3, #1
   d5502:	d101      	bne.n	d5508 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d5504:	f7ff fd20 	bl	d4f48 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5508:	a801      	add	r0, sp, #4
   d550a:	f7ff fe20 	bl	d514e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d550e:	e7ec      	b.n	d54ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d5510 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5510:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5514:	4604      	mov	r4, r0
   d5516:	460d      	mov	r5, r1
   d5518:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d551a:	d914      	bls.n	d5546 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d551c:	4290      	cmp	r0, r2
   d551e:	d213      	bcs.n	d5548 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d5520:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d5524:	1a75      	subs	r5, r6, r1
   d5526:	f1a1 0710 	sub.w	r7, r1, #16
   d552a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d552c:	42b7      	cmp	r7, r6
   d552e:	d018      	beq.n	d5562 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5530:	b11c      	cbz	r4, d553a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5532:	4631      	mov	r1, r6
   d5534:	4620      	mov	r0, r4
   d5536:	f7ff fa89 	bl	d4a4c <_ZN6StringC1EOS_>
                end->~T();
   d553a:	4630      	mov	r0, r6
   d553c:	f7ff fa1e 	bl	d497c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5540:	3e10      	subs	r6, #16
   d5542:	3c10      	subs	r4, #16
   d5544:	e7f2      	b.n	d552c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5546:	d00c      	beq.n	d5562 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5548:	42b5      	cmp	r5, r6
   d554a:	d00a      	beq.n	d5562 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d554c:	b11c      	cbz	r4, d5556 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d554e:	4629      	mov	r1, r5
   d5550:	4620      	mov	r0, r4
   d5552:	f7ff fa7b 	bl	d4a4c <_ZN6StringC1EOS_>
                p->~T();
   d5556:	4628      	mov	r0, r5
   d5558:	f7ff fa10 	bl	d497c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d555c:	3510      	adds	r5, #16
   d555e:	3410      	adds	r4, #16
   d5560:	e7f2      	b.n	d5548 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5564 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5564:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5566:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5568:	4605      	mov	r5, r0
        if (n > 0) {
   d556a:	dd11      	ble.n	d5590 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d556c:	0130      	lsls	r0, r6, #4
   d556e:	f7ff f94f 	bl	d4810 <malloc>
            if (!d) {
   d5572:	4604      	mov	r4, r0
   d5574:	b158      	cbz	r0, d558e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5576:	e9d5 1200 	ldrd	r1, r2, [r5]
   d557a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d557e:	f7ff ffc7 	bl	d5510 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5582:	6828      	ldr	r0, [r5, #0]
   d5584:	f7ff f94c 	bl	d4820 <free>
        data_ = d;
   d5588:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d558a:	60ae      	str	r6, [r5, #8]
        return true;
   d558c:	2001      	movs	r0, #1
    }
   d558e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5590:	2400      	movs	r4, #0
   d5592:	e7f6      	b.n	d5582 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5594 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5598:	4691      	mov	r9, r2
   d559a:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d559c:	2300      	movs	r3, #0
   d559e:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d55a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d55a4:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d55a6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d55a8:	4299      	cmp	r1, r3
        capacity_(0) {
   d55aa:	e9c0 3300 	strd	r3, r3, [r0]
   d55ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d55b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d55b6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d55ba:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d55bc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d55be:	dc23      	bgt.n	d5608 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d55c0:	e9d9 5700 	ldrd	r5, r7, [r9]
   d55c4:	2314      	movs	r3, #20
   d55c6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d55ca:	42af      	cmp	r7, r5
   d55cc:	d03b      	beq.n	d5646 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d55ce:	4629      	mov	r1, r5
   d55d0:	a80d      	add	r0, sp, #52	; 0x34
   d55d2:	f7ff fa3b 	bl	d4a4c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d55d6:	a90d      	add	r1, sp, #52	; 0x34
   d55d8:	a811      	add	r0, sp, #68	; 0x44
   d55da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d55dc:	f7ff fa36 	bl	d4a4c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d55e0:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d55e4:	4299      	cmp	r1, r3
   d55e6:	da1b      	bge.n	d5620 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d55e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d55ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d55ec:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d55f0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d55f4:	4631      	mov	r1, r6
   d55f6:	f106 0010 	add.w	r0, r6, #16
   d55fa:	f7ff ff89 	bl	d5510 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d55fe:	b9ee      	cbnz	r6, d563c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d5600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5602:	3301      	adds	r3, #1
   d5604:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d5606:	e011      	b.n	d562c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d5608:	a80a      	add	r0, sp, #40	; 0x28
   d560a:	f7ff ffab 	bl	d5564 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d560e:	2800      	cmp	r0, #0
   d5610:	d1d6      	bne.n	d55c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d5612:	a80a      	add	r0, sp, #40	; 0x28
   d5614:	f7ff fa60 	bl	d4ad8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5618:	4620      	mov	r0, r4
   d561a:	b017      	add	sp, #92	; 0x5c
   d561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5620:	3101      	adds	r1, #1
   d5622:	a80a      	add	r0, sp, #40	; 0x28
   d5624:	f7ff ff9e 	bl	d5564 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5628:	2800      	cmp	r0, #0
   d562a:	d1dd      	bne.n	d55e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d562c:	a811      	add	r0, sp, #68	; 0x44
   d562e:	f7ff f9a5 	bl	d497c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d5632:	a80d      	add	r0, sp, #52	; 0x34
   d5634:	f7ff f9a2 	bl	d497c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5638:	3514      	adds	r5, #20
   d563a:	e7c6      	b.n	d55ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d563c:	a911      	add	r1, sp, #68	; 0x44
   d563e:	4630      	mov	r0, r6
   d5640:	f7ff fa04 	bl	d4a4c <_ZN6StringC1EOS_>
   d5644:	e7dc      	b.n	d5600 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d5646:	2600      	movs	r6, #0
   d5648:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d564c:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d564e:	4637      	mov	r7, r6
   d5650:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5658:	429e      	cmp	r6, r3
   d565a:	f280 8097 	bge.w	d578c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d565e:	0133      	lsls	r3, r6, #4
   d5660:	58d3      	ldr	r3, [r2, r3]
   d5662:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5664:	b90b      	cbnz	r3, d566a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d5666:	3601      	adds	r6, #1
   d5668:	e7f4      	b.n	d5654 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d566a:	fb0a f306 	mul.w	r3, sl, r6
   d566e:	9709      	str	r7, [sp, #36]	; 0x24
   d5670:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5672:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5674:	a909      	add	r1, sp, #36	; 0x24
   d5676:	a808      	add	r0, sp, #32
   d5678:	f7ff fb0e 	bl	d4c98 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d567c:	4683      	mov	fp, r0
   d567e:	2800      	cmp	r0, #0
   d5680:	d0f1      	beq.n	d5666 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5682:	4601      	mov	r1, r0
   d5684:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5686:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d568a:	f10d 031f 	add.w	r3, sp, #31
   d568e:	4628      	mov	r0, r5
   d5690:	f7ff fb80 	bl	d4d94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5694:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5698:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d569a:	f1b8 0f00 	cmp.w	r8, #0
   d569e:	d166      	bne.n	d576e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d56a0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d56a4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d56a8:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d56ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d56b0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d56b4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d56b8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d56bc:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d56c0:	4293      	cmp	r3, r2
   d56c2:	db1a      	blt.n	d56fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d56c4:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d56c8:	f1bb 0f00 	cmp.w	fp, #0
   d56cc:	dd4a      	ble.n	d5764 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d56ce:	fb0a f00b 	mul.w	r0, sl, fp
   d56d2:	f7ff f89d 	bl	d4810 <malloc>
            if (!d) {
   d56d6:	9004      	str	r0, [sp, #16]
   d56d8:	2800      	cmp	r0, #0
   d56da:	d045      	beq.n	d5768 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d56dc:	e9d5 1200 	ldrd	r1, r2, [r5]
   d56e0:	fb0a 1202 	mla	r2, sl, r2, r1
   d56e4:	f7ff fe71 	bl	d53ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d56e8:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d56ea:	6828      	ldr	r0, [r5, #0]
   d56ec:	9304      	str	r3, [sp, #16]
   d56ee:	f7ff f897 	bl	d4820 <free>
        data_ = d;
   d56f2:	9b04      	ldr	r3, [sp, #16]
   d56f4:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d56f6:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d56fa:	9b01      	ldr	r3, [sp, #4]
   d56fc:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5700:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5702:	fb0a f303 	mul.w	r3, sl, r3
   d5706:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d570a:	f101 0014 	add.w	r0, r1, #20
   d570e:	fb0a b202 	mla	r2, sl, r2, fp
   d5712:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5714:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5716:	f7ff fe58 	bl	d53ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d571a:	9904      	ldr	r1, [sp, #16]
   d571c:	b1a9      	cbz	r1, d574a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d571e:	9b05      	ldr	r3, [sp, #20]
   d5720:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5722:	f84b 2003 	str.w	r2, [fp, r3]
   d5726:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d572a:	808b      	strh	r3, [r1, #4]
   d572c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5730:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5732:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5736:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d573a:	608b      	str	r3, [r1, #8]
   d573c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d573e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5740:	60cb      	str	r3, [r1, #12]
   d5742:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5744:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5746:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5748:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d574a:	686b      	ldr	r3, [r5, #4]
   d574c:	3301      	adds	r3, #1
   d574e:	606b      	str	r3, [r5, #4]
   d5750:	a813      	add	r0, sp, #76	; 0x4c
   d5752:	f7ff fca5 	bl	d50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5756:	f1b8 0f00 	cmp.w	r8, #0
   d575a:	d008      	beq.n	d576e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d575c:	a80d      	add	r0, sp, #52	; 0x34
   d575e:	f7ff fc9f 	bl	d50a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5762:	e756      	b.n	d5612 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5764:	4643      	mov	r3, r8
   d5766:	e7c0      	b.n	d56ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5768:	f04f 0801 	mov.w	r8, #1
   d576c:	e7f0      	b.n	d5750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d576e:	9b01      	ldr	r3, [sp, #4]
   d5770:	682d      	ldr	r5, [r5, #0]
   d5772:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5776:	9b08      	ldr	r3, [sp, #32]
   d5778:	781b      	ldrb	r3, [r3, #0]
   d577a:	b92b      	cbnz	r3, d5788 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d577c:	f8d9 3000 	ldr.w	r3, [r9]
   d5780:	9a02      	ldr	r2, [sp, #8]
   d5782:	4413      	add	r3, r2
   d5784:	7c1b      	ldrb	r3, [r3, #16]
   d5786:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5788:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d578a:	e773      	b.n	d5674 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d578c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d578e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5790:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5792:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5794:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5796:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d579a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d579c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d579e:	60a2      	str	r2, [r4, #8]
   d57a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d57a2:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57a4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57a6:	60e2      	str	r2, [r4, #12]
   d57a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d57aa:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ac:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d57ae:	6122      	str	r2, [r4, #16]
   d57b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d57b2:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d57b4:	9b03      	ldr	r3, [sp, #12]
   d57b6:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d57b8:	6162      	str	r2, [r4, #20]
   d57ba:	7623      	strb	r3, [r4, #24]
   d57bc:	e7ce      	b.n	d575c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d57c0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d57c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d57c2:	4605      	mov	r5, r0
   d57c4:	4b09      	ldr	r3, [pc, #36]	; (d57ec <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d57c6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d57ca:	4604      	mov	r4, r0
   d57cc:	460e      	mov	r6, r1
        filter_(level, filters) {
   d57ce:	a801      	add	r0, sp, #4
   d57d0:	4611      	mov	r1, r2
   d57d2:	f7fe fd88 	bl	d42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d57d6:	aa01      	add	r2, sp, #4
   d57d8:	4631      	mov	r1, r6
   d57da:	4628      	mov	r0, r5
   d57dc:	f7ff feda 	bl	d5594 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d57e0:	a801      	add	r0, sp, #4
   d57e2:	f7fe fd3f 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d57e6:	4620      	mov	r0, r4
   d57e8:	b004      	add	sp, #16
   d57ea:	bd70      	pop	{r4, r5, r6, pc}
   d57ec:	000d7040 	.word	0x000d7040

000d57f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d57f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57f2:	460f      	mov	r7, r1
   d57f4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d57f6:	4926      	ldr	r1, [pc, #152]	; (d5890 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d57f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d57fa:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d57fc:	4616      	mov	r6, r2
   d57fe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5800:	f001 fb1f 	bl	d6e42 <strcmp>
   d5804:	bb00      	cbnz	r0, d5848 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5806:	b1e4      	cbz	r4, d5842 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5808:	4629      	mov	r1, r5
   d580a:	4668      	mov	r0, sp
   d580c:	f7ff fc90 	bl	d5130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5810:	4920      	ldr	r1, [pc, #128]	; (d5894 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5812:	2024      	movs	r0, #36	; 0x24
   d5814:	f001 fa95 	bl	d6d42 <_ZnwjRKSt9nothrow_t>
   d5818:	4605      	mov	r5, r0
   d581a:	b170      	cbz	r0, d583a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d581c:	4669      	mov	r1, sp
   d581e:	a803      	add	r0, sp, #12
   d5820:	f7fe fd61 	bl	d42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5824:	aa03      	add	r2, sp, #12
   d5826:	4631      	mov	r1, r6
   d5828:	4628      	mov	r0, r5
   d582a:	f7ff ffc9 	bl	d57c0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d582e:	a803      	add	r0, sp, #12
   d5830:	f7fe fd18 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5834:	4b18      	ldr	r3, [pc, #96]	; (d5898 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5836:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5838:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d583a:	4668      	mov	r0, sp
   d583c:	f7fe fd12 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5840:	462c      	mov	r4, r5
}
   d5842:	4620      	mov	r0, r4
   d5844:	b007      	add	sp, #28
   d5846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5848:	4914      	ldr	r1, [pc, #80]	; (d589c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d584a:	4638      	mov	r0, r7
   d584c:	f001 faf9 	bl	d6e42 <strcmp>
   d5850:	b9e0      	cbnz	r0, d588c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5852:	2c00      	cmp	r4, #0
   d5854:	d0f5      	beq.n	d5842 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5856:	4629      	mov	r1, r5
   d5858:	4668      	mov	r0, sp
   d585a:	f7ff fc69 	bl	d5130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d585e:	490d      	ldr	r1, [pc, #52]	; (d5894 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5860:	2024      	movs	r0, #36	; 0x24
   d5862:	f001 fa6e 	bl	d6d42 <_ZnwjRKSt9nothrow_t>
   d5866:	4605      	mov	r5, r0
   d5868:	2800      	cmp	r0, #0
   d586a:	d0e6      	beq.n	d583a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d586c:	4669      	mov	r1, sp
   d586e:	a803      	add	r0, sp, #12
   d5870:	f7fe fd39 	bl	d42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5874:	aa03      	add	r2, sp, #12
   d5876:	4631      	mov	r1, r6
   d5878:	4628      	mov	r0, r5
   d587a:	f7ff ffa1 	bl	d57c0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d587e:	a803      	add	r0, sp, #12
   d5880:	f7fe fcf0 	bl	d4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5884:	4b06      	ldr	r3, [pc, #24]	; (d58a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5886:	602b      	str	r3, [r5, #0]
   d5888:	622c      	str	r4, [r5, #32]
}
   d588a:	e7d6      	b.n	d583a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d588c:	2400      	movs	r4, #0
   d588e:	e7d8      	b.n	d5842 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5890:	000d70c4 	.word	0x000d70c4
   d5894:	000d72f5 	.word	0x000d72f5
   d5898:	000d7160 	.word	0x000d7160
   d589c:	000d70c8 	.word	0x000d70c8
   d58a0:	000d7148 	.word	0x000d7148

000d58a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d58a4:	4b01      	ldr	r3, [pc, #4]	; (d58ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d58a6:	4a02      	ldr	r2, [pc, #8]	; (d58b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d58a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d58aa:	4770      	bx	lr
   d58ac:	2003e610 	.word	0x2003e610
   d58b0:	000d70d9 	.word	0x000d70d9

000d58b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d58b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d58b8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d58ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d58be:	4604      	mov	r4, r0
   d58c0:	460e      	mov	r6, r1
   d58c2:	4617      	mov	r7, r2
   d58c4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d58c6:	f000 fda5 	bl	d6414 <_Z16_fetch_usbserialv>
   d58ca:	4581      	cmp	r9, r0
   d58cc:	d04c      	beq.n	d5968 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d58ce:	792b      	ldrb	r3, [r5, #4]
   d58d0:	0719      	lsls	r1, r3, #28
   d58d2:	d504      	bpl.n	d58de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d58d4:	696a      	ldr	r2, [r5, #20]
   d58d6:	4954      	ldr	r1, [pc, #336]	; (d5a28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d58d8:	4620      	mov	r0, r4
   d58da:	f7ff fa4c 	bl	d4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d58de:	f1b8 0f00 	cmp.w	r8, #0
   d58e2:	d00d      	beq.n	d5900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d58e4:	215b      	movs	r1, #91	; 0x5b
   d58e6:	4620      	mov	r0, r4
   d58e8:	f7ff fa39 	bl	d4d5e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d58ec:	4641      	mov	r1, r8
   d58ee:	4620      	mov	r0, r4
   d58f0:	f7ff fa26 	bl	d4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d58f4:	6823      	ldr	r3, [r4, #0]
   d58f6:	494d      	ldr	r1, [pc, #308]	; (d5a2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d58f8:	68db      	ldr	r3, [r3, #12]
   d58fa:	2202      	movs	r2, #2
   d58fc:	4620      	mov	r0, r4
   d58fe:	4798      	blx	r3
    if (attr.has_file) {
   d5900:	792b      	ldrb	r3, [r5, #4]
   d5902:	07da      	lsls	r2, r3, #31
   d5904:	d523      	bpl.n	d594e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5906:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d590a:	212f      	movs	r1, #47	; 0x2f
   d590c:	4640      	mov	r0, r8
   d590e:	f001 fae2 	bl	d6ed6 <strrchr>
    if (s1) {
   d5912:	b108      	cbz	r0, d5918 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5914:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5918:	4641      	mov	r1, r8
   d591a:	4620      	mov	r0, r4
   d591c:	f7ff fa10 	bl	d4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5920:	792b      	ldrb	r3, [r5, #4]
   d5922:	079b      	lsls	r3, r3, #30
   d5924:	d508      	bpl.n	d5938 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5926:	213a      	movs	r1, #58	; 0x3a
   d5928:	4620      	mov	r0, r4
   d592a:	f7ff fa18 	bl	d4d5e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d592e:	68ea      	ldr	r2, [r5, #12]
   d5930:	493f      	ldr	r1, [pc, #252]	; (d5a30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5932:	4620      	mov	r0, r4
   d5934:	f7ff fa1f 	bl	d4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5938:	792a      	ldrb	r2, [r5, #4]
   d593a:	6823      	ldr	r3, [r4, #0]
   d593c:	f012 0f04 	tst.w	r2, #4
   d5940:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5942:	bf14      	ite	ne
   d5944:	493b      	ldrne	r1, [pc, #236]	; (d5a34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5946:	493c      	ldreq	r1, [pc, #240]	; (d5a38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5948:	2202      	movs	r2, #2
            write(": ", 2);
   d594a:	4620      	mov	r0, r4
   d594c:	4798      	blx	r3
    if (attr.has_function) {
   d594e:	792b      	ldrb	r3, [r5, #4]
   d5950:	0758      	lsls	r0, r3, #29
   d5952:	d51d      	bpl.n	d5990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5954:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5956:	460b      	mov	r3, r1
   d5958:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d595a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d595e:	b160      	cbz	r0, d597a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5960:	2820      	cmp	r0, #32
   d5962:	d108      	bne.n	d5976 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5964:	4619      	mov	r1, r3
   d5966:	e7f7      	b.n	d5958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5968:	4834      	ldr	r0, [pc, #208]	; (d5a3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d596a:	f000 feda 	bl	d6722 <_ZN5spark12NetworkClass9listeningEv>
   d596e:	2800      	cmp	r0, #0
   d5970:	d0ad      	beq.n	d58ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5976:	2828      	cmp	r0, #40	; 0x28
   d5978:	d1ee      	bne.n	d5958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d597a:	6823      	ldr	r3, [r4, #0]
   d597c:	1a52      	subs	r2, r2, r1
   d597e:	68db      	ldr	r3, [r3, #12]
   d5980:	4620      	mov	r0, r4
   d5982:	4798      	blx	r3
        write("(): ", 4);
   d5984:	6823      	ldr	r3, [r4, #0]
   d5986:	492e      	ldr	r1, [pc, #184]	; (d5a40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5988:	68db      	ldr	r3, [r3, #12]
   d598a:	2204      	movs	r2, #4
   d598c:	4620      	mov	r0, r4
   d598e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5990:	2100      	movs	r1, #0
   d5992:	4638      	mov	r0, r7
   d5994:	f7fe fe80 	bl	d4698 <log_level_name>
   d5998:	4601      	mov	r1, r0
    write(s);
   d599a:	4620      	mov	r0, r4
   d599c:	f7ff f9d0 	bl	d4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d59a0:	6823      	ldr	r3, [r4, #0]
   d59a2:	4925      	ldr	r1, [pc, #148]	; (d5a38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d59a4:	68db      	ldr	r3, [r3, #12]
   d59a6:	2202      	movs	r2, #2
   d59a8:	4620      	mov	r0, r4
   d59aa:	4798      	blx	r3
    if (msg) {
   d59ac:	b11e      	cbz	r6, d59b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d59ae:	4631      	mov	r1, r6
   d59b0:	4620      	mov	r0, r4
   d59b2:	f7ff f9c5 	bl	d4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d59b6:	792b      	ldrb	r3, [r5, #4]
   d59b8:	f013 0f30 	tst.w	r3, #48	; 0x30
   d59bc:	d02c      	beq.n	d5a18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d59be:	6823      	ldr	r3, [r4, #0]
   d59c0:	4920      	ldr	r1, [pc, #128]	; (d5a44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d59c2:	68db      	ldr	r3, [r3, #12]
   d59c4:	2202      	movs	r2, #2
   d59c6:	4620      	mov	r0, r4
   d59c8:	4798      	blx	r3
        if (attr.has_code) {
   d59ca:	792b      	ldrb	r3, [r5, #4]
   d59cc:	06d9      	lsls	r1, r3, #27
   d59ce:	d50a      	bpl.n	d59e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d59d0:	6823      	ldr	r3, [r4, #0]
   d59d2:	491d      	ldr	r1, [pc, #116]	; (d5a48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d59d4:	68db      	ldr	r3, [r3, #12]
   d59d6:	2207      	movs	r2, #7
   d59d8:	4620      	mov	r0, r4
   d59da:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d59dc:	69aa      	ldr	r2, [r5, #24]
   d59de:	491b      	ldr	r1, [pc, #108]	; (d5a4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d59e0:	4620      	mov	r0, r4
   d59e2:	f7ff f9c8 	bl	d4d76 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d59e6:	792b      	ldrb	r3, [r5, #4]
   d59e8:	069a      	lsls	r2, r3, #26
   d59ea:	d511      	bpl.n	d5a10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d59ec:	06db      	lsls	r3, r3, #27
   d59ee:	d505      	bpl.n	d59fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d59f0:	6823      	ldr	r3, [r4, #0]
   d59f2:	4910      	ldr	r1, [pc, #64]	; (d5a34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d59f4:	68db      	ldr	r3, [r3, #12]
   d59f6:	2202      	movs	r2, #2
   d59f8:	4620      	mov	r0, r4
   d59fa:	4798      	blx	r3
            write("details = ", 10);
   d59fc:	6823      	ldr	r3, [r4, #0]
   d59fe:	4914      	ldr	r1, [pc, #80]	; (d5a50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5a00:	68db      	ldr	r3, [r3, #12]
   d5a02:	4620      	mov	r0, r4
   d5a04:	220a      	movs	r2, #10
   d5a06:	4798      	blx	r3
            write(attr.details);
   d5a08:	69e9      	ldr	r1, [r5, #28]
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f7ff f998 	bl	d4d40 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5a10:	215d      	movs	r1, #93	; 0x5d
   d5a12:	4620      	mov	r0, r4
   d5a14:	f7ff f9a3 	bl	d4d5e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5a18:	6823      	ldr	r3, [r4, #0]
   d5a1a:	490e      	ldr	r1, [pc, #56]	; (d5a54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5a1c:	68db      	ldr	r3, [r3, #12]
   d5a1e:	4620      	mov	r0, r4
   d5a20:	2202      	movs	r2, #2
}
   d5a22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5a26:	4718      	bx	r3
   d5a28:	000d70dd 	.word	0x000d70dd
   d5a2c:	000d70e4 	.word	0x000d70e4
   d5a30:	000d70e7 	.word	0x000d70e7
   d5a34:	000d70ea 	.word	0x000d70ea
   d5a38:	000d70ef 	.word	0x000d70ef
   d5a3c:	2003e7c0 	.word	0x2003e7c0
   d5a40:	000d70ed 	.word	0x000d70ed
   d5a44:	000d70f2 	.word	0x000d70f2
   d5a48:	000d70f5 	.word	0x000d70f5
   d5a4c:	000d70fd 	.word	0x000d70fd
   d5a50:	000d7100 	.word	0x000d7100
   d5a54:	000d710b 	.word	0x000d710b

000d5a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a5c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5a5e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5a62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5a64:	4605      	mov	r5, r0
   d5a66:	460f      	mov	r7, r1
   d5a68:	4690      	mov	r8, r2
   d5a6a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5a6c:	f000 fcd2 	bl	d6414 <_Z16_fetch_usbserialv>
   d5a70:	4581      	cmp	r9, r0
   d5a72:	d105      	bne.n	d5a80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5a74:	4849      	ldr	r0, [pc, #292]	; (d5b9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5a76:	f000 fe54 	bl	d6722 <_ZN5spark12NetworkClass9listeningEv>
   d5a7a:	2800      	cmp	r0, #0
   d5a7c:	f040 808a 	bne.w	d5b94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5a80:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5a82:	4a47      	ldr	r2, [pc, #284]	; (d5ba0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5a84:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5a86:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5a8a:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5a8c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5a8e:	f88d 9008 	strb.w	r9, [sp, #8]
   d5a92:	f001 f804 	bl	d6a9e <_ZN5spark10JSONWriter11beginObjectEv>
   d5a96:	4649      	mov	r1, r9
   d5a98:	4640      	mov	r0, r8
   d5a9a:	f7fe fdfd 	bl	d4698 <log_level_name>
    json.name("l", 1).value(s);
   d5a9e:	4941      	ldr	r1, [pc, #260]	; (d5ba4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5aa0:	4680      	mov	r8, r0
   d5aa2:	2201      	movs	r2, #1
   d5aa4:	a801      	add	r0, sp, #4
   d5aa6:	f001 f883 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5aaa:	4641      	mov	r1, r8
   d5aac:	f7ff f93a 	bl	d4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5ab0:	b13f      	cbz	r7, d5ac2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5ab2:	493d      	ldr	r1, [pc, #244]	; (d5ba8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5ab4:	2201      	movs	r2, #1
   d5ab6:	a801      	add	r0, sp, #4
   d5ab8:	f001 f87a 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5abc:	4639      	mov	r1, r7
   d5abe:	f7ff f931 	bl	d4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5ac2:	b13e      	cbz	r6, d5ad4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5ac4:	4939      	ldr	r1, [pc, #228]	; (d5bac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5ac6:	2201      	movs	r2, #1
   d5ac8:	a801      	add	r0, sp, #4
   d5aca:	f001 f871 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ace:	4631      	mov	r1, r6
   d5ad0:	f7ff f928 	bl	d4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5ad4:	7923      	ldrb	r3, [r4, #4]
   d5ad6:	07df      	lsls	r7, r3, #31
   d5ad8:	d50e      	bpl.n	d5af8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5ada:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5adc:	212f      	movs	r1, #47	; 0x2f
   d5ade:	4630      	mov	r0, r6
   d5ae0:	f001 f9f9 	bl	d6ed6 <strrchr>
    if (s1) {
   d5ae4:	b100      	cbz	r0, d5ae8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5ae6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5ae8:	4931      	ldr	r1, [pc, #196]	; (d5bb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5aea:	2201      	movs	r2, #1
   d5aec:	a801      	add	r0, sp, #4
   d5aee:	f001 f85f 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5af2:	4631      	mov	r1, r6
   d5af4:	f7ff f916 	bl	d4d24 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5af8:	7923      	ldrb	r3, [r4, #4]
   d5afa:	079e      	lsls	r6, r3, #30
   d5afc:	d507      	bpl.n	d5b0e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5afe:	492d      	ldr	r1, [pc, #180]	; (d5bb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5b00:	2202      	movs	r2, #2
   d5b02:	a801      	add	r0, sp, #4
   d5b04:	f001 f854 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b08:	68e1      	ldr	r1, [r4, #12]
   d5b0a:	f000 ffd5 	bl	d6ab8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5b0e:	7923      	ldrb	r3, [r4, #4]
   d5b10:	0758      	lsls	r0, r3, #29
   d5b12:	d514      	bpl.n	d5b3e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5b14:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5b16:	4633      	mov	r3, r6
   d5b18:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b1e:	b12a      	cbz	r2, d5b2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5b20:	2a20      	cmp	r2, #32
   d5b22:	d101      	bne.n	d5b28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5b24:	461e      	mov	r6, r3
   d5b26:	e7f7      	b.n	d5b18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5b28:	2a28      	cmp	r2, #40	; 0x28
   d5b2a:	d1f5      	bne.n	d5b18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5b2c:	4922      	ldr	r1, [pc, #136]	; (d5bb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5b2e:	2202      	movs	r2, #2
   d5b30:	a801      	add	r0, sp, #4
   d5b32:	f001 f83d 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b36:	1bba      	subs	r2, r7, r6
   d5b38:	4631      	mov	r1, r6
   d5b3a:	f001 f849 	bl	d6bd0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5b3e:	7923      	ldrb	r3, [r4, #4]
   d5b40:	0719      	lsls	r1, r3, #28
   d5b42:	d507      	bpl.n	d5b54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5b44:	491d      	ldr	r1, [pc, #116]	; (d5bbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5b46:	2201      	movs	r2, #1
   d5b48:	a801      	add	r0, sp, #4
   d5b4a:	f001 f831 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b4e:	6961      	ldr	r1, [r4, #20]
   d5b50:	f000 ffc4 	bl	d6adc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5b54:	7923      	ldrb	r3, [r4, #4]
   d5b56:	06da      	lsls	r2, r3, #27
   d5b58:	d508      	bpl.n	d5b6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5b5a:	2204      	movs	r2, #4
   d5b5c:	4918      	ldr	r1, [pc, #96]	; (d5bc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5b5e:	eb0d 0002 	add.w	r0, sp, r2
   d5b62:	f001 f825 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b66:	69a1      	ldr	r1, [r4, #24]
   d5b68:	f000 ffa6 	bl	d6ab8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5b6c:	7923      	ldrb	r3, [r4, #4]
   d5b6e:	069b      	lsls	r3, r3, #26
   d5b70:	d507      	bpl.n	d5b82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5b72:	4914      	ldr	r1, [pc, #80]	; (d5bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5b74:	2206      	movs	r2, #6
   d5b76:	a801      	add	r0, sp, #4
   d5b78:	f001 f81a 	bl	d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b7c:	69e1      	ldr	r1, [r4, #28]
   d5b7e:	f7ff f8d1 	bl	d4d24 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5b82:	a801      	add	r0, sp, #4
   d5b84:	f000 ff75 	bl	d6a72 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5b88:	6a28      	ldr	r0, [r5, #32]
   d5b8a:	490f      	ldr	r1, [pc, #60]	; (d5bc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5b8c:	6803      	ldr	r3, [r0, #0]
   d5b8e:	2202      	movs	r2, #2
   d5b90:	68db      	ldr	r3, [r3, #12]
   d5b92:	4798      	blx	r3
}
   d5b94:	b005      	add	sp, #20
   d5b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5b9a:	bf00      	nop
   d5b9c:	2003e7c0 	.word	0x2003e7c0
   d5ba0:	000d7130 	.word	0x000d7130
   d5ba4:	000d70ba 	.word	0x000d70ba
   d5ba8:	000d710e 	.word	0x000d710e
   d5bac:	000d7110 	.word	0x000d7110
   d5bb0:	000d7112 	.word	0x000d7112
   d5bb4:	000d7114 	.word	0x000d7114
   d5bb8:	000d7117 	.word	0x000d7117
   d5bbc:	000d711a 	.word	0x000d711a
   d5bc0:	000d711c 	.word	0x000d711c
   d5bc4:	000d7121 	.word	0x000d7121
   d5bc8:	000d710b 	.word	0x000d710b

000d5bcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5bcc:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5bd2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5bd4:	4770      	bx	lr
   d5bd6:	bf00      	nop
   d5bd8:	2003e52c 	.word	0x2003e52c
   d5bdc:	2003e63c 	.word	0x2003e63c

000d5be0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5be0:	b510      	push	{r4, lr}
   d5be2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5be4:	f7fe ff6f 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
   d5be8:	4620      	mov	r0, r4
   d5bea:	bd10      	pop	{r4, pc}

000d5bec <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5bec:	4803      	ldr	r0, [pc, #12]	; (d5bfc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5bee:	4a04      	ldr	r2, [pc, #16]	; (d5c00 <_GLOBAL__sub_I_RGB+0x14>)
   d5bf0:	4904      	ldr	r1, [pc, #16]	; (d5c04 <_GLOBAL__sub_I_RGB+0x18>)
   d5bf2:	2300      	movs	r3, #0
   d5bf4:	6083      	str	r3, [r0, #8]
   d5bf6:	f001 b89d 	b.w	d6d34 <__aeabi_atexit>
   d5bfa:	bf00      	nop
   d5bfc:	2003e640 	.word	0x2003e640
   d5c00:	2003e594 	.word	0x2003e594
   d5c04:	000d5be1 	.word	0x000d5be1

000d5c08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5c08:	4b01      	ldr	r3, [pc, #4]	; (d5c10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5c0a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5c0c:	4770      	bx	lr
   d5c0e:	bf00      	nop
   d5c10:	2003e530 	.word	0x2003e530

000d5c14 <serialEventRun>:
{
   d5c14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c16:	4b0b      	ldr	r3, [pc, #44]	; (d5c44 <serialEventRun+0x30>)
   d5c18:	b143      	cbz	r3, d5c2c <serialEventRun+0x18>
   d5c1a:	f000 fbfb 	bl	d6414 <_Z16_fetch_usbserialv>
   d5c1e:	6803      	ldr	r3, [r0, #0]
   d5c20:	691b      	ldr	r3, [r3, #16]
   d5c22:	4798      	blx	r3
   d5c24:	2800      	cmp	r0, #0
   d5c26:	dd01      	ble.n	d5c2c <serialEventRun+0x18>
        serialEvent();
   d5c28:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5c2c:	4b06      	ldr	r3, [pc, #24]	; (d5c48 <serialEventRun+0x34>)
   d5c2e:	b143      	cbz	r3, d5c42 <serialEventRun+0x2e>
   d5c30:	f000 fcc4 	bl	d65bc <_Z22__fetch_global_Serial1v>
   d5c34:	6803      	ldr	r3, [r0, #0]
   d5c36:	691b      	ldr	r3, [r3, #16]
   d5c38:	4798      	blx	r3
   d5c3a:	2800      	cmp	r0, #0
   d5c3c:	dd01      	ble.n	d5c42 <serialEventRun+0x2e>
        serialEvent1();
   d5c3e:	f3af 8000 	nop.w
}
   d5c42:	bd08      	pop	{r3, pc}
	...

000d5c4c <_post_loop>:
{
   d5c4c:	b508      	push	{r3, lr}
	serialEventRun();
   d5c4e:	f7ff ffe1 	bl	d5c14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5c52:	f7fe fc09 	bl	d4468 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5c56:	4b01      	ldr	r3, [pc, #4]	; (d5c5c <_post_loop+0x10>)
   d5c58:	6018      	str	r0, [r3, #0]
}
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	2003e7d4 	.word	0x2003e7d4

000d5c60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5c60:	4802      	ldr	r0, [pc, #8]	; (d5c6c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5c62:	4a03      	ldr	r2, [pc, #12]	; (d5c70 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5c64:	4903      	ldr	r1, [pc, #12]	; (d5c74 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5c66:	1a12      	subs	r2, r2, r0
   d5c68:	f001 b880 	b.w	d6d6c <memcpy>
   d5c6c:	2003f400 	.word	0x2003f400
   d5c70:	2003f404 	.word	0x2003f404
   d5c74:	000d7420 	.word	0x000d7420

000d5c78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5c78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5c7a:	2300      	movs	r3, #0
   d5c7c:	9300      	str	r3, [sp, #0]
   d5c7e:	461a      	mov	r2, r3
   d5c80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5c84:	f7fe fd42 	bl	d470c <system_ctrl_set_result>
}
   d5c88:	b003      	add	sp, #12
   d5c8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5c90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5c90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5c92:	8843      	ldrh	r3, [r0, #2]
   d5c94:	2b0a      	cmp	r3, #10
   d5c96:	d008      	beq.n	d5caa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5c98:	2b50      	cmp	r3, #80	; 0x50
   d5c9a:	d10b      	bne.n	d5cb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5c9c:	4b09      	ldr	r3, [pc, #36]	; (d5cc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5c9e:	681b      	ldr	r3, [r3, #0]
   d5ca0:	b14b      	cbz	r3, d5cb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5ca2:	b003      	add	sp, #12
   d5ca4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5ca8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5caa:	f7ff ffe5 	bl	d5c78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5cae:	b003      	add	sp, #12
   d5cb0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cb4:	2300      	movs	r3, #0
   d5cb6:	9300      	str	r3, [sp, #0]
   d5cb8:	461a      	mov	r2, r3
   d5cba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cbe:	f7fe fd25 	bl	d470c <system_ctrl_set_result>
}
   d5cc2:	e7f4      	b.n	d5cae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5cc4:	2003e654 	.word	0x2003e654

000d5cc8 <module_user_init_hook>:
{
   d5cc8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5cca:	4c12      	ldr	r4, [pc, #72]	; (d5d14 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5ccc:	4812      	ldr	r0, [pc, #72]	; (d5d18 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5cce:	4d13      	ldr	r5, [pc, #76]	; (d5d1c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5cd0:	2100      	movs	r1, #0
   d5cd2:	f7fe fdd5 	bl	d4880 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5cd6:	6823      	ldr	r3, [r4, #0]
   d5cd8:	42ab      	cmp	r3, r5
   d5cda:	4b11      	ldr	r3, [pc, #68]	; (d5d20 <module_user_init_hook+0x58>)
   d5cdc:	bf0c      	ite	eq
   d5cde:	2201      	moveq	r2, #1
   d5ce0:	2200      	movne	r2, #0
   d5ce2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5ce4:	d002      	beq.n	d5cec <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5ce6:	f7ff ffbb 	bl	d5c60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5cea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5cec:	f7fe fbac 	bl	d4448 <HAL_RNG_GetRandomNumber>
   d5cf0:	4604      	mov	r4, r0
    srand(seed);
   d5cf2:	f001 f86b 	bl	d6dcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5cf6:	4b0b      	ldr	r3, [pc, #44]	; (d5d24 <module_user_init_hook+0x5c>)
   d5cf8:	b113      	cbz	r3, d5d00 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d00:	2100      	movs	r1, #0
   d5d02:	4808      	ldr	r0, [pc, #32]	; (d5d24 <module_user_init_hook+0x5c>)
   d5d04:	f7fe fd7c 	bl	d4800 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d0c:	4806      	ldr	r0, [pc, #24]	; (d5d28 <module_user_init_hook+0x60>)
   d5d0e:	2100      	movs	r1, #0
   d5d10:	f7fe bcf2 	b.w	d46f8 <system_ctrl_set_app_request_handler>
   d5d14:	2003f400 	.word	0x2003f400
   d5d18:	000d5c09 	.word	0x000d5c09
   d5d1c:	9a271c1e 	.word	0x9a271c1e
   d5d20:	2003e650 	.word	0x2003e650
   d5d24:	00000000 	.word	0x00000000
   d5d28:	000d5c91 	.word	0x000d5c91

000d5d2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d2c:	4770      	bx	lr

000d5d2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5d2e:	2000      	movs	r0, #0
   d5d30:	4770      	bx	lr

000d5d32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d32:	b510      	push	{r4, lr}
   d5d34:	2110      	movs	r1, #16
   d5d36:	4604      	mov	r4, r0
   d5d38:	f001 f801 	bl	d6d3e <_ZdlPvj>
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	bd10      	pop	{r4, pc}

000d5d40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5d40:	b508      	push	{r3, lr}
      { delete this; }
   d5d42:	f7ff fff6 	bl	d5d32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5d46:	bd08      	pop	{r3, pc}

000d5d48 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5d48:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5d4a:	2200      	movs	r2, #0
   d5d4c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5d50:	6002      	str	r2, [r0, #0]
   d5d52:	8084      	strh	r4, [r0, #4]
   d5d54:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d56:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5d58:	680c      	ldr	r4, [r1, #0]
   d5d5a:	8085      	strh	r5, [r0, #4]
   d5d5c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d5e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5d60:	bd30      	pop	{r4, r5, pc}

000d5d62 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5d62:	b510      	push	{r4, lr}
   d5d64:	4604      	mov	r4, r0
    free((void*)msg_);
   d5d66:	6800      	ldr	r0, [r0, #0]
   d5d68:	f7fe fd5a 	bl	d4820 <free>
}
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	bd10      	pop	{r4, pc}

000d5d70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5d70:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5d72:	68c4      	ldr	r4, [r0, #12]
   d5d74:	b1f4      	cbz	r4, d5db4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5d76:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5d78:	2b02      	cmp	r3, #2
   d5d7a:	d103      	bne.n	d5d84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5d7c:	f104 000c 	add.w	r0, r4, #12
   d5d80:	f7ff ffef 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5d84:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5d86:	b135      	cbz	r5, d5d96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5d88:	4628      	mov	r0, r5
   d5d8a:	f7fe fe9c 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
   d5d8e:	2110      	movs	r1, #16
   d5d90:	4628      	mov	r0, r5
   d5d92:	f000 ffd4 	bl	d6d3e <_ZdlPvj>
   d5d96:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5d98:	b135      	cbz	r5, d5da8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5d9a:	4628      	mov	r0, r5
   d5d9c:	f7fe fe93 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
   d5da0:	2110      	movs	r1, #16
   d5da2:	4628      	mov	r0, r5
   d5da4:	f000 ffcb 	bl	d6d3e <_ZdlPvj>
   d5da8:	4620      	mov	r0, r4
   d5daa:	2114      	movs	r1, #20
   d5dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5db0:	f000 bfc5 	b.w	d6d3e <_ZdlPvj>
   d5db4:	bd38      	pop	{r3, r4, r5, pc}

000d5db6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5db8:	460e      	mov	r6, r1
   d5dba:	4604      	mov	r4, r0
   d5dbc:	f856 3b04 	ldr.w	r3, [r6], #4
   d5dc0:	9300      	str	r3, [sp, #0]
   d5dc2:	460d      	mov	r5, r1
   d5dc4:	a801      	add	r0, sp, #4
   d5dc6:	4631      	mov	r1, r6
   d5dc8:	f7fe fe98 	bl	d4afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5dcc:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5dce:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5dd0:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5dd2:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5dd4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5dd6:	2300      	movs	r3, #0
   d5dd8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5dda:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5ddc:	f7fe fe95 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5de0:	4630      	mov	r0, r6
   d5de2:	f7fe fe92 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5de6:	4628      	mov	r0, r5
   d5de8:	2108      	movs	r1, #8
   d5dea:	f000 ffa8 	bl	d6d3e <_ZdlPvj>
        return p;
    }
   d5dee:	4620      	mov	r0, r4
   d5df0:	b002      	add	sp, #8
   d5df2:	bd70      	pop	{r4, r5, r6, pc}

000d5df4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5df4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5df6:	b510      	push	{r4, lr}
      if (_M_empty())
   d5df8:	b90a      	cbnz	r2, d5dfe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5dfa:	f000 ffa6 	bl	d6d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d5dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e02:	68c3      	ldr	r3, [r0, #12]
   d5e04:	4718      	bx	r3

000d5e06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e06:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5e08:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5e0a:	f100 0110 	add.w	r1, r0, #16
   d5e0e:	f7ff fff1 	bl	d5df4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5e12:	bd08      	pop	{r3, pc}

000d5e14 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5e14:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5e16:	b510      	push	{r4, lr}
      if (_M_empty())
   d5e18:	b90a      	cbnz	r2, d5e1e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5e1a:	f000 ff96 	bl	d6d4a <_ZSt25__throw_bad_function_callv>
    }
   d5e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e22:	68c3      	ldr	r3, [r0, #12]
   d5e24:	4718      	bx	r3

000d5e26 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e26:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5e28:	6800      	ldr	r0, [r0, #0]
   d5e2a:	f100 0110 	add.w	r1, r0, #16
   d5e2e:	f7ff fff1 	bl	d5e14 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5e32:	bd08      	pop	{r3, pc}

000d5e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e34:	b538      	push	{r3, r4, r5, lr}
   d5e36:	2300      	movs	r3, #0
   d5e38:	4604      	mov	r4, r0
   d5e3a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e3c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e3e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e40:	f7fe f927 	bl	d4092 <_Znwj>
   d5e44:	b128      	cbz	r0, d5e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5e46:	2301      	movs	r3, #1
   d5e48:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5e4c:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5e4e:	6003      	str	r3, [r0, #0]
   d5e50:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e52:	6020      	str	r0, [r4, #0]
	}
   d5e54:	4620      	mov	r0, r4
   d5e56:	bd38      	pop	{r3, r4, r5, pc}
   d5e58:	000d71c4 	.word	0x000d71c4

000d5e5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5e5c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5e5e:	2300      	movs	r3, #0
   d5e60:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5e62:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5e64:	4604      	mov	r4, r0
   d5e66:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5e68:	b12b      	cbz	r3, d5e76 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e6a:	2202      	movs	r2, #2
   d5e6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e6e:	68eb      	ldr	r3, [r5, #12]
   d5e70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e72:	68ab      	ldr	r3, [r5, #8]
   d5e74:	60a3      	str	r3, [r4, #8]
    }
   d5e76:	4620      	mov	r0, r4
   d5e78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e7e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5e80:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5e82:	4668      	mov	r0, sp
   d5e84:	f7ff ff60 	bl	d5d48 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5e88:	f04f 0302 	mov.w	r3, #2
   d5e8c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5e90:	2a00      	cmp	r2, #0
   d5e92:	d103      	bne.n	d5e9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5e94:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5e98:	2900      	cmp	r1, #0
   d5e9a:	d1f7      	bne.n	d5e8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5e9c:	d125      	bne.n	d5eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5e9e:	f104 050c 	add.w	r5, r4, #12
   d5ea2:	4669      	mov	r1, sp
   d5ea4:	4628      	mov	r0, r5
   d5ea6:	f7ff ff4f 	bl	d5d48 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5eaa:	f3bf 8f5b 	dmb	ish
   d5eae:	2301      	movs	r3, #1
   d5eb0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5eb2:	2000      	movs	r0, #0
   d5eb4:	f104 0308 	add.w	r3, r4, #8
   d5eb8:	f3bf 8f5b 	dmb	ish
   d5ebc:	e853 6f00 	ldrex	r6, [r3]
   d5ec0:	e843 0200 	strex	r2, r0, [r3]
   d5ec4:	2a00      	cmp	r2, #0
   d5ec6:	d1f9      	bne.n	d5ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5ec8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5ecc:	b16e      	cbz	r6, d5eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5ece:	f7fe fc03 	bl	d46d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5ed2:	b178      	cbz	r0, d5ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5ed4:	4629      	mov	r1, r5
   d5ed6:	4630      	mov	r0, r6
   d5ed8:	f7ff ff8c 	bl	d5df4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5edc:	4630      	mov	r0, r6
   d5ede:	f7fe fdf2 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5ee2:	2110      	movs	r1, #16
   d5ee4:	4630      	mov	r0, r6
   d5ee6:	f000 ff2a 	bl	d6d3e <_ZdlPvj>
        p_->setError(std::move(error));
   d5eea:	4668      	mov	r0, sp
   d5eec:	f7ff ff39 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
    }
   d5ef0:	b009      	add	sp, #36	; 0x24
   d5ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ef4:	4631      	mov	r1, r6
   d5ef6:	a802      	add	r0, sp, #8
   d5ef8:	f7ff ffb0 	bl	d5e5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5efc:	68e0      	ldr	r0, [r4, #12]
   d5efe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5f02:	b108      	cbz	r0, d5f08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5f04:	f000 ffb0 	bl	d6e68 <strdup>
        type_(type) {
   d5f08:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f0a:	2010      	movs	r0, #16
   d5f0c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5f10:	f7fe f8bf 	bl	d4092 <_Znwj>
   d5f14:	4605      	mov	r5, r0
   d5f16:	b1e8      	cbz	r0, d5f54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5f18:	2700      	movs	r7, #0
   d5f1a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f1c:	2018      	movs	r0, #24
   d5f1e:	f7fe f8b8 	bl	d4092 <_Znwj>
   d5f22:	4604      	mov	r4, r0
   d5f24:	b188      	cbz	r0, d5f4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5f26:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5f28:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5f2a:	a802      	add	r0, sp, #8
   d5f2c:	f7fe fdf9 	bl	d4b22 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f30:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f32:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f34:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f36:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5f38:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f3a:	a906      	add	r1, sp, #24
   d5f3c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f3e:	60e3      	str	r3, [r4, #12]
   d5f40:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5f44:	9205      	str	r2, [sp, #20]
   d5f46:	f7ff feff 	bl	d5d48 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5f4a:	4b08      	ldr	r3, [pc, #32]	; (d5f6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5f4c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f4e:	4b08      	ldr	r3, [pc, #32]	; (d5f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f50:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5f52:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5f54:	a806      	add	r0, sp, #24
   d5f56:	f7ff ff04 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5f5a:	a802      	add	r0, sp, #8
   d5f5c:	f7fe fdb3 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f60:	2200      	movs	r2, #0
   d5f62:	4629      	mov	r1, r5
   d5f64:	4803      	ldr	r0, [pc, #12]	; (d5f74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5f66:	f7fe fbbf 	bl	d46e8 <application_thread_invoke>
   d5f6a:	e7b7      	b.n	d5edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5f6c:	000d5e07 	.word	0x000d5e07
   d5f70:	000d609d 	.word	0x000d609d
   d5f74:	000d6611 	.word	0x000d6611

000d5f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5f7c:	b08a      	sub	sp, #40	; 0x28
   d5f7e:	4605      	mov	r5, r0
   d5f80:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5f84:	460c      	mov	r4, r1
   d5f86:	4617      	mov	r7, r2
   d5f88:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5f8a:	f7fe fc29 	bl	d47e0 <spark_cloud_flag_connected>
   d5f8e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5f90:	4682      	mov	sl, r0
   d5f92:	bb38      	cbnz	r0, d5fe4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5f94:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5f98:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5f9a:	a905      	add	r1, sp, #20
   d5f9c:	4630      	mov	r0, r6
   d5f9e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5fa2:	f7ff fed1 	bl	d5d48 <_ZN8particle5ErrorC1EOS0_>
   d5fa6:	2014      	movs	r0, #20
   d5fa8:	f7fe f873 	bl	d4092 <_Znwj>
   d5fac:	4604      	mov	r4, r0
   d5fae:	b148      	cbz	r0, d5fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5fb0:	2302      	movs	r3, #2
   d5fb2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fb4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5fb6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fba:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5fbc:	4631      	mov	r1, r6
   d5fbe:	300c      	adds	r0, #12
   d5fc0:	f7ff fec2 	bl	d5d48 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5fc4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5fc6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5fc8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5fcc:	f7ff ff32 	bl	d5e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5fd0:	4630      	mov	r0, r6
   d5fd2:	f7ff fec6 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5fd6:	a805      	add	r0, sp, #20
   d5fd8:	f7ff fec3 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5fdc:	4628      	mov	r0, r5
   d5fde:	b00a      	add	sp, #40	; 0x28
   d5fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5fe4:	230c      	movs	r3, #12
   d5fe6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5fea:	2014      	movs	r0, #20
   d5fec:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5ff0:	9307      	str	r3, [sp, #28]
   d5ff2:	f7fe f84e 	bl	d4092 <_Znwj>
   d5ff6:	4601      	mov	r1, r0
   d5ff8:	b128      	cbz	r0, d6006 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5ffa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5ffe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6002:	f880 a001 	strb.w	sl, [r0, #1]
   d6006:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6008:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d600a:	f7ff ff13 	bl	d5e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d600e:	4b22      	ldr	r3, [pc, #136]	; (d6098 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6010:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6012:	2008      	movs	r0, #8
   d6014:	f7fe f83d 	bl	d4092 <_Znwj>
   d6018:	4682      	mov	sl, r0
   d601a:	b128      	cbz	r0, d6028 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d601c:	9b03      	ldr	r3, [sp, #12]
   d601e:	f840 3b04 	str.w	r3, [r0], #4
   d6022:	a904      	add	r1, sp, #16
   d6024:	f7fe fd6a 	bl	d4afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6028:	9600      	str	r6, [sp, #0]
   d602a:	fa5f f389 	uxtb.w	r3, r9
   d602e:	4642      	mov	r2, r8
   d6030:	4639      	mov	r1, r7
   d6032:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6034:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6038:	f7fe fbda 	bl	d47f0 <spark_send_event>
   d603c:	b9b8      	cbnz	r0, d606e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d603e:	9b03      	ldr	r3, [sp, #12]
   d6040:	785b      	ldrb	r3, [r3, #1]
   d6042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6046:	b993      	cbnz	r3, d606e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6048:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d604c:	a905      	add	r1, sp, #20
   d604e:	a803      	add	r0, sp, #12
   d6050:	9205      	str	r2, [sp, #20]
   d6052:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6056:	f7ff ff11 	bl	d5e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d605a:	a805      	add	r0, sp, #20
   d605c:	f7ff fe81 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6060:	a805      	add	r0, sp, #20
   d6062:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6064:	f7ff fea7 	bl	d5db6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6068:	a806      	add	r0, sp, #24
   d606a:	f7fe fd4e 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d606e:	9b03      	ldr	r3, [sp, #12]
   d6070:	9305      	str	r3, [sp, #20]
   d6072:	a904      	add	r1, sp, #16
   d6074:	a806      	add	r0, sp, #24
   d6076:	f7fe fd41 	bl	d4afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d607a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d607c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d607e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6080:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6082:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6084:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6086:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6088:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d608a:	f7fe fd3e 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d608e:	a804      	add	r0, sp, #16
   d6090:	f7fe fd3b 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6094:	e7a2      	b.n	d5fdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6096:	bf00      	nop
   d6098:	000d6161 	.word	0x000d6161

000d609c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d609c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d609e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60a0:	4605      	mov	r5, r0
	  switch (__op)
   d60a2:	d007      	beq.n	d60b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d60a4:	2a03      	cmp	r2, #3
   d60a6:	d018      	beq.n	d60da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d60a8:	2a01      	cmp	r2, #1
   d60aa:	d101      	bne.n	d60b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d60ac:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d60ae:	6003      	str	r3, [r0, #0]
	}
   d60b0:	2000      	movs	r0, #0
   d60b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d60b4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d60b6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d60b8:	f7fd ffeb 	bl	d4092 <_Znwj>
   d60bc:	4604      	mov	r4, r0
   d60be:	b150      	cbz	r0, d60d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d60c0:	4631      	mov	r1, r6
   d60c2:	f7ff fecb 	bl	d5e5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d60c6:	6930      	ldr	r0, [r6, #16]
   d60c8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d60cc:	b108      	cbz	r0, d60d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d60ce:	f000 fecb 	bl	d6e68 <strdup>
        type_(type) {
   d60d2:	6120      	str	r0, [r4, #16]
   d60d4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d60d6:	602c      	str	r4, [r5, #0]
	}
   d60d8:	e7ea      	b.n	d60b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d60da:	6804      	ldr	r4, [r0, #0]
   d60dc:	2c00      	cmp	r4, #0
   d60de:	d0e7      	beq.n	d60b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d60e0:	f104 0010 	add.w	r0, r4, #16
   d60e4:	f7ff fe3d 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d60e8:	4620      	mov	r0, r4
   d60ea:	f7fe fcec 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d60ee:	2118      	movs	r1, #24
   d60f0:	4620      	mov	r0, r4
   d60f2:	f000 fe24 	bl	d6d3e <_ZdlPvj>
   d60f6:	e7db      	b.n	d60b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d60f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d60f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d60fa:	2300      	movs	r3, #0
   d60fc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d60fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6100:	4604      	mov	r4, r0
   d6102:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6104:	b12b      	cbz	r3, d6112 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6106:	2202      	movs	r2, #2
   d6108:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d610a:	68eb      	ldr	r3, [r5, #12]
   d610c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d610e:	68ab      	ldr	r3, [r5, #8]
   d6110:	60a3      	str	r3, [r4, #8]
    }
   d6112:	4620      	mov	r0, r4
   d6114:	bd38      	pop	{r3, r4, r5, pc}

000d6116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6116:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6118:	b570      	push	{r4, r5, r6, lr}
   d611a:	4604      	mov	r4, r0
	  switch (__op)
   d611c:	d007      	beq.n	d612e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d611e:	2a03      	cmp	r2, #3
   d6120:	d012      	beq.n	d6148 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6122:	2a01      	cmp	r2, #1
   d6124:	d101      	bne.n	d612a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6126:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6128:	6003      	str	r3, [r0, #0]
	}
   d612a:	2000      	movs	r0, #0
   d612c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d612e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6130:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6132:	f7fd ffae 	bl	d4092 <_Znwj>
   d6136:	4605      	mov	r5, r0
   d6138:	b120      	cbz	r0, d6144 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d613a:	4631      	mov	r1, r6
   d613c:	f7ff ffdc 	bl	d60f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6140:	7c33      	ldrb	r3, [r6, #16]
   d6142:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6144:	6025      	str	r5, [r4, #0]
	}
   d6146:	e7f0      	b.n	d612a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6148:	6804      	ldr	r4, [r0, #0]
   d614a:	2c00      	cmp	r4, #0
   d614c:	d0ed      	beq.n	d612a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d614e:	4620      	mov	r0, r4
   d6150:	f7fe fcb9 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6154:	2114      	movs	r1, #20
   d6156:	4620      	mov	r0, r4
   d6158:	f000 fdf1 	bl	d6d3e <_ZdlPvj>
   d615c:	e7e5      	b.n	d612a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6160:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6162:	b089      	sub	sp, #36	; 0x24
   d6164:	4604      	mov	r4, r0
   d6166:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6168:	a801      	add	r0, sp, #4
   d616a:	4611      	mov	r1, r2
   d616c:	f7ff fe23 	bl	d5db6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6170:	b1a4      	cbz	r4, d619c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6172:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6174:	b11d      	cbz	r5, d617e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6176:	4628      	mov	r0, r5
   d6178:	f000 fe76 	bl	d6e68 <strdup>
   d617c:	4605      	mov	r5, r0
   d617e:	a801      	add	r0, sp, #4
   d6180:	a903      	add	r1, sp, #12
        type_(type) {
   d6182:	9503      	str	r5, [sp, #12]
   d6184:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6188:	f7ff fe78 	bl	d5e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d618c:	a803      	add	r0, sp, #12
   d618e:	f7ff fde8 	bl	d5d62 <_ZN8particle5ErrorD1Ev>
   d6192:	a802      	add	r0, sp, #8
   d6194:	f7fe fcb9 	bl	d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6198:	b009      	add	sp, #36	; 0x24
   d619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d619c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d619e:	2301      	movs	r3, #1
   d61a0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d61a4:	2a00      	cmp	r2, #0
   d61a6:	d103      	bne.n	d61b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d61a8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d61ac:	2900      	cmp	r1, #0
   d61ae:	d1f7      	bne.n	d61a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d61b0:	d1ef      	bne.n	d6192 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d61b2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d61b4:	f3bf 8f5b 	dmb	ish
   d61b8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d61ba:	1d2b      	adds	r3, r5, #4
   d61bc:	f3bf 8f5b 	dmb	ish
   d61c0:	e853 6f00 	ldrex	r6, [r3]
   d61c4:	e843 4200 	strex	r2, r4, [r3]
   d61c8:	2a00      	cmp	r2, #0
   d61ca:	d1f9      	bne.n	d61c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d61cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d61d0:	2e00      	cmp	r6, #0
   d61d2:	d0de      	beq.n	d6192 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d61d4:	4620      	mov	r0, r4
   d61d6:	f7fe fa7f 	bl	d46d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d61da:	4607      	mov	r7, r0
   d61dc:	b160      	cbz	r0, d61f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d61de:	f105 010c 	add.w	r1, r5, #12
   d61e2:	4630      	mov	r0, r6
   d61e4:	f7ff fe16 	bl	d5e14 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d61e8:	4630      	mov	r0, r6
   d61ea:	f7fe fc6c 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d61ee:	2110      	movs	r1, #16
   d61f0:	4630      	mov	r0, r6
   d61f2:	f000 fda4 	bl	d6d3e <_ZdlPvj>
   d61f6:	e7cc      	b.n	d6192 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d61f8:	4631      	mov	r1, r6
   d61fa:	a803      	add	r0, sp, #12
   d61fc:	f7ff ff7c 	bl	d60f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6200:	7b2b      	ldrb	r3, [r5, #12]
   d6202:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6206:	2010      	movs	r0, #16
   d6208:	f7fd ff43 	bl	d4092 <_Znwj>
   d620c:	4605      	mov	r5, r0
   d620e:	b1d0      	cbz	r0, d6246 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6210:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6212:	2014      	movs	r0, #20
   d6214:	f7fd ff3d 	bl	d4092 <_Znwj>
   d6218:	4604      	mov	r4, r0
   d621a:	b178      	cbz	r0, d623c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d621c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d621e:	4601      	mov	r1, r0
   d6220:	a803      	add	r0, sp, #12
   d6222:	f7fe fc7e 	bl	d4b22 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6226:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6228:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d622a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d622c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d622e:	9205      	str	r2, [sp, #20]
   d6230:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6232:	60e3      	str	r3, [r4, #12]
   d6234:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6238:	9206      	str	r2, [sp, #24]
   d623a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d623c:	4b06      	ldr	r3, [pc, #24]	; (d6258 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d623e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6240:	4b06      	ldr	r3, [pc, #24]	; (d625c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6242:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6244:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6246:	a803      	add	r0, sp, #12
   d6248:	f7fe fc3d 	bl	d4ac6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d624c:	2200      	movs	r2, #0
   d624e:	4629      	mov	r1, r5
   d6250:	4803      	ldr	r0, [pc, #12]	; (d6260 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6252:	f7fe fa49 	bl	d46e8 <application_thread_invoke>
   d6256:	e7c7      	b.n	d61e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6258:	000d5e27 	.word	0x000d5e27
   d625c:	000d6117 	.word	0x000d6117
   d6260:	000d6611 	.word	0x000d6611

000d6264 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6264:	4770      	bx	lr

000d6266 <_ZN9IPAddressD0Ev>:
   d6266:	b510      	push	{r4, lr}
   d6268:	2118      	movs	r1, #24
   d626a:	4604      	mov	r4, r0
   d626c:	f000 fd67 	bl	d6d3e <_ZdlPvj>
   d6270:	4620      	mov	r0, r4
   d6272:	bd10      	pop	{r4, pc}

000d6274 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6274:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6276:	7d03      	ldrb	r3, [r0, #20]
   d6278:	2b06      	cmp	r3, #6
{
   d627a:	b08d      	sub	sp, #52	; 0x34
   d627c:	460e      	mov	r6, r1
   d627e:	f100 0704 	add.w	r7, r0, #4
   d6282:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6286:	d012      	beq.n	d62ae <_ZNK9IPAddress7printToER5Print+0x3a>
   d6288:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d628c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6290:	220a      	movs	r2, #10
   d6292:	4630      	mov	r0, r6
   d6294:	f7fe fca3 	bl	d4bde <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6298:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d629a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d629c:	d019      	beq.n	d62d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d629e:	2c00      	cmp	r4, #0
   d62a0:	d0f4      	beq.n	d628c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d62a2:	212e      	movs	r1, #46	; 0x2e
   d62a4:	4630      	mov	r0, r6
   d62a6:	f7fe fc8b 	bl	d4bc0 <_ZN5Print5printEc>
   d62aa:	4404      	add	r4, r0
   d62ac:	e7ee      	b.n	d628c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62ae:	232f      	movs	r3, #47	; 0x2f
   d62b0:	466a      	mov	r2, sp
   d62b2:	4639      	mov	r1, r7
   d62b4:	200a      	movs	r0, #10
		buf[0] = 0;
   d62b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62ba:	f7fe f8fd 	bl	d44b8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d62be:	4668      	mov	r0, sp
   d62c0:	f000 fdef 	bl	d6ea2 <strlen>
   d62c4:	6833      	ldr	r3, [r6, #0]
   d62c6:	4602      	mov	r2, r0
   d62c8:	68db      	ldr	r3, [r3, #12]
   d62ca:	4669      	mov	r1, sp
   d62cc:	4630      	mov	r0, r6
   d62ce:	4798      	blx	r3
   d62d0:	4604      	mov	r4, r0
    }
    return n;
}
   d62d2:	4620      	mov	r0, r4
   d62d4:	b00d      	add	sp, #52	; 0x34
   d62d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d62d8:	b510      	push	{r4, lr}
   d62da:	4b05      	ldr	r3, [pc, #20]	; (d62f0 <_ZN9IPAddressC1Ev+0x18>)
   d62dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d62de:	2211      	movs	r2, #17
   d62e0:	f840 3b04 	str.w	r3, [r0], #4
   d62e4:	2100      	movs	r1, #0
   d62e6:	f000 fd69 	bl	d6dbc <memset>
}
   d62ea:	4620      	mov	r0, r4
   d62ec:	bd10      	pop	{r4, pc}
   d62ee:	bf00      	nop
   d62f0:	000d71e0 	.word	0x000d71e0

000d62f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d62f4:	4603      	mov	r3, r0
   d62f6:	4a07      	ldr	r2, [pc, #28]	; (d6314 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d62f8:	b510      	push	{r4, lr}
   d62fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d62fe:	f101 0210 	add.w	r2, r1, #16
   d6302:	f851 4b04 	ldr.w	r4, [r1], #4
   d6306:	f843 4b04 	str.w	r4, [r3], #4
   d630a:	4291      	cmp	r1, r2
   d630c:	d1f9      	bne.n	d6302 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d630e:	780a      	ldrb	r2, [r1, #0]
   d6310:	701a      	strb	r2, [r3, #0]
}
   d6312:	bd10      	pop	{r4, pc}
   d6314:	000d71e0 	.word	0x000d71e0

000d6318 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6318:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d631a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d631e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6322:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6326:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d632a:	2304      	movs	r3, #4
   d632c:	6041      	str	r1, [r0, #4]
   d632e:	7503      	strb	r3, [r0, #20]
}
   d6330:	bd10      	pop	{r4, pc}
	...

000d6334 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6334:	b513      	push	{r0, r1, r4, lr}
   d6336:	4b05      	ldr	r3, [pc, #20]	; (d634c <_ZN9IPAddressC1EPKh+0x18>)
   d6338:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d633a:	78cb      	ldrb	r3, [r1, #3]
   d633c:	9300      	str	r3, [sp, #0]
   d633e:	788b      	ldrb	r3, [r1, #2]
   d6340:	784a      	ldrb	r2, [r1, #1]
   d6342:	7809      	ldrb	r1, [r1, #0]
   d6344:	f7ff ffe8 	bl	d6318 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6348:	b002      	add	sp, #8
   d634a:	bd10      	pop	{r4, pc}
   d634c:	000d71e0 	.word	0x000d71e0

000d6350 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6350:	7441      	strb	r1, [r0, #17]
}
   d6352:	4770      	bx	lr

000d6354 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6354:	4770      	bx	lr

000d6356 <_ZN9USBSerial4readEv>:
{
   d6356:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6358:	2100      	movs	r1, #0
   d635a:	7c00      	ldrb	r0, [r0, #16]
   d635c:	f7fe f974 	bl	d4648 <HAL_USB_USART_Receive_Data>
}
   d6360:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6364:	bd08      	pop	{r3, pc}

000d6366 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6366:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6368:	2101      	movs	r1, #1
   d636a:	7c00      	ldrb	r0, [r0, #16]
   d636c:	f7fe f96c 	bl	d4648 <HAL_USB_USART_Receive_Data>
}
   d6370:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6374:	bd08      	pop	{r3, pc}

000d6376 <_ZN9USBSerial17availableForWriteEv>:
{
   d6376:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6378:	7c00      	ldrb	r0, [r0, #16]
   d637a:	f7fe f95d 	bl	d4638 <HAL_USB_USART_Available_Data_For_Write>
}
   d637e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6382:	bd08      	pop	{r3, pc}

000d6384 <_ZN9USBSerial9availableEv>:
{
   d6384:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6386:	7c00      	ldrb	r0, [r0, #16]
   d6388:	f7fe f94e 	bl	d4628 <HAL_USB_USART_Available_Data>
}
   d638c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6390:	bd08      	pop	{r3, pc}

000d6392 <_ZN9USBSerial5writeEh>:
{
   d6392:	b513      	push	{r0, r1, r4, lr}
   d6394:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6396:	7c00      	ldrb	r0, [r0, #16]
{
   d6398:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d639a:	f7fe f94d 	bl	d4638 <HAL_USB_USART_Available_Data_For_Write>
   d639e:	2800      	cmp	r0, #0
   d63a0:	9901      	ldr	r1, [sp, #4]
   d63a2:	dc01      	bgt.n	d63a8 <_ZN9USBSerial5writeEh+0x16>
   d63a4:	7c60      	ldrb	r0, [r4, #17]
   d63a6:	b120      	cbz	r0, d63b2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d63a8:	7c20      	ldrb	r0, [r4, #16]
   d63aa:	f7fe f955 	bl	d4658 <HAL_USB_USART_Send_Data>
   d63ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d63b2:	b002      	add	sp, #8
   d63b4:	bd10      	pop	{r4, pc}

000d63b6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d63b6:	7c00      	ldrb	r0, [r0, #16]
   d63b8:	f7fe b956 	b.w	d4668 <HAL_USB_USART_Flush_Data>

000d63bc <_ZN9USBSerialD0Ev>:
   d63bc:	b510      	push	{r4, lr}
   d63be:	2114      	movs	r1, #20
   d63c0:	4604      	mov	r4, r0
   d63c2:	f000 fcbc 	bl	d6d3e <_ZdlPvj>
   d63c6:	4620      	mov	r0, r4
   d63c8:	bd10      	pop	{r4, pc}
	...

000d63cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d63cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d63ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63d2:	4604      	mov	r4, r0
   d63d4:	4608      	mov	r0, r1
   d63d6:	2100      	movs	r1, #0
   d63d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d63dc:	4b04      	ldr	r3, [pc, #16]	; (d63f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d63de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d63e0:	2301      	movs	r3, #1
  _serial = serial;
   d63e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d63e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d63e6:	4611      	mov	r1, r2
   d63e8:	f7fe f906 	bl	d45f8 <HAL_USB_USART_Init>
}
   d63ec:	4620      	mov	r0, r4
   d63ee:	bd10      	pop	{r4, pc}
   d63f0:	000d71f4 	.word	0x000d71f4

000d63f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d63f4:	7c00      	ldrb	r0, [r0, #16]
   d63f6:	2200      	movs	r2, #0
   d63f8:	f7fe b906 	b.w	d4608 <HAL_USB_USART_Begin>

000d63fc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d63fc:	7c00      	ldrb	r0, [r0, #16]
   d63fe:	f7fe b90b 	b.w	d4618 <HAL_USB_USART_End>

000d6402 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6402:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6404:	2214      	movs	r2, #20
{
   d6406:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6408:	2100      	movs	r1, #0
   d640a:	f000 fcd7 	bl	d6dbc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d640e:	4620      	mov	r0, r4
   d6410:	bd10      	pop	{r4, pc}
	...

000d6414 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6414:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6416:	4c10      	ldr	r4, [pc, #64]	; (d6458 <_Z16_fetch_usbserialv+0x44>)
{
   d6418:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d641a:	a803      	add	r0, sp, #12
   d641c:	f7ff fff1 	bl	d6402 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6420:	7821      	ldrb	r1, [r4, #0]
   d6422:	f3bf 8f5b 	dmb	ish
   d6426:	f011 0101 	ands.w	r1, r1, #1
   d642a:	d111      	bne.n	d6450 <_Z16_fetch_usbserialv+0x3c>
   d642c:	4620      	mov	r0, r4
   d642e:	9101      	str	r1, [sp, #4]
   d6430:	f7fd fe40 	bl	d40b4 <__cxa_guard_acquire>
   d6434:	9901      	ldr	r1, [sp, #4]
   d6436:	b158      	cbz	r0, d6450 <_Z16_fetch_usbserialv+0x3c>
   d6438:	aa03      	add	r2, sp, #12
   d643a:	4808      	ldr	r0, [pc, #32]	; (d645c <_Z16_fetch_usbserialv+0x48>)
   d643c:	f7ff ffc6 	bl	d63cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6440:	4620      	mov	r0, r4
   d6442:	f7fd fe3c 	bl	d40be <__cxa_guard_release>
   d6446:	4a06      	ldr	r2, [pc, #24]	; (d6460 <_Z16_fetch_usbserialv+0x4c>)
   d6448:	4906      	ldr	r1, [pc, #24]	; (d6464 <_Z16_fetch_usbserialv+0x50>)
   d644a:	4804      	ldr	r0, [pc, #16]	; (d645c <_Z16_fetch_usbserialv+0x48>)
   d644c:	f000 fc72 	bl	d6d34 <__aeabi_atexit>
	return _usbserial;
}
   d6450:	4802      	ldr	r0, [pc, #8]	; (d645c <_Z16_fetch_usbserialv+0x48>)
   d6452:	b008      	add	sp, #32
   d6454:	bd10      	pop	{r4, pc}
   d6456:	bf00      	nop
   d6458:	2003e658 	.word	0x2003e658
   d645c:	2003e65c 	.word	0x2003e65c
   d6460:	2003e594 	.word	0x2003e594
   d6464:	000d6355 	.word	0x000d6355

000d6468 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6468:	2200      	movs	r2, #0
   d646a:	6840      	ldr	r0, [r0, #4]
   d646c:	4611      	mov	r1, r2
   d646e:	f7fe b96f 	b.w	d4750 <network_ready>

000d6472 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6472:	2200      	movs	r2, #0
   d6474:	6840      	ldr	r0, [r0, #4]
   d6476:	4611      	mov	r1, r2
   d6478:	f7fe b98a 	b.w	d4790 <network_listening>

000d647c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d647c:	2200      	movs	r2, #0
   d647e:	6840      	ldr	r0, [r0, #4]
   d6480:	4611      	mov	r1, r2
   d6482:	f7fe b995 	b.w	d47b0 <network_get_listen_timeout>

000d6486 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6486:	6840      	ldr	r0, [r0, #4]
   d6488:	2200      	movs	r2, #0
   d648a:	f7fe b989 	b.w	d47a0 <network_set_listen_timeout>

000d648e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d648e:	6840      	ldr	r0, [r0, #4]
   d6490:	2200      	movs	r2, #0
   d6492:	f081 0101 	eor.w	r1, r1, #1
   d6496:	f7fe b973 	b.w	d4780 <network_listen>

000d649a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d649a:	2300      	movs	r3, #0
   d649c:	6840      	ldr	r0, [r0, #4]
   d649e:	461a      	mov	r2, r3
   d64a0:	4619      	mov	r1, r3
   d64a2:	f7fe b965 	b.w	d4770 <network_off>

000d64a6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d64a6:	2300      	movs	r3, #0
   d64a8:	6840      	ldr	r0, [r0, #4]
   d64aa:	461a      	mov	r2, r3
   d64ac:	4619      	mov	r1, r3
   d64ae:	f7fe b957 	b.w	d4760 <network_on>

000d64b2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d64b2:	2200      	movs	r2, #0
   d64b4:	6840      	ldr	r0, [r0, #4]
   d64b6:	4611      	mov	r1, r2
   d64b8:	f7fe b93a 	b.w	d4730 <network_connecting>

000d64bc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64bc:	6840      	ldr	r0, [r0, #4]
   d64be:	2200      	movs	r2, #0
   d64c0:	2102      	movs	r1, #2
   d64c2:	f7fe b93d 	b.w	d4740 <network_disconnect>

000d64c6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d64c6:	2300      	movs	r3, #0
   d64c8:	6840      	ldr	r0, [r0, #4]
   d64ca:	461a      	mov	r2, r3
   d64cc:	f7fe b928 	b.w	d4720 <network_connect>

000d64d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d64d0:	4b08      	ldr	r3, [pc, #32]	; (d64f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d64d2:	b510      	push	{r4, lr}
   d64d4:	2428      	movs	r4, #40	; 0x28
   d64d6:	4622      	mov	r2, r4
   d64d8:	4618      	mov	r0, r3
   d64da:	2100      	movs	r1, #0
   d64dc:	f000 fc6e 	bl	d6dbc <memset>
   d64e0:	4b05      	ldr	r3, [pc, #20]	; (d64f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d64e2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d64e4:	f04f 32ff 	mov.w	r2, #4294967295
   d64e8:	6042      	str	r2, [r0, #4]
   d64ea:	2204      	movs	r2, #4
   d64ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d64ee:	4a03      	ldr	r2, [pc, #12]	; (d64fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d64f0:	601a      	str	r2, [r3, #0]
   d64f2:	bd10      	pop	{r4, pc}
   d64f4:	2003e678 	.word	0x2003e678
   d64f8:	2003e670 	.word	0x2003e670
   d64fc:	000d7224 	.word	0x000d7224

000d6500 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6500:	4770      	bx	lr

000d6502 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6502:	7441      	strb	r1, [r0, #17]
}
   d6504:	4770      	bx	lr

000d6506 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6506:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6508:	7c00      	ldrb	r0, [r0, #16]
   d650a:	f7fe f81d 	bl	d4548 <hal_usart_available_data_for_write>
}
   d650e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6512:	bd08      	pop	{r3, pc}

000d6514 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6514:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6516:	7c00      	ldrb	r0, [r0, #16]
   d6518:	f7fd ffee 	bl	d44f8 <hal_usart_available>
}
   d651c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6520:	bd08      	pop	{r3, pc}

000d6522 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6522:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6524:	7c00      	ldrb	r0, [r0, #16]
   d6526:	f7fd fff7 	bl	d4518 <hal_usart_peek>
}
   d652a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d652e:	bd08      	pop	{r3, pc}

000d6530 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6530:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6532:	7c00      	ldrb	r0, [r0, #16]
   d6534:	f7fd ffe8 	bl	d4508 <hal_usart_read>
}
   d6538:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d653c:	bd08      	pop	{r3, pc}

000d653e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d653e:	7c00      	ldrb	r0, [r0, #16]
   d6540:	f7fd bff2 	b.w	d4528 <hal_usart_flush>

000d6544 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6544:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6546:	7c45      	ldrb	r5, [r0, #17]
{
   d6548:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d654a:	b12d      	cbz	r5, d6558 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d654c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d654e:	b003      	add	sp, #12
   d6550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6554:	f7fd bfc8 	b.w	d44e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6558:	7c00      	ldrb	r0, [r0, #16]
   d655a:	9101      	str	r1, [sp, #4]
   d655c:	f7fd fff4 	bl	d4548 <hal_usart_available_data_for_write>
   d6560:	2800      	cmp	r0, #0
   d6562:	9901      	ldr	r1, [sp, #4]
   d6564:	dcf2      	bgt.n	d654c <_ZN11USARTSerial5writeEh+0x8>
}
   d6566:	4628      	mov	r0, r5
   d6568:	b003      	add	sp, #12
   d656a:	bd30      	pop	{r4, r5, pc}

000d656c <_ZN11USARTSerialD0Ev>:
   d656c:	b510      	push	{r4, lr}
   d656e:	2114      	movs	r1, #20
   d6570:	4604      	mov	r4, r0
   d6572:	f000 fbe4 	bl	d6d3e <_ZdlPvj>
   d6576:	4620      	mov	r0, r4
   d6578:	bd10      	pop	{r4, pc}
	...

000d657c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d657c:	b510      	push	{r4, lr}
   d657e:	f04f 0c00 	mov.w	ip, #0
   d6582:	4604      	mov	r4, r0
   d6584:	4608      	mov	r0, r1
   d6586:	4611      	mov	r1, r2
   d6588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d658c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6590:	4a04      	ldr	r2, [pc, #16]	; (d65a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6592:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6594:	2201      	movs	r2, #1
  _serial = serial;
   d6596:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6598:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d659a:	461a      	mov	r2, r3
   d659c:	f7fd ff94 	bl	d44c8 <hal_usart_init>
}
   d65a0:	4620      	mov	r0, r4
   d65a2:	bd10      	pop	{r4, pc}
   d65a4:	000d7260 	.word	0x000d7260

000d65a8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d65a8:	7c00      	ldrb	r0, [r0, #16]
   d65aa:	2300      	movs	r3, #0
   d65ac:	f7fd bfd4 	b.w	d4558 <hal_usart_begin_config>

000d65b0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d65b0:	2200      	movs	r2, #0
   d65b2:	f7ff bff9 	b.w	d65a8 <_ZN11USARTSerial5beginEmm>

000d65b6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d65b6:	7c00      	ldrb	r0, [r0, #16]
   d65b8:	f7fd bf8e 	b.w	d44d8 <hal_usart_end>

000d65bc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d65bc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d65be:	4c0e      	ldr	r4, [pc, #56]	; (d65f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d65c0:	7821      	ldrb	r1, [r4, #0]
   d65c2:	f3bf 8f5b 	dmb	ish
   d65c6:	f011 0101 	ands.w	r1, r1, #1
   d65ca:	d112      	bne.n	d65f2 <_Z22__fetch_global_Serial1v+0x36>
   d65cc:	4620      	mov	r0, r4
   d65ce:	9101      	str	r1, [sp, #4]
   d65d0:	f7fd fd70 	bl	d40b4 <__cxa_guard_acquire>
   d65d4:	9901      	ldr	r1, [sp, #4]
   d65d6:	b160      	cbz	r0, d65f2 <_Z22__fetch_global_Serial1v+0x36>
   d65d8:	4a08      	ldr	r2, [pc, #32]	; (d65fc <_Z22__fetch_global_Serial1v+0x40>)
   d65da:	4b09      	ldr	r3, [pc, #36]	; (d6600 <_Z22__fetch_global_Serial1v+0x44>)
   d65dc:	4809      	ldr	r0, [pc, #36]	; (d6604 <_Z22__fetch_global_Serial1v+0x48>)
   d65de:	f7ff ffcd 	bl	d657c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d65e2:	4620      	mov	r0, r4
   d65e4:	f7fd fd6b 	bl	d40be <__cxa_guard_release>
   d65e8:	4a07      	ldr	r2, [pc, #28]	; (d6608 <_Z22__fetch_global_Serial1v+0x4c>)
   d65ea:	4908      	ldr	r1, [pc, #32]	; (d660c <_Z22__fetch_global_Serial1v+0x50>)
   d65ec:	4805      	ldr	r0, [pc, #20]	; (d6604 <_Z22__fetch_global_Serial1v+0x48>)
   d65ee:	f000 fba1 	bl	d6d34 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d65f2:	4804      	ldr	r0, [pc, #16]	; (d6604 <_Z22__fetch_global_Serial1v+0x48>)
   d65f4:	b002      	add	sp, #8
   d65f6:	bd10      	pop	{r4, pc}
   d65f8:	2003e6a0 	.word	0x2003e6a0
   d65fc:	2003e6a4 	.word	0x2003e6a4
   d6600:	2003e728 	.word	0x2003e728
   d6604:	2003e7ac 	.word	0x2003e7ac
   d6608:	2003e594 	.word	0x2003e594
   d660c:	000d6501 	.word	0x000d6501

000d6610 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6610:	b510      	push	{r4, lr}
      if (_M_empty())
   d6612:	6883      	ldr	r3, [r0, #8]
   d6614:	4604      	mov	r4, r0
   d6616:	b90b      	cbnz	r3, d661c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6618:	f000 fb97 	bl	d6d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d661c:	68c3      	ldr	r3, [r0, #12]
   d661e:	4798      	blx	r3
      if (_M_manager)
   d6620:	68a3      	ldr	r3, [r4, #8]
   d6622:	b11b      	cbz	r3, d662c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6624:	2203      	movs	r2, #3
   d6626:	4621      	mov	r1, r4
   d6628:	4620      	mov	r0, r4
   d662a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d662c:	4620      	mov	r0, r4
   d662e:	2110      	movs	r1, #16
}
   d6630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6634:	f000 bb83 	b.w	d6d3e <_ZdlPvj>

000d6638 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6638:	4770      	bx	lr

000d663a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d663a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d663c:	4606      	mov	r6, r0
   d663e:	4615      	mov	r5, r2
   d6640:	460c      	mov	r4, r1
   d6642:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6644:	42bc      	cmp	r4, r7
   d6646:	d006      	beq.n	d6656 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6648:	6833      	ldr	r3, [r6, #0]
   d664a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d664e:	689b      	ldr	r3, [r3, #8]
   d6650:	4630      	mov	r0, r6
   d6652:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6654:	e7f6      	b.n	d6644 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6656:	4628      	mov	r0, r5
   d6658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d665a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d665a:	7c00      	ldrb	r0, [r0, #16]
   d665c:	2200      	movs	r2, #0
   d665e:	f7fd bf83 	b.w	d4568 <hal_i2c_write>

000d6662 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6662:	7c00      	ldrb	r0, [r0, #16]
   d6664:	2100      	movs	r1, #0
   d6666:	f7fd bf87 	b.w	d4578 <hal_i2c_available>

000d666a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d666a:	7c00      	ldrb	r0, [r0, #16]
   d666c:	2100      	movs	r1, #0
   d666e:	f7fd bf8b 	b.w	d4588 <hal_i2c_read>

000d6672 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6672:	7c00      	ldrb	r0, [r0, #16]
   d6674:	2100      	movs	r1, #0
   d6676:	f7fd bf8f 	b.w	d4598 <hal_i2c_peek>

000d667a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d667a:	7c00      	ldrb	r0, [r0, #16]
   d667c:	2100      	movs	r1, #0
   d667e:	f7fd bf93 	b.w	d45a8 <hal_i2c_flush>

000d6682 <_ZN7TwoWireD0Ev>:
   d6682:	b510      	push	{r4, lr}
   d6684:	2114      	movs	r1, #20
   d6686:	4604      	mov	r4, r0
   d6688:	f000 fb59 	bl	d6d3e <_ZdlPvj>
   d668c:	4620      	mov	r0, r4
   d668e:	bd10      	pop	{r4, pc}

000d6690 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6690:	b510      	push	{r4, lr}
   d6692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6696:	4604      	mov	r4, r0
   d6698:	4608      	mov	r0, r1
   d669a:	2100      	movs	r1, #0
   d669c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d66a0:	4b03      	ldr	r3, [pc, #12]	; (d66b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d66a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d66a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d66a6:	4611      	mov	r1, r2
   d66a8:	f7fd ff8e 	bl	d45c8 <hal_i2c_init>
}
   d66ac:	4620      	mov	r0, r4
   d66ae:	bd10      	pop	{r4, pc}
   d66b0:	000d7290 	.word	0x000d7290

000d66b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d66b4:	2300      	movs	r3, #0
   d66b6:	6840      	ldr	r0, [r0, #4]
   d66b8:	461a      	mov	r2, r3
   d66ba:	f7fe b831 	b.w	d4720 <network_connect>

000d66be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d66be:	6840      	ldr	r0, [r0, #4]
   d66c0:	2200      	movs	r2, #0
   d66c2:	2102      	movs	r1, #2
   d66c4:	f7fe b83c 	b.w	d4740 <network_disconnect>

000d66c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d66c8:	2200      	movs	r2, #0
   d66ca:	6840      	ldr	r0, [r0, #4]
   d66cc:	4611      	mov	r1, r2
   d66ce:	f7fe b82f 	b.w	d4730 <network_connecting>

000d66d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d66d2:	2200      	movs	r2, #0
   d66d4:	6840      	ldr	r0, [r0, #4]
   d66d6:	4611      	mov	r1, r2
   d66d8:	f7fe b83a 	b.w	d4750 <network_ready>

000d66dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d66dc:	2300      	movs	r3, #0
   d66de:	6840      	ldr	r0, [r0, #4]
   d66e0:	461a      	mov	r2, r3
   d66e2:	4619      	mov	r1, r3
   d66e4:	f7fe b83c 	b.w	d4760 <network_on>

000d66e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d66e8:	2300      	movs	r3, #0
   d66ea:	6840      	ldr	r0, [r0, #4]
   d66ec:	461a      	mov	r2, r3
   d66ee:	4619      	mov	r1, r3
   d66f0:	f7fe b83e 	b.w	d4770 <network_off>

000d66f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d66f4:	6840      	ldr	r0, [r0, #4]
   d66f6:	2100      	movs	r1, #0
   d66f8:	f7fe b862 	b.w	d47c0 <network_is_on>

000d66fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d66fc:	6840      	ldr	r0, [r0, #4]
   d66fe:	2100      	movs	r1, #0
   d6700:	f7fe b866 	b.w	d47d0 <network_is_off>

000d6704 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6704:	6840      	ldr	r0, [r0, #4]
   d6706:	2200      	movs	r2, #0
   d6708:	f081 0101 	eor.w	r1, r1, #1
   d670c:	f7fe b838 	b.w	d4780 <network_listen>

000d6710 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6710:	6840      	ldr	r0, [r0, #4]
   d6712:	2200      	movs	r2, #0
   d6714:	f7fe b844 	b.w	d47a0 <network_set_listen_timeout>

000d6718 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6718:	2200      	movs	r2, #0
   d671a:	6840      	ldr	r0, [r0, #4]
   d671c:	4611      	mov	r1, r2
   d671e:	f7fe b847 	b.w	d47b0 <network_get_listen_timeout>

000d6722 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6722:	2200      	movs	r2, #0
   d6724:	6840      	ldr	r0, [r0, #4]
   d6726:	4611      	mov	r1, r2
   d6728:	f7fe b832 	b.w	d4790 <network_listening>

000d672c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d672c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6730:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6732:	b095      	sub	sp, #84	; 0x54
   d6734:	4616      	mov	r6, r2
   d6736:	460d      	mov	r5, r1
   d6738:	4607      	mov	r7, r0
    IPAddress addr;
   d673a:	f7ff fdcd 	bl	d62d8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d673e:	4621      	mov	r1, r4
   d6740:	2218      	movs	r2, #24
   d6742:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6744:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6746:	f000 fb39 	bl	d6dbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d674a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d674c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6750:	4621      	mov	r1, r4
   d6752:	466b      	mov	r3, sp
   d6754:	aa0c      	add	r2, sp, #48	; 0x30
   d6756:	4630      	mov	r0, r6
   d6758:	f7fd fe56 	bl	d4408 <netdb_getaddrinfo>
    if (!r) {
   d675c:	4604      	mov	r4, r0
   d675e:	2800      	cmp	r0, #0
   d6760:	d14c      	bne.n	d67fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6762:	4602      	mov	r2, r0
   d6764:	2101      	movs	r1, #1
   d6766:	6868      	ldr	r0, [r5, #4]
   d6768:	f7fd fff2 	bl	d4750 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d676c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d676e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6770:	4622      	mov	r2, r4
   d6772:	6868      	ldr	r0, [r5, #4]
   d6774:	f7fd ffec 	bl	d4750 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6778:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d677a:	4681      	mov	r9, r0
        bool ok = false;
   d677c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d677e:	2e00      	cmp	r6, #0
   d6780:	d03c      	beq.n	d67fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6782:	2900      	cmp	r1, #0
   d6784:	d13a      	bne.n	d67fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6786:	6873      	ldr	r3, [r6, #4]
   d6788:	2b02      	cmp	r3, #2
   d678a:	d003      	beq.n	d6794 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d678c:	2b0a      	cmp	r3, #10
   d678e:	d011      	beq.n	d67b4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6790:	69f6      	ldr	r6, [r6, #28]
   d6792:	e7f4      	b.n	d677e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6794:	f1b8 0f00 	cmp.w	r8, #0
   d6798:	d00a      	beq.n	d67b0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d679a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d679c:	a806      	add	r0, sp, #24
   d679e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d67a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d67a2:	f7ff fdc7 	bl	d6334 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d67a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67a8:	1d3c      	adds	r4, r7, #4
   d67aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67ac:	682b      	ldr	r3, [r5, #0]
   d67ae:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d67b0:	4641      	mov	r1, r8
   d67b2:	e7ed      	b.n	d6790 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d67b4:	f1b9 0f00 	cmp.w	r9, #0
   d67b8:	d101      	bne.n	d67be <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d67ba:	4649      	mov	r1, r9
   d67bc:	e7e8      	b.n	d6790 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d67be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d67c0:	2210      	movs	r2, #16
   d67c2:	a801      	add	r0, sp, #4
   d67c4:	f000 fafa 	bl	d6dbc <memset>
                    a.v = 6;
   d67c8:	2306      	movs	r3, #6
   d67ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d67ce:	ad01      	add	r5, sp, #4
   d67d0:	f104 0308 	add.w	r3, r4, #8
   d67d4:	3418      	adds	r4, #24
   d67d6:	6818      	ldr	r0, [r3, #0]
   d67d8:	6859      	ldr	r1, [r3, #4]
   d67da:	462a      	mov	r2, r5
   d67dc:	c203      	stmia	r2!, {r0, r1}
   d67de:	3308      	adds	r3, #8
   d67e0:	42a3      	cmp	r3, r4
   d67e2:	4615      	mov	r5, r2
   d67e4:	d1f7      	bne.n	d67d6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d67e6:	a901      	add	r1, sp, #4
   d67e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d67ea:	ad07      	add	r5, sp, #28
   d67ec:	f7ff fd82 	bl	d62f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d67f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67f2:	1d3c      	adds	r4, r7, #4
   d67f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67f6:	682b      	ldr	r3, [r5, #0]
   d67f8:	7023      	strb	r3, [r4, #0]
   d67fa:	e7de      	b.n	d67ba <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d67fc:	9800      	ldr	r0, [sp, #0]
   d67fe:	f7fd fdfb 	bl	d43f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6802:	4638      	mov	r0, r7
   d6804:	b015      	add	sp, #84	; 0x54
   d6806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d680c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d680c:	4b02      	ldr	r3, [pc, #8]	; (d6818 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d680e:	4a03      	ldr	r2, [pc, #12]	; (d681c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6810:	601a      	str	r2, [r3, #0]
   d6812:	2200      	movs	r2, #0
   d6814:	605a      	str	r2, [r3, #4]

} // spark
   d6816:	4770      	bx	lr
   d6818:	2003e7c0 	.word	0x2003e7c0
   d681c:	000d72b8 	.word	0x000d72b8

000d6820 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6820:	f100 0310 	add.w	r3, r0, #16
   d6824:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6826:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d682a:	2901      	cmp	r1, #1
   d682c:	4618      	mov	r0, r3
   d682e:	d108      	bne.n	d6842 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6830:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6834:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6838:	3a01      	subs	r2, #1
   d683a:	f103 0310 	add.w	r3, r3, #16
   d683e:	d1f2      	bne.n	d6826 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6840:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6842:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6844:	bf04      	itt	eq
   d6846:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d684a:	1852      	addeq	r2, r2, r1
   d684c:	e7f4      	b.n	d6838 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d684e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d684e:	b40e      	push	{r1, r2, r3}
   d6850:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6852:	b088      	sub	sp, #32
   d6854:	af00      	add	r7, sp, #0
   d6856:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d685a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d685c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6860:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6862:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6864:	462b      	mov	r3, r5
   d6866:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6868:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d686a:	f7fd fff1 	bl	d4850 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d686e:	280f      	cmp	r0, #15
   d6870:	687a      	ldr	r2, [r7, #4]
   d6872:	d91a      	bls.n	d68aa <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6874:	f100 0308 	add.w	r3, r0, #8
   d6878:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d687c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d687e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6882:	1c41      	adds	r1, r0, #1
   d6884:	462b      	mov	r3, r5
   d6886:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6888:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d688a:	f7fd ffe1 	bl	d4850 <vsnprintf>
        if (n > 0) {
   d688e:	1e02      	subs	r2, r0, #0
   d6890:	dd04      	ble.n	d689c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6892:	6823      	ldr	r3, [r4, #0]
   d6894:	4669      	mov	r1, sp
   d6896:	689b      	ldr	r3, [r3, #8]
   d6898:	4620      	mov	r0, r4
   d689a:	4798      	blx	r3
   d689c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d689e:	3720      	adds	r7, #32
   d68a0:	46bd      	mov	sp, r7
   d68a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d68a6:	b003      	add	sp, #12
   d68a8:	4770      	bx	lr
    } else if (n > 0) {
   d68aa:	2800      	cmp	r0, #0
   d68ac:	d0f7      	beq.n	d689e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d68ae:	6823      	ldr	r3, [r4, #0]
   d68b0:	4602      	mov	r2, r0
   d68b2:	689b      	ldr	r3, [r3, #8]
   d68b4:	f107 0110 	add.w	r1, r7, #16
   d68b8:	4620      	mov	r0, r4
   d68ba:	4798      	blx	r3
}
   d68bc:	e7ef      	b.n	d689e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d68be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d68be:	b510      	push	{r4, lr}
          _M_dispose();
   d68c0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d68c2:	4604      	mov	r4, r0
          _M_dispose();
   d68c4:	689b      	ldr	r3, [r3, #8]
   d68c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d68c8:	68a3      	ldr	r3, [r4, #8]
   d68ca:	3b01      	subs	r3, #1
   d68cc:	60a3      	str	r3, [r4, #8]
   d68ce:	b92b      	cbnz	r3, d68dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d68d0:	6823      	ldr	r3, [r4, #0]
   d68d2:	4620      	mov	r0, r4
   d68d4:	68db      	ldr	r3, [r3, #12]
    }
   d68d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d68da:	4718      	bx	r3
    }
   d68dc:	bd10      	pop	{r4, pc}

000d68de <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d68de:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d68e0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d68e2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d68e6:	689b      	ldr	r3, [r3, #8]
   d68e8:	2201      	movs	r2, #1
   d68ea:	f10d 0107 	add.w	r1, sp, #7
   d68ee:	4798      	blx	r3
}
   d68f0:	b003      	add	sp, #12
   d68f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d68f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d68f6:	b538      	push	{r3, r4, r5, lr}
   d68f8:	680b      	ldr	r3, [r1, #0]
   d68fa:	6003      	str	r3, [r0, #0]
   d68fc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d68fe:	6843      	ldr	r3, [r0, #4]
   d6900:	429d      	cmp	r5, r3
    class __shared_ptr
   d6902:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6904:	d00c      	beq.n	d6920 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6906:	b115      	cbz	r5, d690e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6908:	686b      	ldr	r3, [r5, #4]
   d690a:	3301      	adds	r3, #1
   d690c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d690e:	6860      	ldr	r0, [r4, #4]
   d6910:	b128      	cbz	r0, d691e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6912:	6843      	ldr	r3, [r0, #4]
   d6914:	3b01      	subs	r3, #1
   d6916:	6043      	str	r3, [r0, #4]
   d6918:	b90b      	cbnz	r3, d691e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d691a:	f7ff ffd0 	bl	d68be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d691e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6920:	4620      	mov	r0, r4
   d6922:	bd38      	pop	{r3, r4, r5, pc}

000d6924 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6924:	460b      	mov	r3, r1
   d6926:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6928:	2200      	movs	r2, #0
   d692a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d692c:	e9c0 2200 	strd	r2, r2, [r0]
   d6930:	4604      	mov	r4, r0
        t_ = t;
   d6932:	6083      	str	r3, [r0, #8]
    if (t) {
   d6934:	b90b      	cbnz	r3, d693a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6936:	4620      	mov	r0, r4
   d6938:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d693a:	f7ff ffdc 	bl	d68f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d693e:	e7fa      	b.n	d6936 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6940 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6940:	6883      	ldr	r3, [r0, #8]
   d6942:	b1eb      	cbz	r3, d6980 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6944:	781a      	ldrb	r2, [r3, #0]
   d6946:	2a03      	cmp	r2, #3
   d6948:	d81a      	bhi.n	d6980 <_ZNK5spark9JSONValue4typeEv+0x40>
   d694a:	e8df f002 	tbb	[pc, r2]
   d694e:	1704      	.short	0x1704
   d6950:	1b02      	.short	0x1b02
   d6952:	2005      	movs	r0, #5
   d6954:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6956:	6802      	ldr	r2, [r0, #0]
   d6958:	685b      	ldr	r3, [r3, #4]
   d695a:	6852      	ldr	r2, [r2, #4]
   d695c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d695e:	282d      	cmp	r0, #45	; 0x2d
   d6960:	d012      	beq.n	d6988 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6962:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6966:	2b09      	cmp	r3, #9
   d6968:	d90e      	bls.n	d6988 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d696a:	2874      	cmp	r0, #116	; 0x74
   d696c:	d00e      	beq.n	d698c <_ZNK5spark9JSONValue4typeEv+0x4c>
   d696e:	2866      	cmp	r0, #102	; 0x66
   d6970:	d00c      	beq.n	d698c <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6972:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6976:	4258      	negs	r0, r3
   d6978:	4158      	adcs	r0, r3
   d697a:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d697c:	2006      	movs	r0, #6
   d697e:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6980:	2000      	movs	r0, #0
   d6982:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6984:	2004      	movs	r0, #4
   d6986:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6988:	2003      	movs	r0, #3
   d698a:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d698c:	2002      	movs	r0, #2
}
   d698e:	4770      	bx	lr

000d6990 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6990:	b510      	push	{r4, lr}
   d6992:	4604      	mov	r4, r0
    switch (type()) {
   d6994:	f7ff ffd4 	bl	d6940 <_ZNK5spark9JSONValue4typeEv>
   d6998:	2802      	cmp	r0, #2
   d699a:	d00e      	beq.n	d69ba <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d699c:	1ec3      	subs	r3, r0, #3
   d699e:	b2db      	uxtb	r3, r3
   d69a0:	2b01      	cmp	r3, #1
   d69a2:	d814      	bhi.n	d69ce <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d69a4:	6822      	ldr	r2, [r4, #0]
   d69a6:	68a3      	ldr	r3, [r4, #8]
   d69a8:	6850      	ldr	r0, [r2, #4]
   d69aa:	685b      	ldr	r3, [r3, #4]
}
   d69ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d69b0:	220a      	movs	r2, #10
   d69b2:	2100      	movs	r1, #0
   d69b4:	4418      	add	r0, r3
   d69b6:	f000 bb1d 	b.w	d6ff4 <strtol>
        const char* const s = d_->json + t_->start;
   d69ba:	6822      	ldr	r2, [r4, #0]
   d69bc:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d69be:	6852      	ldr	r2, [r2, #4]
   d69c0:	685b      	ldr	r3, [r3, #4]
   d69c2:	5cd0      	ldrb	r0, [r2, r3]
   d69c4:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d69c8:	4258      	negs	r0, r3
   d69ca:	4158      	adcs	r0, r3
}
   d69cc:	bd10      	pop	{r4, pc}
    switch (type()) {
   d69ce:	2000      	movs	r0, #0
   d69d0:	e7fc      	b.n	d69cc <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d69d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d69d4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d69d6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d69d8:	e9c0 3300 	strd	r3, r3, [r0]
   d69dc:	4604      	mov	r4, r0
        n_(0) {
   d69de:	480e      	ldr	r0, [pc, #56]	; (d6a18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d69e0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d69e4:	b1a9      	cbz	r1, d6a12 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d69e6:	780b      	ldrb	r3, [r1, #0]
   d69e8:	2b03      	cmp	r3, #3
   d69ea:	d006      	beq.n	d69fa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d69ec:	b98b      	cbnz	r3, d6a12 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d69ee:	6813      	ldr	r3, [r2, #0]
   d69f0:	6858      	ldr	r0, [r3, #4]
   d69f2:	684b      	ldr	r3, [r1, #4]
   d69f4:	5cc3      	ldrb	r3, [r0, r3]
   d69f6:	2b6e      	cmp	r3, #110	; 0x6e
   d69f8:	d007      	beq.n	d6a0a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d69fa:	6813      	ldr	r3, [r2, #0]
   d69fc:	684d      	ldr	r5, [r1, #4]
   d69fe:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6a00:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6a02:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6a04:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6a06:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6a08:	60e3      	str	r3, [r4, #12]
   d6a0a:	4611      	mov	r1, r2
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	f7ff ff72 	bl	d68f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6a12:	4620      	mov	r0, r4
   d6a14:	bd38      	pop	{r3, r4, r5, pc}
   d6a16:	bf00      	nop
   d6a18:	000d710d 	.word	0x000d710d

000d6a1c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6a1c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6a1e:	2500      	movs	r5, #0
   d6a20:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6a22:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6a26:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6a2a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6a2e:	4604      	mov	r4, r0
   d6a30:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6a32:	b14b      	cbz	r3, d6a48 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6a34:	781a      	ldrb	r2, [r3, #0]
   d6a36:	2a01      	cmp	r2, #1
   d6a38:	d106      	bne.n	d6a48 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6a3a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6a3e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6a40:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6a42:	6143      	str	r3, [r0, #20]
   d6a44:	f7ff ff57 	bl	d68f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6a48:	4620      	mov	r0, r4
   d6a4a:	bd38      	pop	{r3, r4, r5, pc}

000d6a4c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6a4c:	b510      	push	{r4, lr}
    if (!n_) {
   d6a4e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6a50:	4604      	mov	r4, r0
    if (!n_) {
   d6a52:	b163      	cbz	r3, d6a6e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6a54:	6880      	ldr	r0, [r0, #8]
   d6a56:	60e0      	str	r0, [r4, #12]
    --n_;
   d6a58:	3b01      	subs	r3, #1
    ++t_;
   d6a5a:	3010      	adds	r0, #16
   d6a5c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6a5e:	6120      	str	r0, [r4, #16]
    --n_;
   d6a60:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6a62:	b113      	cbz	r3, d6a6a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6a64:	f7ff fedc 	bl	d6820 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6a68:	60a0      	str	r0, [r4, #8]
    return true;
   d6a6a:	2001      	movs	r0, #1
   d6a6c:	e000      	b.n	d6a70 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6a6e:	4618      	mov	r0, r3
}
   d6a70:	bd10      	pop	{r4, pc}

000d6a72 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6a72:	b510      	push	{r4, lr}
    write('}');
   d6a74:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6a76:	4604      	mov	r4, r0
    write('}');
   d6a78:	f7ff ff31 	bl	d68de <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6a7c:	2301      	movs	r3, #1
   d6a7e:	7123      	strb	r3, [r4, #4]
}
   d6a80:	4620      	mov	r0, r4
   d6a82:	bd10      	pop	{r4, pc}

000d6a84 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6a84:	b508      	push	{r3, lr}
    switch (state_) {
   d6a86:	7903      	ldrb	r3, [r0, #4]
   d6a88:	2b01      	cmp	r3, #1
   d6a8a:	d002      	beq.n	d6a92 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6a8c:	2b02      	cmp	r3, #2
   d6a8e:	d004      	beq.n	d6a9a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6a90:	bd08      	pop	{r3, pc}
        write(',');
   d6a92:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6a94:	f7ff ff23 	bl	d68de <_ZN5spark10JSONWriter5writeEc>
}
   d6a98:	e7fa      	b.n	d6a90 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6a9a:	213a      	movs	r1, #58	; 0x3a
   d6a9c:	e7fa      	b.n	d6a94 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6a9e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6a9e:	b510      	push	{r4, lr}
   d6aa0:	4604      	mov	r4, r0
    writeSeparator();
   d6aa2:	f7ff ffef 	bl	d6a84 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6aa6:	4620      	mov	r0, r4
   d6aa8:	217b      	movs	r1, #123	; 0x7b
   d6aaa:	f7ff ff18 	bl	d68de <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6aae:	2300      	movs	r3, #0
   d6ab0:	7123      	strb	r3, [r4, #4]
}
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	bd10      	pop	{r4, pc}
	...

000d6ab8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6ab8:	b513      	push	{r0, r1, r4, lr}
   d6aba:	4604      	mov	r4, r0
   d6abc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6abe:	f7ff ffe1 	bl	d6a84 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6ac2:	6823      	ldr	r3, [r4, #0]
   d6ac4:	9a01      	ldr	r2, [sp, #4]
   d6ac6:	68db      	ldr	r3, [r3, #12]
   d6ac8:	4903      	ldr	r1, [pc, #12]	; (d6ad8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6aca:	4620      	mov	r0, r4
   d6acc:	4798      	blx	r3
    state_ = NEXT;
   d6ace:	2301      	movs	r3, #1
}
   d6ad0:	4620      	mov	r0, r4
    state_ = NEXT;
   d6ad2:	7123      	strb	r3, [r4, #4]
}
   d6ad4:	b002      	add	sp, #8
   d6ad6:	bd10      	pop	{r4, pc}
   d6ad8:	000d70e7 	.word	0x000d70e7

000d6adc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6adc:	b513      	push	{r0, r1, r4, lr}
   d6ade:	4604      	mov	r4, r0
   d6ae0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6ae2:	f7ff ffcf 	bl	d6a84 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6ae6:	6823      	ldr	r3, [r4, #0]
   d6ae8:	9a01      	ldr	r2, [sp, #4]
   d6aea:	68db      	ldr	r3, [r3, #12]
   d6aec:	4903      	ldr	r1, [pc, #12]	; (d6afc <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6aee:	4620      	mov	r0, r4
   d6af0:	4798      	blx	r3
    state_ = NEXT;
   d6af2:	2301      	movs	r3, #1
}
   d6af4:	4620      	mov	r0, r4
    state_ = NEXT;
   d6af6:	7123      	strb	r3, [r4, #4]
}
   d6af8:	b002      	add	sp, #8
   d6afa:	bd10      	pop	{r4, pc}
   d6afc:	000d72ec 	.word	0x000d72ec

000d6b00 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b04:	460d      	mov	r5, r1
   d6b06:	4617      	mov	r7, r2
    write('"');
   d6b08:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6b0a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6bac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6b0e:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6b10:	442f      	add	r7, r5
    write('"');
   d6b12:	f7ff fee4 	bl	d68de <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6b16:	4629      	mov	r1, r5
    while (s != end) {
   d6b18:	42bd      	cmp	r5, r7
   d6b1a:	462a      	mov	r2, r5
   d6b1c:	d038      	beq.n	d6b90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6b1e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6b22:	2e22      	cmp	r6, #34	; 0x22
   d6b24:	d003      	beq.n	d6b2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6b26:	2e5c      	cmp	r6, #92	; 0x5c
   d6b28:	d001      	beq.n	d6b2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6b2a:	2e1f      	cmp	r6, #31
   d6b2c:	d8f4      	bhi.n	d6b18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6b2e:	6823      	ldr	r3, [r4, #0]
   d6b30:	1a52      	subs	r2, r2, r1
   d6b32:	689b      	ldr	r3, [r3, #8]
   d6b34:	4620      	mov	r0, r4
   d6b36:	4798      	blx	r3
            write('\\');
   d6b38:	215c      	movs	r1, #92	; 0x5c
   d6b3a:	4620      	mov	r0, r4
   d6b3c:	f7ff fecf 	bl	d68de <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6b40:	2e0d      	cmp	r6, #13
   d6b42:	d80a      	bhi.n	d6b5a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6b44:	2e07      	cmp	r6, #7
   d6b46:	d91c      	bls.n	d6b82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6b48:	f1a6 0308 	sub.w	r3, r6, #8
   d6b4c:	2b05      	cmp	r3, #5
   d6b4e:	d818      	bhi.n	d6b82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6b50:	e8df f003 	tbb	[pc, r3]
   d6b54:	17110f0d 	.word	0x17110f0d
   d6b58:	1513      	.short	0x1513
   d6b5a:	2e22      	cmp	r6, #34	; 0x22
   d6b5c:	d001      	beq.n	d6b62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6b5e:	2e5c      	cmp	r6, #92	; 0x5c
   d6b60:	d10f      	bne.n	d6b82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6b62:	4631      	mov	r1, r6
                write('b');
   d6b64:	4620      	mov	r0, r4
   d6b66:	f7ff feba 	bl	d68de <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6b6a:	4629      	mov	r1, r5
    while (s != end) {
   d6b6c:	e7d4      	b.n	d6b18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6b6e:	2162      	movs	r1, #98	; 0x62
   d6b70:	e7f8      	b.n	d6b64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6b72:	2174      	movs	r1, #116	; 0x74
   d6b74:	e7f6      	b.n	d6b64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6b76:	216e      	movs	r1, #110	; 0x6e
   d6b78:	e7f4      	b.n	d6b64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6b7a:	2166      	movs	r1, #102	; 0x66
   d6b7c:	e7f2      	b.n	d6b64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6b7e:	2172      	movs	r1, #114	; 0x72
   d6b80:	e7f0      	b.n	d6b64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6b82:	6823      	ldr	r3, [r4, #0]
   d6b84:	4632      	mov	r2, r6
   d6b86:	68db      	ldr	r3, [r3, #12]
   d6b88:	4641      	mov	r1, r8
   d6b8a:	4620      	mov	r0, r4
   d6b8c:	4798      	blx	r3
                break;
   d6b8e:	e7ec      	b.n	d6b6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6b90:	428d      	cmp	r5, r1
   d6b92:	d004      	beq.n	d6b9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6b94:	6823      	ldr	r3, [r4, #0]
   d6b96:	1a6a      	subs	r2, r5, r1
   d6b98:	689b      	ldr	r3, [r3, #8]
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	4798      	blx	r3
    }
    write('"');
   d6b9e:	2122      	movs	r1, #34	; 0x22
   d6ba0:	4620      	mov	r0, r4
   d6ba2:	f7ff fe9c 	bl	d68de <_ZN5spark10JSONWriter5writeEc>
}
   d6ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6baa:	bf00      	nop
   d6bac:	000d72ef 	.word	0x000d72ef

000d6bb0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6bb0:	b513      	push	{r0, r1, r4, lr}
   d6bb2:	4604      	mov	r4, r0
   d6bb4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6bb8:	f7ff ff64 	bl	d6a84 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6bc2:	f7ff ff9d 	bl	d6b00 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6bc6:	2302      	movs	r3, #2
}
   d6bc8:	4620      	mov	r0, r4
    state_ = VALUE;
   d6bca:	7123      	strb	r3, [r4, #4]
}
   d6bcc:	b002      	add	sp, #8
   d6bce:	bd10      	pop	{r4, pc}

000d6bd0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6bd0:	b513      	push	{r0, r1, r4, lr}
   d6bd2:	4604      	mov	r4, r0
   d6bd4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6bd8:	f7ff ff54 	bl	d6a84 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6bdc:	4620      	mov	r0, r4
   d6bde:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6be2:	f7ff ff8d 	bl	d6b00 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6be6:	2301      	movs	r3, #1
}
   d6be8:	4620      	mov	r0, r4
    state_ = NEXT;
   d6bea:	7123      	strb	r3, [r4, #4]
}
   d6bec:	b002      	add	sp, #8
   d6bee:	bd10      	pop	{r4, pc}

000d6bf0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6bf0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6bf2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6bf4:	d902      	bls.n	d6bfc <pinAvailable+0xc>
    return false;
   d6bf6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6bf8:	b002      	add	sp, #8
   d6bfa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6bfc:	f1a0 030b 	sub.w	r3, r0, #11
   d6c00:	2b02      	cmp	r3, #2
   d6c02:	d81a      	bhi.n	d6c3a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6c04:	4c17      	ldr	r4, [pc, #92]	; (d6c64 <pinAvailable+0x74>)
   d6c06:	7821      	ldrb	r1, [r4, #0]
   d6c08:	f3bf 8f5b 	dmb	ish
   d6c0c:	f011 0101 	ands.w	r1, r1, #1
   d6c10:	d10b      	bne.n	d6c2a <pinAvailable+0x3a>
   d6c12:	4620      	mov	r0, r4
   d6c14:	9101      	str	r1, [sp, #4]
   d6c16:	f7fd fa4d 	bl	d40b4 <__cxa_guard_acquire>
   d6c1a:	9901      	ldr	r1, [sp, #4]
   d6c1c:	b128      	cbz	r0, d6c2a <pinAvailable+0x3a>
   d6c1e:	4812      	ldr	r0, [pc, #72]	; (d6c68 <pinAvailable+0x78>)
   d6c20:	f7fd fe74 	bl	d490c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6c24:	4620      	mov	r0, r4
   d6c26:	f7fd fa4a 	bl	d40be <__cxa_guard_release>
   d6c2a:	4b0f      	ldr	r3, [pc, #60]	; (d6c68 <pinAvailable+0x78>)
   d6c2c:	7818      	ldrb	r0, [r3, #0]
   d6c2e:	f7fd fcdb 	bl	d45e8 <hal_spi_is_enabled>
   d6c32:	2800      	cmp	r0, #0
   d6c34:	d1df      	bne.n	d6bf6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6c36:	2001      	movs	r0, #1
   d6c38:	e7de      	b.n	d6bf8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6c3a:	2801      	cmp	r0, #1
   d6c3c:	d809      	bhi.n	d6c52 <pinAvailable+0x62>
   d6c3e:	f000 f851 	bl	d6ce4 <_Z19__fetch_global_Wirev>
   d6c42:	2100      	movs	r1, #0
   d6c44:	7c00      	ldrb	r0, [r0, #16]
   d6c46:	f7fd fcb7 	bl	d45b8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6c4a:	f080 0001 	eor.w	r0, r0, #1
   d6c4e:	b2c0      	uxtb	r0, r0
   d6c50:	e7d2      	b.n	d6bf8 <pinAvailable+0x8>
   d6c52:	3809      	subs	r0, #9
   d6c54:	2801      	cmp	r0, #1
   d6c56:	d8ee      	bhi.n	d6c36 <pinAvailable+0x46>
   d6c58:	f7ff fcb0 	bl	d65bc <_Z22__fetch_global_Serial1v>
   d6c5c:	7c00      	ldrb	r0, [r0, #16]
   d6c5e:	f7fd fc6b 	bl	d4538 <hal_usart_is_enabled>
   d6c62:	e7f2      	b.n	d6c4a <pinAvailable+0x5a>
   d6c64:	2003e7c8 	.word	0x2003e7c8
   d6c68:	2003e7cc 	.word	0x2003e7cc

000d6c6c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c6c:	2823      	cmp	r0, #35	; 0x23
{
   d6c6e:	b538      	push	{r3, r4, r5, lr}
   d6c70:	4604      	mov	r4, r0
   d6c72:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c74:	d80a      	bhi.n	d6c8c <pinMode+0x20>
   d6c76:	29ff      	cmp	r1, #255	; 0xff
   d6c78:	d008      	beq.n	d6c8c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6c7a:	f7ff ffb9 	bl	d6bf0 <pinAvailable>
   d6c7e:	b128      	cbz	r0, d6c8c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6c80:	4629      	mov	r1, r5
   d6c82:	4620      	mov	r0, r4
}
   d6c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6c88:	f7fd bbc6 	b.w	d4418 <HAL_Pin_Mode>
}
   d6c8c:	bd38      	pop	{r3, r4, r5, pc}

000d6c8e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6c8e:	b510      	push	{r4, lr}
   d6c90:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c92:	f7fd fbc9 	bl	d4428 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6c96:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6c98:	b2db      	uxtb	r3, r3
   d6c9a:	2b01      	cmp	r3, #1
   d6c9c:	d908      	bls.n	d6cb0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6c9e:	4620      	mov	r0, r4
   d6ca0:	f7ff ffa6 	bl	d6bf0 <pinAvailable>
   d6ca4:	b120      	cbz	r0, d6cb0 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ca6:	4620      	mov	r0, r4
}
   d6ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6cac:	f7fd bbc4 	b.w	d4438 <HAL_GPIO_Read>
}
   d6cb0:	2000      	movs	r0, #0
   d6cb2:	bd10      	pop	{r4, pc}

000d6cb4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6cb4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6cb6:	2300      	movs	r3, #0
   d6cb8:	2520      	movs	r5, #32
   d6cba:	8043      	strh	r3, [r0, #2]
   d6cbc:	2314      	movs	r3, #20
{
   d6cbe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6cc0:	8003      	strh	r3, [r0, #0]
   d6cc2:	6085      	str	r5, [r0, #8]
   d6cc4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6cc6:	4906      	ldr	r1, [pc, #24]	; (d6ce0 <_Z17acquireWireBufferv+0x2c>)
   d6cc8:	4628      	mov	r0, r5
   d6cca:	f000 f83c 	bl	d6d46 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6cce:	4904      	ldr	r1, [pc, #16]	; (d6ce0 <_Z17acquireWireBufferv+0x2c>)
	};
   d6cd0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6cd2:	4628      	mov	r0, r5
   d6cd4:	f000 f837 	bl	d6d46 <_ZnajRKSt9nothrow_t>
	};
   d6cd8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6cda:	4620      	mov	r0, r4
   d6cdc:	bd38      	pop	{r3, r4, r5, pc}
   d6cde:	bf00      	nop
   d6ce0:	000d72f5 	.word	0x000d72f5

000d6ce4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6ce4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ce6:	4d0f      	ldr	r5, [pc, #60]	; (d6d24 <_Z19__fetch_global_Wirev+0x40>)
   d6ce8:	7829      	ldrb	r1, [r5, #0]
   d6cea:	f3bf 8f5b 	dmb	ish
   d6cee:	f011 0401 	ands.w	r4, r1, #1
{
   d6cf2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6cf4:	d113      	bne.n	d6d1e <_Z19__fetch_global_Wirev+0x3a>
   d6cf6:	4628      	mov	r0, r5
   d6cf8:	f7fd f9dc 	bl	d40b4 <__cxa_guard_acquire>
   d6cfc:	b178      	cbz	r0, d6d1e <_Z19__fetch_global_Wirev+0x3a>
   d6cfe:	a801      	add	r0, sp, #4
   d6d00:	f7ff ffd8 	bl	d6cb4 <_Z17acquireWireBufferv>
   d6d04:	aa01      	add	r2, sp, #4
   d6d06:	4621      	mov	r1, r4
   d6d08:	4807      	ldr	r0, [pc, #28]	; (d6d28 <_Z19__fetch_global_Wirev+0x44>)
   d6d0a:	f7ff fcc1 	bl	d6690 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6d0e:	4628      	mov	r0, r5
   d6d10:	f7fd f9d5 	bl	d40be <__cxa_guard_release>
   d6d14:	4a05      	ldr	r2, [pc, #20]	; (d6d2c <_Z19__fetch_global_Wirev+0x48>)
   d6d16:	4906      	ldr	r1, [pc, #24]	; (d6d30 <_Z19__fetch_global_Wirev+0x4c>)
   d6d18:	4803      	ldr	r0, [pc, #12]	; (d6d28 <_Z19__fetch_global_Wirev+0x44>)
   d6d1a:	f000 f80b 	bl	d6d34 <__aeabi_atexit>
	return wire;
}
   d6d1e:	4802      	ldr	r0, [pc, #8]	; (d6d28 <_Z19__fetch_global_Wirev+0x44>)
   d6d20:	b007      	add	sp, #28
   d6d22:	bd30      	pop	{r4, r5, pc}
   d6d24:	2003e7d8 	.word	0x2003e7d8
   d6d28:	2003e7dc 	.word	0x2003e7dc
   d6d2c:	2003e594 	.word	0x2003e594
   d6d30:	000d6639 	.word	0x000d6639

000d6d34 <__aeabi_atexit>:
   d6d34:	460b      	mov	r3, r1
   d6d36:	4601      	mov	r1, r0
   d6d38:	4618      	mov	r0, r3
   d6d3a:	f000 b809 	b.w	d6d50 <__cxa_atexit>

000d6d3e <_ZdlPvj>:
   d6d3e:	f7fd b9ac 	b.w	d409a <_ZdlPv>

000d6d42 <_ZnwjRKSt9nothrow_t>:
   d6d42:	f7fd b9a6 	b.w	d4092 <_Znwj>

000d6d46 <_ZnajRKSt9nothrow_t>:
   d6d46:	f7fd b9a6 	b.w	d4096 <_Znaj>

000d6d4a <_ZSt25__throw_bad_function_callv>:
   d6d4a:	b508      	push	{r3, lr}
   d6d4c:	f7fd fd88 	bl	d4860 <abort>

000d6d50 <__cxa_atexit>:
   d6d50:	b510      	push	{r4, lr}
   d6d52:	4c05      	ldr	r4, [pc, #20]	; (d6d68 <__cxa_atexit+0x18>)
   d6d54:	4613      	mov	r3, r2
   d6d56:	b12c      	cbz	r4, d6d64 <__cxa_atexit+0x14>
   d6d58:	460a      	mov	r2, r1
   d6d5a:	4601      	mov	r1, r0
   d6d5c:	2002      	movs	r0, #2
   d6d5e:	f3af 8000 	nop.w
   d6d62:	bd10      	pop	{r4, pc}
   d6d64:	4620      	mov	r0, r4
   d6d66:	e7fc      	b.n	d6d62 <__cxa_atexit+0x12>
   d6d68:	00000000 	.word	0x00000000

000d6d6c <memcpy>:
   d6d6c:	440a      	add	r2, r1
   d6d6e:	4291      	cmp	r1, r2
   d6d70:	f100 33ff 	add.w	r3, r0, #4294967295
   d6d74:	d100      	bne.n	d6d78 <memcpy+0xc>
   d6d76:	4770      	bx	lr
   d6d78:	b510      	push	{r4, lr}
   d6d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6d82:	4291      	cmp	r1, r2
   d6d84:	d1f9      	bne.n	d6d7a <memcpy+0xe>
   d6d86:	bd10      	pop	{r4, pc}

000d6d88 <memmove>:
   d6d88:	4288      	cmp	r0, r1
   d6d8a:	b510      	push	{r4, lr}
   d6d8c:	eb01 0402 	add.w	r4, r1, r2
   d6d90:	d902      	bls.n	d6d98 <memmove+0x10>
   d6d92:	4284      	cmp	r4, r0
   d6d94:	4623      	mov	r3, r4
   d6d96:	d807      	bhi.n	d6da8 <memmove+0x20>
   d6d98:	1e43      	subs	r3, r0, #1
   d6d9a:	42a1      	cmp	r1, r4
   d6d9c:	d008      	beq.n	d6db0 <memmove+0x28>
   d6d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6da2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6da6:	e7f8      	b.n	d6d9a <memmove+0x12>
   d6da8:	4402      	add	r2, r0
   d6daa:	4601      	mov	r1, r0
   d6dac:	428a      	cmp	r2, r1
   d6dae:	d100      	bne.n	d6db2 <memmove+0x2a>
   d6db0:	bd10      	pop	{r4, pc}
   d6db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6dba:	e7f7      	b.n	d6dac <memmove+0x24>

000d6dbc <memset>:
   d6dbc:	4402      	add	r2, r0
   d6dbe:	4603      	mov	r3, r0
   d6dc0:	4293      	cmp	r3, r2
   d6dc2:	d100      	bne.n	d6dc6 <memset+0xa>
   d6dc4:	4770      	bx	lr
   d6dc6:	f803 1b01 	strb.w	r1, [r3], #1
   d6dca:	e7f9      	b.n	d6dc0 <memset+0x4>

000d6dcc <srand>:
   d6dcc:	b538      	push	{r3, r4, r5, lr}
   d6dce:	4b0d      	ldr	r3, [pc, #52]	; (d6e04 <srand+0x38>)
   d6dd0:	681d      	ldr	r5, [r3, #0]
   d6dd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6dd4:	4604      	mov	r4, r0
   d6dd6:	b97b      	cbnz	r3, d6df8 <srand+0x2c>
   d6dd8:	2018      	movs	r0, #24
   d6dda:	f7fd fd19 	bl	d4810 <malloc>
   d6dde:	4a0a      	ldr	r2, [pc, #40]	; (d6e08 <srand+0x3c>)
   d6de0:	4b0a      	ldr	r3, [pc, #40]	; (d6e0c <srand+0x40>)
   d6de2:	63a8      	str	r0, [r5, #56]	; 0x38
   d6de4:	e9c0 2300 	strd	r2, r3, [r0]
   d6de8:	4b09      	ldr	r3, [pc, #36]	; (d6e10 <srand+0x44>)
   d6dea:	6083      	str	r3, [r0, #8]
   d6dec:	230b      	movs	r3, #11
   d6dee:	8183      	strh	r3, [r0, #12]
   d6df0:	2201      	movs	r2, #1
   d6df2:	2300      	movs	r3, #0
   d6df4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6df8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6dfa:	2200      	movs	r2, #0
   d6dfc:	611c      	str	r4, [r3, #16]
   d6dfe:	615a      	str	r2, [r3, #20]
   d6e00:	bd38      	pop	{r3, r4, r5, pc}
   d6e02:	bf00      	nop
   d6e04:	2003e530 	.word	0x2003e530
   d6e08:	abcd330e 	.word	0xabcd330e
   d6e0c:	e66d1234 	.word	0xe66d1234
   d6e10:	0005deec 	.word	0x0005deec

000d6e14 <strchr>:
   d6e14:	b2c9      	uxtb	r1, r1
   d6e16:	4603      	mov	r3, r0
   d6e18:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6e1c:	b11a      	cbz	r2, d6e26 <strchr+0x12>
   d6e1e:	428a      	cmp	r2, r1
   d6e20:	d1f9      	bne.n	d6e16 <strchr+0x2>
   d6e22:	4618      	mov	r0, r3
   d6e24:	4770      	bx	lr
   d6e26:	2900      	cmp	r1, #0
   d6e28:	bf18      	it	ne
   d6e2a:	2300      	movne	r3, #0
   d6e2c:	e7f9      	b.n	d6e22 <strchr+0xe>

000d6e2e <strchrnul>:
   d6e2e:	b510      	push	{r4, lr}
   d6e30:	4604      	mov	r4, r0
   d6e32:	f7ff ffef 	bl	d6e14 <strchr>
   d6e36:	b918      	cbnz	r0, d6e40 <strchrnul+0x12>
   d6e38:	4620      	mov	r0, r4
   d6e3a:	f000 f832 	bl	d6ea2 <strlen>
   d6e3e:	4420      	add	r0, r4
   d6e40:	bd10      	pop	{r4, pc}

000d6e42 <strcmp>:
   d6e42:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6e46:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6e4a:	2a01      	cmp	r2, #1
   d6e4c:	bf28      	it	cs
   d6e4e:	429a      	cmpcs	r2, r3
   d6e50:	d0f7      	beq.n	d6e42 <strcmp>
   d6e52:	1ad0      	subs	r0, r2, r3
   d6e54:	4770      	bx	lr

000d6e56 <strcpy>:
   d6e56:	4603      	mov	r3, r0
   d6e58:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6e5c:	f803 2b01 	strb.w	r2, [r3], #1
   d6e60:	2a00      	cmp	r2, #0
   d6e62:	d1f9      	bne.n	d6e58 <strcpy+0x2>
   d6e64:	4770      	bx	lr
	...

000d6e68 <strdup>:
   d6e68:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <strdup+0xc>)
   d6e6a:	4601      	mov	r1, r0
   d6e6c:	6818      	ldr	r0, [r3, #0]
   d6e6e:	f000 b803 	b.w	d6e78 <_strdup_r>
   d6e72:	bf00      	nop
   d6e74:	2003e530 	.word	0x2003e530

000d6e78 <_strdup_r>:
   d6e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6e7a:	4604      	mov	r4, r0
   d6e7c:	4608      	mov	r0, r1
   d6e7e:	460d      	mov	r5, r1
   d6e80:	f000 f80f 	bl	d6ea2 <strlen>
   d6e84:	1c42      	adds	r2, r0, #1
   d6e86:	4611      	mov	r1, r2
   d6e88:	4620      	mov	r0, r4
   d6e8a:	9201      	str	r2, [sp, #4]
   d6e8c:	f7fd fcf0 	bl	d4870 <_malloc_r>
   d6e90:	4604      	mov	r4, r0
   d6e92:	b118      	cbz	r0, d6e9c <_strdup_r+0x24>
   d6e94:	9a01      	ldr	r2, [sp, #4]
   d6e96:	4629      	mov	r1, r5
   d6e98:	f7ff ff68 	bl	d6d6c <memcpy>
   d6e9c:	4620      	mov	r0, r4
   d6e9e:	b003      	add	sp, #12
   d6ea0:	bd30      	pop	{r4, r5, pc}

000d6ea2 <strlen>:
   d6ea2:	4603      	mov	r3, r0
   d6ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6ea8:	2a00      	cmp	r2, #0
   d6eaa:	d1fb      	bne.n	d6ea4 <strlen+0x2>
   d6eac:	1a18      	subs	r0, r3, r0
   d6eae:	3801      	subs	r0, #1
   d6eb0:	4770      	bx	lr

000d6eb2 <strncmp>:
   d6eb2:	b510      	push	{r4, lr}
   d6eb4:	b16a      	cbz	r2, d6ed2 <strncmp+0x20>
   d6eb6:	3901      	subs	r1, #1
   d6eb8:	1884      	adds	r4, r0, r2
   d6eba:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6ebe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6ec2:	4293      	cmp	r3, r2
   d6ec4:	d103      	bne.n	d6ece <strncmp+0x1c>
   d6ec6:	42a0      	cmp	r0, r4
   d6ec8:	d001      	beq.n	d6ece <strncmp+0x1c>
   d6eca:	2b00      	cmp	r3, #0
   d6ecc:	d1f5      	bne.n	d6eba <strncmp+0x8>
   d6ece:	1a98      	subs	r0, r3, r2
   d6ed0:	bd10      	pop	{r4, pc}
   d6ed2:	4610      	mov	r0, r2
   d6ed4:	e7fc      	b.n	d6ed0 <strncmp+0x1e>

000d6ed6 <strrchr>:
   d6ed6:	b538      	push	{r3, r4, r5, lr}
   d6ed8:	4603      	mov	r3, r0
   d6eda:	460c      	mov	r4, r1
   d6edc:	b969      	cbnz	r1, d6efa <strrchr+0x24>
   d6ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6ee2:	f7ff bf97 	b.w	d6e14 <strchr>
   d6ee6:	1c43      	adds	r3, r0, #1
   d6ee8:	4605      	mov	r5, r0
   d6eea:	4621      	mov	r1, r4
   d6eec:	4618      	mov	r0, r3
   d6eee:	f7ff ff91 	bl	d6e14 <strchr>
   d6ef2:	2800      	cmp	r0, #0
   d6ef4:	d1f7      	bne.n	d6ee6 <strrchr+0x10>
   d6ef6:	4628      	mov	r0, r5
   d6ef8:	bd38      	pop	{r3, r4, r5, pc}
   d6efa:	2500      	movs	r5, #0
   d6efc:	e7f5      	b.n	d6eea <strrchr+0x14>
	...

000d6f00 <_strtol_l.isra.0>:
   d6f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f04:	4e3a      	ldr	r6, [pc, #232]	; (d6ff0 <_strtol_l.isra.0+0xf0>)
   d6f06:	4686      	mov	lr, r0
   d6f08:	468c      	mov	ip, r1
   d6f0a:	4660      	mov	r0, ip
   d6f0c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6f10:	5da5      	ldrb	r5, [r4, r6]
   d6f12:	f015 0508 	ands.w	r5, r5, #8
   d6f16:	d1f8      	bne.n	d6f0a <_strtol_l.isra.0+0xa>
   d6f18:	2c2d      	cmp	r4, #45	; 0x2d
   d6f1a:	d133      	bne.n	d6f84 <_strtol_l.isra.0+0x84>
   d6f1c:	f89c 4000 	ldrb.w	r4, [ip]
   d6f20:	f04f 0801 	mov.w	r8, #1
   d6f24:	f100 0c02 	add.w	ip, r0, #2
   d6f28:	2b00      	cmp	r3, #0
   d6f2a:	d05c      	beq.n	d6fe6 <_strtol_l.isra.0+0xe6>
   d6f2c:	2b10      	cmp	r3, #16
   d6f2e:	d10c      	bne.n	d6f4a <_strtol_l.isra.0+0x4a>
   d6f30:	2c30      	cmp	r4, #48	; 0x30
   d6f32:	d10a      	bne.n	d6f4a <_strtol_l.isra.0+0x4a>
   d6f34:	f89c 0000 	ldrb.w	r0, [ip]
   d6f38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6f3c:	2858      	cmp	r0, #88	; 0x58
   d6f3e:	d14d      	bne.n	d6fdc <_strtol_l.isra.0+0xdc>
   d6f40:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6f44:	2310      	movs	r3, #16
   d6f46:	f10c 0c02 	add.w	ip, ip, #2
   d6f4a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6f4e:	3f01      	subs	r7, #1
   d6f50:	2600      	movs	r6, #0
   d6f52:	fbb7 f9f3 	udiv	r9, r7, r3
   d6f56:	4630      	mov	r0, r6
   d6f58:	fb03 7a19 	mls	sl, r3, r9, r7
   d6f5c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6f60:	2d09      	cmp	r5, #9
   d6f62:	d818      	bhi.n	d6f96 <_strtol_l.isra.0+0x96>
   d6f64:	462c      	mov	r4, r5
   d6f66:	42a3      	cmp	r3, r4
   d6f68:	dd24      	ble.n	d6fb4 <_strtol_l.isra.0+0xb4>
   d6f6a:	1c75      	adds	r5, r6, #1
   d6f6c:	d007      	beq.n	d6f7e <_strtol_l.isra.0+0x7e>
   d6f6e:	4581      	cmp	r9, r0
   d6f70:	d31d      	bcc.n	d6fae <_strtol_l.isra.0+0xae>
   d6f72:	d101      	bne.n	d6f78 <_strtol_l.isra.0+0x78>
   d6f74:	45a2      	cmp	sl, r4
   d6f76:	db1a      	blt.n	d6fae <_strtol_l.isra.0+0xae>
   d6f78:	fb00 4003 	mla	r0, r0, r3, r4
   d6f7c:	2601      	movs	r6, #1
   d6f7e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6f82:	e7eb      	b.n	d6f5c <_strtol_l.isra.0+0x5c>
   d6f84:	2c2b      	cmp	r4, #43	; 0x2b
   d6f86:	bf08      	it	eq
   d6f88:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6f8c:	46a8      	mov	r8, r5
   d6f8e:	bf08      	it	eq
   d6f90:	f100 0c02 	addeq.w	ip, r0, #2
   d6f94:	e7c8      	b.n	d6f28 <_strtol_l.isra.0+0x28>
   d6f96:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6f9a:	2d19      	cmp	r5, #25
   d6f9c:	d801      	bhi.n	d6fa2 <_strtol_l.isra.0+0xa2>
   d6f9e:	3c37      	subs	r4, #55	; 0x37
   d6fa0:	e7e1      	b.n	d6f66 <_strtol_l.isra.0+0x66>
   d6fa2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6fa6:	2d19      	cmp	r5, #25
   d6fa8:	d804      	bhi.n	d6fb4 <_strtol_l.isra.0+0xb4>
   d6faa:	3c57      	subs	r4, #87	; 0x57
   d6fac:	e7db      	b.n	d6f66 <_strtol_l.isra.0+0x66>
   d6fae:	f04f 36ff 	mov.w	r6, #4294967295
   d6fb2:	e7e4      	b.n	d6f7e <_strtol_l.isra.0+0x7e>
   d6fb4:	1c73      	adds	r3, r6, #1
   d6fb6:	d106      	bne.n	d6fc6 <_strtol_l.isra.0+0xc6>
   d6fb8:	2322      	movs	r3, #34	; 0x22
   d6fba:	f8ce 3000 	str.w	r3, [lr]
   d6fbe:	4638      	mov	r0, r7
   d6fc0:	b942      	cbnz	r2, d6fd4 <_strtol_l.isra.0+0xd4>
   d6fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6fc6:	f1b8 0f00 	cmp.w	r8, #0
   d6fca:	d000      	beq.n	d6fce <_strtol_l.isra.0+0xce>
   d6fcc:	4240      	negs	r0, r0
   d6fce:	2a00      	cmp	r2, #0
   d6fd0:	d0f7      	beq.n	d6fc2 <_strtol_l.isra.0+0xc2>
   d6fd2:	b10e      	cbz	r6, d6fd8 <_strtol_l.isra.0+0xd8>
   d6fd4:	f10c 31ff 	add.w	r1, ip, #4294967295
   d6fd8:	6011      	str	r1, [r2, #0]
   d6fda:	e7f2      	b.n	d6fc2 <_strtol_l.isra.0+0xc2>
   d6fdc:	2430      	movs	r4, #48	; 0x30
   d6fde:	2b00      	cmp	r3, #0
   d6fe0:	d1b3      	bne.n	d6f4a <_strtol_l.isra.0+0x4a>
   d6fe2:	2308      	movs	r3, #8
   d6fe4:	e7b1      	b.n	d6f4a <_strtol_l.isra.0+0x4a>
   d6fe6:	2c30      	cmp	r4, #48	; 0x30
   d6fe8:	d0a4      	beq.n	d6f34 <_strtol_l.isra.0+0x34>
   d6fea:	230a      	movs	r3, #10
   d6fec:	e7ad      	b.n	d6f4a <_strtol_l.isra.0+0x4a>
   d6fee:	bf00      	nop
   d6ff0:	000d72f7 	.word	0x000d72f7

000d6ff4 <strtol>:
   d6ff4:	4613      	mov	r3, r2
   d6ff6:	460a      	mov	r2, r1
   d6ff8:	4601      	mov	r1, r0
   d6ffa:	4802      	ldr	r0, [pc, #8]	; (d7004 <strtol+0x10>)
   d6ffc:	6800      	ldr	r0, [r0, #0]
   d6ffe:	f7ff bf7f 	b.w	d6f00 <_strtol_l.isra.0>
   d7002:	bf00      	nop
   d7004:	2003e530 	.word	0x2003e530

000d7008 <dynalib_user>:
   d7008:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d7018:	00000000 2c64255b 252c6425 70005d64     ....[%d,%d,%d].p
   d7028:	696c6275 64656873 7325203a 00000000     ublished: %s....

000d7038 <_ZTVN5spark10LogHandlerE>:
	...
   d7048:	000d40a1 000d40c5                       .@...@..

000d7050 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7058:	000d40d1 000d4105 000d58b5 000d40c7     .@...A...X...@..
   d7068:	65656873 73655474 00003174              sheetTest1..

000d7074 <_ZTVN5spark13EthernetClassE>:
	...
   d707c:	000d48ef 000d48e5 000d48db 000d48d1     .H...H...H...H..
   d708c:	000d48c5 000d48b9 000d66f5 000d66fd     .H...H...f...f..
   d709c:	000d48ad 000d48a5 000d489b 000d4891     .H...H...H...H..
   d70ac:	000d672d 64756162 72655300 006c6169     -g..baud.Serial.
   d70bc:	69726553 00316c61 4e4f534a 65727453     Serial1.JSONStre
   d70cc:	6f4c6d61 6e614867 72656c64 70706100     amLogHandler.app
   d70dc:	31302500 00207530 2500205d 202c0064     .%010u .] .%d., 
   d70ec:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
   d70fc:	00692500 61746564 20736c69 0d00203d     .%i.details = ..
   d710c:	006d000a 00660063 66006e6c 0074006e     ..m.c.f.ln.fn.t.
   d711c:	65646f63 74656400 006c6961              code.detail.

000d7128 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7130:	000d4c97 000d4cbd 000d4c7d 000d684f     .L...L..}L..Oh..

000d7140 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7148:	000d50dd 000d50f5 000d58b5 000d40c7     .P...P...X...@..

000d7158 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7160:	000d5109 000d511d 000d5a59 000d4c85     .Q...Q..YZ...L..

000d7170 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7178:	000d4c95 000d4ccb 000d57f1 000d4c87     .L...L...W...L..

000d7188 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7190:	000d4c93 000d4cd9 000d5049 000d4cf5     .L...L..IP...L..
   d71a0:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d71b0:	007a2553 74637361 00656d69              S%z.asctime.

000d71bc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d71c4:	000d5d2d 000d5d33 000d5d71 000d5d41     -]..3]..q]..A]..
   d71d4:	000d5d2f                                /]..

000d71d8 <_ZTV9IPAddress>:
	...
   d71e0:	000d6275 000d6265 000d6267              ub..eb..gb..

000d71ec <_ZTV9USBSerial>:
	...
   d71f4:	000d6355 000d63bd 000d6393 000d4b71     Uc...c...c..qK..
   d7204:	000d6385 000d6357 000d6367 000d63b7     .c..Wc..gc...c..
   d7214:	000d6377 000d6351                       wc..Qc..

000d721c <_ZTVN5spark13CellularClassE>:
	...
   d7224:	000d64c7 000d64bd 000d64b3 000d6469     .d...d...d..id..
   d7234:	000d64a7 000d649b 000d66f5 000d66fd     .d...d...f...f..
   d7244:	000d648f 000d6487 000d647d 000d6473     .d...d..}d..sd..
   d7254:	000d672d                                -g..

000d7258 <_ZTV11USARTSerial>:
	...
   d7260:	000d6501 000d656d 000d6545 000d4b71     .e..me..Ee..qK..
   d7270:	000d6515 000d6531 000d6523 000d653f     .e..1e..#e..?e..
   d7280:	000d6503 000d6507                       .e...e..

000d7288 <_ZTV7TwoWire>:
	...
   d7290:	000d6639 000d6683 000d665b 000d663b     9f...f..[f..;f..
   d72a0:	000d6663 000d666b 000d6673 000d667b     cf..kf..sf..{f..

000d72b0 <_ZTVN5spark12NetworkClassE>:
	...
   d72b8:	000d66b5 000d66bf 000d66c9 000d66d3     .f...f...f...f..
   d72c8:	000d66dd 000d66e9 000d66f5 000d66fd     .f...f...f...f..
   d72d8:	000d6705 000d6711 000d6719 000d6723     .g...g...g..#g..
   d72e8:	000d672d 75007525 78343025               -g..%u.u%04x.

000d72f5 <_ZSt7nothrow>:
	...

000d72f6 <_ctype_>:
   d72f6:	20202000 20202020 28282020 20282828     .         ((((( 
   d7306:	20202020 20202020 20202020 20202020                     
   d7316:	10108820 10101010 10101010 10101010      ...............
   d7326:	04040410 04040404 10040404 10101010     ................
   d7336:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7346:	01010101 01010101 01010101 10101010     ................
   d7356:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7366:	02020202 02020202 02020202 10101010     ................
   d7376:	00000020 00000000 00000000 00000000      ...............
	...

000d73f7 <link_const_variable_data_end>:
	...

000d73f8 <link_constructors_location>:
   d73f8:	000d434d 	.word	0x000d434d
   d73fc:	000d48f9 	.word	0x000d48f9
   d7400:	000d4941 	.word	0x000d4941
   d7404:	000d4b49 	.word	0x000d4b49
   d7408:	000d58a5 	.word	0x000d58a5
   d740c:	000d5bcd 	.word	0x000d5bcd
   d7410:	000d5bed 	.word	0x000d5bed
   d7414:	000d64d1 	.word	0x000d64d1
   d7418:	000d680d 	.word	0x000d680d

000d741c <link_constructors_end>:
   d741c:	00000000 	.word	0x00000000
