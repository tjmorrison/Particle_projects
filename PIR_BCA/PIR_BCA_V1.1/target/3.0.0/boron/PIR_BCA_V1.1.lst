
c:/Users/tjmor/OneDrive/Documents/Code/Particle_projects/PIR_BCA/PIR_BCA_V1.1/target/3.0.0/boron/PIR_BCA_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004110  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8130  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e4f8  000d8134  0001e4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000284  2003e56c  2003e56c  0002e56c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d81a8  000d81a8  000281a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d81d0  000d81d0  000281d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017e27e  00000000  00000000  000281d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016ead  00000000  00000000  001a6452  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00038574  00000000  00000000  001bd2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cb0  00000000  00000000  001f5873  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009b00  00000000  00000000  001f8523  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000378c7  00000000  00000000  00202023  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b985  00000000  00000000  002398ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012c5d4  00000000  00000000  0027526f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007f04  00000000  00000000  003a1844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fd0d 	bl	d7a50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fd2f 	bl	d7aa0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4f8 	.word	0x2003e4f8
   d404c:	000d8134 	.word	0x000d8134
   d4050:	2003e56c 	.word	0x2003e56c
   d4054:	2003e56c 	.word	0x2003e56c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 f81b 	bl	d609c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d810c 	.word	0x000d810c
   d4080:	000d8130 	.word	0x000d8130

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8a1 	b.w	d41ca <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8f1 	bl	d4270 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bfc5 	b.w	d6020 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bced 	b.w	d4a74 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bceb 	b.w	d4a74 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bcf1 	b.w	d4a84 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fbec 	bl	d4888 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4649 	.word	0x000d4649

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d2:	b538      	push	{r3, r4, r5, lr}
   d40d4:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d6:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40d8:	b128      	cbz	r0, d40e6 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40da:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40dc:	210c      	movs	r1, #12
   d40de:	f003 f882 	bl	d71e6 <_ZdlPvj>
            wakeupSource = next;
   d40e2:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e4:	e7f8      	b.n	d40d8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e6:	4620      	mov	r0, r4
   d40e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40ec <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40ec:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ee:	b510      	push	{r4, lr}
   d40f0:	4604      	mov	r4, r0
   d40f2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40f4:	f001 f8ca 	bl	d528c <_ZN5spark10LogManager8instanceEv>
   d40f8:	4621      	mov	r1, r4
   d40fa:	f001 faba 	bl	d5672 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40fe:	f002 fb73 	bl	d67e8 <_Z16_fetch_usbserialv>
   d4102:	f002 fb65 	bl	d67d0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4106:	4620      	mov	r0, r4
   d4108:	4b04      	ldr	r3, [pc, #16]	; (d411c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d410a:	f840 3b04 	str.w	r3, [r0], #4
   d410e:	f001 f99d 	bl	d544c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4112:	4620      	mov	r0, r4
   d4114:	bd10      	pop	{r4, pc}
   d4116:	bf00      	nop
   d4118:	000d7d3c 	.word	0x000d7d3c
   d411c:	000d7d24 	.word	0x000d7d24

000d4120 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4120:	b510      	push	{r4, lr}
   d4122:	4604      	mov	r4, r0
    }
   d4124:	f7ff ffe2 	bl	d40ec <_ZN5spark16SerialLogHandlerD1Ev>
   d4128:	4620      	mov	r0, r4
   d412a:	2124      	movs	r1, #36	; 0x24
   d412c:	f003 f85b 	bl	d71e6 <_ZdlPvj>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}

000d4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4136:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4138:	4605      	mov	r5, r0
   d413a:	460f      	mov	r7, r1
   d413c:	4616      	mov	r6, r2
        if (valid_) {
   d413e:	b18b      	cbz	r3, d4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4140:	6803      	ldr	r3, [r0, #0]
   d4142:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4144:	b183      	cbz	r3, d4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4146:	889a      	ldrh	r2, [r3, #4]
   d4148:	2a01      	cmp	r2, #1
   d414a:	d006      	beq.n	d415a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d414c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d414e:	e7f9      	b.n	d4144 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4150:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4152:	b14b      	cbz	r3, d4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4154:	889a      	ldrh	r2, [r3, #4]
   d4156:	2a01      	cmp	r2, #1
   d4158:	d1fa      	bne.n	d4150 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d415a:	b12b      	cbz	r3, d4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d415c:	899a      	ldrh	r2, [r3, #12]
   d415e:	42ba      	cmp	r2, r7
   d4160:	d1f6      	bne.n	d4150 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4162:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4164:	4628      	mov	r0, r5
   d4166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4168:	490a      	ldr	r1, [pc, #40]	; (d4194 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d416a:	2010      	movs	r0, #16
   d416c:	f003 f83d 	bl	d71ea <_ZnwjRKSt9nothrow_t>
   d4170:	4604      	mov	r4, r0
   d4172:	b168      	cbz	r0, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4174:	2210      	movs	r2, #16
   d4176:	2100      	movs	r1, #0
   d4178:	f003 fc92 	bl	d7aa0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d417c:	4b06      	ldr	r3, [pc, #24]	; (d4198 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d417e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4180:	2301      	movs	r3, #1
   d4182:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4184:	692b      	ldr	r3, [r5, #16]
   d4186:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4188:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d418a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d418c:	612c      	str	r4, [r5, #16]
   d418e:	e7e9      	b.n	d4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4190:	7528      	strb	r0, [r5, #20]
                return *this;
   d4192:	e7e7      	b.n	d4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4194:	000d8009 	.word	0x000d8009
   d4198:	00030010 	.word	0x00030010

000d419c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d419c:	b40e      	push	{r1, r2, r3}
   d419e:	b510      	push	{r4, lr}
   d41a0:	b08d      	sub	sp, #52	; 0x34
   d41a2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d41a4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d41a6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d41aa:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41ac:	2300      	movs	r3, #0
   d41ae:	2020      	movs	r0, #32
   d41b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41b4:	e9cd 4200 	strd	r4, r2, [sp]
   d41b8:	201e      	movs	r0, #30
   d41ba:	aa04      	add	r2, sp, #16
   d41bc:	f000 fb74 	bl	d48a8 <log_message_v>
}
   d41c0:	b00d      	add	sp, #52	; 0x34
   d41c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41c6:	b003      	add	sp, #12
   d41c8:	4770      	bx	lr

000d41ca <setup>:

//Decleration of functions~ tells the compiler which functions are available and how to use them
void PublishToGoogleSheet();

// setup() runs once, when the device is first turned on.
void setup() {
   d41ca:	b508      	push	{r3, lr}

  //Set the digital pins to input
  //note that analog pins don't need analog read
  pinMode(Pin_PIR, INPUT);
   d41cc:	2100      	movs	r1, #0
   d41ce:	2002      	movs	r0, #2
   d41d0:	f002 ff48 	bl	d7064 <pinMode>
  pinMode(Pin_Beacon, INPUT);


}
   d41d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(Pin_Beacon, INPUT);
   d41d8:	2100      	movs	r1, #0
   d41da:	2003      	movs	r0, #3
   d41dc:	f002 bf42 	b.w	d7064 <pinMode>

000d41e0 <_Z20PublishToGoogleSheetv>:

}


//Publish to google sheets function
void PublishToGoogleSheet() {
   d41e0:	b510      	push	{r4, lr}
    char buf[128];
    snprintf(buf, sizeof(buf),"[%d,%d,%.2f]", PIR_cnt, Beacon_cnt, Batt_volt);
   d41e2:	4b1a      	ldr	r3, [pc, #104]	; (d424c <_Z20PublishToGoogleSheetv+0x6c>)
void PublishToGoogleSheet() {
   d41e4:	b0a6      	sub	sp, #152	; 0x98
    snprintf(buf, sizeof(buf),"[%d,%d,%.2f]", PIR_cnt, Beacon_cnt, Batt_volt);
   d41e6:	6818      	ldr	r0, [r3, #0]
   d41e8:	f003 f96a 	bl	d74c0 <__aeabi_f2d>
   d41ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d41f0:	4b17      	ldr	r3, [pc, #92]	; (d4250 <_Z20PublishToGoogleSheetv+0x70>)
   d41f2:	4a18      	ldr	r2, [pc, #96]	; (d4254 <_Z20PublishToGoogleSheetv+0x74>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	9300      	str	r3, [sp, #0]
   d41f8:	4b17      	ldr	r3, [pc, #92]	; (d4258 <_Z20PublishToGoogleSheetv+0x78>)
   d41fa:	2180      	movs	r1, #128	; 0x80
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	a806      	add	r0, sp, #24
   d4200:	f000 fc50 	bl	d4aa4 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4204:	4b15      	ldr	r3, [pc, #84]	; (d425c <_Z20PublishToGoogleSheetv+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4206:	4916      	ldr	r1, [pc, #88]	; (d4260 <_Z20PublishToGoogleSheetv+0x80>)
   d4208:	781b      	ldrb	r3, [r3, #0]
   d420a:	f88d 3000 	strb.w	r3, [sp]
   d420e:	6809      	ldr	r1, [r1, #0]
   d4210:	233c      	movs	r3, #60	; 0x3c
   d4212:	aa06      	add	r2, sp, #24
   d4214:	a804      	add	r0, sp, #16
   d4216:	f002 f899 	bl	d634c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d421a:	9c05      	ldr	r4, [sp, #20]
   d421c:	b17c      	cbz	r4, d423e <_Z20PublishToGoogleSheetv+0x5e>
      if (--_M_use_count == 0)
   d421e:	6863      	ldr	r3, [r4, #4]
   d4220:	3b01      	subs	r3, #1
   d4222:	6063      	str	r3, [r4, #4]
   d4224:	b95b      	cbnz	r3, d423e <_Z20PublishToGoogleSheetv+0x5e>
          _M_dispose();
   d4226:	6823      	ldr	r3, [r4, #0]
   d4228:	4620      	mov	r0, r4
   d422a:	689b      	ldr	r3, [r3, #8]
   d422c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d422e:	68a3      	ldr	r3, [r4, #8]
   d4230:	3b01      	subs	r3, #1
   d4232:	60a3      	str	r3, [r4, #8]
   d4234:	b91b      	cbnz	r3, d423e <_Z20PublishToGoogleSheetv+0x5e>
            _M_destroy();
   d4236:	6823      	ldr	r3, [r4, #0]
   d4238:	4620      	mov	r0, r4
   d423a:	68db      	ldr	r3, [r3, #12]
   d423c:	4798      	blx	r3
    Particle.publish(eventName, buf, PRIVATE);
    Log.info("published: %s", buf);
   d423e:	4909      	ldr	r1, [pc, #36]	; (d4264 <_Z20PublishToGoogleSheetv+0x84>)
   d4240:	4809      	ldr	r0, [pc, #36]	; (d4268 <_Z20PublishToGoogleSheetv+0x88>)
   d4242:	aa06      	add	r2, sp, #24
   d4244:	f7ff ffaa 	bl	d419c <_ZNK5spark6Logger4infoEPKcz>
   d4248:	b026      	add	sp, #152	; 0x98
   d424a:	bd10      	pop	{r4, pc}
   d424c:	2003e574 	.word	0x2003e574
   d4250:	2003e578 	.word	0x2003e578
   d4254:	000d7d00 	.word	0x000d7d00
   d4258:	2003e57c 	.word	0x2003e57c
   d425c:	2003e580 	.word	0x2003e580
   d4260:	2003e4f8 	.word	0x2003e4f8
   d4264:	000d7d0d 	.word	0x000d7d0d
   d4268:	2003e5f8 	.word	0x2003e5f8
   d426c:	00000000 	.word	0x00000000

000d4270 <loop>:
void loop() {
   d4270:	b530      	push	{r4, r5, lr}
        if (valid_) {
   d4272:	4c4b      	ldr	r4, [pc, #300]	; (d43a0 <loop+0x130>)
   d4274:	7d23      	ldrb	r3, [r4, #20]
   d4276:	b085      	sub	sp, #20
   d4278:	b30b      	cbz	r3, d42be <loop+0x4e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d427a:	2302      	movs	r3, #2
   d427c:	7223      	strb	r3, [r4, #8]
            config_.flags |= f.value();
   d427e:	68e3      	ldr	r3, [r4, #12]
   d4280:	f043 0301 	orr.w	r3, r3, #1
   d4284:	60e3      	str	r3, [r4, #12]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4286:	6823      	ldr	r3, [r4, #0]
   d4288:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d428a:	b123      	cbz	r3, d4296 <loop+0x26>
            if (start->type == type) {
   d428c:	889a      	ldrh	r2, [r3, #4]
   d428e:	2a04      	cmp	r2, #4
   d4290:	d07b      	beq.n	d438a <loop+0x11a>
            start = start->next;
   d4292:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4294:	e7f9      	b.n	d428a <loop+0x1a>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4296:	4943      	ldr	r1, [pc, #268]	; (d43a4 <loop+0x134>)
   d4298:	2010      	movs	r0, #16
   d429a:	f002 ffa6 	bl	d71ea <_ZnwjRKSt9nothrow_t>
   d429e:	4605      	mov	r5, r0
   d42a0:	2800      	cmp	r0, #0
   d42a2:	d070      	beq.n	d4386 <loop+0x116>
   d42a4:	2210      	movs	r2, #16
   d42a6:	2100      	movs	r1, #0
   d42a8:	f003 fbfa 	bl	d7aa0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d42ac:	4b3e      	ldr	r3, [pc, #248]	; (d43a8 <loop+0x138>)
   d42ae:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d42b0:	2304      	movs	r3, #4
   d42b2:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d42b4:	6923      	ldr	r3, [r4, #16]
   d42b6:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d42b8:	4b3c      	ldr	r3, [pc, #240]	; (d43ac <loop+0x13c>)
   d42ba:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d42bc:	6125      	str	r5, [r4, #16]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).flag(SystemSleepFlag::WAIT_CLOUD).duration(WRITE_DATA_MILLIS).gpio(Pin_PIR, RISING).gpio(Pin_Beacon, RISING); 
   d42be:	2201      	movs	r2, #1
   d42c0:	2102      	movs	r1, #2
   d42c2:	4837      	ldr	r0, [pc, #220]	; (d43a0 <loop+0x130>)
   d42c4:	f7ff ff36 	bl	d4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
   d42c8:	2201      	movs	r2, #1
   d42ca:	2103      	movs	r1, #3
   d42cc:	f7ff ff32 	bl	d4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
    System.sleep(config);
   d42d0:	a801      	add	r0, sp, #4
   d42d2:	4933      	ldr	r1, [pc, #204]	; (d43a0 <loop+0x130>)
   d42d4:	f000 fc92 	bl	d4bfc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d42d8:	9801      	ldr	r0, [sp, #4]
   d42da:	b108      	cbz	r0, d42e0 <loop+0x70>
            free(wakeupSource_);
   d42dc:	f000 fbd2 	bl	d4a84 <free>
    if (digitalRead(Pin_PIR)== HIGH){
   d42e0:	2002      	movs	r0, #2
   d42e2:	f002 fed0 	bl	d7086 <digitalRead>
   d42e6:	2801      	cmp	r0, #1
      PIR_cnt = PIR_cnt + 1;
   d42e8:	bf08      	it	eq
   d42ea:	4a31      	ldreq	r2, [pc, #196]	; (d43b0 <loop+0x140>)
    if (millis() - lastWrite > WRITE_DATA_MILLIS) {
   d42ec:	4c31      	ldr	r4, [pc, #196]	; (d43b4 <loop+0x144>)
      PIR_cnt = PIR_cnt + 1;
   d42ee:	bf08      	it	eq
   d42f0:	6813      	ldreq	r3, [r2, #0]
    if (digitalRead(Pin_Beacon)== HIGH){
   d42f2:	f04f 0003 	mov.w	r0, #3
      PIR_cnt = PIR_cnt + 1;
   d42f6:	bf04      	itt	eq
   d42f8:	3301      	addeq	r3, #1
   d42fa:	6013      	streq	r3, [r2, #0]
    if (digitalRead(Pin_Beacon)== HIGH){
   d42fc:	f002 fec3 	bl	d7086 <digitalRead>
   d4300:	2801      	cmp	r0, #1
      Beacon_cnt = Beacon_cnt + 1;
   d4302:	bf01      	itttt	eq
   d4304:	4a2c      	ldreq	r2, [pc, #176]	; (d43b8 <loop+0x148>)
   d4306:	6813      	ldreq	r3, [r2, #0]
   d4308:	3301      	addeq	r3, #1
   d430a:	6013      	streq	r3, [r2, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d430c:	f000 f9a4 	bl	d4658 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastWrite > WRITE_DATA_MILLIS) {
   d4310:	6822      	ldr	r2, [r4, #0]
   d4312:	1a80      	subs	r0, r0, r2
   d4314:	4a25      	ldr	r2, [pc, #148]	; (d43ac <loop+0x13c>)
   d4316:	4290      	cmp	r0, r2
   d4318:	d933      	bls.n	d4382 <loop+0x112>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d431a:	f000 fb93 	bl	d4a44 <spark_cloud_flag_connected>
      if(Particle.connected() == false) {
   d431e:	b948      	cbnz	r0, d4334 <loop+0xc4>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4320:	f000 fb88 	bl	d4a34 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4324:	f000 fb8e 	bl	d4a44 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4328:	b910      	cbnz	r0, d4330 <loop+0xc0>
            spark_process();
   d432a:	f000 fb7b 	bl	d4a24 <spark_process>
        while (_while() && !_condition()) {
   d432e:	e7f9      	b.n	d4324 <loop+0xb4>
   d4330:	f000 fb88 	bl	d4a44 <spark_cloud_flag_connected>
        Batt_read = analogRead(Pin_Battery);
   d4334:	2010      	movs	r0, #16
   d4336:	f002 feb9 	bl	d70ac <analogRead>
   d433a:	4b20      	ldr	r3, [pc, #128]	; (d43bc <loop+0x14c>)
   d433c:	6018      	str	r0, [r3, #0]
        Batt_volt = (Batt_read*3.3/4095.0)*5.0; //multiply by 3.3/4095 to convert to voltage, mult. by 5 bc of 5 to 1 voltage divider
   d433e:	f003 f8ad 	bl	d749c <__aeabi_i2d>
   d4342:	a313      	add	r3, pc, #76	; (adr r3, d4390 <loop+0x120>)
   d4344:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4348:	f003 f912 	bl	d7570 <__aeabi_dmul>
   d434c:	a312      	add	r3, pc, #72	; (adr r3, d4398 <loop+0x128>)
   d434e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4352:	f003 fa37 	bl	d77c4 <__aeabi_ddiv>
   d4356:	2200      	movs	r2, #0
   d4358:	4b19      	ldr	r3, [pc, #100]	; (d43c0 <loop+0x150>)
   d435a:	f003 f909 	bl	d7570 <__aeabi_dmul>
   d435e:	f003 fb19 	bl	d7994 <__aeabi_d2f>
   d4362:	4b18      	ldr	r3, [pc, #96]	; (d43c4 <loop+0x154>)
   d4364:	6018      	str	r0, [r3, #0]
        PublishToGoogleSheet();
   d4366:	f7ff ff3b 	bl	d41e0 <_Z20PublishToGoogleSheetv>
        PIR_cnt = 0; 
   d436a:	4a11      	ldr	r2, [pc, #68]	; (d43b0 <loop+0x140>)
   d436c:	2300      	movs	r3, #0
   d436e:	6013      	str	r3, [r2, #0]
        Beacon_cnt = 0; 
   d4370:	4a11      	ldr	r2, [pc, #68]	; (d43b8 <loop+0x148>)

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   d4372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4376:	6013      	str	r3, [r2, #0]
   d4378:	f001 fdf4 	bl	d5f64 <delay>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d437c:	f000 f96c 	bl	d4658 <HAL_Timer_Get_Milli_Seconds>
        lastWrite = millis();
   d4380:	6020      	str	r0, [r4, #0]
}
   d4382:	b005      	add	sp, #20
   d4384:	bd30      	pop	{r4, r5, pc}
                valid_ = false;
   d4386:	7520      	strb	r0, [r4, #20]
                return *this;
   d4388:	e799      	b.n	d42be <loop+0x4e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d438a:	4a08      	ldr	r2, [pc, #32]	; (d43ac <loop+0x13c>)
   d438c:	60da      	str	r2, [r3, #12]
                return *this;
   d438e:	e796      	b.n	d42be <loop+0x4e>
   d4390:	66666666 	.word	0x66666666
   d4394:	400a6666 	.word	0x400a6666
   d4398:	00000000 	.word	0x00000000
   d439c:	40affe00 	.word	0x40affe00
   d43a0:	2003e584 	.word	0x2003e584
   d43a4:	000d8009 	.word	0x000d8009
   d43a8:	00030010 	.word	0x00030010
   d43ac:	0036ee80 	.word	0x0036ee80
   d43b0:	2003e57c 	.word	0x2003e57c
   d43b4:	2003e5a8 	.word	0x2003e5a8
   d43b8:	2003e578 	.word	0x2003e578
   d43bc:	2003e570 	.word	0x2003e570
   d43c0:	40140000 	.word	0x40140000
   d43c4:	2003e574 	.word	0x2003e574

000d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d43ca:	e9d0 5300 	ldrd	r5, r3, [r0]
   d43ce:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43d0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d43d2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d43d6:	42ae      	cmp	r6, r5
   d43d8:	d004      	beq.n	d43e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d43da:	4628      	mov	r0, r5
   d43dc:	f000 fc90 	bl	d4d00 <_ZN6StringD1Ev>
   d43e0:	3514      	adds	r5, #20
   d43e2:	e7f8      	b.n	d43d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d43e4:	6820      	ldr	r0, [r4, #0]
   d43e6:	f000 fb4d 	bl	d4a84 <free>
    AllocatorT::free(data_);
}
   d43ea:	4620      	mov	r0, r4
   d43ec:	bd70      	pop	{r4, r5, r6, pc}

000d43ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d43ee:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d43f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43f2:	4604      	mov	r4, r0
   d43f4:	460d      	mov	r5, r1
   d43f6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d43f8:	d916      	bls.n	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d43fa:	4290      	cmp	r0, r2
   d43fc:	d215      	bcs.n	d442a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d43fe:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4402:	1a75      	subs	r5, r6, r1
   d4404:	f1a1 0714 	sub.w	r7, r1, #20
   d4408:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d440a:	42b7      	cmp	r7, r6
   d440c:	d01c      	beq.n	d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d440e:	b12c      	cbz	r4, d441c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4410:	4631      	mov	r1, r6
   d4412:	4620      	mov	r0, r4
   d4414:	f000 fcdc 	bl	d4dd0 <_ZN6StringC1EOS_>
   d4418:	7c33      	ldrb	r3, [r6, #16]
   d441a:	7423      	strb	r3, [r4, #16]
   d441c:	4630      	mov	r0, r6
   d441e:	f000 fc6f 	bl	d4d00 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4422:	3e14      	subs	r6, #20
   d4424:	3c14      	subs	r4, #20
   d4426:	e7f0      	b.n	d440a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4428:	d00e      	beq.n	d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d442a:	42b5      	cmp	r5, r6
   d442c:	d00c      	beq.n	d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d442e:	b12c      	cbz	r4, d443c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4430:	4629      	mov	r1, r5
   d4432:	4620      	mov	r0, r4
   d4434:	f000 fccc 	bl	d4dd0 <_ZN6StringC1EOS_>
   d4438:	7c2b      	ldrb	r3, [r5, #16]
   d443a:	7423      	strb	r3, [r4, #16]
   d443c:	4628      	mov	r0, r5
   d443e:	f000 fc5f 	bl	d4d00 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4442:	3514      	adds	r5, #20
   d4444:	3414      	adds	r4, #20
   d4446:	e7f0      	b.n	d442a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d444a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d444e:	2300      	movs	r3, #0
   d4450:	e9c0 3300 	strd	r3, r3, [r0]
   d4454:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4456:	684f      	ldr	r7, [r1, #4]
   d4458:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d445a:	4604      	mov	r4, r0
   d445c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d445e:	dd23      	ble.n	d44a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4460:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4464:	fb08 f007 	mul.w	r0, r8, r7
   d4468:	f000 fb04 	bl	d4a74 <malloc>
            if (!d) {
   d446c:	4605      	mov	r5, r0
   d446e:	b1d8      	cbz	r0, d44a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4470:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4474:	fb08 1202 	mla	r2, r8, r2, r1
   d4478:	f7ff ffb9 	bl	d43ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d447c:	6820      	ldr	r0, [r4, #0]
   d447e:	f000 fb01 	bl	d4a84 <free>
        data_ = d;
   d4482:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4484:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4486:	e9d6 7300 	ldrd	r7, r3, [r6]
   d448a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d448e:	45b8      	cmp	r8, r7
   d4490:	d008      	beq.n	d44a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4492:	4639      	mov	r1, r7
   d4494:	4628      	mov	r0, r5
   d4496:	f000 fcb5 	bl	d4e04 <_ZN6StringC1ERKS_>
   d449a:	7c3b      	ldrb	r3, [r7, #16]
   d449c:	742b      	strb	r3, [r5, #16]
   d449e:	3714      	adds	r7, #20
   d44a0:	3514      	adds	r5, #20
   d44a2:	e7f4      	b.n	d448e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d44a4:	6873      	ldr	r3, [r6, #4]
   d44a6:	6063      	str	r3, [r4, #4]
}
   d44a8:	4620      	mov	r0, r4
   d44aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d44b0 <_GLOBAL__sub_I_PIR_cnt>:
   d44b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   d44b4:	4b36      	ldr	r3, [pc, #216]	; (d4590 <_GLOBAL__sub_I_PIR_cnt+0xe0>)
        filter_(level, filters) {
   d44b6:	4d37      	ldr	r5, [pc, #220]	; (d4594 <_GLOBAL__sub_I_PIR_cnt+0xe4>)
   d44b8:	2601      	movs	r6, #1
   d44ba:	b08c      	sub	sp, #48	; 0x30
   d44bc:	701e      	strb	r6, [r3, #0]
   d44be:	f000 f8cb 	bl	d4658 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastSync = millis();
   d44c2:	4b35      	ldr	r3, [pc, #212]	; (d4598 <_GLOBAL__sub_I_PIR_cnt+0xe8>)
   d44c4:	6018      	str	r0, [r3, #0]
   d44c6:	f000 f8c7 	bl	d4658 <HAL_Timer_Get_Milli_Seconds>
unsigned long lastWrite = millis();
   d44ca:	4b34      	ldr	r3, [pc, #208]	; (d459c <_GLOBAL__sub_I_PIR_cnt+0xec>)
        capacity_(0) {
   d44cc:	2400      	movs	r4, #0
   d44ce:	6018      	str	r0, [r3, #0]
SYSTEM_THREAD(ENABLED); //allows the code to run before connecting to the cloud and will run without cloud conncetion
   d44d0:	2100      	movs	r1, #0
   d44d2:	4630      	mov	r0, r6
   d44d4:	f000 fa10 	bl	d48f8 <system_thread_set_state>
   d44d8:	e9cd 4400 	strd	r4, r4, [sp]
   d44dc:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d44de:	f002 f983 	bl	d67e8 <_Z16_fetch_usbserialv>
   d44e2:	4669      	mov	r1, sp
   d44e4:	4607      	mov	r7, r0
   d44e6:	a803      	add	r0, sp, #12
   d44e8:	f7ff ffaf 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d44ec:	46a8      	mov	r8, r5
        stream_(&stream) {
   d44ee:	a903      	add	r1, sp, #12
   d44f0:	a806      	add	r0, sp, #24
   d44f2:	f7ff ffaa 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d44f6:	4b2a      	ldr	r3, [pc, #168]	; (d45a0 <_GLOBAL__sub_I_PIR_cnt+0xf0>)
   d44f8:	f848 3b04 	str.w	r3, [r8], #4
   d44fc:	a906      	add	r1, sp, #24
   d44fe:	a809      	add	r0, sp, #36	; 0x24
   d4500:	f7ff ffa3 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4504:	aa09      	add	r2, sp, #36	; 0x24
   d4506:	211e      	movs	r1, #30
   d4508:	4640      	mov	r0, r8
   d450a:	f001 fa05 	bl	d5918 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d450e:	a809      	add	r0, sp, #36	; 0x24
   d4510:	f7ff ff5a 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4514:	a806      	add	r0, sp, #24
   d4516:	f7ff ff57 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d451a:	4b22      	ldr	r3, [pc, #136]	; (d45a4 <_GLOBAL__sub_I_PIR_cnt+0xf4>)
   d451c:	602b      	str	r3, [r5, #0]
   d451e:	622f      	str	r7, [r5, #32]
   d4520:	a803      	add	r0, sp, #12
   d4522:	f7ff ff51 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4526:	4b20      	ldr	r3, [pc, #128]	; (d45a8 <_GLOBAL__sub_I_PIR_cnt+0xf8>)
   d4528:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d452a:	f002 f95d 	bl	d67e8 <_Z16_fetch_usbserialv>
   d452e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4532:	f002 f949 	bl	d67c8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4536:	f000 fea9 	bl	d528c <_ZN5spark10LogManager8instanceEv>
   d453a:	4629      	mov	r1, r5
   d453c:	f001 f97e 	bl	d583c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler; //
   d4540:	4668      	mov	r0, sp
   d4542:	f7ff ff41 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4546:	4a19      	ldr	r2, [pc, #100]	; (d45ac <_GLOBAL__sub_I_PIR_cnt+0xfc>)
   d4548:	4919      	ldr	r1, [pc, #100]	; (d45b0 <_GLOBAL__sub_I_PIR_cnt+0x100>)
   d454a:	4628      	mov	r0, r5
   d454c:	f002 fe46 	bl	d71dc <__aeabi_atexit>
        : config_(config) {
   d4550:	4818      	ldr	r0, [pc, #96]	; (d45b4 <_GLOBAL__sub_I_PIR_cnt+0x104>)
FuelGauge fuel; //defines the fuel gauge class
   d4552:	4d19      	ldr	r5, [pc, #100]	; (d45b8 <_GLOBAL__sub_I_PIR_cnt+0x108>)
              valid_(true) {
   d4554:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d4558:	4603      	mov	r3, r0
   d455a:	1d01      	adds	r1, r0, #4
   d455c:	f843 1b09 	str.w	r1, [r3], #9
              valid_(true) {
   d4560:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d4562:	4b16      	ldr	r3, [pc, #88]	; (d45bc <_GLOBAL__sub_I_PIR_cnt+0x10c>)
   d4564:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config;
   d4566:	4a11      	ldr	r2, [pc, #68]	; (d45ac <_GLOBAL__sub_I_PIR_cnt+0xfc>)
   d4568:	4915      	ldr	r1, [pc, #84]	; (d45c0 <_GLOBAL__sub_I_PIR_cnt+0x110>)
              valid_(true) {
   d456a:	7506      	strb	r6, [r0, #20]
        config_.wakeup_sources = nullptr;
   d456c:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4570:	7204      	strb	r4, [r0, #8]
   d4572:	f002 fe33 	bl	d71dc <__aeabi_atexit>
FuelGauge fuel; //defines the fuel gauge class
   d4576:	4621      	mov	r1, r4
   d4578:	4628      	mov	r0, r5
   d457a:	f001 fd17 	bl	d5fac <_ZN9FuelGaugeC1Eb>
   d457e:	4a0b      	ldr	r2, [pc, #44]	; (d45ac <_GLOBAL__sub_I_PIR_cnt+0xfc>)
   d4580:	4910      	ldr	r1, [pc, #64]	; (d45c4 <_GLOBAL__sub_I_PIR_cnt+0x114>)
   d4582:	4628      	mov	r0, r5
   d4584:	f002 fe2a 	bl	d71dc <__aeabi_atexit>
   d4588:	b00c      	add	sp, #48	; 0x30
   d458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d458e:	bf00      	nop
   d4590:	2003e580 	.word	0x2003e580
   d4594:	2003e5ac 	.word	0x2003e5ac
   d4598:	2003e5a4 	.word	0x2003e5a4
   d459c:	2003e5a8 	.word	0x2003e5a8
   d45a0:	000d7d24 	.word	0x000d7d24
   d45a4:	000d7e5c 	.word	0x000d7e5c
   d45a8:	000d7d3c 	.word	0x000d7d3c
   d45ac:	2003e56c 	.word	0x2003e56c
   d45b0:	000d40ed 	.word	0x000d40ed
   d45b4:	2003e584 	.word	0x2003e584
   d45b8:	2003e59c 	.word	0x2003e59c
   d45bc:	00030010 	.word	0x00030010
   d45c0:	000d40d3 	.word	0x000d40d3
   d45c4:	000d5fcd 	.word	0x000d5fcd

000d45c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <netdb_freeaddrinfo+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	689b      	ldr	r3, [r3, #8]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030268 	.word	0x00030268

000d45d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <netdb_getaddrinfo+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	68db      	ldr	r3, [r3, #12]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030268 	.word	0x00030268

000d45e8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_Validate_Pin_Function+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	685b      	ldr	r3, [r3, #4]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003022c 	.word	0x0003022c

000d45f8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_Pin_Mode+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	689b      	ldr	r3, [r3, #8]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003022c 	.word	0x0003022c

000d4608 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_Get_Pin_Mode+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	68db      	ldr	r3, [r3, #12]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003022c 	.word	0x0003022c

000d4618 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_GPIO_Read+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	695b      	ldr	r3, [r3, #20]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003022c 	.word	0x0003022c

000d4628 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <hal_adc_read+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003022c 	.word	0x0003022c

000d4638 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_RNG_GetRandomNumber+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	685b      	ldr	r3, [r3, #4]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030218 	.word	0x00030218

000d4648 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_Delay_Microseconds+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	68db      	ldr	r3, [r3, #12]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030218 	.word	0x00030218

000d4658 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	695b      	ldr	r3, [r3, #20]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030218 	.word	0x00030218

000d4668 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <os_mutex_recursive_create+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030248 	.word	0x00030248

000d4678 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <os_mutex_recursive_destroy+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030248 	.word	0x00030248

000d4688 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <os_mutex_recursive_lock+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030248 	.word	0x00030248

000d4698 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <os_mutex_recursive_unlock+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030248 	.word	0x00030248

000d46a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <inet_inet_ntop+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	695b      	ldr	r3, [r3, #20]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030264 	.word	0x00030264

000d46b8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <hal_usart_init+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	681b      	ldr	r3, [r3, #0]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003023c 	.word	0x0003023c

000d46c8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <hal_usart_end+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	689b      	ldr	r3, [r3, #8]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003023c 	.word	0x0003023c

000d46d8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <hal_usart_write+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	68db      	ldr	r3, [r3, #12]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003023c 	.word	0x0003023c

000d46e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <hal_usart_available+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	691b      	ldr	r3, [r3, #16]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003023c 	.word	0x0003023c

000d46f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <hal_usart_read+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	695b      	ldr	r3, [r3, #20]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003023c 	.word	0x0003023c

000d4708 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <hal_usart_peek+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	699b      	ldr	r3, [r3, #24]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003023c 	.word	0x0003023c

000d4718 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <hal_usart_flush+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	69db      	ldr	r3, [r3, #28]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003023c 	.word	0x0003023c

000d4728 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <hal_usart_is_enabled+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6a1b      	ldr	r3, [r3, #32]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003023c 	.word	0x0003023c

000d4738 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <hal_usart_available_data_for_write+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003023c 	.word	0x0003023c

000d4748 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <hal_usart_begin_config+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003023c 	.word	0x0003023c

000d4758 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <hal_i2c_write+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6a1b      	ldr	r3, [r3, #32]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030228 	.word	0x00030228

000d4768 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <hal_i2c_available+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030228 	.word	0x00030228

000d4778 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <hal_i2c_read+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030228 	.word	0x00030228

000d4788 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <hal_i2c_peek+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030228 	.word	0x00030228

000d4798 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <hal_i2c_flush+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030228 	.word	0x00030228

000d47a8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <hal_i2c_is_enabled+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030228 	.word	0x00030228

000d47b8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <hal_i2c_init+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030228 	.word	0x00030228

000d47c8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <hal_i2c_lock+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030228 	.word	0x00030228

000d47d8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <hal_i2c_unlock+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030228 	.word	0x00030228

000d47e8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <hal_spi_init+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	69db      	ldr	r3, [r3, #28]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030230 	.word	0x00030230

000d47f8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <hal_spi_is_enabled+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6a1b      	ldr	r3, [r3, #32]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030230 	.word	0x00030230

000d4808 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_USB_USART_Init+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	681b      	ldr	r3, [r3, #0]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003024c 	.word	0x0003024c

000d4818 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_USB_USART_Begin+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	685b      	ldr	r3, [r3, #4]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003024c 	.word	0x0003024c

000d4828 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_USB_USART_End+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	689b      	ldr	r3, [r3, #8]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	0003024c 	.word	0x0003024c

000d4838 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_USB_USART_Available_Data+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	691b      	ldr	r3, [r3, #16]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003024c 	.word	0x0003024c

000d4848 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003024c 	.word	0x0003024c

000d4858 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_USB_USART_Receive_Data+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	699b      	ldr	r3, [r3, #24]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003024c 	.word	0x0003024c

000d4868 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USB_USART_Send_Data+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	69db      	ldr	r3, [r3, #28]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003024c 	.word	0x0003024c

000d4878 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_USB_USART_Flush_Data+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6a1b      	ldr	r3, [r3, #32]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003024c 	.word	0x0003024c

000d4888 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <panic_+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030260 	.word	0x00030260

000d4898 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <log_message+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030260 	.word	0x00030260

000d48a8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <log_message_v+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030260 	.word	0x00030260

000d48b8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <log_level_name+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030260 	.word	0x00030260

000d48c8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <log_set_callbacks+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030260 	.word	0x00030260

000d48d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <set_system_mode+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	685b      	ldr	r3, [r3, #4]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030220 	.word	0x00030220

000d48e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <system_delay_ms+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	695b      	ldr	r3, [r3, #20]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030220 	.word	0x00030220

000d48f8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <system_thread_set_state+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030220 	.word	0x00030220

000d4908 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <application_thread_current+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030220 	.word	0x00030220

000d4918 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <application_thread_invoke+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030220 	.word	0x00030220

000d4928 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b03      	ldr	r3, [pc, #12]	; (d4938 <system_ctrl_set_app_request_handler+0x10>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4932:	9301      	str	r3, [sp, #4]
   d4934:	bd08      	pop	{r3, pc}
   d4936:	0000      	.short	0x0000
   d4938:	00030220 	.word	0x00030220

000d493c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b03      	ldr	r3, [pc, #12]	; (d494c <system_ctrl_set_result+0x10>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4946:	9301      	str	r3, [sp, #4]
   d4948:	bd08      	pop	{r3, pc}
   d494a:	0000      	.short	0x0000
   d494c:	00030220 	.word	0x00030220

000d4950 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b03      	ldr	r3, [pc, #12]	; (d4960 <system_sleep_ext+0x10>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d495a:	9301      	str	r3, [sp, #4]
   d495c:	bd08      	pop	{r3, pc}
   d495e:	0000      	.short	0x0000
   d4960:	00030220 	.word	0x00030220

000d4964 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_connect+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	685b      	ldr	r3, [r3, #4]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_connecting+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	689b      	ldr	r3, [r3, #8]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_disconnect+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	68db      	ldr	r3, [r3, #12]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_ready+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	691b      	ldr	r3, [r3, #16]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <network_on+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	695b      	ldr	r3, [r3, #20]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030240 	.word	0x00030240

000d49b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <network_off+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	699b      	ldr	r3, [r3, #24]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030240 	.word	0x00030240

000d49c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <network_listen+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	69db      	ldr	r3, [r3, #28]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030240 	.word	0x00030240

000d49d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <network_listening+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6a1b      	ldr	r3, [r3, #32]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030240 	.word	0x00030240

000d49e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <network_set_listen_timeout+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030240 	.word	0x00030240

000d49f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <network_get_listen_timeout+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030240 	.word	0x00030240

000d4a04 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <network_is_on+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030240 	.word	0x00030240

000d4a14 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <network_is_off+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030240 	.word	0x00030240

000d4a24 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <spark_process+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	689b      	ldr	r3, [r3, #8]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030244 	.word	0x00030244

000d4a34 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <spark_cloud_flag_connect+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	68db      	ldr	r3, [r3, #12]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030244 	.word	0x00030244

000d4a44 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <spark_cloud_flag_connected+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	695b      	ldr	r3, [r3, #20]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030244 	.word	0x00030244

000d4a54 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <spark_send_event+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6a1b      	ldr	r3, [r3, #32]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030244 	.word	0x00030244

000d4a64 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030244 	.word	0x00030244

000d4a74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <malloc+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	681b      	ldr	r3, [r3, #0]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003021c 	.word	0x0003021c

000d4a84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <free+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	685b      	ldr	r3, [r3, #4]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003021c 	.word	0x0003021c

000d4a94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <realloc+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	689b      	ldr	r3, [r3, #8]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003021c 	.word	0x0003021c

000d4aa4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <snprintf+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	69db      	ldr	r3, [r3, #28]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003021c 	.word	0x0003021c

000d4ab4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <vsnprintf+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003021c 	.word	0x0003021c

000d4ac4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <abort+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003021c 	.word	0x0003021c

000d4ad4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <_malloc_r+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003021c 	.word	0x0003021c

000d4ae4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <newlib_impure_ptr_callback+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003021c 	.word	0x0003021c

000d4af4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4af4:	2200      	movs	r2, #0
   d4af6:	6840      	ldr	r0, [r0, #4]
   d4af8:	4611      	mov	r1, r2
   d4afa:	f7ff bf6b 	b.w	d49d4 <network_listening>

000d4afe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4afe:	2200      	movs	r2, #0
   d4b00:	6840      	ldr	r0, [r0, #4]
   d4b02:	4611      	mov	r1, r2
   d4b04:	f7ff bf76 	b.w	d49f4 <network_get_listen_timeout>

000d4b08 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4b08:	6840      	ldr	r0, [r0, #4]
   d4b0a:	2200      	movs	r2, #0
   d4b0c:	f7ff bf6a 	b.w	d49e4 <network_set_listen_timeout>

000d4b10 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b10:	6840      	ldr	r0, [r0, #4]
   d4b12:	2200      	movs	r2, #0
   d4b14:	f081 0101 	eor.w	r1, r1, #1
   d4b18:	f7ff bf54 	b.w	d49c4 <network_listen>

000d4b1c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b1c:	2300      	movs	r3, #0
   d4b1e:	6840      	ldr	r0, [r0, #4]
   d4b20:	461a      	mov	r2, r3
   d4b22:	4619      	mov	r1, r3
   d4b24:	f7ff bf46 	b.w	d49b4 <network_off>

000d4b28 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b28:	2300      	movs	r3, #0
   d4b2a:	6840      	ldr	r0, [r0, #4]
   d4b2c:	461a      	mov	r2, r3
   d4b2e:	4619      	mov	r1, r3
   d4b30:	f7ff bf38 	b.w	d49a4 <network_on>

000d4b34 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b34:	2200      	movs	r2, #0
   d4b36:	6840      	ldr	r0, [r0, #4]
   d4b38:	4611      	mov	r1, r2
   d4b3a:	f7ff bf2b 	b.w	d4994 <network_ready>

000d4b3e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b3e:	2200      	movs	r2, #0
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	4611      	mov	r1, r2
   d4b44:	f7ff bf16 	b.w	d4974 <network_connecting>

000d4b48 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b48:	6840      	ldr	r0, [r0, #4]
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	2102      	movs	r1, #2
   d4b4e:	f7ff bf19 	b.w	d4984 <network_disconnect>

000d4b52 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b52:	2300      	movs	r3, #0
   d4b54:	6840      	ldr	r0, [r0, #4]
   d4b56:	461a      	mov	r2, r3
   d4b58:	f7ff bf04 	b.w	d4964 <network_connect>

000d4b5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b5c:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b5e:	2203      	movs	r2, #3
   d4b60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b62:	4a02      	ldr	r2, [pc, #8]	; (d4b6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b64:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b66:	4770      	bx	lr
   d4b68:	2003e5d0 	.word	0x2003e5d0
   d4b6c:	000d7d60 	.word	0x000d7d60

000d4b70 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4b70:	b510      	push	{r4, lr}
   d4b72:	4604      	mov	r4, r0
   d4b74:	4608      	mov	r0, r1
{
    _spi = spi;
   d4b76:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4b78:	f7ff fe36 	bl	d47e8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b7c:	2300      	movs	r3, #0
   d4b7e:	6063      	str	r3, [r4, #4]
}
   d4b80:	4620      	mov	r0, r4
   d4b82:	bd10      	pop	{r4, pc}

000d4b84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4b84:	b510      	push	{r4, lr}
   d4b86:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4b88:	6800      	ldr	r0, [r0, #0]
   d4b8a:	b118      	cbz	r0, d4b94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4b8c:	f7ff ff7a 	bl	d4a84 <free>
            wakeupSource_ = nullptr;
   d4b90:	2300      	movs	r3, #0
   d4b92:	6023      	str	r3, [r4, #0]
        }
    }
   d4b94:	bd10      	pop	{r4, pc}

000d4b96 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b96:	b510      	push	{r4, lr}
   d4b98:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4b9a:	f7ff fff3 	bl	d4b84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	bd10      	pop	{r4, pc}

000d4ba2 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4ba2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d4ba4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d4ba8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d4baa:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4bac:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d4bae:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d4bb2:	f8c0 2006 	str.w	r2, [r0, #6]
   d4bb6:	889b      	ldrh	r3, [r3, #4]
   d4bb8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4bba:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4bbc:	f7ff ffe2 	bl	d4b84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d4bc0:	682b      	ldr	r3, [r5, #0]
   d4bc2:	b113      	cbz	r3, d4bca <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d4bc4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d4bc6:	2300      	movs	r3, #0
   d4bc8:	602b      	str	r3, [r5, #0]
    }
   d4bca:	4620      	mov	r0, r4
   d4bcc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4bd0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d4bd0:	b538      	push	{r3, r4, r5, lr}
   d4bd2:	460c      	mov	r4, r1
   d4bd4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d4bd6:	f7ff ffd5 	bl	d4b84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d4bda:	b144      	cbz	r4, d4bee <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d4bdc:	8820      	ldrh	r0, [r4, #0]
   d4bde:	f7ff ff49 	bl	d4a74 <malloc>
   d4be2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4be4:	b128      	cbz	r0, d4bf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d4be6:	8822      	ldrh	r2, [r4, #0]
   d4be8:	4621      	mov	r1, r4
   d4bea:	f002 ff31 	bl	d7a50 <memcpy>
        return SYSTEM_ERROR_NONE;
   d4bee:	2000      	movs	r0, #0
    }
   d4bf0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d4bf2:	4801      	ldr	r0, [pc, #4]	; (d4bf8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d4bf4:	e7fc      	b.n	d4bf0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d4bf6:	bf00      	nop
   d4bf8:	fffffefc 	.word	0xfffffefc

000d4bfc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d4bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4bfe:	4d2d      	ldr	r5, [pc, #180]	; (d4cb4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d4c00:	7d0b      	ldrb	r3, [r1, #20]
   d4c02:	4604      	mov	r4, r0
   d4c04:	b08b      	sub	sp, #44	; 0x2c
   d4c06:	4608      	mov	r0, r1
   d4c08:	1daf      	adds	r7, r5, #6
   d4c0a:	2b00      	cmp	r3, #0
   d4c0c:	d038      	beq.n	d4c80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d4c0e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d4c10:	791b      	ldrb	r3, [r3, #4]
   d4c12:	2b00      	cmp	r3, #0
   d4c14:	d034      	beq.n	d4c80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d4c16:	2200      	movs	r2, #0
    SleepResult() {}
   d4c18:	4b27      	ldr	r3, [pc, #156]	; (d4cb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4c1a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d4c1c:	a902      	add	r1, sp, #8
   d4c1e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d4c20:	9202      	str	r2, [sp, #8]
   d4c22:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d4c26:	f88d 200e 	strb.w	r2, [sp, #14]
   d4c2a:	f7ff fe91 	bl	d4950 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d4c2e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d4c32:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d4c36:	b200      	sxth	r0, r0
   d4c38:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d4c3c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d4c40:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d4c42:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d4c44:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff ffc2 	bl	d4bd0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d4c4c:	a802      	add	r0, sp, #8
   d4c4e:	f7ff ff99 	bl	d4b84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d4c52:	2300      	movs	r3, #0
   d4c54:	6023      	str	r3, [r4, #0]
   d4c56:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4c58:	71a3      	strb	r3, [r4, #6]
   d4c5a:	8123      	strh	r3, [r4, #8]
   d4c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4c60:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d4c62:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d4c66:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d4c68:	683b      	ldr	r3, [r7, #0]
   d4c6a:	f8c4 3006 	str.w	r3, [r4, #6]
   d4c6e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4c70:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d4c72:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d4c74:	4620      	mov	r0, r4
   d4c76:	f7ff ffab 	bl	d4bd0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	b00b      	add	sp, #44	; 0x2c
   d4c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d4c80:	2600      	movs	r6, #0
   d4c82:	2320      	movs	r3, #32
   d4c84:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d4c88:	4b0c      	ldr	r3, [pc, #48]	; (d4cbc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d4c8a:	9300      	str	r3, [sp, #0]
   d4c8c:	490c      	ldr	r1, [pc, #48]	; (d4cc0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d4c8e:	4633      	mov	r3, r6
   d4c90:	aa02      	add	r2, sp, #8
   d4c92:	2032      	movs	r0, #50	; 0x32
   d4c94:	f7ff fe00 	bl	d4898 <log_message>
    SleepResult() {}
   d4c98:	4b07      	ldr	r3, [pc, #28]	; (d4cb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4c9a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d4c9c:	a902      	add	r1, sp, #8
        error_ = error;
   d4c9e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d4ca2:	4804      	ldr	r0, [pc, #16]	; (d4cb4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d4ca4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d4ca6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d4caa:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4cae:	f7ff ff78 	bl	d4ba2 <_ZN17SystemSleepResultaSEOS_>
   d4cb2:	e7cb      	b.n	d4c4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d4cb4:	2003e5d8 	.word	0x2003e5d8
   d4cb8:	ffff0000 	.word	0xffff0000
   d4cbc:	000d7d9b 	.word	0x000d7d9b
   d4cc0:	000d7d94 	.word	0x000d7d94

000d4cc4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4cc4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4cc6:	4b09      	ldr	r3, [pc, #36]	; (d4cec <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4cc8:	4c09      	ldr	r4, [pc, #36]	; (d4cf0 <_GLOBAL__sub_I_System+0x2c>)
   d4cca:	2202      	movs	r2, #2
   d4ccc:	2000      	movs	r0, #0
   d4cce:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4cd0:	4b08      	ldr	r3, [pc, #32]	; (d4cf4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4cd2:	6020      	str	r0, [r4, #0]
   d4cd4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4cd6:	71a0      	strb	r0, [r4, #6]
   d4cd8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4cda:	f7ff fdfd 	bl	d48d8 <set_system_mode>
SystemClass System;
   d4cde:	4620      	mov	r0, r4
   d4ce0:	4a05      	ldr	r2, [pc, #20]	; (d4cf8 <_GLOBAL__sub_I_System+0x34>)
   d4ce2:	4906      	ldr	r1, [pc, #24]	; (d4cfc <_GLOBAL__sub_I_System+0x38>)
   d4ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4ce8:	f002 ba78 	b.w	d71dc <__aeabi_atexit>
   d4cec:	2003e5e4 	.word	0x2003e5e4
   d4cf0:	2003e5d8 	.word	0x2003e5d8
   d4cf4:	ffff0000 	.word	0xffff0000
   d4cf8:	2003e56c 	.word	0x2003e56c
   d4cfc:	000d4b97 	.word	0x000d4b97

000d4d00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4d00:	b510      	push	{r4, lr}
   d4d02:	4604      	mov	r4, r0
{
	free(buffer);
   d4d04:	6800      	ldr	r0, [r0, #0]
   d4d06:	f7ff febd 	bl	d4a84 <free>
}
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	bd10      	pop	{r4, pc}

000d4d0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4d0e:	b510      	push	{r4, lr}
   d4d10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4d12:	6800      	ldr	r0, [r0, #0]
   d4d14:	b108      	cbz	r0, d4d1a <_ZN6String10invalidateEv+0xc>
   d4d16:	f7ff feb5 	bl	d4a84 <free>
	buffer = NULL;
   d4d1a:	2300      	movs	r3, #0
	capacity = len = 0;
   d4d1c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4d20:	6023      	str	r3, [r4, #0]
}
   d4d22:	bd10      	pop	{r4, pc}

000d4d24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4d24:	b538      	push	{r3, r4, r5, lr}
   d4d26:	4604      	mov	r4, r0
   d4d28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4d2a:	6800      	ldr	r0, [r0, #0]
   d4d2c:	3101      	adds	r1, #1
   d4d2e:	f7ff feb1 	bl	d4a94 <realloc>
	if (newbuffer) {
   d4d32:	b110      	cbz	r0, d4d3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4d34:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4d38:	2001      	movs	r0, #1
	}
	return 0;
}
   d4d3a:	bd38      	pop	{r3, r4, r5, pc}

000d4d3c <_ZN6String7reserveEj>:
{
   d4d3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4d3e:	6803      	ldr	r3, [r0, #0]
{
   d4d40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4d42:	b123      	cbz	r3, d4d4e <_ZN6String7reserveEj+0x12>
   d4d44:	6843      	ldr	r3, [r0, #4]
   d4d46:	428b      	cmp	r3, r1
   d4d48:	d301      	bcc.n	d4d4e <_ZN6String7reserveEj+0x12>
   d4d4a:	2001      	movs	r0, #1
}
   d4d4c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4d4e:	4620      	mov	r0, r4
   d4d50:	f7ff ffe8 	bl	d4d24 <_ZN6String12changeBufferEj>
   d4d54:	2800      	cmp	r0, #0
   d4d56:	d0f9      	beq.n	d4d4c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4d58:	68a3      	ldr	r3, [r4, #8]
   d4d5a:	2b00      	cmp	r3, #0
   d4d5c:	d1f5      	bne.n	d4d4a <_ZN6String7reserveEj+0xe>
   d4d5e:	6822      	ldr	r2, [r4, #0]
   d4d60:	7013      	strb	r3, [r2, #0]
   d4d62:	e7f2      	b.n	d4d4a <_ZN6String7reserveEj+0xe>

000d4d64 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4d66:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4d68:	4611      	mov	r1, r2
   d4d6a:	9201      	str	r2, [sp, #4]
{
   d4d6c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4d6e:	f7ff ffe5 	bl	d4d3c <_ZN6String7reserveEj>
   d4d72:	9a01      	ldr	r2, [sp, #4]
   d4d74:	b928      	cbnz	r0, d4d82 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4d76:	4620      	mov	r0, r4
   d4d78:	f7ff ffc9 	bl	d4d0e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	b003      	add	sp, #12
   d4d80:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4d82:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4d84:	4629      	mov	r1, r5
   d4d86:	6820      	ldr	r0, [r4, #0]
   d4d88:	f002 fe62 	bl	d7a50 <memcpy>
	buffer[len] = 0;
   d4d8c:	6822      	ldr	r2, [r4, #0]
   d4d8e:	68a3      	ldr	r3, [r4, #8]
   d4d90:	2100      	movs	r1, #0
   d4d92:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4d94:	e7f2      	b.n	d4d7c <_ZN6String4copyEPKcj+0x18>

000d4d96 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4d96:	b538      	push	{r3, r4, r5, lr}
   d4d98:	4605      	mov	r5, r0
	if (buffer) {
   d4d9a:	6800      	ldr	r0, [r0, #0]
{
   d4d9c:	460c      	mov	r4, r1
	if (buffer) {
   d4d9e:	b168      	cbz	r0, d4dbc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4da0:	686a      	ldr	r2, [r5, #4]
   d4da2:	688b      	ldr	r3, [r1, #8]
   d4da4:	429a      	cmp	r2, r3
   d4da6:	d307      	bcc.n	d4db8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4da8:	6809      	ldr	r1, [r1, #0]
   d4daa:	f002 fec6 	bl	d7b3a <strcpy>
			len = rhs.len;
   d4dae:	68a3      	ldr	r3, [r4, #8]
   d4db0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4db2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4db4:	60a3      	str	r3, [r4, #8]
}
   d4db6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4db8:	f7ff fe64 	bl	d4a84 <free>
	buffer = rhs.buffer;
   d4dbc:	6823      	ldr	r3, [r4, #0]
   d4dbe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4dc0:	6863      	ldr	r3, [r4, #4]
   d4dc2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4dc4:	68a3      	ldr	r3, [r4, #8]
   d4dc6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4dc8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4dca:	e9c4 3300 	strd	r3, r3, [r4]
   d4dce:	e7f1      	b.n	d4db4 <_ZN6String4moveERS_+0x1e>

000d4dd0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4dd0:	b510      	push	{r4, lr}
	buffer = NULL;
   d4dd2:	2300      	movs	r3, #0
	capacity = 0;
   d4dd4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4dd8:	4604      	mov	r4, r0
	len = 0;
   d4dda:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ddc:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4dde:	f7ff ffda 	bl	d4d96 <_ZN6String4moveERS_>
}
   d4de2:	4620      	mov	r0, r4
   d4de4:	bd10      	pop	{r4, pc}

000d4de6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4de6:	4288      	cmp	r0, r1
{
   d4de8:	b510      	push	{r4, lr}
   d4dea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4dec:	d005      	beq.n	d4dfa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4dee:	680b      	ldr	r3, [r1, #0]
   d4df0:	b12b      	cbz	r3, d4dfe <_ZN6StringaSERKS_+0x18>
   d4df2:	688a      	ldr	r2, [r1, #8]
   d4df4:	4619      	mov	r1, r3
   d4df6:	f7ff ffb5 	bl	d4d64 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	bd10      	pop	{r4, pc}
	else invalidate();
   d4dfe:	f7ff ff86 	bl	d4d0e <_ZN6String10invalidateEv>
   d4e02:	e7fa      	b.n	d4dfa <_ZN6StringaSERKS_+0x14>

000d4e04 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4e04:	b510      	push	{r4, lr}
	buffer = NULL;
   d4e06:	2300      	movs	r3, #0
String::String(const String &value)
   d4e08:	4604      	mov	r4, r0
	capacity = 0;
   d4e0a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4e0e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e10:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4e12:	f7ff ffe8 	bl	d4de6 <_ZN6StringaSERKS_>
}
   d4e16:	4620      	mov	r0, r4
   d4e18:	bd10      	pop	{r4, pc}

000d4e1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4e1a:	b510      	push	{r4, lr}
          _M_dispose();
   d4e1c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4e1e:	4604      	mov	r4, r0
          _M_dispose();
   d4e20:	689b      	ldr	r3, [r3, #8]
   d4e22:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e24:	68a3      	ldr	r3, [r4, #8]
   d4e26:	3b01      	subs	r3, #1
   d4e28:	60a3      	str	r3, [r4, #8]
   d4e2a:	b92b      	cbnz	r3, d4e38 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4e2c:	6823      	ldr	r3, [r4, #0]
   d4e2e:	4620      	mov	r0, r4
   d4e30:	68db      	ldr	r3, [r3, #12]
    }
   d4e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4e36:	4718      	bx	r3
    }
   d4e38:	bd10      	pop	{r4, pc}

000d4e3a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4e3a:	b510      	push	{r4, lr}
   d4e3c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4e3e:	6800      	ldr	r0, [r0, #0]
   d4e40:	b108      	cbz	r0, d4e46 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4e42:	f7ff fc19 	bl	d4678 <os_mutex_recursive_destroy>
    }
   d4e46:	4620      	mov	r0, r4
   d4e48:	bd10      	pop	{r4, pc}

000d4e4a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e4a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e4c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4e4e:	4604      	mov	r4, r0
      if (_M_manager)
   d4e50:	b113      	cbz	r3, d4e58 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e52:	2203      	movs	r2, #3
   d4e54:	4601      	mov	r1, r0
   d4e56:	4798      	blx	r3
    }
   d4e58:	4620      	mov	r0, r4
   d4e5a:	bd10      	pop	{r4, pc}

000d4e5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4e5c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4e5e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4e62:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4e64:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d4e68:	42ae      	cmp	r6, r5
   d4e6a:	d004      	beq.n	d4e76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d4e6c:	4628      	mov	r0, r5
   d4e6e:	f7ff ff47 	bl	d4d00 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d4e72:	3510      	adds	r5, #16
   d4e74:	e7f8      	b.n	d4e68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d4e76:	6820      	ldr	r0, [r4, #0]
   d4e78:	f7ff fe04 	bl	d4a84 <free>
    AllocatorT::free(data_);
}
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	bd70      	pop	{r4, r5, r6, pc}

000d4e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4e80:	680b      	ldr	r3, [r1, #0]
   d4e82:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4e84:	b113      	cbz	r3, d4e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4e86:	685a      	ldr	r2, [r3, #4]
   d4e88:	3201      	adds	r2, #1
   d4e8a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4e8c:	4770      	bx	lr

000d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4e8e:	b510      	push	{r4, lr}
   d4e90:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4e92:	6800      	ldr	r0, [r0, #0]
   d4e94:	b128      	cbz	r0, d4ea2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4e96:	6843      	ldr	r3, [r0, #4]
   d4e98:	3b01      	subs	r3, #1
   d4e9a:	6043      	str	r3, [r0, #4]
   d4e9c:	b90b      	cbnz	r3, d4ea2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4e9e:	f7ff ffbc 	bl	d4e1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	bd10      	pop	{r4, pc}

000d4ea6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4ea6:	b513      	push	{r0, r1, r4, lr}
   d4ea8:	460b      	mov	r3, r1
   d4eaa:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eac:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4eb0:	466c      	mov	r4, sp
   d4eb2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4eb6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4eba:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4ec2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ec6:	b002      	add	sp, #8
   d4ec8:	bd10      	pop	{r4, pc}
	...

000d4ecc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4ecc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4ece:	4c06      	ldr	r4, [pc, #24]	; (d4ee8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4ed0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4ed2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4ed4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4ed6:	f7ff fbc7 	bl	d4668 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4eda:	4620      	mov	r0, r4
   d4edc:	4a03      	ldr	r2, [pc, #12]	; (d4eec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4ede:	4904      	ldr	r1, [pc, #16]	; (d4ef0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4ee4:	f002 b97a 	b.w	d71dc <__aeabi_atexit>
   d4ee8:	2003e5e8 	.word	0x2003e5e8
   d4eec:	2003e56c 	.word	0x2003e56c
   d4ef0:	000d4e3b 	.word	0x000d4e3b

000d4ef4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ef6:	4606      	mov	r6, r0
   d4ef8:	460d      	mov	r5, r1
  size_t n = 0;
   d4efa:	188f      	adds	r7, r1, r2
   d4efc:	2400      	movs	r4, #0
  while (size--) {
   d4efe:	42bd      	cmp	r5, r7
   d4f00:	d00c      	beq.n	d4f1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4f02:	6833      	ldr	r3, [r6, #0]
   d4f04:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f08:	689b      	ldr	r3, [r3, #8]
   d4f0a:	4630      	mov	r0, r6
   d4f0c:	4798      	blx	r3
     if (chunk>=0)
   d4f0e:	1e03      	subs	r3, r0, #0
   d4f10:	db01      	blt.n	d4f16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4f12:	441c      	add	r4, r3
  while (size--) {
   d4f14:	e7f3      	b.n	d4efe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4f16:	2c00      	cmp	r4, #0
   d4f18:	bf08      	it	eq
   d4f1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f20:	b513      	push	{r0, r1, r4, lr}
   d4f22:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4f24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4f26:	b159      	cbz	r1, d4f40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4f28:	9101      	str	r1, [sp, #4]
   d4f2a:	f002 fe2c 	bl	d7b86 <strlen>
   d4f2e:	6823      	ldr	r3, [r4, #0]
   d4f30:	9901      	ldr	r1, [sp, #4]
   d4f32:	68db      	ldr	r3, [r3, #12]
   d4f34:	4602      	mov	r2, r0
   d4f36:	4620      	mov	r0, r4
    }
   d4f38:	b002      	add	sp, #8
   d4f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4f3e:	4718      	bx	r3
    }
   d4f40:	b002      	add	sp, #8
   d4f42:	bd10      	pop	{r4, pc}

000d4f44 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4f44:	6803      	ldr	r3, [r0, #0]
   d4f46:	689b      	ldr	r3, [r3, #8]
   d4f48:	4718      	bx	r3

000d4f4a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4f4a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4f4c:	210d      	movs	r1, #13
{
   d4f4e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4f50:	f7ff fff8 	bl	d4f44 <_ZN5Print5printEc>
  n += print('\n');
   d4f54:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4f56:	4604      	mov	r4, r0
  n += print('\n');
   d4f58:	4628      	mov	r0, r5
   d4f5a:	f7ff fff3 	bl	d4f44 <_ZN5Print5printEc>
  return n;
}
   d4f5e:	4420      	add	r0, r4
   d4f60:	bd38      	pop	{r3, r4, r5, pc}

000d4f62 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4f62:	b530      	push	{r4, r5, lr}
   d4f64:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4f66:	2300      	movs	r3, #0
   d4f68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f6c:	2a01      	cmp	r2, #1
   d4f6e:	bf98      	it	ls
   d4f70:	220a      	movls	r2, #10
   d4f72:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4f74:	460d      	mov	r5, r1
   d4f76:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4f7a:	fb01 5312 	mls	r3, r1, r2, r5
   d4f7e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f82:	2b09      	cmp	r3, #9
   d4f84:	bf94      	ite	ls
   d4f86:	3330      	addls	r3, #48	; 0x30
   d4f88:	3337      	addhi	r3, #55	; 0x37
   d4f8a:	b2db      	uxtb	r3, r3
  } while(n);
   d4f8c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f8e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4f92:	d9ef      	bls.n	d4f74 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4f94:	4621      	mov	r1, r4
   d4f96:	f7ff ffc3 	bl	d4f20 <_ZN5Print5writeEPKc>
}
   d4f9a:	b00b      	add	sp, #44	; 0x2c
   d4f9c:	bd30      	pop	{r4, r5, pc}

000d4f9e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4fa2:	b086      	sub	sp, #24
   d4fa4:	af00      	add	r7, sp, #0
   d4fa6:	4605      	mov	r5, r0
   d4fa8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4faa:	1d38      	adds	r0, r7, #4
   d4fac:	2114      	movs	r1, #20
{
   d4fae:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4fb0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4fb2:	f7ff fd7f 	bl	d4ab4 <vsnprintf>

    if (n<bufsize)
   d4fb6:	2813      	cmp	r0, #19
   d4fb8:	d80e      	bhi.n	d4fd8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4fba:	1d39      	adds	r1, r7, #4
   d4fbc:	4628      	mov	r0, r5
   d4fbe:	f7ff ffaf 	bl	d4f20 <_ZN5Print5writeEPKc>
   d4fc2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4fc4:	b11e      	cbz	r6, d4fce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4fc6:	4628      	mov	r0, r5
   d4fc8:	f7ff ffbf 	bl	d4f4a <_ZN5Print7printlnEv>
   d4fcc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4fce:	4620      	mov	r0, r4
   d4fd0:	3718      	adds	r7, #24
   d4fd2:	46bd      	mov	sp, r7
   d4fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4fd8:	f100 0308 	add.w	r3, r0, #8
   d4fdc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4fe0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4fe2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4fe6:	4622      	mov	r2, r4
   d4fe8:	1c41      	adds	r1, r0, #1
   d4fea:	683b      	ldr	r3, [r7, #0]
   d4fec:	4668      	mov	r0, sp
   d4fee:	f7ff fd61 	bl	d4ab4 <vsnprintf>
  return write(str);
   d4ff2:	4669      	mov	r1, sp
   d4ff4:	4628      	mov	r0, r5
   d4ff6:	f7ff ff93 	bl	d4f20 <_ZN5Print5writeEPKc>
   d4ffa:	4604      	mov	r4, r0
   d4ffc:	46c5      	mov	sp, r8
   d4ffe:	e7e1      	b.n	d4fc4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5000 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5000:	6880      	ldr	r0, [r0, #8]
   d5002:	6803      	ldr	r3, [r0, #0]
   d5004:	68db      	ldr	r3, [r3, #12]
   d5006:	4718      	bx	r3

000d5008 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d5008:	4770      	bx	lr

000d500a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d500a:	4608      	mov	r0, r1
   d500c:	b111      	cbz	r1, d5014 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d500e:	680b      	ldr	r3, [r1, #0]
   d5010:	685b      	ldr	r3, [r3, #4]
   d5012:	4718      	bx	r3
}
   d5014:	4770      	bx	lr

000d5016 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5016:	4770      	bx	lr

000d5018 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5018:	4770      	bx	lr

000d501a <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d501a:	4770      	bx	lr

000d501c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d501c:	b538      	push	{r3, r4, r5, lr}
   d501e:	4604      	mov	r4, r0
   d5020:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5022:	6800      	ldr	r0, [r0, #0]
   d5024:	212e      	movs	r1, #46	; 0x2e
   d5026:	f002 fd74 	bl	d7b12 <strchrnul>
    size = s - category;
   d502a:	6823      	ldr	r3, [r4, #0]
   d502c:	1ac3      	subs	r3, r0, r3
   d502e:	602b      	str	r3, [r5, #0]
    if (size) {
   d5030:	b123      	cbz	r3, d503c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5032:	7803      	ldrb	r3, [r0, #0]
   d5034:	b103      	cbz	r3, d5038 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5036:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   d5038:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d503a:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d503c:	4618      	mov	r0, r3
   d503e:	bd38      	pop	{r3, r4, r5, pc}

000d5040 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5040:	b510      	push	{r4, lr}
   d5042:	210c      	movs	r1, #12
   d5044:	4604      	mov	r4, r0
   d5046:	f002 f8ce 	bl	d71e6 <_ZdlPvj>
   d504a:	4620      	mov	r0, r4
   d504c:	bd10      	pop	{r4, pc}

000d504e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d504e:	b510      	push	{r4, lr}
   d5050:	2104      	movs	r1, #4
   d5052:	4604      	mov	r4, r0
   d5054:	f002 f8c7 	bl	d71e6 <_ZdlPvj>
   d5058:	4620      	mov	r0, r4
   d505a:	bd10      	pop	{r4, pc}

000d505c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d505c:	b510      	push	{r4, lr}
   d505e:	2104      	movs	r1, #4
   d5060:	4604      	mov	r4, r0
   d5062:	f002 f8c0 	bl	d71e6 <_ZdlPvj>
   d5066:	4620      	mov	r0, r4
   d5068:	bd10      	pop	{r4, pc}

000d506a <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d506a:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d506c:	f002 fd5b 	bl	d7b26 <strcmp>
}
   d5070:	fab0 f080 	clz	r0, r0
   d5074:	0940      	lsrs	r0, r0, #5
   d5076:	bd08      	pop	{r3, pc}

000d5078 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5078:	b510      	push	{r4, lr}
   d507a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d507c:	f001 fbb4 	bl	d67e8 <_Z16_fetch_usbserialv>
   d5080:	4284      	cmp	r4, r0
   d5082:	d010      	beq.n	d50a6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5084:	f001 fc84 	bl	d6990 <_Z22__fetch_global_Serial1v>
   d5088:	4284      	cmp	r4, r0
   d508a:	d105      	bne.n	d5098 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d508c:	f001 fc80 	bl	d6990 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d5094:	f001 bc79 	b.w	d698a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5098:	b12c      	cbz	r4, d50a6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d509a:	6823      	ldr	r3, [r4, #0]
   d509c:	4620      	mov	r0, r4
   d509e:	685b      	ldr	r3, [r3, #4]
}
   d50a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d50a4:	4718      	bx	r3
   d50a6:	bd10      	pop	{r4, pc}

000d50a8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d50a8:	b513      	push	{r0, r1, r4, lr}
   d50aa:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d50ac:	4608      	mov	r0, r1
   d50ae:	9101      	str	r1, [sp, #4]
   d50b0:	f002 fd69 	bl	d7b86 <strlen>
   d50b4:	9901      	ldr	r1, [sp, #4]
   d50b6:	4602      	mov	r2, r0
   d50b8:	4620      	mov	r0, r4
}
   d50ba:	b002      	add	sp, #8
   d50bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d50c0:	f001 bf82 	b.w	d6fc8 <_ZN5spark10JSONWriter5valueEPKcj>

000d50c4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d50c4:	b513      	push	{r0, r1, r4, lr}
   d50c6:	4604      	mov	r4, r0
    write(str, strlen(str));
   d50c8:	4608      	mov	r0, r1
   d50ca:	9101      	str	r1, [sp, #4]
   d50cc:	f002 fd5b 	bl	d7b86 <strlen>
   d50d0:	6823      	ldr	r3, [r4, #0]
   d50d2:	9901      	ldr	r1, [sp, #4]
   d50d4:	68db      	ldr	r3, [r3, #12]
   d50d6:	4602      	mov	r2, r0
   d50d8:	4620      	mov	r0, r4
}
   d50da:	b002      	add	sp, #8
   d50dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d50e0:	4718      	bx	r3

000d50e2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d50e2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d50e4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d50e6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d50ea:	68db      	ldr	r3, [r3, #12]
   d50ec:	2201      	movs	r2, #1
   d50ee:	f10d 0107 	add.w	r1, sp, #7
   d50f2:	4798      	blx	r3
}
   d50f4:	b003      	add	sp, #12
   d50f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d50fa <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d50fa:	b40e      	push	{r1, r2, r3}
   d50fc:	b503      	push	{r0, r1, lr}
   d50fe:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d5100:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5102:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d5106:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d5108:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d510a:	f7ff ff48 	bl	d4f9e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d510e:	b002      	add	sp, #8
   d5110:	f85d eb04 	ldr.w	lr, [sp], #4
   d5114:	b003      	add	sp, #12
   d5116:	4770      	bx	lr

000d5118 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d511c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d5120:	f04f 0814 	mov.w	r8, #20
   d5124:	fb08 f505 	mul.w	r5, r8, r5
   d5128:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d512a:	10ab      	asrs	r3, r5, #2
   d512c:	4d18      	ldr	r5, [pc, #96]	; (d5190 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d512e:	4617      	mov	r7, r2
   d5130:	435d      	muls	r5, r3
   d5132:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5134:	2d00      	cmp	r5, #0
   d5136:	dd23      	ble.n	d5180 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5138:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d513a:	fb08 f006 	mul.w	r0, r8, r6
   d513e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5142:	463a      	mov	r2, r7
   d5144:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5148:	5820      	ldr	r0, [r4, r0]
   d514a:	9101      	str	r1, [sp, #4]
   d514c:	455f      	cmp	r7, fp
   d514e:	bf28      	it	cs
   d5150:	465a      	movcs	r2, fp
   d5152:	f002 fd20 	bl	d7b96 <strncmp>
                if (cmp == 0) {
   d5156:	9901      	ldr	r1, [sp, #4]
   d5158:	2301      	movs	r3, #1
   d515a:	b978      	cbnz	r0, d517c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d515c:	455f      	cmp	r7, fp
   d515e:	d103      	bne.n	d5168 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5160:	9a00      	ldr	r2, [sp, #0]
   d5162:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5164:	4635      	mov	r5, r6
   d5166:	e7e5      	b.n	d5134 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5168:	bf8c      	ite	hi
   d516a:	2001      	movhi	r0, #1
   d516c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d516e:	2800      	cmp	r0, #0
   d5170:	d0f8      	beq.n	d5164 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5172:	1bae      	subs	r6, r5, r6
	      ++__first;
   d5174:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d5178:	3e01      	subs	r6, #1
   d517a:	e7f3      	b.n	d5164 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d517c:	0fc0      	lsrs	r0, r0, #31
   d517e:	e7f6      	b.n	d516e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d5180:	eba4 0409 	sub.w	r4, r4, r9
}
   d5184:	4802      	ldr	r0, [pc, #8]	; (d5190 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5186:	10a4      	asrs	r4, r4, #2
   d5188:	4360      	muls	r0, r4
   d518a:	b003      	add	sp, #12
   d518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5190:	cccccccd 	.word	0xcccccccd

000d5194 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d5196:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d5198:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d519a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d519c:	b30b      	cbz	r3, d51e2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d519e:	b301      	cbz	r1, d51e2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d51a0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d51a2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d51a6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d51a8:	a903      	add	r1, sp, #12
   d51aa:	a801      	add	r0, sp, #4
   d51ac:	f7ff ff36 	bl	d501c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d51b0:	4601      	mov	r1, r0
   d51b2:	b1b0      	cbz	r0, d51e2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d51b4:	f10d 030b 	add.w	r3, sp, #11
   d51b8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d51ba:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d51be:	4620      	mov	r0, r4
   d51c0:	f7ff ffaa 	bl	d5118 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d51c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d51c8:	b15b      	cbz	r3, d51e2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d51ca:	6824      	ldr	r4, [r4, #0]
   d51cc:	2314      	movs	r3, #20
   d51ce:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d51d2:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d51d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d51da:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d51dc:	bfa8      	it	ge
   d51de:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d51e0:	e7e2      	b.n	d51a8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d51e2:	4630      	mov	r0, r6
   d51e4:	b004      	add	sp, #16
   d51e6:	bd70      	pop	{r4, r5, r6, pc}

000d51e8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d51e8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d51ea:	4c0a      	ldr	r4, [pc, #40]	; (d5214 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d51ec:	7823      	ldrb	r3, [r4, #0]
   d51ee:	f3bf 8f5b 	dmb	ish
   d51f2:	07db      	lsls	r3, r3, #31
   d51f4:	d40b      	bmi.n	d520e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d51f6:	4620      	mov	r0, r4
   d51f8:	f7fe ff5e 	bl	d40b8 <__cxa_guard_acquire>
   d51fc:	b138      	cbz	r0, d520e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d51fe:	4620      	mov	r0, r4
   d5200:	f7fe ff5f 	bl	d40c2 <__cxa_guard_release>
   d5204:	4a04      	ldr	r2, [pc, #16]	; (d5218 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5206:	4905      	ldr	r1, [pc, #20]	; (d521c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5208:	4805      	ldr	r0, [pc, #20]	; (d5220 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d520a:	f001 ffe7 	bl	d71dc <__aeabi_atexit>
}
   d520e:	4804      	ldr	r0, [pc, #16]	; (d5220 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d5210:	bd10      	pop	{r4, pc}
   d5212:	bf00      	nop
   d5214:	2003e5f0 	.word	0x2003e5f0
   d5218:	2003e56c 	.word	0x2003e56c
   d521c:	000d5019 	.word	0x000d5019
   d5220:	2003e4fc 	.word	0x2003e4fc

000d5224 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5224:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5226:	4c0a      	ldr	r4, [pc, #40]	; (d5250 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5228:	7823      	ldrb	r3, [r4, #0]
   d522a:	f3bf 8f5b 	dmb	ish
   d522e:	07db      	lsls	r3, r3, #31
   d5230:	d40b      	bmi.n	d524a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d5232:	4620      	mov	r0, r4
   d5234:	f7fe ff40 	bl	d40b8 <__cxa_guard_acquire>
   d5238:	b138      	cbz	r0, d524a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d523a:	4620      	mov	r0, r4
   d523c:	f7fe ff41 	bl	d40c2 <__cxa_guard_release>
   d5240:	4a04      	ldr	r2, [pc, #16]	; (d5254 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5242:	4905      	ldr	r1, [pc, #20]	; (d5258 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5244:	4805      	ldr	r0, [pc, #20]	; (d525c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5246:	f001 ffc9 	bl	d71dc <__aeabi_atexit>
    return &factory;
}
   d524a:	4804      	ldr	r0, [pc, #16]	; (d525c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d524c:	bd10      	pop	{r4, pc}
   d524e:	bf00      	nop
   d5250:	2003e5f4 	.word	0x2003e5f4
   d5254:	2003e56c 	.word	0x2003e56c
   d5258:	000d5017 	.word	0x000d5017
   d525c:	2003e500 	.word	0x2003e500

000d5260 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5260:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d5262:	2500      	movs	r5, #0
   d5264:	4604      	mov	r4, r0
   d5266:	e9c0 5500 	strd	r5, r5, [r0]
   d526a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d526e:	6085      	str	r5, [r0, #8]
   d5270:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d5272:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d5276:	f7ff f9f7 	bl	d4668 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d527a:	f7ff ffb5 	bl	d51e8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d527e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5280:	f7ff ffd0 	bl	d5224 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5284:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5286:	6220      	str	r0, [r4, #32]
}
   d5288:	4620      	mov	r0, r4
   d528a:	bd38      	pop	{r3, r4, r5, pc}

000d528c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d528c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d528e:	4c0b      	ldr	r4, [pc, #44]	; (d52bc <_ZN5spark10LogManager8instanceEv+0x30>)
   d5290:	7823      	ldrb	r3, [r4, #0]
   d5292:	f3bf 8f5b 	dmb	ish
   d5296:	07db      	lsls	r3, r3, #31
   d5298:	d40e      	bmi.n	d52b8 <_ZN5spark10LogManager8instanceEv+0x2c>
   d529a:	4620      	mov	r0, r4
   d529c:	f7fe ff0c 	bl	d40b8 <__cxa_guard_acquire>
   d52a0:	b150      	cbz	r0, d52b8 <_ZN5spark10LogManager8instanceEv+0x2c>
   d52a2:	4807      	ldr	r0, [pc, #28]	; (d52c0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d52a4:	f7ff ffdc 	bl	d5260 <_ZN5spark10LogManagerC1Ev>
   d52a8:	4620      	mov	r0, r4
   d52aa:	f7fe ff0a 	bl	d40c2 <__cxa_guard_release>
   d52ae:	4a05      	ldr	r2, [pc, #20]	; (d52c4 <_ZN5spark10LogManager8instanceEv+0x38>)
   d52b0:	4905      	ldr	r1, [pc, #20]	; (d52c8 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d52b2:	4803      	ldr	r0, [pc, #12]	; (d52c0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d52b4:	f001 ff92 	bl	d71dc <__aeabi_atexit>
    return &mgr;
}
   d52b8:	4801      	ldr	r0, [pc, #4]	; (d52c0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d52ba:	bd10      	pop	{r4, pc}
   d52bc:	2003e5ec 	.word	0x2003e5ec
   d52c0:	2003e5fc 	.word	0x2003e5fc
   d52c4:	2003e56c 	.word	0x2003e56c
   d52c8:	000d56fd 	.word	0x000d56fd

000d52cc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d52cc:	4a02      	ldr	r2, [pc, #8]	; (d52d8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d52ce:	4903      	ldr	r1, [pc, #12]	; (d52dc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d52d0:	4803      	ldr	r0, [pc, #12]	; (d52e0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d52d2:	2300      	movs	r3, #0
   d52d4:	f7ff baf8 	b.w	d48c8 <log_set_callbacks>
   d52d8:	000d55d9 	.word	0x000d55d9
   d52dc:	000d5565 	.word	0x000d5565
   d52e0:	000d54e5 	.word	0x000d54e5

000d52e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d52e4:	2300      	movs	r3, #0
   d52e6:	461a      	mov	r2, r3
   d52e8:	4619      	mov	r1, r3
   d52ea:	4618      	mov	r0, r3
   d52ec:	f7ff baec 	b.w	d48c8 <log_set_callbacks>

000d52f0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d52f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d52f2:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52f4:	f851 3b04 	ldr.w	r3, [r1], #4
   d52f8:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d52fa:	4604      	mov	r4, r0
   d52fc:	a801      	add	r0, sp, #4
   d52fe:	f7ff fdbf 	bl	d4e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5302:	466a      	mov	r2, sp
   d5304:	4629      	mov	r1, r5
   d5306:	4620      	mov	r0, r4
   d5308:	f001 fd08 	bl	d6d1c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d530c:	a801      	add	r0, sp, #4
   d530e:	f7ff fdbe 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5312:	4620      	mov	r0, r4
   d5314:	b003      	add	sp, #12
   d5316:	bd30      	pop	{r4, r5, pc}

000d5318 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5318:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d531a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d531c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5320:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5322:	4604      	mov	r4, r0
   d5324:	a801      	add	r0, sp, #4
   d5326:	f7ff fdab 	bl	d4e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d532a:	466a      	mov	r2, sp
   d532c:	4629      	mov	r1, r5
   d532e:	4620      	mov	r0, r4
   d5330:	f001 fd70 	bl	d6e14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5334:	a801      	add	r0, sp, #4
   d5336:	f7ff fdaa 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d533a:	4620      	mov	r0, r4
   d533c:	b003      	add	sp, #12
   d533e:	bd30      	pop	{r4, r5, pc}

000d5340 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5340:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d5342:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5344:	f851 3b04 	ldr.w	r3, [r1], #4
   d5348:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d534a:	4604      	mov	r4, r0
   d534c:	a801      	add	r0, sp, #4
   d534e:	f7ff fd97 	bl	d4e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5352:	466a      	mov	r2, sp
   d5354:	4629      	mov	r1, r5
   d5356:	4620      	mov	r0, r4
   d5358:	f001 fd38 	bl	d6dcc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d535c:	a801      	add	r0, sp, #4
   d535e:	f7ff fd96 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5362:	4620      	mov	r0, r4
   d5364:	b003      	add	sp, #12
   d5366:	bd30      	pop	{r4, r5, pc}

000d5368 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5368:	b570      	push	{r4, r5, r6, lr}
   d536a:	b08a      	sub	sp, #40	; 0x28
   d536c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d536e:	4601      	mov	r1, r0
   d5370:	a804      	add	r0, sp, #16
   d5372:	f7ff ffd1 	bl	d5318 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d5376:	4e14      	ldr	r6, [pc, #80]	; (d53c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5378:	a804      	add	r0, sp, #16
   d537a:	f001 fd63 	bl	d6e44 <_ZN5spark18JSONObjectIterator4nextEv>
   d537e:	b1e8      	cbz	r0, d53bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d5380:	a904      	add	r1, sp, #16
   d5382:	4668      	mov	r0, sp
   d5384:	f7ff ffdc 	bl	d5340 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5388:	9802      	ldr	r0, [sp, #8]
   d538a:	4631      	mov	r1, r6
   d538c:	f7ff fe6d 	bl	d506a <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d5390:	4604      	mov	r4, r0
   d5392:	b110      	cbz	r0, d539a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d5394:	1e2c      	subs	r4, r5, #0
   d5396:	bf18      	it	ne
   d5398:	2401      	movne	r4, #1
   d539a:	a801      	add	r0, sp, #4
   d539c:	f7ff fd77 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53a0:	2c00      	cmp	r4, #0
   d53a2:	d0e9      	beq.n	d5378 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d53a4:	a904      	add	r1, sp, #16
   d53a6:	4668      	mov	r0, sp
   d53a8:	f7ff ffa2 	bl	d52f0 <_ZNK5spark18JSONObjectIterator5valueEv>
   d53ac:	4668      	mov	r0, sp
   d53ae:	f001 fceb 	bl	d6d88 <_ZNK5spark9JSONValue5toIntEv>
   d53b2:	6028      	str	r0, [r5, #0]
   d53b4:	a801      	add	r0, sp, #4
   d53b6:	f7ff fd6a 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53ba:	e7dd      	b.n	d5378 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d53bc:	a805      	add	r0, sp, #20
   d53be:	f7ff fd66 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53c2:	b00a      	add	sp, #40	; 0x28
   d53c4:	bd70      	pop	{r4, r5, r6, pc}
   d53c6:	bf00      	nop
   d53c8:	000d7dc2 	.word	0x000d7dc2

000d53cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d53cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d53ce:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d53d0:	4620      	mov	r0, r4
   d53d2:	4912      	ldr	r1, [pc, #72]	; (d541c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d53d4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d53d6:	f002 fba6 	bl	d7b26 <strcmp>
   d53da:	b948      	cbnz	r0, d53f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d53dc:	f001 fa04 	bl	d67e8 <_Z16_fetch_usbserialv>
   d53e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d53e4:	f001 f9f0 	bl	d67c8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d53e8:	f001 f9fe 	bl	d67e8 <_Z16_fetch_usbserialv>
}
   d53ec:	b003      	add	sp, #12
   d53ee:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d53f0:	490b      	ldr	r1, [pc, #44]	; (d5420 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d53f2:	4620      	mov	r0, r4
   d53f4:	f002 fb97 	bl	d7b26 <strcmp>
   d53f8:	b970      	cbnz	r0, d5418 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d53fa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d53fe:	a901      	add	r1, sp, #4
   d5400:	4628      	mov	r0, r5
        int baud = 9600;
   d5402:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d5404:	f7ff ffb0 	bl	d5368 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5408:	f001 fac2 	bl	d6990 <_Z22__fetch_global_Serial1v>
   d540c:	9901      	ldr	r1, [sp, #4]
   d540e:	f001 fab9 	bl	d6984 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5412:	f001 fabd 	bl	d6990 <_Z22__fetch_global_Serial1v>
   d5416:	e7e9      	b.n	d53ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5418:	2000      	movs	r0, #0
   d541a:	e7e7      	b.n	d53ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d541c:	000d7dc7 	.word	0x000d7dc7
   d5420:	000d7dce 	.word	0x000d7dce

000d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5424:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5426:	e9d0 5300 	ldrd	r5, r3, [r0]
   d542a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d542c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d542e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5432:	42ae      	cmp	r6, r5
   d5434:	d005      	beq.n	d5442 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d5436:	f105 0008 	add.w	r0, r5, #8
   d543a:	f7ff fff3 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d543e:	3514      	adds	r5, #20
   d5440:	e7f7      	b.n	d5432 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5442:	6820      	ldr	r0, [r4, #0]
   d5444:	f7ff fb1e 	bl	d4a84 <free>
}
   d5448:	4620      	mov	r0, r4
   d544a:	bd70      	pop	{r4, r5, r6, pc}

000d544c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d544c:	b510      	push	{r4, lr}
   d544e:	4604      	mov	r4, r0
   d5450:	300c      	adds	r0, #12
   d5452:	f7ff ffe7 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5456:	4620      	mov	r0, r4
   d5458:	f7ff fd00 	bl	d4e5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d545c:	4620      	mov	r0, r4
   d545e:	bd10      	pop	{r4, pc}

000d5460 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d5460:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d5462:	4b04      	ldr	r3, [pc, #16]	; (d5474 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d5464:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d5466:	f840 3b04 	str.w	r3, [r0], #4
   d546a:	f7ff ffef 	bl	d544c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d546e:	4620      	mov	r0, r4
   d5470:	bd10      	pop	{r4, pc}
   d5472:	bf00      	nop
   d5474:	000d7d24 	.word	0x000d7d24

000d5478 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5478:	b510      	push	{r4, lr}
   d547a:	4604      	mov	r4, r0
   d547c:	f7ff fff0 	bl	d5460 <_ZN5spark16StreamLogHandlerD1Ev>
   d5480:	4620      	mov	r0, r4
   d5482:	2124      	movs	r1, #36	; 0x24
   d5484:	f001 feaf 	bl	d71e6 <_ZdlPvj>
   d5488:	4620      	mov	r0, r4
   d548a:	bd10      	pop	{r4, pc}

000d548c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d548c:	b510      	push	{r4, lr}
   d548e:	4b03      	ldr	r3, [pc, #12]	; (d549c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5490:	6003      	str	r3, [r0, #0]
   d5492:	4604      	mov	r4, r0
   d5494:	f7ff ffe4 	bl	d5460 <_ZN5spark16StreamLogHandlerD1Ev>
   d5498:	4620      	mov	r0, r4
   d549a:	bd10      	pop	{r4, pc}
   d549c:	000d7e74 	.word	0x000d7e74

000d54a0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d54a0:	b510      	push	{r4, lr}
   d54a2:	4604      	mov	r4, r0
   d54a4:	f7ff fff2 	bl	d548c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d54a8:	4620      	mov	r0, r4
   d54aa:	2124      	movs	r1, #36	; 0x24
   d54ac:	f001 fe9b 	bl	d71e6 <_ZdlPvj>
   d54b0:	4620      	mov	r0, r4
   d54b2:	bd10      	pop	{r4, pc}

000d54b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d54b4:	2200      	movs	r2, #0
   d54b6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d54ba:	b510      	push	{r4, lr}
        capacity_(0) {
   d54bc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d54be:	680c      	ldr	r4, [r1, #0]
   d54c0:	6004      	str	r4, [r0, #0]
   d54c2:	684c      	ldr	r4, [r1, #4]
   d54c4:	6044      	str	r4, [r0, #4]
   d54c6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54c8:	600a      	str	r2, [r1, #0]
   d54ca:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d54cc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54ce:	608a      	str	r2, [r1, #8]
}
   d54d0:	bd10      	pop	{r4, pc}

000d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d54d2:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d54d4:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d54d6:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d54d8:	6818      	ldr	r0, [r3, #0]
   d54da:	f7ff f8dd 	bl	d4698 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d54de:	4620      	mov	r0, r4
   d54e0:	bd10      	pop	{r4, pc}
	...

000d54e4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d54e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54e8:	b087      	sub	sp, #28
   d54ea:	4680      	mov	r8, r0
   d54ec:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d54ee:	4b1c      	ldr	r3, [pc, #112]	; (d5560 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d54f0:	685b      	ldr	r3, [r3, #4]
   d54f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d54f6:	4689      	mov	r9, r1
   d54f8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d54fa:	b96b      	cbnz	r3, d5518 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d54fc:	f7ff fec6 	bl	d528c <_ZN5spark10LogManager8instanceEv>
   d5500:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5502:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5506:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5508:	9305      	str	r3, [sp, #20]
   d550a:	f7ff f8bd 	bl	d4688 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d550e:	7b23      	ldrb	r3, [r4, #12]
   d5510:	b12b      	cbz	r3, d551e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d5512:	a805      	add	r0, sp, #20
   d5514:	f7ff ffdd 	bl	d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5518:	b007      	add	sp, #28
   d551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d551e:	2301      	movs	r3, #1
   d5520:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d5522:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5526:	fa5f f989 	uxtb.w	r9, r9
   d552a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d552e:	45aa      	cmp	sl, r5
   d5530:	d012      	beq.n	d5558 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d5532:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5536:	4631      	mov	r1, r6
   d5538:	1d38      	adds	r0, r7, #4
   d553a:	f7ff fe2b 	bl	d5194 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d553e:	4581      	cmp	r9, r0
   d5540:	d3f5      	bcc.n	d552e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d5542:	683b      	ldr	r3, [r7, #0]
   d5544:	9a03      	ldr	r2, [sp, #12]
   d5546:	9200      	str	r2, [sp, #0]
   d5548:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d554c:	464a      	mov	r2, r9
   d554e:	4633      	mov	r3, r6
   d5550:	4641      	mov	r1, r8
   d5552:	4638      	mov	r0, r7
   d5554:	47d8      	blx	fp
   d5556:	e7ea      	b.n	d552e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5558:	2300      	movs	r3, #0
   d555a:	7323      	strb	r3, [r4, #12]
   d555c:	e7d9      	b.n	d5512 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d555e:	bf00      	nop
   d5560:	e000ed00 	.word	0xe000ed00

000d5564 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5568:	469b      	mov	fp, r3
   d556a:	4b1a      	ldr	r3, [pc, #104]	; (d55d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d556c:	685b      	ldr	r3, [r3, #4]
   d556e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5572:	4680      	mov	r8, r0
   d5574:	4689      	mov	r9, r1
   d5576:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d5578:	b96b      	cbnz	r3, d5596 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d557a:	f7ff fe87 	bl	d528c <_ZN5spark10LogManager8instanceEv>
   d557e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5580:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5584:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5586:	9301      	str	r3, [sp, #4]
   d5588:	f7ff f87e 	bl	d4688 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d558c:	7b23      	ldrb	r3, [r4, #12]
   d558e:	b12b      	cbz	r3, d559c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d5590:	a801      	add	r0, sp, #4
   d5592:	f7ff ff9e 	bl	d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5596:	b003      	add	sp, #12
   d5598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d559c:	2301      	movs	r3, #1
   d559e:	7323      	strb	r3, [r4, #12]
   d55a0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d55a4:	b2f6      	uxtb	r6, r6
   d55a6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d55aa:	4555      	cmp	r5, sl
   d55ac:	d00e      	beq.n	d55cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d55ae:	f855 7b04 	ldr.w	r7, [r5], #4
   d55b2:	4659      	mov	r1, fp
   d55b4:	1d38      	adds	r0, r7, #4
   d55b6:	f7ff fded 	bl	d5194 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d55ba:	4286      	cmp	r6, r0
   d55bc:	d3f5      	bcc.n	d55aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d55be:	683b      	ldr	r3, [r7, #0]
   d55c0:	464a      	mov	r2, r9
   d55c2:	68db      	ldr	r3, [r3, #12]
   d55c4:	4641      	mov	r1, r8
   d55c6:	4638      	mov	r0, r7
   d55c8:	4798      	blx	r3
   d55ca:	e7ee      	b.n	d55aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d55cc:	2300      	movs	r3, #0
   d55ce:	7323      	strb	r3, [r4, #12]
   d55d0:	e7de      	b.n	d5590 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d55d2:	bf00      	nop
   d55d4:	e000ed00 	.word	0xe000ed00

000d55d8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d55d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d55dc:	4b16      	ldr	r3, [pc, #88]	; (d5638 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d55de:	685b      	ldr	r3, [r3, #4]
   d55e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d55e4:	4605      	mov	r5, r0
   d55e6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d55e8:	bb1b      	cbnz	r3, d5632 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d55ea:	f7ff fe4f 	bl	d528c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d55ee:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d55f2:	4604      	mov	r4, r0
   d55f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d55f6:	9301      	str	r3, [sp, #4]
   d55f8:	f7ff f846 	bl	d4688 <os_mutex_recursive_lock>
   d55fc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d5600:	2446      	movs	r4, #70	; 0x46
   d5602:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5606:	45b0      	cmp	r8, r6
   d5608:	d109      	bne.n	d561e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d560a:	a801      	add	r0, sp, #4
   d560c:	f7ff ff61 	bl	d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d5610:	42a5      	cmp	r5, r4
   d5612:	bfb4      	ite	lt
   d5614:	2000      	movlt	r0, #0
   d5616:	2001      	movge	r0, #1
}
   d5618:	b002      	add	sp, #8
   d561a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d561e:	f856 0b04 	ldr.w	r0, [r6], #4
   d5622:	4639      	mov	r1, r7
   d5624:	3004      	adds	r0, #4
   d5626:	f7ff fdb5 	bl	d5194 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d562a:	4284      	cmp	r4, r0
   d562c:	bfa8      	it	ge
   d562e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d5630:	e7e9      	b.n	d5606 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d5632:	2000      	movs	r0, #0
   d5634:	e7f0      	b.n	d5618 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5636:	bf00      	nop
   d5638:	e000ed00 	.word	0xe000ed00

000d563c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d563c:	b570      	push	{r4, r5, r6, lr}
   d563e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5640:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5644:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d5646:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d564a:	4282      	cmp	r2, r0
   d564c:	d007      	beq.n	d565e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d564e:	4601      	mov	r1, r0
            if (*p == value) {
   d5650:	681d      	ldr	r5, [r3, #0]
   d5652:	f851 6b04 	ldr.w	r6, [r1], #4
   d5656:	42ae      	cmp	r6, r5
   d5658:	d003      	beq.n	d5662 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d565a:	4608      	mov	r0, r1
   d565c:	e7f5      	b.n	d564a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d565e:	2000      	movs	r0, #0
}
   d5660:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5662:	1a52      	subs	r2, r2, r1
   d5664:	f002 fa02 	bl	d7a6c <memmove>
    --size_;
   d5668:	6863      	ldr	r3, [r4, #4]
   d566a:	3b01      	subs	r3, #1
   d566c:	6063      	str	r3, [r4, #4]
    return true;
   d566e:	2001      	movs	r0, #1
   d5670:	e7f6      	b.n	d5660 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d5672 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5672:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d5674:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5678:	4604      	mov	r4, r0
   d567a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d567c:	9101      	str	r1, [sp, #4]
   d567e:	9303      	str	r3, [sp, #12]
   d5680:	f7ff f802 	bl	d4688 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5684:	a901      	add	r1, sp, #4
   d5686:	4620      	mov	r0, r4
   d5688:	f7ff ffd8 	bl	d563c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d568c:	b118      	cbz	r0, d5696 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d568e:	6863      	ldr	r3, [r4, #4]
   d5690:	b90b      	cbnz	r3, d5696 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d5692:	f7ff fe27 	bl	d52e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5696:	a803      	add	r0, sp, #12
   d5698:	f7ff ff1b 	bl	d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d569c:	b004      	add	sp, #16
   d569e:	bd10      	pop	{r4, pc}

000d56a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d56a0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d56a2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d56a6:	2318      	movs	r3, #24
   d56a8:	4604      	mov	r4, r0
   d56aa:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d56ae:	42ae      	cmp	r6, r5
   d56b0:	d015      	beq.n	d56de <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d56b2:	f105 0110 	add.w	r1, r5, #16
   d56b6:	4620      	mov	r0, r4
   d56b8:	f7ff ffc0 	bl	d563c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d56bc:	6863      	ldr	r3, [r4, #4]
   d56be:	b90b      	cbnz	r3, d56c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d56c0:	f7ff fe10 	bl	d52e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d56c4:	69e0      	ldr	r0, [r4, #28]
   d56c6:	6929      	ldr	r1, [r5, #16]
   d56c8:	6803      	ldr	r3, [r0, #0]
   d56ca:	68db      	ldr	r3, [r3, #12]
   d56cc:	4798      	blx	r3
        if (h.stream) {
   d56ce:	6969      	ldr	r1, [r5, #20]
   d56d0:	b119      	cbz	r1, d56da <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d56d2:	6a20      	ldr	r0, [r4, #32]
   d56d4:	6803      	ldr	r3, [r0, #0]
   d56d6:	68db      	ldr	r3, [r3, #12]
   d56d8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d56da:	3518      	adds	r5, #24
   d56dc:	e7e7      	b.n	d56ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d56de:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d56e2:	2618      	movs	r6, #24
   d56e4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d56e8:	42ae      	cmp	r6, r5
   d56ea:	d004      	beq.n	d56f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d56ec:	4628      	mov	r0, r5
   d56ee:	f7ff fb07 	bl	d4d00 <_ZN6StringD1Ev>
   d56f2:	3518      	adds	r5, #24
   d56f4:	e7f8      	b.n	d56e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d56f6:	2300      	movs	r3, #0
   d56f8:	6163      	str	r3, [r4, #20]
}
   d56fa:	bd70      	pop	{r4, r5, r6, pc}

000d56fc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d56fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d56fe:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d5700:	f7ff fdf0 	bl	d52e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5704:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d5708:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d570a:	9301      	str	r3, [sp, #4]
   d570c:	f7fe ffbc 	bl	d4688 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d5710:	4620      	mov	r0, r4
   d5712:	f7ff ffc5 	bl	d56a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5716:	a801      	add	r0, sp, #4
   d5718:	f7ff fedb 	bl	d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d571c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d571e:	b108      	cbz	r0, d5724 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d5720:	f7fe ffaa 	bl	d4678 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5724:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5728:	2618      	movs	r6, #24
   d572a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d572e:	42ae      	cmp	r6, r5
   d5730:	d004      	beq.n	d573c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d5732:	4628      	mov	r0, r5
   d5734:	f7ff fae4 	bl	d4d00 <_ZN6StringD1Ev>
   d5738:	3518      	adds	r5, #24
   d573a:	e7f8      	b.n	d572e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d573c:	6920      	ldr	r0, [r4, #16]
   d573e:	f7ff f9a1 	bl	d4a84 <free>
   d5742:	6820      	ldr	r0, [r4, #0]
   d5744:	f7ff f99e 	bl	d4a84 <free>
}
   d5748:	4620      	mov	r0, r4
   d574a:	b002      	add	sp, #8
   d574c:	bd70      	pop	{r4, r5, r6, pc}

000d574e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d574e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5752:	4606      	mov	r6, r0
   d5754:	460c      	mov	r4, r1
   d5756:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5758:	d927      	bls.n	d57aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d575a:	4290      	cmp	r0, r2
   d575c:	d226      	bcs.n	d57ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d575e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d5762:	1a6c      	subs	r4, r5, r1
   d5764:	f1a1 0714 	sub.w	r7, r1, #20
   d5768:	4404      	add	r4, r0
        capacity_(0) {
   d576a:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d576c:	42af      	cmp	r7, r5
   d576e:	d03d      	beq.n	d57ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d5770:	b1a4      	cbz	r4, d579c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d5772:	682b      	ldr	r3, [r5, #0]
   d5774:	6023      	str	r3, [r4, #0]
   d5776:	88ab      	ldrh	r3, [r5, #4]
   d5778:	80a3      	strh	r3, [r4, #4]
   d577a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d577e:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d5780:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d5784:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5786:	68ab      	ldr	r3, [r5, #8]
   d5788:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d578a:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d578c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d578e:	68ea      	ldr	r2, [r5, #12]
   d5790:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5792:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5794:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5796:	692a      	ldr	r2, [r5, #16]
   d5798:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d579a:	612b      	str	r3, [r5, #16]
   d579c:	f105 0008 	add.w	r0, r5, #8
   d57a0:	f7ff fe40 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d57a4:	3d14      	subs	r5, #20
   d57a6:	3c14      	subs	r4, #20
   d57a8:	e7e0      	b.n	d576c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d57aa:	d01f      	beq.n	d57ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d57ac:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d57ae:	42ac      	cmp	r4, r5
   d57b0:	d01c      	beq.n	d57ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d57b2:	b1a6      	cbz	r6, d57de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d57b4:	6823      	ldr	r3, [r4, #0]
   d57b6:	6033      	str	r3, [r6, #0]
   d57b8:	88a3      	ldrh	r3, [r4, #4]
   d57ba:	80b3      	strh	r3, [r6, #4]
   d57bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d57c0:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d57c2:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d57c6:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57c8:	68a3      	ldr	r3, [r4, #8]
   d57ca:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57cc:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ce:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d57d0:	68e2      	ldr	r2, [r4, #12]
   d57d2:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d57d4:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57d6:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57d8:	6922      	ldr	r2, [r4, #16]
   d57da:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d57dc:	6123      	str	r3, [r4, #16]
   d57de:	f104 0008 	add.w	r0, r4, #8
   d57e2:	f7ff fe1f 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d57e6:	3414      	adds	r4, #20
   d57e8:	3614      	adds	r6, #20
   d57ea:	e7e0      	b.n	d57ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d57ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d57ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57f0:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d57f4:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d57f6:	4604      	mov	r4, r0
   d57f8:	460e      	mov	r6, r1
   d57fa:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57fc:	db0d      	blt.n	d581a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d57fe:	3501      	adds	r5, #1
        if (n > 0) {
   d5800:	2d00      	cmp	r5, #0
   d5802:	6800      	ldr	r0, [r0, #0]
   d5804:	dd04      	ble.n	d5810 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5806:	00a9      	lsls	r1, r5, #2
   d5808:	f7ff f944 	bl	d4a94 <realloc>
            if (!d) {
   d580c:	b918      	cbnz	r0, d5816 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d580e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d5810:	f7ff f938 	bl	d4a84 <free>
        T* d = nullptr;
   d5814:	2000      	movs	r0, #0
        data_ = d;
   d5816:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5818:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d581a:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d581c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d581e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d5822:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5824:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5828:	1d08      	adds	r0, r1, #4
   d582a:	f002 f91f 	bl	d7a6c <memmove>
    new(p) T(std::move(value));
   d582e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5832:	6863      	ldr	r3, [r4, #4]
   d5834:	3301      	adds	r3, #1
   d5836:	6063      	str	r3, [r4, #4]
    return true;
   d5838:	2001      	movs	r0, #1
   d583a:	e7e8      	b.n	d580e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d583c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d583e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5842:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5844:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5846:	9301      	str	r3, [sp, #4]
   d5848:	460d      	mov	r5, r1
   d584a:	f7fe ff1d 	bl	d4688 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d584e:	e9d4 3100 	ldrd	r3, r1, [r4]
   d5852:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5856:	4283      	cmp	r3, r0
   d5858:	461a      	mov	r2, r3
   d585a:	d00b      	beq.n	d5874 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d585c:	6812      	ldr	r2, [r2, #0]
   d585e:	42aa      	cmp	r2, r5
   d5860:	f103 0304 	add.w	r3, r3, #4
   d5864:	d1f7      	bne.n	d5856 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d5866:	a801      	add	r0, sp, #4
   d5868:	f7ff fe33 	bl	d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d586c:	2500      	movs	r5, #0
}
   d586e:	4628      	mov	r0, r5
   d5870:	b003      	add	sp, #12
   d5872:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d5874:	462a      	mov	r2, r5
   d5876:	4620      	mov	r0, r4
   d5878:	f7ff ffb9 	bl	d57ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d587c:	4605      	mov	r5, r0
   d587e:	2800      	cmp	r0, #0
   d5880:	d0f1      	beq.n	d5866 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d5882:	6863      	ldr	r3, [r4, #4]
   d5884:	2b01      	cmp	r3, #1
   d5886:	d101      	bne.n	d588c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d5888:	f7ff fd20 	bl	d52cc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d588c:	a801      	add	r0, sp, #4
   d588e:	f7ff fe20 	bl	d54d2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5892:	e7ec      	b.n	d586e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d5894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5894:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5898:	4604      	mov	r4, r0
   d589a:	460d      	mov	r5, r1
   d589c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d589e:	d914      	bls.n	d58ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d58a0:	4290      	cmp	r0, r2
   d58a2:	d213      	bcs.n	d58cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d58a4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d58a8:	1a75      	subs	r5, r6, r1
   d58aa:	f1a1 0710 	sub.w	r7, r1, #16
   d58ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d58b0:	42b7      	cmp	r7, r6
   d58b2:	d018      	beq.n	d58e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d58b4:	b11c      	cbz	r4, d58be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d58b6:	4631      	mov	r1, r6
   d58b8:	4620      	mov	r0, r4
   d58ba:	f7ff fa89 	bl	d4dd0 <_ZN6StringC1EOS_>
                end->~T();
   d58be:	4630      	mov	r0, r6
   d58c0:	f7ff fa1e 	bl	d4d00 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d58c4:	3e10      	subs	r6, #16
   d58c6:	3c10      	subs	r4, #16
   d58c8:	e7f2      	b.n	d58b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d58ca:	d00c      	beq.n	d58e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d58cc:	42b5      	cmp	r5, r6
   d58ce:	d00a      	beq.n	d58e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d58d0:	b11c      	cbz	r4, d58da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d58d2:	4629      	mov	r1, r5
   d58d4:	4620      	mov	r0, r4
   d58d6:	f7ff fa7b 	bl	d4dd0 <_ZN6StringC1EOS_>
                p->~T();
   d58da:	4628      	mov	r0, r5
   d58dc:	f7ff fa10 	bl	d4d00 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d58e0:	3510      	adds	r5, #16
   d58e2:	3410      	adds	r4, #16
   d58e4:	e7f2      	b.n	d58cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d58e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d58e8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d58ea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d58ec:	4605      	mov	r5, r0
        if (n > 0) {
   d58ee:	dd11      	ble.n	d5914 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d58f0:	0130      	lsls	r0, r6, #4
   d58f2:	f7ff f8bf 	bl	d4a74 <malloc>
            if (!d) {
   d58f6:	4604      	mov	r4, r0
   d58f8:	b158      	cbz	r0, d5912 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d58fa:	e9d5 1200 	ldrd	r1, r2, [r5]
   d58fe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5902:	f7ff ffc7 	bl	d5894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5906:	6828      	ldr	r0, [r5, #0]
   d5908:	f7ff f8bc 	bl	d4a84 <free>
        data_ = d;
   d590c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d590e:	60ae      	str	r6, [r5, #8]
        return true;
   d5910:	2001      	movs	r0, #1
    }
   d5912:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5914:	2400      	movs	r4, #0
   d5916:	e7f6      	b.n	d5906 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5918 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d591c:	4691      	mov	r9, r2
   d591e:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d5920:	2300      	movs	r3, #0
   d5922:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5924:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5928:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d592a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d592c:	4299      	cmp	r1, r3
        capacity_(0) {
   d592e:	e9c0 3300 	strd	r3, r3, [r0]
   d5932:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5936:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d593a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d593e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5940:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5942:	dc23      	bgt.n	d598c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5944:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5948:	2314      	movs	r3, #20
   d594a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d594e:	42af      	cmp	r7, r5
   d5950:	d03b      	beq.n	d59ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d5952:	4629      	mov	r1, r5
   d5954:	a80d      	add	r0, sp, #52	; 0x34
   d5956:	f7ff fa3b 	bl	d4dd0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d595a:	a90d      	add	r1, sp, #52	; 0x34
   d595c:	a811      	add	r0, sp, #68	; 0x44
   d595e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d5960:	f7ff fa36 	bl	d4dd0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5964:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5968:	4299      	cmp	r1, r3
   d596a:	da1b      	bge.n	d59a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d596e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d5970:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5974:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5978:	4631      	mov	r1, r6
   d597a:	f106 0010 	add.w	r0, r6, #16
   d597e:	f7ff ff89 	bl	d5894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5982:	b9ee      	cbnz	r6, d59c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d5984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5986:	3301      	adds	r3, #1
   d5988:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d598a:	e011      	b.n	d59b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d598c:	a80a      	add	r0, sp, #40	; 0x28
   d598e:	f7ff ffab 	bl	d58e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5992:	2800      	cmp	r0, #0
   d5994:	d1d6      	bne.n	d5944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d5996:	a80a      	add	r0, sp, #40	; 0x28
   d5998:	f7ff fa60 	bl	d4e5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d599c:	4620      	mov	r0, r4
   d599e:	b017      	add	sp, #92	; 0x5c
   d59a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d59a4:	3101      	adds	r1, #1
   d59a6:	a80a      	add	r0, sp, #40	; 0x28
   d59a8:	f7ff ff9e 	bl	d58e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d59ac:	2800      	cmp	r0, #0
   d59ae:	d1dd      	bne.n	d596c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d59b0:	a811      	add	r0, sp, #68	; 0x44
   d59b2:	f7ff f9a5 	bl	d4d00 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d59b6:	a80d      	add	r0, sp, #52	; 0x34
   d59b8:	f7ff f9a2 	bl	d4d00 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d59bc:	3514      	adds	r5, #20
   d59be:	e7c6      	b.n	d594e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d59c0:	a911      	add	r1, sp, #68	; 0x44
   d59c2:	4630      	mov	r0, r6
   d59c4:	f7ff fa04 	bl	d4dd0 <_ZN6StringC1EOS_>
   d59c8:	e7dc      	b.n	d5984 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d59ca:	2600      	movs	r6, #0
   d59cc:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d59d0:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d59d2:	4637      	mov	r7, r6
   d59d4:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d59d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d59dc:	429e      	cmp	r6, r3
   d59de:	f280 8097 	bge.w	d5b10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d59e2:	0133      	lsls	r3, r6, #4
   d59e4:	58d3      	ldr	r3, [r2, r3]
   d59e6:	9308      	str	r3, [sp, #32]
        if (!category) {
   d59e8:	b90b      	cbnz	r3, d59ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d59ea:	3601      	adds	r6, #1
   d59ec:	e7f4      	b.n	d59d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d59ee:	fb0a f306 	mul.w	r3, sl, r6
   d59f2:	9709      	str	r7, [sp, #36]	; 0x24
   d59f4:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d59f6:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d59f8:	a909      	add	r1, sp, #36	; 0x24
   d59fa:	a808      	add	r0, sp, #32
   d59fc:	f7ff fb0e 	bl	d501c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5a00:	4683      	mov	fp, r0
   d5a02:	2800      	cmp	r0, #0
   d5a04:	d0f1      	beq.n	d59ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5a06:	4601      	mov	r1, r0
   d5a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5a0a:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5a0e:	f10d 031f 	add.w	r3, sp, #31
   d5a12:	4628      	mov	r0, r5
   d5a14:	f7ff fb80 	bl	d5118 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5a18:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5a1c:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5a1e:	f1b8 0f00 	cmp.w	r8, #0
   d5a22:	d166      	bne.n	d5af2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5a24:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5a28:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5a2c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5a34:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5a38:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5a3c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a40:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5a44:	4293      	cmp	r3, r2
   d5a46:	db1a      	blt.n	d5a7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5a48:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5a4c:	f1bb 0f00 	cmp.w	fp, #0
   d5a50:	dd4a      	ble.n	d5ae8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5a52:	fb0a f00b 	mul.w	r0, sl, fp
   d5a56:	f7ff f80d 	bl	d4a74 <malloc>
            if (!d) {
   d5a5a:	9004      	str	r0, [sp, #16]
   d5a5c:	2800      	cmp	r0, #0
   d5a5e:	d045      	beq.n	d5aec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5a60:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5a64:	fb0a 1202 	mla	r2, sl, r2, r1
   d5a68:	f7ff fe71 	bl	d574e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5a6c:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5a6e:	6828      	ldr	r0, [r5, #0]
   d5a70:	9304      	str	r3, [sp, #16]
   d5a72:	f7ff f807 	bl	d4a84 <free>
        data_ = d;
   d5a76:	9b04      	ldr	r3, [sp, #16]
   d5a78:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5a7a:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5a7e:	9b01      	ldr	r3, [sp, #4]
   d5a80:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5a84:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5a86:	fb0a f303 	mul.w	r3, sl, r3
   d5a8a:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d5a8e:	f101 0014 	add.w	r0, r1, #20
   d5a92:	fb0a b202 	mla	r2, sl, r2, fp
   d5a96:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5a98:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5a9a:	f7ff fe58 	bl	d574e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5a9e:	9904      	ldr	r1, [sp, #16]
   d5aa0:	b1a9      	cbz	r1, d5ace <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d5aa2:	9b05      	ldr	r3, [sp, #20]
   d5aa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5aa6:	f84b 2003 	str.w	r2, [fp, r3]
   d5aaa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5aae:	808b      	strh	r3, [r1, #4]
   d5ab0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5ab4:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5ab6:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5aba:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5abe:	608b      	str	r3, [r1, #8]
   d5ac0:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5ac2:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5ac4:	60cb      	str	r3, [r1, #12]
   d5ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5ac8:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5aca:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5acc:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d5ace:	686b      	ldr	r3, [r5, #4]
   d5ad0:	3301      	adds	r3, #1
   d5ad2:	606b      	str	r3, [r5, #4]
   d5ad4:	a813      	add	r0, sp, #76	; 0x4c
   d5ad6:	f7ff fca5 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5ada:	f1b8 0f00 	cmp.w	r8, #0
   d5ade:	d008      	beq.n	d5af2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5ae0:	a80d      	add	r0, sp, #52	; 0x34
   d5ae2:	f7ff fc9f 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5ae6:	e756      	b.n	d5996 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5ae8:	4643      	mov	r3, r8
   d5aea:	e7c0      	b.n	d5a6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5aec:	f04f 0801 	mov.w	r8, #1
   d5af0:	e7f0      	b.n	d5ad4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5af2:	9b01      	ldr	r3, [sp, #4]
   d5af4:	682d      	ldr	r5, [r5, #0]
   d5af6:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5afa:	9b08      	ldr	r3, [sp, #32]
   d5afc:	781b      	ldrb	r3, [r3, #0]
   d5afe:	b92b      	cbnz	r3, d5b0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5b00:	f8d9 3000 	ldr.w	r3, [r9]
   d5b04:	9a02      	ldr	r2, [sp, #8]
   d5b06:	4413      	add	r3, r2
   d5b08:	7c1b      	ldrb	r3, [r3, #16]
   d5b0a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5b0c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5b0e:	e773      	b.n	d59f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b10:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5b12:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b14:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5b16:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b18:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b1a:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5b1e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b20:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5b22:	60a2      	str	r2, [r4, #8]
   d5b24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5b26:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b28:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5b2a:	60e2      	str	r2, [r4, #12]
   d5b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5b2e:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b30:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5b32:	6122      	str	r2, [r4, #16]
   d5b34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5b36:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5b38:	9b03      	ldr	r3, [sp, #12]
   d5b3a:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5b3c:	6162      	str	r2, [r4, #20]
   d5b3e:	7623      	strb	r3, [r4, #24]
   d5b40:	e7ce      	b.n	d5ae0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5b44 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5b44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5b46:	4605      	mov	r5, r0
   d5b48:	4b09      	ldr	r3, [pc, #36]	; (d5b70 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5b4a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5b4e:	4604      	mov	r4, r0
   d5b50:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5b52:	a801      	add	r0, sp, #4
   d5b54:	4611      	mov	r1, r2
   d5b56:	f7fe fc78 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5b5a:	aa01      	add	r2, sp, #4
   d5b5c:	4631      	mov	r1, r6
   d5b5e:	4628      	mov	r0, r5
   d5b60:	f7ff feda 	bl	d5918 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5b64:	a801      	add	r0, sp, #4
   d5b66:	f7fe fc2f 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5b6a:	4620      	mov	r0, r4
   d5b6c:	b004      	add	sp, #16
   d5b6e:	bd70      	pop	{r4, r5, r6, pc}
   d5b70:	000d7d24 	.word	0x000d7d24

000d5b74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b76:	460f      	mov	r7, r1
   d5b78:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5b7a:	4926      	ldr	r1, [pc, #152]	; (d5c14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5b7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5b7e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5b80:	4616      	mov	r6, r2
   d5b82:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5b84:	f001 ffcf 	bl	d7b26 <strcmp>
   d5b88:	bb00      	cbnz	r0, d5bcc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5b8a:	b1e4      	cbz	r4, d5bc6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5b8c:	4629      	mov	r1, r5
   d5b8e:	4668      	mov	r0, sp
   d5b90:	f7ff fc90 	bl	d54b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5b94:	4920      	ldr	r1, [pc, #128]	; (d5c18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5b96:	2024      	movs	r0, #36	; 0x24
   d5b98:	f001 fb27 	bl	d71ea <_ZnwjRKSt9nothrow_t>
   d5b9c:	4605      	mov	r5, r0
   d5b9e:	b170      	cbz	r0, d5bbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5ba0:	4669      	mov	r1, sp
   d5ba2:	a803      	add	r0, sp, #12
   d5ba4:	f7fe fc51 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ba8:	aa03      	add	r2, sp, #12
   d5baa:	4631      	mov	r1, r6
   d5bac:	4628      	mov	r0, r5
   d5bae:	f7ff ffc9 	bl	d5b44 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5bb2:	a803      	add	r0, sp, #12
   d5bb4:	f7fe fc08 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5bb8:	4b18      	ldr	r3, [pc, #96]	; (d5c1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5bba:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5bbc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5bbe:	4668      	mov	r0, sp
   d5bc0:	f7fe fc02 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5bc4:	462c      	mov	r4, r5
}
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	b007      	add	sp, #28
   d5bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5bcc:	4914      	ldr	r1, [pc, #80]	; (d5c20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5bce:	4638      	mov	r0, r7
   d5bd0:	f001 ffa9 	bl	d7b26 <strcmp>
   d5bd4:	b9e0      	cbnz	r0, d5c10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5bd6:	2c00      	cmp	r4, #0
   d5bd8:	d0f5      	beq.n	d5bc6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5bda:	4629      	mov	r1, r5
   d5bdc:	4668      	mov	r0, sp
   d5bde:	f7ff fc69 	bl	d54b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5be2:	490d      	ldr	r1, [pc, #52]	; (d5c18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5be4:	2024      	movs	r0, #36	; 0x24
   d5be6:	f001 fb00 	bl	d71ea <_ZnwjRKSt9nothrow_t>
   d5bea:	4605      	mov	r5, r0
   d5bec:	2800      	cmp	r0, #0
   d5bee:	d0e6      	beq.n	d5bbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5bf0:	4669      	mov	r1, sp
   d5bf2:	a803      	add	r0, sp, #12
   d5bf4:	f7fe fc29 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5bf8:	aa03      	add	r2, sp, #12
   d5bfa:	4631      	mov	r1, r6
   d5bfc:	4628      	mov	r0, r5
   d5bfe:	f7ff ffa1 	bl	d5b44 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5c02:	a803      	add	r0, sp, #12
   d5c04:	f7fe fbe0 	bl	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5c08:	4b06      	ldr	r3, [pc, #24]	; (d5c24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5c0a:	602b      	str	r3, [r5, #0]
   d5c0c:	622c      	str	r4, [r5, #32]
}
   d5c0e:	e7d6      	b.n	d5bbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5c10:	2400      	movs	r4, #0
   d5c12:	e7d8      	b.n	d5bc6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5c14:	000d7dd6 	.word	0x000d7dd6
   d5c18:	000d8009 	.word	0x000d8009
   d5c1c:	000d7e74 	.word	0x000d7e74
   d5c20:	000d7dda 	.word	0x000d7dda
   d5c24:	000d7e5c 	.word	0x000d7e5c

000d5c28 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5c28:	4b01      	ldr	r3, [pc, #4]	; (d5c30 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c2a:	4a02      	ldr	r2, [pc, #8]	; (d5c34 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c2c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5c2e:	4770      	bx	lr
   d5c30:	2003e5f8 	.word	0x2003e5f8
   d5c34:	000d7deb 	.word	0x000d7deb

000d5c38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c3c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5c3e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5c42:	4604      	mov	r4, r0
   d5c44:	460e      	mov	r6, r1
   d5c46:	4617      	mov	r7, r2
   d5c48:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5c4a:	f000 fdcd 	bl	d67e8 <_Z16_fetch_usbserialv>
   d5c4e:	4581      	cmp	r9, r0
   d5c50:	d04c      	beq.n	d5cec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5c52:	792b      	ldrb	r3, [r5, #4]
   d5c54:	0719      	lsls	r1, r3, #28
   d5c56:	d504      	bpl.n	d5c62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5c58:	696a      	ldr	r2, [r5, #20]
   d5c5a:	4954      	ldr	r1, [pc, #336]	; (d5dac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5c5c:	4620      	mov	r0, r4
   d5c5e:	f7ff fa4c 	bl	d50fa <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5c62:	f1b8 0f00 	cmp.w	r8, #0
   d5c66:	d00d      	beq.n	d5c84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5c68:	215b      	movs	r1, #91	; 0x5b
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	f7ff fa39 	bl	d50e2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5c70:	4641      	mov	r1, r8
   d5c72:	4620      	mov	r0, r4
   d5c74:	f7ff fa26 	bl	d50c4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5c78:	6823      	ldr	r3, [r4, #0]
   d5c7a:	494d      	ldr	r1, [pc, #308]	; (d5db0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5c7c:	68db      	ldr	r3, [r3, #12]
   d5c7e:	2202      	movs	r2, #2
   d5c80:	4620      	mov	r0, r4
   d5c82:	4798      	blx	r3
    if (attr.has_file) {
   d5c84:	792b      	ldrb	r3, [r5, #4]
   d5c86:	07da      	lsls	r2, r3, #31
   d5c88:	d523      	bpl.n	d5cd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5c8a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5c8e:	212f      	movs	r1, #47	; 0x2f
   d5c90:	4640      	mov	r0, r8
   d5c92:	f001 ff92 	bl	d7bba <strrchr>
    if (s1) {
   d5c96:	b108      	cbz	r0, d5c9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5c98:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5c9c:	4641      	mov	r1, r8
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	f7ff fa10 	bl	d50c4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5ca4:	792b      	ldrb	r3, [r5, #4]
   d5ca6:	079b      	lsls	r3, r3, #30
   d5ca8:	d508      	bpl.n	d5cbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5caa:	213a      	movs	r1, #58	; 0x3a
   d5cac:	4620      	mov	r0, r4
   d5cae:	f7ff fa18 	bl	d50e2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5cb2:	68ea      	ldr	r2, [r5, #12]
   d5cb4:	493f      	ldr	r1, [pc, #252]	; (d5db4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	f7ff fa1f 	bl	d50fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5cbc:	792a      	ldrb	r2, [r5, #4]
   d5cbe:	6823      	ldr	r3, [r4, #0]
   d5cc0:	f012 0f04 	tst.w	r2, #4
   d5cc4:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5cc6:	bf14      	ite	ne
   d5cc8:	493b      	ldrne	r1, [pc, #236]	; (d5db8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5cca:	493c      	ldreq	r1, [pc, #240]	; (d5dbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5ccc:	2202      	movs	r2, #2
            write(": ", 2);
   d5cce:	4620      	mov	r0, r4
   d5cd0:	4798      	blx	r3
    if (attr.has_function) {
   d5cd2:	792b      	ldrb	r3, [r5, #4]
   d5cd4:	0758      	lsls	r0, r3, #29
   d5cd6:	d51d      	bpl.n	d5d14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5cd8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5cda:	460b      	mov	r3, r1
   d5cdc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5cde:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5ce2:	b160      	cbz	r0, d5cfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5ce4:	2820      	cmp	r0, #32
   d5ce6:	d108      	bne.n	d5cfa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5ce8:	4619      	mov	r1, r3
   d5cea:	e7f7      	b.n	d5cdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5cec:	4834      	ldr	r0, [pc, #208]	; (d5dc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5cee:	f000 ff14 	bl	d6b1a <_ZN5spark12NetworkClass9listeningEv>
   d5cf2:	2800      	cmp	r0, #0
   d5cf4:	d0ad      	beq.n	d5c52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5cfa:	2828      	cmp	r0, #40	; 0x28
   d5cfc:	d1ee      	bne.n	d5cdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5cfe:	6823      	ldr	r3, [r4, #0]
   d5d00:	1a52      	subs	r2, r2, r1
   d5d02:	68db      	ldr	r3, [r3, #12]
   d5d04:	4620      	mov	r0, r4
   d5d06:	4798      	blx	r3
        write("(): ", 4);
   d5d08:	6823      	ldr	r3, [r4, #0]
   d5d0a:	492e      	ldr	r1, [pc, #184]	; (d5dc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5d0c:	68db      	ldr	r3, [r3, #12]
   d5d0e:	2204      	movs	r2, #4
   d5d10:	4620      	mov	r0, r4
   d5d12:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5d14:	2100      	movs	r1, #0
   d5d16:	4638      	mov	r0, r7
   d5d18:	f7fe fdce 	bl	d48b8 <log_level_name>
   d5d1c:	4601      	mov	r1, r0
    write(s);
   d5d1e:	4620      	mov	r0, r4
   d5d20:	f7ff f9d0 	bl	d50c4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5d24:	6823      	ldr	r3, [r4, #0]
   d5d26:	4925      	ldr	r1, [pc, #148]	; (d5dbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5d28:	68db      	ldr	r3, [r3, #12]
   d5d2a:	2202      	movs	r2, #2
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	4798      	blx	r3
    if (msg) {
   d5d30:	b11e      	cbz	r6, d5d3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5d32:	4631      	mov	r1, r6
   d5d34:	4620      	mov	r0, r4
   d5d36:	f7ff f9c5 	bl	d50c4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5d3a:	792b      	ldrb	r3, [r5, #4]
   d5d3c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5d40:	d02c      	beq.n	d5d9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5d42:	6823      	ldr	r3, [r4, #0]
   d5d44:	4920      	ldr	r1, [pc, #128]	; (d5dc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5d46:	68db      	ldr	r3, [r3, #12]
   d5d48:	2202      	movs	r2, #2
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	4798      	blx	r3
        if (attr.has_code) {
   d5d4e:	792b      	ldrb	r3, [r5, #4]
   d5d50:	06d9      	lsls	r1, r3, #27
   d5d52:	d50a      	bpl.n	d5d6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5d54:	6823      	ldr	r3, [r4, #0]
   d5d56:	491d      	ldr	r1, [pc, #116]	; (d5dcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5d58:	68db      	ldr	r3, [r3, #12]
   d5d5a:	2207      	movs	r2, #7
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5d60:	69aa      	ldr	r2, [r5, #24]
   d5d62:	491b      	ldr	r1, [pc, #108]	; (d5dd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5d64:	4620      	mov	r0, r4
   d5d66:	f7ff f9c8 	bl	d50fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5d6a:	792b      	ldrb	r3, [r5, #4]
   d5d6c:	069a      	lsls	r2, r3, #26
   d5d6e:	d511      	bpl.n	d5d94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5d70:	06db      	lsls	r3, r3, #27
   d5d72:	d505      	bpl.n	d5d80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5d74:	6823      	ldr	r3, [r4, #0]
   d5d76:	4910      	ldr	r1, [pc, #64]	; (d5db8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5d78:	68db      	ldr	r3, [r3, #12]
   d5d7a:	2202      	movs	r2, #2
   d5d7c:	4620      	mov	r0, r4
   d5d7e:	4798      	blx	r3
            write("details = ", 10);
   d5d80:	6823      	ldr	r3, [r4, #0]
   d5d82:	4914      	ldr	r1, [pc, #80]	; (d5dd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5d84:	68db      	ldr	r3, [r3, #12]
   d5d86:	4620      	mov	r0, r4
   d5d88:	220a      	movs	r2, #10
   d5d8a:	4798      	blx	r3
            write(attr.details);
   d5d8c:	69e9      	ldr	r1, [r5, #28]
   d5d8e:	4620      	mov	r0, r4
   d5d90:	f7ff f998 	bl	d50c4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5d94:	215d      	movs	r1, #93	; 0x5d
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff f9a3 	bl	d50e2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5d9c:	6823      	ldr	r3, [r4, #0]
   d5d9e:	490e      	ldr	r1, [pc, #56]	; (d5dd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5da0:	68db      	ldr	r3, [r3, #12]
   d5da2:	4620      	mov	r0, r4
   d5da4:	2202      	movs	r2, #2
}
   d5da6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5daa:	4718      	bx	r3
   d5dac:	000d7def 	.word	0x000d7def
   d5db0:	000d7df6 	.word	0x000d7df6
   d5db4:	000d7df9 	.word	0x000d7df9
   d5db8:	000d7dfc 	.word	0x000d7dfc
   d5dbc:	000d7e01 	.word	0x000d7e01
   d5dc0:	2003e7a8 	.word	0x2003e7a8
   d5dc4:	000d7dff 	.word	0x000d7dff
   d5dc8:	000d7e04 	.word	0x000d7e04
   d5dcc:	000d7e07 	.word	0x000d7e07
   d5dd0:	000d7e0f 	.word	0x000d7e0f
   d5dd4:	000d7e12 	.word	0x000d7e12
   d5dd8:	000d7e1d 	.word	0x000d7e1d

000d5ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5de0:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5de2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5de6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5de8:	4605      	mov	r5, r0
   d5dea:	460f      	mov	r7, r1
   d5dec:	4690      	mov	r8, r2
   d5dee:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5df0:	f000 fcfa 	bl	d67e8 <_Z16_fetch_usbserialv>
   d5df4:	4581      	cmp	r9, r0
   d5df6:	d105      	bne.n	d5e04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5df8:	4849      	ldr	r0, [pc, #292]	; (d5f20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5dfa:	f000 fe8e 	bl	d6b1a <_ZN5spark12NetworkClass9listeningEv>
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	f040 808a 	bne.w	d5f18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5e04:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5e06:	4a47      	ldr	r2, [pc, #284]	; (d5f24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5e08:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5e0a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5e0e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5e10:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5e12:	f88d 9008 	strb.w	r9, [sp, #8]
   d5e16:	f001 f83e 	bl	d6e96 <_ZN5spark10JSONWriter11beginObjectEv>
   d5e1a:	4649      	mov	r1, r9
   d5e1c:	4640      	mov	r0, r8
   d5e1e:	f7fe fd4b 	bl	d48b8 <log_level_name>
    json.name("l", 1).value(s);
   d5e22:	4941      	ldr	r1, [pc, #260]	; (d5f28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5e24:	4680      	mov	r8, r0
   d5e26:	2201      	movs	r2, #1
   d5e28:	a801      	add	r0, sp, #4
   d5e2a:	f001 f8bd 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e2e:	4641      	mov	r1, r8
   d5e30:	f7ff f93a 	bl	d50a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5e34:	b13f      	cbz	r7, d5e46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5e36:	493d      	ldr	r1, [pc, #244]	; (d5f2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5e38:	2201      	movs	r2, #1
   d5e3a:	a801      	add	r0, sp, #4
   d5e3c:	f001 f8b4 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e40:	4639      	mov	r1, r7
   d5e42:	f7ff f931 	bl	d50a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5e46:	b13e      	cbz	r6, d5e58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5e48:	4939      	ldr	r1, [pc, #228]	; (d5f30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5e4a:	2201      	movs	r2, #1
   d5e4c:	a801      	add	r0, sp, #4
   d5e4e:	f001 f8ab 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e52:	4631      	mov	r1, r6
   d5e54:	f7ff f928 	bl	d50a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5e58:	7923      	ldrb	r3, [r4, #4]
   d5e5a:	07df      	lsls	r7, r3, #31
   d5e5c:	d50e      	bpl.n	d5e7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5e5e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5e60:	212f      	movs	r1, #47	; 0x2f
   d5e62:	4630      	mov	r0, r6
   d5e64:	f001 fea9 	bl	d7bba <strrchr>
    if (s1) {
   d5e68:	b100      	cbz	r0, d5e6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5e6a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5e6c:	4931      	ldr	r1, [pc, #196]	; (d5f34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5e6e:	2201      	movs	r2, #1
   d5e70:	a801      	add	r0, sp, #4
   d5e72:	f001 f899 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e76:	4631      	mov	r1, r6
   d5e78:	f7ff f916 	bl	d50a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5e7c:	7923      	ldrb	r3, [r4, #4]
   d5e7e:	079e      	lsls	r6, r3, #30
   d5e80:	d507      	bpl.n	d5e92 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5e82:	492d      	ldr	r1, [pc, #180]	; (d5f38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5e84:	2202      	movs	r2, #2
   d5e86:	a801      	add	r0, sp, #4
   d5e88:	f001 f88e 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e8c:	68e1      	ldr	r1, [r4, #12]
   d5e8e:	f001 f80f 	bl	d6eb0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5e92:	7923      	ldrb	r3, [r4, #4]
   d5e94:	0758      	lsls	r0, r3, #29
   d5e96:	d514      	bpl.n	d5ec2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5e98:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5e9a:	4633      	mov	r3, r6
   d5e9c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5ea2:	b12a      	cbz	r2, d5eb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5ea4:	2a20      	cmp	r2, #32
   d5ea6:	d101      	bne.n	d5eac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5ea8:	461e      	mov	r6, r3
   d5eaa:	e7f7      	b.n	d5e9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5eac:	2a28      	cmp	r2, #40	; 0x28
   d5eae:	d1f5      	bne.n	d5e9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5eb0:	4922      	ldr	r1, [pc, #136]	; (d5f3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5eb2:	2202      	movs	r2, #2
   d5eb4:	a801      	add	r0, sp, #4
   d5eb6:	f001 f877 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5eba:	1bba      	subs	r2, r7, r6
   d5ebc:	4631      	mov	r1, r6
   d5ebe:	f001 f883 	bl	d6fc8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5ec2:	7923      	ldrb	r3, [r4, #4]
   d5ec4:	0719      	lsls	r1, r3, #28
   d5ec6:	d507      	bpl.n	d5ed8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5ec8:	491d      	ldr	r1, [pc, #116]	; (d5f40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5eca:	2201      	movs	r2, #1
   d5ecc:	a801      	add	r0, sp, #4
   d5ece:	f001 f86b 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ed2:	6961      	ldr	r1, [r4, #20]
   d5ed4:	f000 fffe 	bl	d6ed4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5ed8:	7923      	ldrb	r3, [r4, #4]
   d5eda:	06da      	lsls	r2, r3, #27
   d5edc:	d508      	bpl.n	d5ef0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5ede:	2204      	movs	r2, #4
   d5ee0:	4918      	ldr	r1, [pc, #96]	; (d5f44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5ee2:	eb0d 0002 	add.w	r0, sp, r2
   d5ee6:	f001 f85f 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5eea:	69a1      	ldr	r1, [r4, #24]
   d5eec:	f000 ffe0 	bl	d6eb0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5ef0:	7923      	ldrb	r3, [r4, #4]
   d5ef2:	069b      	lsls	r3, r3, #26
   d5ef4:	d507      	bpl.n	d5f06 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5ef6:	4914      	ldr	r1, [pc, #80]	; (d5f48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5ef8:	2206      	movs	r2, #6
   d5efa:	a801      	add	r0, sp, #4
   d5efc:	f001 f854 	bl	d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f00:	69e1      	ldr	r1, [r4, #28]
   d5f02:	f7ff f8d1 	bl	d50a8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5f06:	a801      	add	r0, sp, #4
   d5f08:	f000 ffaf 	bl	d6e6a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5f0c:	6a28      	ldr	r0, [r5, #32]
   d5f0e:	490f      	ldr	r1, [pc, #60]	; (d5f4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5f10:	6803      	ldr	r3, [r0, #0]
   d5f12:	2202      	movs	r2, #2
   d5f14:	68db      	ldr	r3, [r3, #12]
   d5f16:	4798      	blx	r3
}
   d5f18:	b005      	add	sp, #20
   d5f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5f1e:	bf00      	nop
   d5f20:	2003e7a8 	.word	0x2003e7a8
   d5f24:	000d7e44 	.word	0x000d7e44
   d5f28:	000d7dcc 	.word	0x000d7dcc
   d5f2c:	000d7e20 	.word	0x000d7e20
   d5f30:	000d7e22 	.word	0x000d7e22
   d5f34:	000d7e24 	.word	0x000d7e24
   d5f38:	000d7e26 	.word	0x000d7e26
   d5f3c:	000d7e29 	.word	0x000d7e29
   d5f40:	000d7e2c 	.word	0x000d7e2c
   d5f44:	000d7e2e 	.word	0x000d7e2e
   d5f48:	000d7e33 	.word	0x000d7e33
   d5f4c:	000d7e1d 	.word	0x000d7e1d

000d5f50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f50:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f52:	681a      	ldr	r2, [r3, #0]
   d5f54:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5f58:	4770      	bx	lr
   d5f5a:	bf00      	nop
   d5f5c:	2003e504 	.word	0x2003e504
   d5f60:	2003e624 	.word	0x2003e624

000d5f64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f64:	2100      	movs	r1, #0
   d5f66:	f7fe bcbf 	b.w	d48e8 <system_delay_ms>

000d5f6a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5f6a:	b510      	push	{r4, lr}
   d5f6c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f6e:	f7fe ff6c 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
   d5f72:	4620      	mov	r0, r4
   d5f74:	bd10      	pop	{r4, pc}
	...

000d5f78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5f78:	4803      	ldr	r0, [pc, #12]	; (d5f88 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5f7a:	4a04      	ldr	r2, [pc, #16]	; (d5f8c <_GLOBAL__sub_I_RGB+0x14>)
   d5f7c:	4904      	ldr	r1, [pc, #16]	; (d5f90 <_GLOBAL__sub_I_RGB+0x18>)
   d5f7e:	2300      	movs	r3, #0
   d5f80:	6083      	str	r3, [r0, #8]
   d5f82:	f001 b92b 	b.w	d71dc <__aeabi_atexit>
   d5f86:	bf00      	nop
   d5f88:	2003e628 	.word	0x2003e628
   d5f8c:	2003e56c 	.word	0x2003e56c
   d5f90:	000d5f6b 	.word	0x000d5f6b

000d5f94 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d5f94:	6800      	ldr	r0, [r0, #0]
   d5f96:	f000 bd77 	b.w	d6a88 <_ZN7TwoWire4lockEv>

000d5f9a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d5f9a:	b510      	push	{r4, lr}
   d5f9c:	4604      	mov	r4, r0
      lock_(_lock) {
   d5f9e:	6001      	str	r1, [r0, #0]
   d5fa0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d5fa2:	b10a      	cbz	r2, d5fa8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d5fa4:	f7ff fff6 	bl	d5f94 <_ZN9FuelGauge4lockEv>
}
   d5fa8:	4620      	mov	r0, r4
   d5faa:	bd10      	pop	{r4, pc}

000d5fac <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d5fac:	b513      	push	{r0, r1, r4, lr}
   d5fae:	4604      	mov	r4, r0
   d5fb0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d5fb2:	f001 f8eb 	bl	d718c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d5fb6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d5fb8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d5fba:	4620      	mov	r0, r4
   d5fbc:	f7ff ffed 	bl	d5f9a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	b002      	add	sp, #8
   d5fc4:	bd10      	pop	{r4, pc}

000d5fc6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d5fc6:	6800      	ldr	r0, [r0, #0]
   d5fc8:	f000 bd67 	b.w	d6a9a <_ZN7TwoWire6unlockEv>

000d5fcc <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d5fcc:	b510      	push	{r4, lr}
    if (lock_) {
   d5fce:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d5fd0:	4604      	mov	r4, r0
    if (lock_) {
   d5fd2:	b10b      	cbz	r3, d5fd8 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d5fd4:	f7ff fff7 	bl	d5fc6 <_ZN9FuelGauge6unlockEv>
}
   d5fd8:	4620      	mov	r0, r4
   d5fda:	bd10      	pop	{r4, pc}

000d5fdc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5fdc:	4b01      	ldr	r3, [pc, #4]	; (d5fe4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5fde:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5fe0:	4770      	bx	lr
   d5fe2:	bf00      	nop
   d5fe4:	2003e508 	.word	0x2003e508

000d5fe8 <serialEventRun>:
{
   d5fe8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5fea:	4b0b      	ldr	r3, [pc, #44]	; (d6018 <serialEventRun+0x30>)
   d5fec:	b143      	cbz	r3, d6000 <serialEventRun+0x18>
   d5fee:	f000 fbfb 	bl	d67e8 <_Z16_fetch_usbserialv>
   d5ff2:	6803      	ldr	r3, [r0, #0]
   d5ff4:	691b      	ldr	r3, [r3, #16]
   d5ff6:	4798      	blx	r3
   d5ff8:	2800      	cmp	r0, #0
   d5ffa:	dd01      	ble.n	d6000 <serialEventRun+0x18>
        serialEvent();
   d5ffc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6000:	4b06      	ldr	r3, [pc, #24]	; (d601c <serialEventRun+0x34>)
   d6002:	b143      	cbz	r3, d6016 <serialEventRun+0x2e>
   d6004:	f000 fcc4 	bl	d6990 <_Z22__fetch_global_Serial1v>
   d6008:	6803      	ldr	r3, [r0, #0]
   d600a:	691b      	ldr	r3, [r3, #16]
   d600c:	4798      	blx	r3
   d600e:	2800      	cmp	r0, #0
   d6010:	dd01      	ble.n	d6016 <serialEventRun+0x2e>
        serialEvent1();
   d6012:	f3af 8000 	nop.w
}
   d6016:	bd08      	pop	{r3, pc}
	...

000d6020 <_post_loop>:
{
   d6020:	b508      	push	{r3, lr}
	serialEventRun();
   d6022:	f7ff ffe1 	bl	d5fe8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6026:	f7fe fb17 	bl	d4658 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d602a:	4b01      	ldr	r3, [pc, #4]	; (d6030 <_post_loop+0x10>)
   d602c:	6018      	str	r0, [r3, #0]
}
   d602e:	bd08      	pop	{r3, pc}
   d6030:	2003e7bc 	.word	0x2003e7bc

000d6034 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6034:	4802      	ldr	r0, [pc, #8]	; (d6040 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6036:	4a03      	ldr	r2, [pc, #12]	; (d6044 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6038:	4903      	ldr	r1, [pc, #12]	; (d6048 <_Z33system_initialize_user_backup_ramv+0x14>)
   d603a:	1a12      	subs	r2, r2, r0
   d603c:	f001 bd08 	b.w	d7a50 <memcpy>
   d6040:	2003f400 	.word	0x2003f400
   d6044:	2003f404 	.word	0x2003f404
   d6048:	000d8130 	.word	0x000d8130

000d604c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d604c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d604e:	2300      	movs	r3, #0
   d6050:	9300      	str	r3, [sp, #0]
   d6052:	461a      	mov	r2, r3
   d6054:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6058:	f7fe fc70 	bl	d493c <system_ctrl_set_result>
}
   d605c:	b003      	add	sp, #12
   d605e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6064 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6064:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6066:	8843      	ldrh	r3, [r0, #2]
   d6068:	2b0a      	cmp	r3, #10
   d606a:	d008      	beq.n	d607e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d606c:	2b50      	cmp	r3, #80	; 0x50
   d606e:	d10b      	bne.n	d6088 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6070:	4b09      	ldr	r3, [pc, #36]	; (d6098 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6072:	681b      	ldr	r3, [r3, #0]
   d6074:	b14b      	cbz	r3, d608a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6076:	b003      	add	sp, #12
   d6078:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d607c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d607e:	f7ff ffe5 	bl	d604c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6082:	b003      	add	sp, #12
   d6084:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6088:	2300      	movs	r3, #0
   d608a:	9300      	str	r3, [sp, #0]
   d608c:	461a      	mov	r2, r3
   d608e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6092:	f7fe fc53 	bl	d493c <system_ctrl_set_result>
}
   d6096:	e7f4      	b.n	d6082 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6098:	2003e63c 	.word	0x2003e63c

000d609c <module_user_init_hook>:
{
   d609c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d609e:	4c12      	ldr	r4, [pc, #72]	; (d60e8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d60a0:	4812      	ldr	r0, [pc, #72]	; (d60ec <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60a2:	4d13      	ldr	r5, [pc, #76]	; (d60f0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d60a4:	2100      	movs	r1, #0
   d60a6:	f7fe fd1d 	bl	d4ae4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60aa:	6823      	ldr	r3, [r4, #0]
   d60ac:	42ab      	cmp	r3, r5
   d60ae:	4b11      	ldr	r3, [pc, #68]	; (d60f4 <module_user_init_hook+0x58>)
   d60b0:	bf0c      	ite	eq
   d60b2:	2201      	moveq	r2, #1
   d60b4:	2200      	movne	r2, #0
   d60b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d60b8:	d002      	beq.n	d60c0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d60ba:	f7ff ffbb 	bl	d6034 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d60be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d60c0:	f7fe faba 	bl	d4638 <HAL_RNG_GetRandomNumber>
   d60c4:	4604      	mov	r4, r0
    srand(seed);
   d60c6:	f001 fcf3 	bl	d7ab0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d60ca:	4b0b      	ldr	r3, [pc, #44]	; (d60f8 <module_user_init_hook+0x5c>)
   d60cc:	b113      	cbz	r3, d60d4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d60ce:	4620      	mov	r0, r4
   d60d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d60d4:	2100      	movs	r1, #0
   d60d6:	4808      	ldr	r0, [pc, #32]	; (d60f8 <module_user_init_hook+0x5c>)
   d60d8:	f7fe fcc4 	bl	d4a64 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d60dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60e0:	4806      	ldr	r0, [pc, #24]	; (d60fc <module_user_init_hook+0x60>)
   d60e2:	2100      	movs	r1, #0
   d60e4:	f7fe bc20 	b.w	d4928 <system_ctrl_set_app_request_handler>
   d60e8:	2003f400 	.word	0x2003f400
   d60ec:	000d5fdd 	.word	0x000d5fdd
   d60f0:	9a271c1e 	.word	0x9a271c1e
   d60f4:	2003e638 	.word	0x2003e638
   d60f8:	00000000 	.word	0x00000000
   d60fc:	000d6065 	.word	0x000d6065

000d6100 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6100:	4770      	bx	lr

000d6102 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6102:	2000      	movs	r0, #0
   d6104:	4770      	bx	lr

000d6106 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6106:	b510      	push	{r4, lr}
   d6108:	2110      	movs	r1, #16
   d610a:	4604      	mov	r4, r0
   d610c:	f001 f86b 	bl	d71e6 <_ZdlPvj>
   d6110:	4620      	mov	r0, r4
   d6112:	bd10      	pop	{r4, pc}

000d6114 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6114:	b508      	push	{r3, lr}
      { delete this; }
   d6116:	f7ff fff6 	bl	d6106 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d611a:	bd08      	pop	{r3, pc}

000d611c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d611c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d611e:	2200      	movs	r2, #0
   d6120:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6124:	6002      	str	r2, [r0, #0]
   d6126:	8084      	strh	r4, [r0, #4]
   d6128:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d612a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d612c:	680c      	ldr	r4, [r1, #0]
   d612e:	8085      	strh	r5, [r0, #4]
   d6130:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6132:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6134:	bd30      	pop	{r4, r5, pc}

000d6136 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6136:	b510      	push	{r4, lr}
   d6138:	4604      	mov	r4, r0
    free((void*)msg_);
   d613a:	6800      	ldr	r0, [r0, #0]
   d613c:	f7fe fca2 	bl	d4a84 <free>
}
   d6140:	4620      	mov	r0, r4
   d6142:	bd10      	pop	{r4, pc}

000d6144 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6144:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6146:	68c4      	ldr	r4, [r0, #12]
   d6148:	b1f4      	cbz	r4, d6188 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d614a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d614c:	2b02      	cmp	r3, #2
   d614e:	d103      	bne.n	d6158 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6150:	f104 000c 	add.w	r0, r4, #12
   d6154:	f7ff ffef 	bl	d6136 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6158:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d615a:	b135      	cbz	r5, d616a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d615c:	4628      	mov	r0, r5
   d615e:	f7fe fe74 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
   d6162:	2110      	movs	r1, #16
   d6164:	4628      	mov	r0, r5
   d6166:	f001 f83e 	bl	d71e6 <_ZdlPvj>
   d616a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d616c:	b135      	cbz	r5, d617c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d616e:	4628      	mov	r0, r5
   d6170:	f7fe fe6b 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
   d6174:	2110      	movs	r1, #16
   d6176:	4628      	mov	r0, r5
   d6178:	f001 f835 	bl	d71e6 <_ZdlPvj>
   d617c:	4620      	mov	r0, r4
   d617e:	2114      	movs	r1, #20
   d6180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6184:	f001 b82f 	b.w	d71e6 <_ZdlPvj>
   d6188:	bd38      	pop	{r3, r4, r5, pc}

000d618a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d618a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d618c:	460e      	mov	r6, r1
   d618e:	4604      	mov	r4, r0
   d6190:	f856 3b04 	ldr.w	r3, [r6], #4
   d6194:	9300      	str	r3, [sp, #0]
   d6196:	460d      	mov	r5, r1
   d6198:	a801      	add	r0, sp, #4
   d619a:	4631      	mov	r1, r6
   d619c:	f7fe fe70 	bl	d4e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d61a0:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d61a2:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d61a4:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d61a6:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d61a8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d61aa:	2300      	movs	r3, #0
   d61ac:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d61ae:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d61b0:	f7fe fe6d 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61b4:	4630      	mov	r0, r6
   d61b6:	f7fe fe6a 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d61ba:	4628      	mov	r0, r5
   d61bc:	2108      	movs	r1, #8
   d61be:	f001 f812 	bl	d71e6 <_ZdlPvj>
        return p;
    }
   d61c2:	4620      	mov	r0, r4
   d61c4:	b002      	add	sp, #8
   d61c6:	bd70      	pop	{r4, r5, r6, pc}

000d61c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d61c8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d61ca:	b510      	push	{r4, lr}
      if (_M_empty())
   d61cc:	b90a      	cbnz	r2, d61d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d61ce:	f001 f810 	bl	d71f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d61d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61d6:	68c3      	ldr	r3, [r0, #12]
   d61d8:	4718      	bx	r3

000d61da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d61da:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d61dc:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d61de:	f100 0110 	add.w	r1, r0, #16
   d61e2:	f7ff fff1 	bl	d61c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d61e6:	bd08      	pop	{r3, pc}

000d61e8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d61e8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d61ea:	b510      	push	{r4, lr}
      if (_M_empty())
   d61ec:	b90a      	cbnz	r2, d61f2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d61ee:	f001 f800 	bl	d71f2 <_ZSt25__throw_bad_function_callv>
    }
   d61f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61f6:	68c3      	ldr	r3, [r0, #12]
   d61f8:	4718      	bx	r3

000d61fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d61fa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d61fc:	6800      	ldr	r0, [r0, #0]
   d61fe:	f100 0110 	add.w	r1, r0, #16
   d6202:	f7ff fff1 	bl	d61e8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6206:	bd08      	pop	{r3, pc}

000d6208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6208:	b538      	push	{r3, r4, r5, lr}
   d620a:	2300      	movs	r3, #0
   d620c:	4604      	mov	r4, r0
   d620e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6210:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6212:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6214:	f7fd ff3f 	bl	d4096 <_Znwj>
   d6218:	b128      	cbz	r0, d6226 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d621a:	2301      	movs	r3, #1
   d621c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6220:	4b02      	ldr	r3, [pc, #8]	; (d622c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6222:	6003      	str	r3, [r0, #0]
   d6224:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6226:	6020      	str	r0, [r4, #0]
	}
   d6228:	4620      	mov	r0, r4
   d622a:	bd38      	pop	{r3, r4, r5, pc}
   d622c:	000d7ed8 	.word	0x000d7ed8

000d6230 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6230:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6232:	2300      	movs	r3, #0
   d6234:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6236:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6238:	4604      	mov	r4, r0
   d623a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d623c:	b12b      	cbz	r3, d624a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d623e:	2202      	movs	r2, #2
   d6240:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6242:	68eb      	ldr	r3, [r5, #12]
   d6244:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6246:	68ab      	ldr	r3, [r5, #8]
   d6248:	60a3      	str	r3, [r4, #8]
    }
   d624a:	4620      	mov	r0, r4
   d624c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6250:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6252:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6254:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6256:	4668      	mov	r0, sp
   d6258:	f7ff ff60 	bl	d611c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d625c:	f04f 0302 	mov.w	r3, #2
   d6260:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6264:	2a00      	cmp	r2, #0
   d6266:	d103      	bne.n	d6270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6268:	e8c4 3f41 	strexb	r1, r3, [r4]
   d626c:	2900      	cmp	r1, #0
   d626e:	d1f7      	bne.n	d6260 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6270:	d125      	bne.n	d62be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6272:	f104 050c 	add.w	r5, r4, #12
   d6276:	4669      	mov	r1, sp
   d6278:	4628      	mov	r0, r5
   d627a:	f7ff ff4f 	bl	d611c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d627e:	f3bf 8f5b 	dmb	ish
   d6282:	2301      	movs	r3, #1
   d6284:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6286:	2000      	movs	r0, #0
   d6288:	f104 0308 	add.w	r3, r4, #8
   d628c:	f3bf 8f5b 	dmb	ish
   d6290:	e853 6f00 	ldrex	r6, [r3]
   d6294:	e843 0200 	strex	r2, r0, [r3]
   d6298:	2a00      	cmp	r2, #0
   d629a:	d1f9      	bne.n	d6290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d629c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d62a0:	b16e      	cbz	r6, d62be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d62a2:	f7fe fb31 	bl	d4908 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d62a6:	b178      	cbz	r0, d62c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d62a8:	4629      	mov	r1, r5
   d62aa:	4630      	mov	r0, r6
   d62ac:	f7ff ff8c 	bl	d61c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d62b0:	4630      	mov	r0, r6
   d62b2:	f7fe fdca 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d62b6:	2110      	movs	r1, #16
   d62b8:	4630      	mov	r0, r6
   d62ba:	f000 ff94 	bl	d71e6 <_ZdlPvj>
        p_->setError(std::move(error));
   d62be:	4668      	mov	r0, sp
   d62c0:	f7ff ff39 	bl	d6136 <_ZN8particle5ErrorD1Ev>
    }
   d62c4:	b009      	add	sp, #36	; 0x24
   d62c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d62c8:	4631      	mov	r1, r6
   d62ca:	a802      	add	r0, sp, #8
   d62cc:	f7ff ffb0 	bl	d6230 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d62d0:	68e0      	ldr	r0, [r4, #12]
   d62d2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d62d6:	b108      	cbz	r0, d62dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d62d8:	f001 fc38 	bl	d7b4c <strdup>
        type_(type) {
   d62dc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d62de:	2010      	movs	r0, #16
   d62e0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d62e4:	f7fd fed7 	bl	d4096 <_Znwj>
   d62e8:	4605      	mov	r5, r0
   d62ea:	b1e8      	cbz	r0, d6328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d62ec:	2700      	movs	r7, #0
   d62ee:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d62f0:	2018      	movs	r0, #24
   d62f2:	f7fd fed0 	bl	d4096 <_Znwj>
   d62f6:	4604      	mov	r4, r0
   d62f8:	b188      	cbz	r0, d631e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d62fa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d62fc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d62fe:	a802      	add	r0, sp, #8
   d6300:	f7fe fdd1 	bl	d4ea6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6304:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6306:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6308:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d630a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d630c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d630e:	a906      	add	r1, sp, #24
   d6310:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6312:	60e3      	str	r3, [r4, #12]
   d6314:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6318:	9205      	str	r2, [sp, #20]
   d631a:	f7ff feff 	bl	d611c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d631e:	4b08      	ldr	r3, [pc, #32]	; (d6340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6320:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6322:	4b08      	ldr	r3, [pc, #32]	; (d6344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6324:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6326:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6328:	a806      	add	r0, sp, #24
   d632a:	f7ff ff04 	bl	d6136 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d632e:	a802      	add	r0, sp, #8
   d6330:	f7fe fd8b 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6334:	2200      	movs	r2, #0
   d6336:	4629      	mov	r1, r5
   d6338:	4803      	ldr	r0, [pc, #12]	; (d6348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d633a:	f7fe faed 	bl	d4918 <application_thread_invoke>
   d633e:	e7b7      	b.n	d62b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6340:	000d61db 	.word	0x000d61db
   d6344:	000d6471 	.word	0x000d6471
   d6348:	000d69e5 	.word	0x000d69e5

000d634c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6350:	b08a      	sub	sp, #40	; 0x28
   d6352:	4605      	mov	r5, r0
   d6354:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6358:	460c      	mov	r4, r1
   d635a:	4617      	mov	r7, r2
   d635c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d635e:	f7fe fb71 	bl	d4a44 <spark_cloud_flag_connected>
   d6362:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6364:	4682      	mov	sl, r0
   d6366:	bb38      	cbnz	r0, d63b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6368:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d636c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d636e:	a905      	add	r1, sp, #20
   d6370:	4630      	mov	r0, r6
   d6372:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6376:	f7ff fed1 	bl	d611c <_ZN8particle5ErrorC1EOS0_>
   d637a:	2014      	movs	r0, #20
   d637c:	f7fd fe8b 	bl	d4096 <_Znwj>
   d6380:	4604      	mov	r4, r0
   d6382:	b148      	cbz	r0, d6398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6384:	2302      	movs	r3, #2
   d6386:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6388:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d638a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d638e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6390:	4631      	mov	r1, r6
   d6392:	300c      	adds	r0, #12
   d6394:	f7ff fec2 	bl	d611c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6398:	4628      	mov	r0, r5
	: __shared_count(__p)
   d639a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d639c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d63a0:	f7ff ff32 	bl	d6208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d63a4:	4630      	mov	r0, r6
   d63a6:	f7ff fec6 	bl	d6136 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d63aa:	a805      	add	r0, sp, #20
   d63ac:	f7ff fec3 	bl	d6136 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d63b0:	4628      	mov	r0, r5
   d63b2:	b00a      	add	sp, #40	; 0x28
   d63b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d63b8:	230c      	movs	r3, #12
   d63ba:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d63be:	2014      	movs	r0, #20
   d63c0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d63c4:	9307      	str	r3, [sp, #28]
   d63c6:	f7fd fe66 	bl	d4096 <_Znwj>
   d63ca:	4601      	mov	r1, r0
   d63cc:	b128      	cbz	r0, d63da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d63ce:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d63d2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63d6:	f880 a001 	strb.w	sl, [r0, #1]
   d63da:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d63dc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d63de:	f7ff ff13 	bl	d6208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d63e2:	4b22      	ldr	r3, [pc, #136]	; (d646c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d63e4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d63e6:	2008      	movs	r0, #8
   d63e8:	f7fd fe55 	bl	d4096 <_Znwj>
   d63ec:	4682      	mov	sl, r0
   d63ee:	b128      	cbz	r0, d63fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63f0:	9b03      	ldr	r3, [sp, #12]
   d63f2:	f840 3b04 	str.w	r3, [r0], #4
   d63f6:	a904      	add	r1, sp, #16
   d63f8:	f7fe fd42 	bl	d4e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d63fc:	9600      	str	r6, [sp, #0]
   d63fe:	fa5f f389 	uxtb.w	r3, r9
   d6402:	4642      	mov	r2, r8
   d6404:	4639      	mov	r1, r7
   d6406:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6408:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d640c:	f7fe fb22 	bl	d4a54 <spark_send_event>
   d6410:	b9b8      	cbnz	r0, d6442 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6412:	9b03      	ldr	r3, [sp, #12]
   d6414:	785b      	ldrb	r3, [r3, #1]
   d6416:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d641a:	b993      	cbnz	r3, d6442 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d641c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6420:	a905      	add	r1, sp, #20
   d6422:	a803      	add	r0, sp, #12
   d6424:	9205      	str	r2, [sp, #20]
   d6426:	f8ad 3018 	strh.w	r3, [sp, #24]
   d642a:	f7ff ff11 	bl	d6250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d642e:	a805      	add	r0, sp, #20
   d6430:	f7ff fe81 	bl	d6136 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6434:	a805      	add	r0, sp, #20
   d6436:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6438:	f7ff fea7 	bl	d618a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d643c:	a806      	add	r0, sp, #24
   d643e:	f7fe fd26 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6442:	9b03      	ldr	r3, [sp, #12]
   d6444:	9305      	str	r3, [sp, #20]
   d6446:	a904      	add	r1, sp, #16
   d6448:	a806      	add	r0, sp, #24
   d644a:	f7fe fd19 	bl	d4e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d644e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6450:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6452:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6454:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6456:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6458:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d645a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d645c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d645e:	f7fe fd16 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6462:	a804      	add	r0, sp, #16
   d6464:	f7fe fd13 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6468:	e7a2      	b.n	d63b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d646a:	bf00      	nop
   d646c:	000d6535 	.word	0x000d6535

000d6470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6470:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6474:	4605      	mov	r5, r0
	  switch (__op)
   d6476:	d007      	beq.n	d6488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6478:	2a03      	cmp	r2, #3
   d647a:	d018      	beq.n	d64ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d647c:	2a01      	cmp	r2, #1
   d647e:	d101      	bne.n	d6484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6480:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6482:	6003      	str	r3, [r0, #0]
	}
   d6484:	2000      	movs	r0, #0
   d6486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6488:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d648a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d648c:	f7fd fe03 	bl	d4096 <_Znwj>
   d6490:	4604      	mov	r4, r0
   d6492:	b150      	cbz	r0, d64aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6494:	4631      	mov	r1, r6
   d6496:	f7ff fecb 	bl	d6230 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d649a:	6930      	ldr	r0, [r6, #16]
   d649c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d64a0:	b108      	cbz	r0, d64a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d64a2:	f001 fb53 	bl	d7b4c <strdup>
        type_(type) {
   d64a6:	6120      	str	r0, [r4, #16]
   d64a8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d64aa:	602c      	str	r4, [r5, #0]
	}
   d64ac:	e7ea      	b.n	d6484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d64ae:	6804      	ldr	r4, [r0, #0]
   d64b0:	2c00      	cmp	r4, #0
   d64b2:	d0e7      	beq.n	d6484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d64b4:	f104 0010 	add.w	r0, r4, #16
   d64b8:	f7ff fe3d 	bl	d6136 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d64bc:	4620      	mov	r0, r4
   d64be:	f7fe fcc4 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d64c2:	2118      	movs	r1, #24
   d64c4:	4620      	mov	r0, r4
   d64c6:	f000 fe8e 	bl	d71e6 <_ZdlPvj>
   d64ca:	e7db      	b.n	d6484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d64cc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d64cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d64ce:	2300      	movs	r3, #0
   d64d0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d64d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d64d4:	4604      	mov	r4, r0
   d64d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d64d8:	b12b      	cbz	r3, d64e6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d64da:	2202      	movs	r2, #2
   d64dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d64de:	68eb      	ldr	r3, [r5, #12]
   d64e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d64e2:	68ab      	ldr	r3, [r5, #8]
   d64e4:	60a3      	str	r3, [r4, #8]
    }
   d64e6:	4620      	mov	r0, r4
   d64e8:	bd38      	pop	{r3, r4, r5, pc}

000d64ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d64ea:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d64ec:	b570      	push	{r4, r5, r6, lr}
   d64ee:	4604      	mov	r4, r0
	  switch (__op)
   d64f0:	d007      	beq.n	d6502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d64f2:	2a03      	cmp	r2, #3
   d64f4:	d012      	beq.n	d651c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d64f6:	2a01      	cmp	r2, #1
   d64f8:	d101      	bne.n	d64fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d64fa:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d64fc:	6003      	str	r3, [r0, #0]
	}
   d64fe:	2000      	movs	r0, #0
   d6500:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6502:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6504:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6506:	f7fd fdc6 	bl	d4096 <_Znwj>
   d650a:	4605      	mov	r5, r0
   d650c:	b120      	cbz	r0, d6518 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d650e:	4631      	mov	r1, r6
   d6510:	f7ff ffdc 	bl	d64cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6514:	7c33      	ldrb	r3, [r6, #16]
   d6516:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6518:	6025      	str	r5, [r4, #0]
	}
   d651a:	e7f0      	b.n	d64fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d651c:	6804      	ldr	r4, [r0, #0]
   d651e:	2c00      	cmp	r4, #0
   d6520:	d0ed      	beq.n	d64fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6522:	4620      	mov	r0, r4
   d6524:	f7fe fc91 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6528:	2114      	movs	r1, #20
   d652a:	4620      	mov	r0, r4
   d652c:	f000 fe5b 	bl	d71e6 <_ZdlPvj>
   d6530:	e7e5      	b.n	d64fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6534 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6534:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6536:	b089      	sub	sp, #36	; 0x24
   d6538:	4604      	mov	r4, r0
   d653a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d653c:	a801      	add	r0, sp, #4
   d653e:	4611      	mov	r1, r2
   d6540:	f7ff fe23 	bl	d618a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6544:	b1a4      	cbz	r4, d6570 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6546:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6548:	b11d      	cbz	r5, d6552 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d654a:	4628      	mov	r0, r5
   d654c:	f001 fafe 	bl	d7b4c <strdup>
   d6550:	4605      	mov	r5, r0
   d6552:	a801      	add	r0, sp, #4
   d6554:	a903      	add	r1, sp, #12
        type_(type) {
   d6556:	9503      	str	r5, [sp, #12]
   d6558:	f8ad 4010 	strh.w	r4, [sp, #16]
   d655c:	f7ff fe78 	bl	d6250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6560:	a803      	add	r0, sp, #12
   d6562:	f7ff fde8 	bl	d6136 <_ZN8particle5ErrorD1Ev>
   d6566:	a802      	add	r0, sp, #8
   d6568:	f7fe fc91 	bl	d4e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d656c:	b009      	add	sp, #36	; 0x24
   d656e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6570:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6572:	2301      	movs	r3, #1
   d6574:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6578:	2a00      	cmp	r2, #0
   d657a:	d103      	bne.n	d6584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d657c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6580:	2900      	cmp	r1, #0
   d6582:	d1f7      	bne.n	d6574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6584:	d1ef      	bne.n	d6566 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6586:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6588:	f3bf 8f5b 	dmb	ish
   d658c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d658e:	1d2b      	adds	r3, r5, #4
   d6590:	f3bf 8f5b 	dmb	ish
   d6594:	e853 6f00 	ldrex	r6, [r3]
   d6598:	e843 4200 	strex	r2, r4, [r3]
   d659c:	2a00      	cmp	r2, #0
   d659e:	d1f9      	bne.n	d6594 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d65a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d65a4:	2e00      	cmp	r6, #0
   d65a6:	d0de      	beq.n	d6566 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7fe f9ad 	bl	d4908 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d65ae:	4607      	mov	r7, r0
   d65b0:	b160      	cbz	r0, d65cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65b2:	f105 010c 	add.w	r1, r5, #12
   d65b6:	4630      	mov	r0, r6
   d65b8:	f7ff fe16 	bl	d61e8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d65bc:	4630      	mov	r0, r6
   d65be:	f7fe fc44 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d65c2:	2110      	movs	r1, #16
   d65c4:	4630      	mov	r0, r6
   d65c6:	f000 fe0e 	bl	d71e6 <_ZdlPvj>
   d65ca:	e7cc      	b.n	d6566 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65cc:	4631      	mov	r1, r6
   d65ce:	a803      	add	r0, sp, #12
   d65d0:	f7ff ff7c 	bl	d64cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d65d4:	7b2b      	ldrb	r3, [r5, #12]
   d65d6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d65da:	2010      	movs	r0, #16
   d65dc:	f7fd fd5b 	bl	d4096 <_Znwj>
   d65e0:	4605      	mov	r5, r0
   d65e2:	b1d0      	cbz	r0, d661a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d65e4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65e6:	2014      	movs	r0, #20
   d65e8:	f7fd fd55 	bl	d4096 <_Znwj>
   d65ec:	4604      	mov	r4, r0
   d65ee:	b178      	cbz	r0, d6610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d65f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d65f2:	4601      	mov	r1, r0
   d65f4:	a803      	add	r0, sp, #12
   d65f6:	f7fe fc56 	bl	d4ea6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d65fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d65fe:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6600:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6602:	9205      	str	r2, [sp, #20]
   d6604:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6606:	60e3      	str	r3, [r4, #12]
   d6608:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d660c:	9206      	str	r2, [sp, #24]
   d660e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6610:	4b06      	ldr	r3, [pc, #24]	; (d662c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6612:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6614:	4b06      	ldr	r3, [pc, #24]	; (d6630 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6616:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6618:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d661a:	a803      	add	r0, sp, #12
   d661c:	f7fe fc15 	bl	d4e4a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6620:	2200      	movs	r2, #0
   d6622:	4629      	mov	r1, r5
   d6624:	4803      	ldr	r0, [pc, #12]	; (d6634 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6626:	f7fe f977 	bl	d4918 <application_thread_invoke>
   d662a:	e7c7      	b.n	d65bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d662c:	000d61fb 	.word	0x000d61fb
   d6630:	000d64eb 	.word	0x000d64eb
   d6634:	000d69e5 	.word	0x000d69e5

000d6638 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6638:	4770      	bx	lr

000d663a <_ZN9IPAddressD0Ev>:
   d663a:	b510      	push	{r4, lr}
   d663c:	2118      	movs	r1, #24
   d663e:	4604      	mov	r4, r0
   d6640:	f000 fdd1 	bl	d71e6 <_ZdlPvj>
   d6644:	4620      	mov	r0, r4
   d6646:	bd10      	pop	{r4, pc}

000d6648 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6648:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d664a:	7d03      	ldrb	r3, [r0, #20]
   d664c:	2b06      	cmp	r3, #6
{
   d664e:	b08d      	sub	sp, #52	; 0x34
   d6650:	460e      	mov	r6, r1
   d6652:	f100 0704 	add.w	r7, r0, #4
   d6656:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d665a:	d012      	beq.n	d6682 <_ZNK9IPAddress7printToER5Print+0x3a>
   d665c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6660:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6664:	220a      	movs	r2, #10
   d6666:	4630      	mov	r0, r6
   d6668:	f7fe fc7b 	bl	d4f62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d666c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d666e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6670:	d019      	beq.n	d66a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6672:	2c00      	cmp	r4, #0
   d6674:	d0f4      	beq.n	d6660 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6676:	212e      	movs	r1, #46	; 0x2e
   d6678:	4630      	mov	r0, r6
   d667a:	f7fe fc63 	bl	d4f44 <_ZN5Print5printEc>
   d667e:	4404      	add	r4, r0
   d6680:	e7ee      	b.n	d6660 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6682:	232f      	movs	r3, #47	; 0x2f
   d6684:	466a      	mov	r2, sp
   d6686:	4639      	mov	r1, r7
   d6688:	200a      	movs	r0, #10
		buf[0] = 0;
   d668a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d668e:	f7fe f80b 	bl	d46a8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6692:	4668      	mov	r0, sp
   d6694:	f001 fa77 	bl	d7b86 <strlen>
   d6698:	6833      	ldr	r3, [r6, #0]
   d669a:	4602      	mov	r2, r0
   d669c:	68db      	ldr	r3, [r3, #12]
   d669e:	4669      	mov	r1, sp
   d66a0:	4630      	mov	r0, r6
   d66a2:	4798      	blx	r3
   d66a4:	4604      	mov	r4, r0
    }
    return n;
}
   d66a6:	4620      	mov	r0, r4
   d66a8:	b00d      	add	sp, #52	; 0x34
   d66aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d66ac:	b510      	push	{r4, lr}
   d66ae:	4b05      	ldr	r3, [pc, #20]	; (d66c4 <_ZN9IPAddressC1Ev+0x18>)
   d66b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d66b2:	2211      	movs	r2, #17
   d66b4:	f840 3b04 	str.w	r3, [r0], #4
   d66b8:	2100      	movs	r1, #0
   d66ba:	f001 f9f1 	bl	d7aa0 <memset>
}
   d66be:	4620      	mov	r0, r4
   d66c0:	bd10      	pop	{r4, pc}
   d66c2:	bf00      	nop
   d66c4:	000d7ef4 	.word	0x000d7ef4

000d66c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d66c8:	4603      	mov	r3, r0
   d66ca:	4a07      	ldr	r2, [pc, #28]	; (d66e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d66cc:	b510      	push	{r4, lr}
   d66ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d66d2:	f101 0210 	add.w	r2, r1, #16
   d66d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d66da:	f843 4b04 	str.w	r4, [r3], #4
   d66de:	4291      	cmp	r1, r2
   d66e0:	d1f9      	bne.n	d66d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d66e2:	780a      	ldrb	r2, [r1, #0]
   d66e4:	701a      	strb	r2, [r3, #0]
}
   d66e6:	bd10      	pop	{r4, pc}
   d66e8:	000d7ef4 	.word	0x000d7ef4

000d66ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d66ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d66ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d66f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d66f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d66fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d66fe:	2304      	movs	r3, #4
   d6700:	6041      	str	r1, [r0, #4]
   d6702:	7503      	strb	r3, [r0, #20]
}
   d6704:	bd10      	pop	{r4, pc}
	...

000d6708 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6708:	b513      	push	{r0, r1, r4, lr}
   d670a:	4b05      	ldr	r3, [pc, #20]	; (d6720 <_ZN9IPAddressC1EPKh+0x18>)
   d670c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d670e:	78cb      	ldrb	r3, [r1, #3]
   d6710:	9300      	str	r3, [sp, #0]
   d6712:	788b      	ldrb	r3, [r1, #2]
   d6714:	784a      	ldrb	r2, [r1, #1]
   d6716:	7809      	ldrb	r1, [r1, #0]
   d6718:	f7ff ffe8 	bl	d66ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d671c:	b002      	add	sp, #8
   d671e:	bd10      	pop	{r4, pc}
   d6720:	000d7ef4 	.word	0x000d7ef4

000d6724 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6724:	7441      	strb	r1, [r0, #17]
}
   d6726:	4770      	bx	lr

000d6728 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6728:	4770      	bx	lr

000d672a <_ZN9USBSerial4readEv>:
{
   d672a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d672c:	2100      	movs	r1, #0
   d672e:	7c00      	ldrb	r0, [r0, #16]
   d6730:	f7fe f892 	bl	d4858 <HAL_USB_USART_Receive_Data>
}
   d6734:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6738:	bd08      	pop	{r3, pc}

000d673a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d673a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d673c:	2101      	movs	r1, #1
   d673e:	7c00      	ldrb	r0, [r0, #16]
   d6740:	f7fe f88a 	bl	d4858 <HAL_USB_USART_Receive_Data>
}
   d6744:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6748:	bd08      	pop	{r3, pc}

000d674a <_ZN9USBSerial17availableForWriteEv>:
{
   d674a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d674c:	7c00      	ldrb	r0, [r0, #16]
   d674e:	f7fe f87b 	bl	d4848 <HAL_USB_USART_Available_Data_For_Write>
}
   d6752:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6756:	bd08      	pop	{r3, pc}

000d6758 <_ZN9USBSerial9availableEv>:
{
   d6758:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d675a:	7c00      	ldrb	r0, [r0, #16]
   d675c:	f7fe f86c 	bl	d4838 <HAL_USB_USART_Available_Data>
}
   d6760:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6764:	bd08      	pop	{r3, pc}

000d6766 <_ZN9USBSerial5writeEh>:
{
   d6766:	b513      	push	{r0, r1, r4, lr}
   d6768:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d676a:	7c00      	ldrb	r0, [r0, #16]
{
   d676c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d676e:	f7fe f86b 	bl	d4848 <HAL_USB_USART_Available_Data_For_Write>
   d6772:	2800      	cmp	r0, #0
   d6774:	9901      	ldr	r1, [sp, #4]
   d6776:	dc01      	bgt.n	d677c <_ZN9USBSerial5writeEh+0x16>
   d6778:	7c60      	ldrb	r0, [r4, #17]
   d677a:	b120      	cbz	r0, d6786 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d677c:	7c20      	ldrb	r0, [r4, #16]
   d677e:	f7fe f873 	bl	d4868 <HAL_USB_USART_Send_Data>
   d6782:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6786:	b002      	add	sp, #8
   d6788:	bd10      	pop	{r4, pc}

000d678a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d678a:	7c00      	ldrb	r0, [r0, #16]
   d678c:	f7fe b874 	b.w	d4878 <HAL_USB_USART_Flush_Data>

000d6790 <_ZN9USBSerialD0Ev>:
   d6790:	b510      	push	{r4, lr}
   d6792:	2114      	movs	r1, #20
   d6794:	4604      	mov	r4, r0
   d6796:	f000 fd26 	bl	d71e6 <_ZdlPvj>
   d679a:	4620      	mov	r0, r4
   d679c:	bd10      	pop	{r4, pc}
	...

000d67a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d67a0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d67a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67a6:	4604      	mov	r4, r0
   d67a8:	4608      	mov	r0, r1
   d67aa:	2100      	movs	r1, #0
   d67ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d67b0:	4b04      	ldr	r3, [pc, #16]	; (d67c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d67b2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d67b4:	2301      	movs	r3, #1
  _serial = serial;
   d67b6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d67b8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d67ba:	4611      	mov	r1, r2
   d67bc:	f7fe f824 	bl	d4808 <HAL_USB_USART_Init>
}
   d67c0:	4620      	mov	r0, r4
   d67c2:	bd10      	pop	{r4, pc}
   d67c4:	000d7f08 	.word	0x000d7f08

000d67c8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d67c8:	7c00      	ldrb	r0, [r0, #16]
   d67ca:	2200      	movs	r2, #0
   d67cc:	f7fe b824 	b.w	d4818 <HAL_USB_USART_Begin>

000d67d0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d67d0:	7c00      	ldrb	r0, [r0, #16]
   d67d2:	f7fe b829 	b.w	d4828 <HAL_USB_USART_End>

000d67d6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67d6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d67d8:	2214      	movs	r2, #20
{
   d67da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d67dc:	2100      	movs	r1, #0
   d67de:	f001 f95f 	bl	d7aa0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d67e2:	4620      	mov	r0, r4
   d67e4:	bd10      	pop	{r4, pc}
	...

000d67e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d67e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67ea:	4c10      	ldr	r4, [pc, #64]	; (d682c <_Z16_fetch_usbserialv+0x44>)
{
   d67ec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d67ee:	a803      	add	r0, sp, #12
   d67f0:	f7ff fff1 	bl	d67d6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67f4:	7821      	ldrb	r1, [r4, #0]
   d67f6:	f3bf 8f5b 	dmb	ish
   d67fa:	f011 0101 	ands.w	r1, r1, #1
   d67fe:	d111      	bne.n	d6824 <_Z16_fetch_usbserialv+0x3c>
   d6800:	4620      	mov	r0, r4
   d6802:	9101      	str	r1, [sp, #4]
   d6804:	f7fd fc58 	bl	d40b8 <__cxa_guard_acquire>
   d6808:	9901      	ldr	r1, [sp, #4]
   d680a:	b158      	cbz	r0, d6824 <_Z16_fetch_usbserialv+0x3c>
   d680c:	aa03      	add	r2, sp, #12
   d680e:	4808      	ldr	r0, [pc, #32]	; (d6830 <_Z16_fetch_usbserialv+0x48>)
   d6810:	f7ff ffc6 	bl	d67a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6814:	4620      	mov	r0, r4
   d6816:	f7fd fc54 	bl	d40c2 <__cxa_guard_release>
   d681a:	4a06      	ldr	r2, [pc, #24]	; (d6834 <_Z16_fetch_usbserialv+0x4c>)
   d681c:	4906      	ldr	r1, [pc, #24]	; (d6838 <_Z16_fetch_usbserialv+0x50>)
   d681e:	4804      	ldr	r0, [pc, #16]	; (d6830 <_Z16_fetch_usbserialv+0x48>)
   d6820:	f000 fcdc 	bl	d71dc <__aeabi_atexit>
	return _usbserial;
}
   d6824:	4802      	ldr	r0, [pc, #8]	; (d6830 <_Z16_fetch_usbserialv+0x48>)
   d6826:	b008      	add	sp, #32
   d6828:	bd10      	pop	{r4, pc}
   d682a:	bf00      	nop
   d682c:	2003e640 	.word	0x2003e640
   d6830:	2003e644 	.word	0x2003e644
   d6834:	2003e56c 	.word	0x2003e56c
   d6838:	000d6729 	.word	0x000d6729

000d683c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d683c:	2200      	movs	r2, #0
   d683e:	6840      	ldr	r0, [r0, #4]
   d6840:	4611      	mov	r1, r2
   d6842:	f7fe b8a7 	b.w	d4994 <network_ready>

000d6846 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6846:	2200      	movs	r2, #0
   d6848:	6840      	ldr	r0, [r0, #4]
   d684a:	4611      	mov	r1, r2
   d684c:	f7fe b8c2 	b.w	d49d4 <network_listening>

000d6850 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6850:	2200      	movs	r2, #0
   d6852:	6840      	ldr	r0, [r0, #4]
   d6854:	4611      	mov	r1, r2
   d6856:	f7fe b8cd 	b.w	d49f4 <network_get_listen_timeout>

000d685a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d685a:	6840      	ldr	r0, [r0, #4]
   d685c:	2200      	movs	r2, #0
   d685e:	f7fe b8c1 	b.w	d49e4 <network_set_listen_timeout>

000d6862 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6862:	6840      	ldr	r0, [r0, #4]
   d6864:	2200      	movs	r2, #0
   d6866:	f081 0101 	eor.w	r1, r1, #1
   d686a:	f7fe b8ab 	b.w	d49c4 <network_listen>

000d686e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d686e:	2300      	movs	r3, #0
   d6870:	6840      	ldr	r0, [r0, #4]
   d6872:	461a      	mov	r2, r3
   d6874:	4619      	mov	r1, r3
   d6876:	f7fe b89d 	b.w	d49b4 <network_off>

000d687a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d687a:	2300      	movs	r3, #0
   d687c:	6840      	ldr	r0, [r0, #4]
   d687e:	461a      	mov	r2, r3
   d6880:	4619      	mov	r1, r3
   d6882:	f7fe b88f 	b.w	d49a4 <network_on>

000d6886 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6886:	2200      	movs	r2, #0
   d6888:	6840      	ldr	r0, [r0, #4]
   d688a:	4611      	mov	r1, r2
   d688c:	f7fe b872 	b.w	d4974 <network_connecting>

000d6890 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6890:	6840      	ldr	r0, [r0, #4]
   d6892:	2200      	movs	r2, #0
   d6894:	2102      	movs	r1, #2
   d6896:	f7fe b875 	b.w	d4984 <network_disconnect>

000d689a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d689a:	2300      	movs	r3, #0
   d689c:	6840      	ldr	r0, [r0, #4]
   d689e:	461a      	mov	r2, r3
   d68a0:	f7fe b860 	b.w	d4964 <network_connect>

000d68a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d68a4:	4b08      	ldr	r3, [pc, #32]	; (d68c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d68a6:	b510      	push	{r4, lr}
   d68a8:	2428      	movs	r4, #40	; 0x28
   d68aa:	4622      	mov	r2, r4
   d68ac:	4618      	mov	r0, r3
   d68ae:	2100      	movs	r1, #0
   d68b0:	f001 f8f6 	bl	d7aa0 <memset>
   d68b4:	4b05      	ldr	r3, [pc, #20]	; (d68cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d68b6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d68b8:	f04f 32ff 	mov.w	r2, #4294967295
   d68bc:	6042      	str	r2, [r0, #4]
   d68be:	2204      	movs	r2, #4
   d68c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d68c2:	4a03      	ldr	r2, [pc, #12]	; (d68d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d68c4:	601a      	str	r2, [r3, #0]
   d68c6:	bd10      	pop	{r4, pc}
   d68c8:	2003e660 	.word	0x2003e660
   d68cc:	2003e658 	.word	0x2003e658
   d68d0:	000d7f38 	.word	0x000d7f38

000d68d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d68d4:	4770      	bx	lr

000d68d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d68d6:	7441      	strb	r1, [r0, #17]
}
   d68d8:	4770      	bx	lr

000d68da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d68da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d68dc:	7c00      	ldrb	r0, [r0, #16]
   d68de:	f7fd ff2b 	bl	d4738 <hal_usart_available_data_for_write>
}
   d68e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68e6:	bd08      	pop	{r3, pc}

000d68e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d68e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d68ea:	7c00      	ldrb	r0, [r0, #16]
   d68ec:	f7fd fefc 	bl	d46e8 <hal_usart_available>
}
   d68f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68f4:	bd08      	pop	{r3, pc}

000d68f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d68f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d68f8:	7c00      	ldrb	r0, [r0, #16]
   d68fa:	f7fd ff05 	bl	d4708 <hal_usart_peek>
}
   d68fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6902:	bd08      	pop	{r3, pc}

000d6904 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6904:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6906:	7c00      	ldrb	r0, [r0, #16]
   d6908:	f7fd fef6 	bl	d46f8 <hal_usart_read>
}
   d690c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6910:	bd08      	pop	{r3, pc}

000d6912 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6912:	7c00      	ldrb	r0, [r0, #16]
   d6914:	f7fd bf00 	b.w	d4718 <hal_usart_flush>

000d6918 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6918:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d691a:	7c45      	ldrb	r5, [r0, #17]
{
   d691c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d691e:	b12d      	cbz	r5, d692c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6920:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6922:	b003      	add	sp, #12
   d6924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6928:	f7fd bed6 	b.w	d46d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d692c:	7c00      	ldrb	r0, [r0, #16]
   d692e:	9101      	str	r1, [sp, #4]
   d6930:	f7fd ff02 	bl	d4738 <hal_usart_available_data_for_write>
   d6934:	2800      	cmp	r0, #0
   d6936:	9901      	ldr	r1, [sp, #4]
   d6938:	dcf2      	bgt.n	d6920 <_ZN11USARTSerial5writeEh+0x8>
}
   d693a:	4628      	mov	r0, r5
   d693c:	b003      	add	sp, #12
   d693e:	bd30      	pop	{r4, r5, pc}

000d6940 <_ZN11USARTSerialD0Ev>:
   d6940:	b510      	push	{r4, lr}
   d6942:	2114      	movs	r1, #20
   d6944:	4604      	mov	r4, r0
   d6946:	f000 fc4e 	bl	d71e6 <_ZdlPvj>
   d694a:	4620      	mov	r0, r4
   d694c:	bd10      	pop	{r4, pc}
	...

000d6950 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6950:	b510      	push	{r4, lr}
   d6952:	f04f 0c00 	mov.w	ip, #0
   d6956:	4604      	mov	r4, r0
   d6958:	4608      	mov	r0, r1
   d695a:	4611      	mov	r1, r2
   d695c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6960:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6964:	4a04      	ldr	r2, [pc, #16]	; (d6978 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6966:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6968:	2201      	movs	r2, #1
  _serial = serial;
   d696a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d696c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d696e:	461a      	mov	r2, r3
   d6970:	f7fd fea2 	bl	d46b8 <hal_usart_init>
}
   d6974:	4620      	mov	r0, r4
   d6976:	bd10      	pop	{r4, pc}
   d6978:	000d7f74 	.word	0x000d7f74

000d697c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d697c:	7c00      	ldrb	r0, [r0, #16]
   d697e:	2300      	movs	r3, #0
   d6980:	f7fd bee2 	b.w	d4748 <hal_usart_begin_config>

000d6984 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6984:	2200      	movs	r2, #0
   d6986:	f7ff bff9 	b.w	d697c <_ZN11USARTSerial5beginEmm>

000d698a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d698a:	7c00      	ldrb	r0, [r0, #16]
   d698c:	f7fd be9c 	b.w	d46c8 <hal_usart_end>

000d6990 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6990:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6992:	4c0e      	ldr	r4, [pc, #56]	; (d69cc <_Z22__fetch_global_Serial1v+0x3c>)
   d6994:	7821      	ldrb	r1, [r4, #0]
   d6996:	f3bf 8f5b 	dmb	ish
   d699a:	f011 0101 	ands.w	r1, r1, #1
   d699e:	d112      	bne.n	d69c6 <_Z22__fetch_global_Serial1v+0x36>
   d69a0:	4620      	mov	r0, r4
   d69a2:	9101      	str	r1, [sp, #4]
   d69a4:	f7fd fb88 	bl	d40b8 <__cxa_guard_acquire>
   d69a8:	9901      	ldr	r1, [sp, #4]
   d69aa:	b160      	cbz	r0, d69c6 <_Z22__fetch_global_Serial1v+0x36>
   d69ac:	4a08      	ldr	r2, [pc, #32]	; (d69d0 <_Z22__fetch_global_Serial1v+0x40>)
   d69ae:	4b09      	ldr	r3, [pc, #36]	; (d69d4 <_Z22__fetch_global_Serial1v+0x44>)
   d69b0:	4809      	ldr	r0, [pc, #36]	; (d69d8 <_Z22__fetch_global_Serial1v+0x48>)
   d69b2:	f7ff ffcd 	bl	d6950 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d69b6:	4620      	mov	r0, r4
   d69b8:	f7fd fb83 	bl	d40c2 <__cxa_guard_release>
   d69bc:	4a07      	ldr	r2, [pc, #28]	; (d69dc <_Z22__fetch_global_Serial1v+0x4c>)
   d69be:	4908      	ldr	r1, [pc, #32]	; (d69e0 <_Z22__fetch_global_Serial1v+0x50>)
   d69c0:	4805      	ldr	r0, [pc, #20]	; (d69d8 <_Z22__fetch_global_Serial1v+0x48>)
   d69c2:	f000 fc0b 	bl	d71dc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d69c6:	4804      	ldr	r0, [pc, #16]	; (d69d8 <_Z22__fetch_global_Serial1v+0x48>)
   d69c8:	b002      	add	sp, #8
   d69ca:	bd10      	pop	{r4, pc}
   d69cc:	2003e688 	.word	0x2003e688
   d69d0:	2003e68c 	.word	0x2003e68c
   d69d4:	2003e710 	.word	0x2003e710
   d69d8:	2003e794 	.word	0x2003e794
   d69dc:	2003e56c 	.word	0x2003e56c
   d69e0:	000d68d5 	.word	0x000d68d5

000d69e4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d69e4:	b510      	push	{r4, lr}
      if (_M_empty())
   d69e6:	6883      	ldr	r3, [r0, #8]
   d69e8:	4604      	mov	r4, r0
   d69ea:	b90b      	cbnz	r3, d69f0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d69ec:	f000 fc01 	bl	d71f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69f0:	68c3      	ldr	r3, [r0, #12]
   d69f2:	4798      	blx	r3
      if (_M_manager)
   d69f4:	68a3      	ldr	r3, [r4, #8]
   d69f6:	b11b      	cbz	r3, d6a00 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d69f8:	2203      	movs	r2, #3
   d69fa:	4621      	mov	r1, r4
   d69fc:	4620      	mov	r0, r4
   d69fe:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6a00:	4620      	mov	r0, r4
   d6a02:	2110      	movs	r1, #16
}
   d6a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6a08:	f000 bbed 	b.w	d71e6 <_ZdlPvj>

000d6a0c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6a0c:	4770      	bx	lr

000d6a0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a10:	4606      	mov	r6, r0
   d6a12:	4615      	mov	r5, r2
   d6a14:	460c      	mov	r4, r1
   d6a16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a18:	42bc      	cmp	r4, r7
   d6a1a:	d006      	beq.n	d6a2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a1c:	6833      	ldr	r3, [r6, #0]
   d6a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a22:	689b      	ldr	r3, [r3, #8]
   d6a24:	4630      	mov	r0, r6
   d6a26:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6a28:	e7f6      	b.n	d6a18 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6a2a:	4628      	mov	r0, r5
   d6a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a2e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6a2e:	7c00      	ldrb	r0, [r0, #16]
   d6a30:	2200      	movs	r2, #0
   d6a32:	f7fd be91 	b.w	d4758 <hal_i2c_write>

000d6a36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6a36:	7c00      	ldrb	r0, [r0, #16]
   d6a38:	2100      	movs	r1, #0
   d6a3a:	f7fd be95 	b.w	d4768 <hal_i2c_available>

000d6a3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6a3e:	7c00      	ldrb	r0, [r0, #16]
   d6a40:	2100      	movs	r1, #0
   d6a42:	f7fd be99 	b.w	d4778 <hal_i2c_read>

000d6a46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6a46:	7c00      	ldrb	r0, [r0, #16]
   d6a48:	2100      	movs	r1, #0
   d6a4a:	f7fd be9d 	b.w	d4788 <hal_i2c_peek>

000d6a4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6a4e:	7c00      	ldrb	r0, [r0, #16]
   d6a50:	2100      	movs	r1, #0
   d6a52:	f7fd bea1 	b.w	d4798 <hal_i2c_flush>

000d6a56 <_ZN7TwoWireD0Ev>:
   d6a56:	b510      	push	{r4, lr}
   d6a58:	2114      	movs	r1, #20
   d6a5a:	4604      	mov	r4, r0
   d6a5c:	f000 fbc3 	bl	d71e6 <_ZdlPvj>
   d6a60:	4620      	mov	r0, r4
   d6a62:	bd10      	pop	{r4, pc}

000d6a64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6a64:	b510      	push	{r4, lr}
   d6a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a6a:	4604      	mov	r4, r0
   d6a6c:	4608      	mov	r0, r1
   d6a6e:	2100      	movs	r1, #0
   d6a70:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a74:	4b03      	ldr	r3, [pc, #12]	; (d6a84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6a76:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6a78:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6a7a:	4611      	mov	r1, r2
   d6a7c:	f7fd fe9c 	bl	d47b8 <hal_i2c_init>
}
   d6a80:	4620      	mov	r0, r4
   d6a82:	bd10      	pop	{r4, pc}
   d6a84:	000d7fa4 	.word	0x000d7fa4

000d6a88 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6a88:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d6a8a:	2100      	movs	r1, #0
   d6a8c:	7c00      	ldrb	r0, [r0, #16]
   d6a8e:	f7fd fe9b 	bl	d47c8 <hal_i2c_lock>
}
   d6a92:	fab0 f080 	clz	r0, r0
   d6a96:	0940      	lsrs	r0, r0, #5
   d6a98:	bd08      	pop	{r3, pc}

000d6a9a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6a9a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d6a9c:	2100      	movs	r1, #0
   d6a9e:	7c00      	ldrb	r0, [r0, #16]
   d6aa0:	f7fd fe9a 	bl	d47d8 <hal_i2c_unlock>
}
   d6aa4:	fab0 f080 	clz	r0, r0
   d6aa8:	0940      	lsrs	r0, r0, #5
   d6aaa:	bd08      	pop	{r3, pc}

000d6aac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6aac:	2300      	movs	r3, #0
   d6aae:	6840      	ldr	r0, [r0, #4]
   d6ab0:	461a      	mov	r2, r3
   d6ab2:	f7fd bf57 	b.w	d4964 <network_connect>

000d6ab6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6ab6:	6840      	ldr	r0, [r0, #4]
   d6ab8:	2200      	movs	r2, #0
   d6aba:	2102      	movs	r1, #2
   d6abc:	f7fd bf62 	b.w	d4984 <network_disconnect>

000d6ac0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6ac0:	2200      	movs	r2, #0
   d6ac2:	6840      	ldr	r0, [r0, #4]
   d6ac4:	4611      	mov	r1, r2
   d6ac6:	f7fd bf55 	b.w	d4974 <network_connecting>

000d6aca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6aca:	2200      	movs	r2, #0
   d6acc:	6840      	ldr	r0, [r0, #4]
   d6ace:	4611      	mov	r1, r2
   d6ad0:	f7fd bf60 	b.w	d4994 <network_ready>

000d6ad4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6ad4:	2300      	movs	r3, #0
   d6ad6:	6840      	ldr	r0, [r0, #4]
   d6ad8:	461a      	mov	r2, r3
   d6ada:	4619      	mov	r1, r3
   d6adc:	f7fd bf62 	b.w	d49a4 <network_on>

000d6ae0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6ae0:	2300      	movs	r3, #0
   d6ae2:	6840      	ldr	r0, [r0, #4]
   d6ae4:	461a      	mov	r2, r3
   d6ae6:	4619      	mov	r1, r3
   d6ae8:	f7fd bf64 	b.w	d49b4 <network_off>

000d6aec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6aec:	6840      	ldr	r0, [r0, #4]
   d6aee:	2100      	movs	r1, #0
   d6af0:	f7fd bf88 	b.w	d4a04 <network_is_on>

000d6af4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6af4:	6840      	ldr	r0, [r0, #4]
   d6af6:	2100      	movs	r1, #0
   d6af8:	f7fd bf8c 	b.w	d4a14 <network_is_off>

000d6afc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6afc:	6840      	ldr	r0, [r0, #4]
   d6afe:	2200      	movs	r2, #0
   d6b00:	f081 0101 	eor.w	r1, r1, #1
   d6b04:	f7fd bf5e 	b.w	d49c4 <network_listen>

000d6b08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b08:	6840      	ldr	r0, [r0, #4]
   d6b0a:	2200      	movs	r2, #0
   d6b0c:	f7fd bf6a 	b.w	d49e4 <network_set_listen_timeout>

000d6b10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b10:	2200      	movs	r2, #0
   d6b12:	6840      	ldr	r0, [r0, #4]
   d6b14:	4611      	mov	r1, r2
   d6b16:	f7fd bf6d 	b.w	d49f4 <network_get_listen_timeout>

000d6b1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b1a:	2200      	movs	r2, #0
   d6b1c:	6840      	ldr	r0, [r0, #4]
   d6b1e:	4611      	mov	r1, r2
   d6b20:	f7fd bf58 	b.w	d49d4 <network_listening>

000d6b24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b28:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6b2a:	b095      	sub	sp, #84	; 0x54
   d6b2c:	4616      	mov	r6, r2
   d6b2e:	460d      	mov	r5, r1
   d6b30:	4607      	mov	r7, r0
    IPAddress addr;
   d6b32:	f7ff fdbb 	bl	d66ac <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6b36:	4621      	mov	r1, r4
   d6b38:	2218      	movs	r2, #24
   d6b3a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6b3c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6b3e:	f000 ffaf 	bl	d7aa0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6b42:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6b44:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6b48:	4621      	mov	r1, r4
   d6b4a:	466b      	mov	r3, sp
   d6b4c:	aa0c      	add	r2, sp, #48	; 0x30
   d6b4e:	4630      	mov	r0, r6
   d6b50:	f7fd fd42 	bl	d45d8 <netdb_getaddrinfo>
    if (!r) {
   d6b54:	4604      	mov	r4, r0
   d6b56:	2800      	cmp	r0, #0
   d6b58:	d14c      	bne.n	d6bf4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b5a:	4602      	mov	r2, r0
   d6b5c:	2101      	movs	r1, #1
   d6b5e:	6868      	ldr	r0, [r5, #4]
   d6b60:	f7fd ff18 	bl	d4994 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b68:	4622      	mov	r2, r4
   d6b6a:	6868      	ldr	r0, [r5, #4]
   d6b6c:	f7fd ff12 	bl	d4994 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b72:	4681      	mov	r9, r0
        bool ok = false;
   d6b74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b76:	2e00      	cmp	r6, #0
   d6b78:	d03c      	beq.n	d6bf4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6b7a:	2900      	cmp	r1, #0
   d6b7c:	d13a      	bne.n	d6bf4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6b7e:	6873      	ldr	r3, [r6, #4]
   d6b80:	2b02      	cmp	r3, #2
   d6b82:	d003      	beq.n	d6b8c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6b84:	2b0a      	cmp	r3, #10
   d6b86:	d011      	beq.n	d6bac <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b88:	69f6      	ldr	r6, [r6, #28]
   d6b8a:	e7f4      	b.n	d6b76 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6b8c:	f1b8 0f00 	cmp.w	r8, #0
   d6b90:	d00a      	beq.n	d6ba8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6b92:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6b94:	a806      	add	r0, sp, #24
   d6b96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6b98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6b9a:	f7ff fdb5 	bl	d6708 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ba0:	1d3c      	adds	r4, r7, #4
   d6ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ba4:	682b      	ldr	r3, [r5, #0]
   d6ba6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6ba8:	4641      	mov	r1, r8
   d6baa:	e7ed      	b.n	d6b88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6bac:	f1b9 0f00 	cmp.w	r9, #0
   d6bb0:	d101      	bne.n	d6bb6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6bb2:	4649      	mov	r1, r9
   d6bb4:	e7e8      	b.n	d6b88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6bb6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6bb8:	2210      	movs	r2, #16
   d6bba:	a801      	add	r0, sp, #4
   d6bbc:	f000 ff70 	bl	d7aa0 <memset>
                    a.v = 6;
   d6bc0:	2306      	movs	r3, #6
   d6bc2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6bc6:	ad01      	add	r5, sp, #4
   d6bc8:	f104 0308 	add.w	r3, r4, #8
   d6bcc:	3418      	adds	r4, #24
   d6bce:	6818      	ldr	r0, [r3, #0]
   d6bd0:	6859      	ldr	r1, [r3, #4]
   d6bd2:	462a      	mov	r2, r5
   d6bd4:	c203      	stmia	r2!, {r0, r1}
   d6bd6:	3308      	adds	r3, #8
   d6bd8:	42a3      	cmp	r3, r4
   d6bda:	4615      	mov	r5, r2
   d6bdc:	d1f7      	bne.n	d6bce <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6bde:	a901      	add	r1, sp, #4
   d6be0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6be2:	ad07      	add	r5, sp, #28
   d6be4:	f7ff fd70 	bl	d66c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6bea:	1d3c      	adds	r4, r7, #4
   d6bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6bee:	682b      	ldr	r3, [r5, #0]
   d6bf0:	7023      	strb	r3, [r4, #0]
   d6bf2:	e7de      	b.n	d6bb2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6bf4:	9800      	ldr	r0, [sp, #0]
   d6bf6:	f7fd fce7 	bl	d45c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6bfa:	4638      	mov	r0, r7
   d6bfc:	b015      	add	sp, #84	; 0x54
   d6bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6c04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c04:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c06:	4a03      	ldr	r2, [pc, #12]	; (d6c14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c08:	601a      	str	r2, [r3, #0]
   d6c0a:	2200      	movs	r2, #0
   d6c0c:	605a      	str	r2, [r3, #4]

} // spark
   d6c0e:	4770      	bx	lr
   d6c10:	2003e7a8 	.word	0x2003e7a8
   d6c14:	000d7fcc 	.word	0x000d7fcc

000d6c18 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6c18:	f100 0310 	add.w	r3, r0, #16
   d6c1c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6c1e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6c22:	2901      	cmp	r1, #1
   d6c24:	4618      	mov	r0, r3
   d6c26:	d108      	bne.n	d6c3a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6c28:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6c2c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6c30:	3a01      	subs	r2, #1
   d6c32:	f103 0310 	add.w	r3, r3, #16
   d6c36:	d1f2      	bne.n	d6c1e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6c38:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6c3a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6c3c:	bf04      	itt	eq
   d6c3e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6c42:	1852      	addeq	r2, r2, r1
   d6c44:	e7f4      	b.n	d6c30 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6c46 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6c46:	b40e      	push	{r1, r2, r3}
   d6c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c4a:	b088      	sub	sp, #32
   d6c4c:	af00      	add	r7, sp, #0
   d6c4e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c52:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6c54:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c58:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6c5a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c5c:	462b      	mov	r3, r5
   d6c5e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6c60:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c62:	f7fd ff27 	bl	d4ab4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6c66:	280f      	cmp	r0, #15
   d6c68:	687a      	ldr	r2, [r7, #4]
   d6c6a:	d91a      	bls.n	d6ca2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6c6c:	f100 0308 	add.w	r3, r0, #8
   d6c70:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6c74:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6c76:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c7a:	1c41      	adds	r1, r0, #1
   d6c7c:	462b      	mov	r3, r5
   d6c7e:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6c80:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c82:	f7fd ff17 	bl	d4ab4 <vsnprintf>
        if (n > 0) {
   d6c86:	1e02      	subs	r2, r0, #0
   d6c88:	dd04      	ble.n	d6c94 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6c8a:	6823      	ldr	r3, [r4, #0]
   d6c8c:	4669      	mov	r1, sp
   d6c8e:	689b      	ldr	r3, [r3, #8]
   d6c90:	4620      	mov	r0, r4
   d6c92:	4798      	blx	r3
   d6c94:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6c96:	3720      	adds	r7, #32
   d6c98:	46bd      	mov	sp, r7
   d6c9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6c9e:	b003      	add	sp, #12
   d6ca0:	4770      	bx	lr
    } else if (n > 0) {
   d6ca2:	2800      	cmp	r0, #0
   d6ca4:	d0f7      	beq.n	d6c96 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6ca6:	6823      	ldr	r3, [r4, #0]
   d6ca8:	4602      	mov	r2, r0
   d6caa:	689b      	ldr	r3, [r3, #8]
   d6cac:	f107 0110 	add.w	r1, r7, #16
   d6cb0:	4620      	mov	r0, r4
   d6cb2:	4798      	blx	r3
}
   d6cb4:	e7ef      	b.n	d6c96 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6cb6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6cb6:	b510      	push	{r4, lr}
          _M_dispose();
   d6cb8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6cba:	4604      	mov	r4, r0
          _M_dispose();
   d6cbc:	689b      	ldr	r3, [r3, #8]
   d6cbe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6cc0:	68a3      	ldr	r3, [r4, #8]
   d6cc2:	3b01      	subs	r3, #1
   d6cc4:	60a3      	str	r3, [r4, #8]
   d6cc6:	b92b      	cbnz	r3, d6cd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6cc8:	6823      	ldr	r3, [r4, #0]
   d6cca:	4620      	mov	r0, r4
   d6ccc:	68db      	ldr	r3, [r3, #12]
    }
   d6cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6cd2:	4718      	bx	r3
    }
   d6cd4:	bd10      	pop	{r4, pc}

000d6cd6 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d6cd6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6cd8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6cda:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6cde:	689b      	ldr	r3, [r3, #8]
   d6ce0:	2201      	movs	r2, #1
   d6ce2:	f10d 0107 	add.w	r1, sp, #7
   d6ce6:	4798      	blx	r3
}
   d6ce8:	b003      	add	sp, #12
   d6cea:	f85d fb04 	ldr.w	pc, [sp], #4

000d6cee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6cee:	b538      	push	{r3, r4, r5, lr}
   d6cf0:	680b      	ldr	r3, [r1, #0]
   d6cf2:	6003      	str	r3, [r0, #0]
   d6cf4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6cf6:	6843      	ldr	r3, [r0, #4]
   d6cf8:	429d      	cmp	r5, r3
    class __shared_ptr
   d6cfa:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6cfc:	d00c      	beq.n	d6d18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6cfe:	b115      	cbz	r5, d6d06 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6d00:	686b      	ldr	r3, [r5, #4]
   d6d02:	3301      	adds	r3, #1
   d6d04:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6d06:	6860      	ldr	r0, [r4, #4]
   d6d08:	b128      	cbz	r0, d6d16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6d0a:	6843      	ldr	r3, [r0, #4]
   d6d0c:	3b01      	subs	r3, #1
   d6d0e:	6043      	str	r3, [r0, #4]
   d6d10:	b90b      	cbnz	r3, d6d16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6d12:	f7ff ffd0 	bl	d6cb6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6d16:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6d18:	4620      	mov	r0, r4
   d6d1a:	bd38      	pop	{r3, r4, r5, pc}

000d6d1c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6d1c:	460b      	mov	r3, r1
   d6d1e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6d20:	2200      	movs	r2, #0
   d6d22:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6d24:	e9c0 2200 	strd	r2, r2, [r0]
   d6d28:	4604      	mov	r4, r0
        t_ = t;
   d6d2a:	6083      	str	r3, [r0, #8]
    if (t) {
   d6d2c:	b90b      	cbnz	r3, d6d32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6d2e:	4620      	mov	r0, r4
   d6d30:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6d32:	f7ff ffdc 	bl	d6cee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6d36:	e7fa      	b.n	d6d2e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6d38 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6d38:	6883      	ldr	r3, [r0, #8]
   d6d3a:	b1eb      	cbz	r3, d6d78 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6d3c:	781a      	ldrb	r2, [r3, #0]
   d6d3e:	2a03      	cmp	r2, #3
   d6d40:	d81a      	bhi.n	d6d78 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6d42:	e8df f002 	tbb	[pc, r2]
   d6d46:	1704      	.short	0x1704
   d6d48:	1b02      	.short	0x1b02
   d6d4a:	2005      	movs	r0, #5
   d6d4c:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6d4e:	6802      	ldr	r2, [r0, #0]
   d6d50:	685b      	ldr	r3, [r3, #4]
   d6d52:	6852      	ldr	r2, [r2, #4]
   d6d54:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6d56:	282d      	cmp	r0, #45	; 0x2d
   d6d58:	d012      	beq.n	d6d80 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6d5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6d5e:	2b09      	cmp	r3, #9
   d6d60:	d90e      	bls.n	d6d80 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6d62:	2874      	cmp	r0, #116	; 0x74
   d6d64:	d00e      	beq.n	d6d84 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6d66:	2866      	cmp	r0, #102	; 0x66
   d6d68:	d00c      	beq.n	d6d84 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6d6a:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6d6e:	4258      	negs	r0, r3
   d6d70:	4158      	adcs	r0, r3
   d6d72:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6d74:	2006      	movs	r0, #6
   d6d76:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6d78:	2000      	movs	r0, #0
   d6d7a:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6d7c:	2004      	movs	r0, #4
   d6d7e:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6d80:	2003      	movs	r0, #3
   d6d82:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6d84:	2002      	movs	r0, #2
}
   d6d86:	4770      	bx	lr

000d6d88 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6d88:	b510      	push	{r4, lr}
   d6d8a:	4604      	mov	r4, r0
    switch (type()) {
   d6d8c:	f7ff ffd4 	bl	d6d38 <_ZNK5spark9JSONValue4typeEv>
   d6d90:	2802      	cmp	r0, #2
   d6d92:	d00e      	beq.n	d6db2 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6d94:	1ec3      	subs	r3, r0, #3
   d6d96:	b2db      	uxtb	r3, r3
   d6d98:	2b01      	cmp	r3, #1
   d6d9a:	d814      	bhi.n	d6dc6 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6d9c:	6822      	ldr	r2, [r4, #0]
   d6d9e:	68a3      	ldr	r3, [r4, #8]
   d6da0:	6850      	ldr	r0, [r2, #4]
   d6da2:	685b      	ldr	r3, [r3, #4]
}
   d6da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6da8:	220a      	movs	r2, #10
   d6daa:	2100      	movs	r1, #0
   d6dac:	4418      	add	r0, r3
   d6dae:	f000 bf93 	b.w	d7cd8 <strtol>
        const char* const s = d_->json + t_->start;
   d6db2:	6822      	ldr	r2, [r4, #0]
   d6db4:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6db6:	6852      	ldr	r2, [r2, #4]
   d6db8:	685b      	ldr	r3, [r3, #4]
   d6dba:	5cd0      	ldrb	r0, [r2, r3]
   d6dbc:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6dc0:	4258      	negs	r0, r3
   d6dc2:	4158      	adcs	r0, r3
}
   d6dc4:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6dc6:	2000      	movs	r0, #0
   d6dc8:	e7fc      	b.n	d6dc4 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d6dcc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6dcc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6dce:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6dd0:	e9c0 3300 	strd	r3, r3, [r0]
   d6dd4:	4604      	mov	r4, r0
        n_(0) {
   d6dd6:	480e      	ldr	r0, [pc, #56]	; (d6e10 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6dd8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6ddc:	b1a9      	cbz	r1, d6e0a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6dde:	780b      	ldrb	r3, [r1, #0]
   d6de0:	2b03      	cmp	r3, #3
   d6de2:	d006      	beq.n	d6df2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6de4:	b98b      	cbnz	r3, d6e0a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6de6:	6813      	ldr	r3, [r2, #0]
   d6de8:	6858      	ldr	r0, [r3, #4]
   d6dea:	684b      	ldr	r3, [r1, #4]
   d6dec:	5cc3      	ldrb	r3, [r0, r3]
   d6dee:	2b6e      	cmp	r3, #110	; 0x6e
   d6df0:	d007      	beq.n	d6e02 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6df2:	6813      	ldr	r3, [r2, #0]
   d6df4:	684d      	ldr	r5, [r1, #4]
   d6df6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6df8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6dfa:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6dfc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6dfe:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6e00:	60e3      	str	r3, [r4, #12]
   d6e02:	4611      	mov	r1, r2
   d6e04:	4620      	mov	r0, r4
   d6e06:	f7ff ff72 	bl	d6cee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6e0a:	4620      	mov	r0, r4
   d6e0c:	bd38      	pop	{r3, r4, r5, pc}
   d6e0e:	bf00      	nop
   d6e10:	000d7e1f 	.word	0x000d7e1f

000d6e14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6e14:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6e16:	2500      	movs	r5, #0
   d6e18:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6e1a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6e1e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6e22:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6e26:	4604      	mov	r4, r0
   d6e28:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6e2a:	b14b      	cbz	r3, d6e40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6e2c:	781a      	ldrb	r2, [r3, #0]
   d6e2e:	2a01      	cmp	r2, #1
   d6e30:	d106      	bne.n	d6e40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6e32:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6e36:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6e38:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6e3a:	6143      	str	r3, [r0, #20]
   d6e3c:	f7ff ff57 	bl	d6cee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6e40:	4620      	mov	r0, r4
   d6e42:	bd38      	pop	{r3, r4, r5, pc}

000d6e44 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6e44:	b510      	push	{r4, lr}
    if (!n_) {
   d6e46:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6e48:	4604      	mov	r4, r0
    if (!n_) {
   d6e4a:	b163      	cbz	r3, d6e66 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6e4c:	6880      	ldr	r0, [r0, #8]
   d6e4e:	60e0      	str	r0, [r4, #12]
    --n_;
   d6e50:	3b01      	subs	r3, #1
    ++t_;
   d6e52:	3010      	adds	r0, #16
   d6e54:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6e56:	6120      	str	r0, [r4, #16]
    --n_;
   d6e58:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6e5a:	b113      	cbz	r3, d6e62 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6e5c:	f7ff fedc 	bl	d6c18 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6e60:	60a0      	str	r0, [r4, #8]
    return true;
   d6e62:	2001      	movs	r0, #1
   d6e64:	e000      	b.n	d6e68 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6e66:	4618      	mov	r0, r3
}
   d6e68:	bd10      	pop	{r4, pc}

000d6e6a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6e6a:	b510      	push	{r4, lr}
    write('}');
   d6e6c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6e6e:	4604      	mov	r4, r0
    write('}');
   d6e70:	f7ff ff31 	bl	d6cd6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6e74:	2301      	movs	r3, #1
   d6e76:	7123      	strb	r3, [r4, #4]
}
   d6e78:	4620      	mov	r0, r4
   d6e7a:	bd10      	pop	{r4, pc}

000d6e7c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6e7c:	b508      	push	{r3, lr}
    switch (state_) {
   d6e7e:	7903      	ldrb	r3, [r0, #4]
   d6e80:	2b01      	cmp	r3, #1
   d6e82:	d002      	beq.n	d6e8a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6e84:	2b02      	cmp	r3, #2
   d6e86:	d004      	beq.n	d6e92 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6e88:	bd08      	pop	{r3, pc}
        write(',');
   d6e8a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6e8c:	f7ff ff23 	bl	d6cd6 <_ZN5spark10JSONWriter5writeEc>
}
   d6e90:	e7fa      	b.n	d6e88 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6e92:	213a      	movs	r1, #58	; 0x3a
   d6e94:	e7fa      	b.n	d6e8c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6e96 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6e96:	b510      	push	{r4, lr}
   d6e98:	4604      	mov	r4, r0
    writeSeparator();
   d6e9a:	f7ff ffef 	bl	d6e7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6e9e:	4620      	mov	r0, r4
   d6ea0:	217b      	movs	r1, #123	; 0x7b
   d6ea2:	f7ff ff18 	bl	d6cd6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6ea6:	2300      	movs	r3, #0
   d6ea8:	7123      	strb	r3, [r4, #4]
}
   d6eaa:	4620      	mov	r0, r4
   d6eac:	bd10      	pop	{r4, pc}
	...

000d6eb0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6eb0:	b513      	push	{r0, r1, r4, lr}
   d6eb2:	4604      	mov	r4, r0
   d6eb4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6eb6:	f7ff ffe1 	bl	d6e7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6eba:	6823      	ldr	r3, [r4, #0]
   d6ebc:	9a01      	ldr	r2, [sp, #4]
   d6ebe:	68db      	ldr	r3, [r3, #12]
   d6ec0:	4903      	ldr	r1, [pc, #12]	; (d6ed0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6ec2:	4620      	mov	r0, r4
   d6ec4:	4798      	blx	r3
    state_ = NEXT;
   d6ec6:	2301      	movs	r3, #1
}
   d6ec8:	4620      	mov	r0, r4
    state_ = NEXT;
   d6eca:	7123      	strb	r3, [r4, #4]
}
   d6ecc:	b002      	add	sp, #8
   d6ece:	bd10      	pop	{r4, pc}
   d6ed0:	000d7df9 	.word	0x000d7df9

000d6ed4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6ed4:	b513      	push	{r0, r1, r4, lr}
   d6ed6:	4604      	mov	r4, r0
   d6ed8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6eda:	f7ff ffcf 	bl	d6e7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6ede:	6823      	ldr	r3, [r4, #0]
   d6ee0:	9a01      	ldr	r2, [sp, #4]
   d6ee2:	68db      	ldr	r3, [r3, #12]
   d6ee4:	4903      	ldr	r1, [pc, #12]	; (d6ef4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	4798      	blx	r3
    state_ = NEXT;
   d6eea:	2301      	movs	r3, #1
}
   d6eec:	4620      	mov	r0, r4
    state_ = NEXT;
   d6eee:	7123      	strb	r3, [r4, #4]
}
   d6ef0:	b002      	add	sp, #8
   d6ef2:	bd10      	pop	{r4, pc}
   d6ef4:	000d8000 	.word	0x000d8000

000d6ef8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6efc:	460d      	mov	r5, r1
   d6efe:	4617      	mov	r7, r2
    write('"');
   d6f00:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6f02:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6fa4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6f06:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6f08:	442f      	add	r7, r5
    write('"');
   d6f0a:	f7ff fee4 	bl	d6cd6 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6f0e:	4629      	mov	r1, r5
    while (s != end) {
   d6f10:	42bd      	cmp	r5, r7
   d6f12:	462a      	mov	r2, r5
   d6f14:	d038      	beq.n	d6f88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6f16:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6f1a:	2e22      	cmp	r6, #34	; 0x22
   d6f1c:	d003      	beq.n	d6f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6f1e:	2e5c      	cmp	r6, #92	; 0x5c
   d6f20:	d001      	beq.n	d6f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6f22:	2e1f      	cmp	r6, #31
   d6f24:	d8f4      	bhi.n	d6f10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6f26:	6823      	ldr	r3, [r4, #0]
   d6f28:	1a52      	subs	r2, r2, r1
   d6f2a:	689b      	ldr	r3, [r3, #8]
   d6f2c:	4620      	mov	r0, r4
   d6f2e:	4798      	blx	r3
            write('\\');
   d6f30:	215c      	movs	r1, #92	; 0x5c
   d6f32:	4620      	mov	r0, r4
   d6f34:	f7ff fecf 	bl	d6cd6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6f38:	2e0d      	cmp	r6, #13
   d6f3a:	d80a      	bhi.n	d6f52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6f3c:	2e07      	cmp	r6, #7
   d6f3e:	d91c      	bls.n	d6f7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6f40:	f1a6 0308 	sub.w	r3, r6, #8
   d6f44:	2b05      	cmp	r3, #5
   d6f46:	d818      	bhi.n	d6f7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6f48:	e8df f003 	tbb	[pc, r3]
   d6f4c:	17110f0d 	.word	0x17110f0d
   d6f50:	1513      	.short	0x1513
   d6f52:	2e22      	cmp	r6, #34	; 0x22
   d6f54:	d001      	beq.n	d6f5a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6f56:	2e5c      	cmp	r6, #92	; 0x5c
   d6f58:	d10f      	bne.n	d6f7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6f5a:	4631      	mov	r1, r6
                write('b');
   d6f5c:	4620      	mov	r0, r4
   d6f5e:	f7ff feba 	bl	d6cd6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6f62:	4629      	mov	r1, r5
    while (s != end) {
   d6f64:	e7d4      	b.n	d6f10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6f66:	2162      	movs	r1, #98	; 0x62
   d6f68:	e7f8      	b.n	d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6f6a:	2174      	movs	r1, #116	; 0x74
   d6f6c:	e7f6      	b.n	d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6f6e:	216e      	movs	r1, #110	; 0x6e
   d6f70:	e7f4      	b.n	d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6f72:	2166      	movs	r1, #102	; 0x66
   d6f74:	e7f2      	b.n	d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6f76:	2172      	movs	r1, #114	; 0x72
   d6f78:	e7f0      	b.n	d6f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6f7a:	6823      	ldr	r3, [r4, #0]
   d6f7c:	4632      	mov	r2, r6
   d6f7e:	68db      	ldr	r3, [r3, #12]
   d6f80:	4641      	mov	r1, r8
   d6f82:	4620      	mov	r0, r4
   d6f84:	4798      	blx	r3
                break;
   d6f86:	e7ec      	b.n	d6f62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6f88:	428d      	cmp	r5, r1
   d6f8a:	d004      	beq.n	d6f96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6f8c:	6823      	ldr	r3, [r4, #0]
   d6f8e:	1a6a      	subs	r2, r5, r1
   d6f90:	689b      	ldr	r3, [r3, #8]
   d6f92:	4620      	mov	r0, r4
   d6f94:	4798      	blx	r3
    }
    write('"');
   d6f96:	2122      	movs	r1, #34	; 0x22
   d6f98:	4620      	mov	r0, r4
   d6f9a:	f7ff fe9c 	bl	d6cd6 <_ZN5spark10JSONWriter5writeEc>
}
   d6f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fa2:	bf00      	nop
   d6fa4:	000d8003 	.word	0x000d8003

000d6fa8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6fa8:	b513      	push	{r0, r1, r4, lr}
   d6faa:	4604      	mov	r4, r0
   d6fac:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6fb0:	f7ff ff64 	bl	d6e7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6fb4:	4620      	mov	r0, r4
   d6fb6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6fba:	f7ff ff9d 	bl	d6ef8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6fbe:	2302      	movs	r3, #2
}
   d6fc0:	4620      	mov	r0, r4
    state_ = VALUE;
   d6fc2:	7123      	strb	r3, [r4, #4]
}
   d6fc4:	b002      	add	sp, #8
   d6fc6:	bd10      	pop	{r4, pc}

000d6fc8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6fc8:	b513      	push	{r0, r1, r4, lr}
   d6fca:	4604      	mov	r4, r0
   d6fcc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6fd0:	f7ff ff54 	bl	d6e7c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6fda:	f7ff ff8d 	bl	d6ef8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6fde:	2301      	movs	r3, #1
}
   d6fe0:	4620      	mov	r0, r4
    state_ = NEXT;
   d6fe2:	7123      	strb	r3, [r4, #4]
}
   d6fe4:	b002      	add	sp, #8
   d6fe6:	bd10      	pop	{r4, pc}

000d6fe8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6fe8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6fea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6fec:	d902      	bls.n	d6ff4 <pinAvailable+0xc>
    return false;
   d6fee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6ff0:	b002      	add	sp, #8
   d6ff2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6ff4:	f1a0 030b 	sub.w	r3, r0, #11
   d6ff8:	2b02      	cmp	r3, #2
   d6ffa:	d81a      	bhi.n	d7032 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6ffc:	4c17      	ldr	r4, [pc, #92]	; (d705c <pinAvailable+0x74>)
   d6ffe:	7821      	ldrb	r1, [r4, #0]
   d7000:	f3bf 8f5b 	dmb	ish
   d7004:	f011 0101 	ands.w	r1, r1, #1
   d7008:	d10b      	bne.n	d7022 <pinAvailable+0x3a>
   d700a:	4620      	mov	r0, r4
   d700c:	9101      	str	r1, [sp, #4]
   d700e:	f7fd f853 	bl	d40b8 <__cxa_guard_acquire>
   d7012:	9901      	ldr	r1, [sp, #4]
   d7014:	b128      	cbz	r0, d7022 <pinAvailable+0x3a>
   d7016:	4812      	ldr	r0, [pc, #72]	; (d7060 <pinAvailable+0x78>)
   d7018:	f7fd fdaa 	bl	d4b70 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d701c:	4620      	mov	r0, r4
   d701e:	f7fd f850 	bl	d40c2 <__cxa_guard_release>
   d7022:	4b0f      	ldr	r3, [pc, #60]	; (d7060 <pinAvailable+0x78>)
   d7024:	7818      	ldrb	r0, [r3, #0]
   d7026:	f7fd fbe7 	bl	d47f8 <hal_spi_is_enabled>
   d702a:	2800      	cmp	r0, #0
   d702c:	d1df      	bne.n	d6fee <pinAvailable+0x6>
  return true; // 'pin' is available
   d702e:	2001      	movs	r0, #1
   d7030:	e7de      	b.n	d6ff0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7032:	2801      	cmp	r0, #1
   d7034:	d809      	bhi.n	d704a <pinAvailable+0x62>
   d7036:	f000 f881 	bl	d713c <_Z19__fetch_global_Wirev>
   d703a:	2100      	movs	r1, #0
   d703c:	7c00      	ldrb	r0, [r0, #16]
   d703e:	f7fd fbb3 	bl	d47a8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7042:	f080 0001 	eor.w	r0, r0, #1
   d7046:	b2c0      	uxtb	r0, r0
   d7048:	e7d2      	b.n	d6ff0 <pinAvailable+0x8>
   d704a:	3809      	subs	r0, #9
   d704c:	2801      	cmp	r0, #1
   d704e:	d8ee      	bhi.n	d702e <pinAvailable+0x46>
   d7050:	f7ff fc9e 	bl	d6990 <_Z22__fetch_global_Serial1v>
   d7054:	7c00      	ldrb	r0, [r0, #16]
   d7056:	f7fd fb67 	bl	d4728 <hal_usart_is_enabled>
   d705a:	e7f2      	b.n	d7042 <pinAvailable+0x5a>
   d705c:	2003e7b0 	.word	0x2003e7b0
   d7060:	2003e7b4 	.word	0x2003e7b4

000d7064 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7064:	2823      	cmp	r0, #35	; 0x23
{
   d7066:	b538      	push	{r3, r4, r5, lr}
   d7068:	4604      	mov	r4, r0
   d706a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d706c:	d80a      	bhi.n	d7084 <pinMode+0x20>
   d706e:	29ff      	cmp	r1, #255	; 0xff
   d7070:	d008      	beq.n	d7084 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7072:	f7ff ffb9 	bl	d6fe8 <pinAvailable>
   d7076:	b128      	cbz	r0, d7084 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7078:	4629      	mov	r1, r5
   d707a:	4620      	mov	r0, r4
}
   d707c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7080:	f7fd baba 	b.w	d45f8 <HAL_Pin_Mode>
}
   d7084:	bd38      	pop	{r3, r4, r5, pc}

000d7086 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7086:	b510      	push	{r4, lr}
   d7088:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d708a:	f7fd fabd 	bl	d4608 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d708e:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7090:	b2db      	uxtb	r3, r3
   d7092:	2b01      	cmp	r3, #1
   d7094:	d908      	bls.n	d70a8 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7096:	4620      	mov	r0, r4
   d7098:	f7ff ffa6 	bl	d6fe8 <pinAvailable>
   d709c:	b120      	cbz	r0, d70a8 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d709e:	4620      	mov	r0, r4
}
   d70a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d70a4:	f7fd bab8 	b.w	d4618 <HAL_GPIO_Read>
}
   d70a8:	2000      	movs	r0, #0
   d70aa:	bd10      	pop	{r4, pc}

000d70ac <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d70ac:	280d      	cmp	r0, #13
{
   d70ae:	b510      	push	{r4, lr}
   d70b0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d70b2:	bf9c      	itt	ls
   d70b4:	340e      	addls	r4, #14
   d70b6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d70b8:	4620      	mov	r0, r4
   d70ba:	f7ff ff95 	bl	d6fe8 <pinAvailable>
   d70be:	b150      	cbz	r0, d70d6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d70c0:	2103      	movs	r1, #3
   d70c2:	4620      	mov	r0, r4
   d70c4:	f7fd fa90 	bl	d45e8 <HAL_Validate_Pin_Function>
   d70c8:	2803      	cmp	r0, #3
   d70ca:	d104      	bne.n	d70d6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d70cc:	4620      	mov	r0, r4
}
   d70ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d70d2:	f7fd baa9 	b.w	d4628 <hal_adc_read>
}
   d70d6:	2000      	movs	r0, #0
   d70d8:	bd10      	pop	{r4, pc}
	...

000d70dc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d70dc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d70de:	2300      	movs	r3, #0
   d70e0:	2520      	movs	r5, #32
   d70e2:	8043      	strh	r3, [r0, #2]
   d70e4:	2314      	movs	r3, #20
{
   d70e6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d70e8:	8003      	strh	r3, [r0, #0]
   d70ea:	6085      	str	r5, [r0, #8]
   d70ec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d70ee:	4906      	ldr	r1, [pc, #24]	; (d7108 <_Z17acquireWireBufferv+0x2c>)
   d70f0:	4628      	mov	r0, r5
   d70f2:	f000 f87c 	bl	d71ee <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d70f6:	4904      	ldr	r1, [pc, #16]	; (d7108 <_Z17acquireWireBufferv+0x2c>)
	};
   d70f8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d70fa:	4628      	mov	r0, r5
   d70fc:	f000 f877 	bl	d71ee <_ZnajRKSt9nothrow_t>
	};
   d7100:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7102:	4620      	mov	r0, r4
   d7104:	bd38      	pop	{r3, r4, r5, pc}
   d7106:	bf00      	nop
   d7108:	000d8009 	.word	0x000d8009

000d710c <_Z18acquireWire1Bufferv>:
   d710c:	b538      	push	{r3, r4, r5, lr}
   d710e:	2300      	movs	r3, #0
   d7110:	2520      	movs	r5, #32
   d7112:	8043      	strh	r3, [r0, #2]
   d7114:	2314      	movs	r3, #20
   d7116:	4604      	mov	r4, r0
   d7118:	8003      	strh	r3, [r0, #0]
   d711a:	6085      	str	r5, [r0, #8]
   d711c:	6105      	str	r5, [r0, #16]
   d711e:	4906      	ldr	r1, [pc, #24]	; (d7138 <_Z18acquireWire1Bufferv+0x2c>)
   d7120:	4628      	mov	r0, r5
   d7122:	f000 f864 	bl	d71ee <_ZnajRKSt9nothrow_t>
   d7126:	4904      	ldr	r1, [pc, #16]	; (d7138 <_Z18acquireWire1Bufferv+0x2c>)
   d7128:	6060      	str	r0, [r4, #4]
   d712a:	4628      	mov	r0, r5
   d712c:	f000 f85f 	bl	d71ee <_ZnajRKSt9nothrow_t>
   d7130:	60e0      	str	r0, [r4, #12]
   d7132:	4620      	mov	r0, r4
   d7134:	bd38      	pop	{r3, r4, r5, pc}
   d7136:	bf00      	nop
   d7138:	000d8009 	.word	0x000d8009

000d713c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d713c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d713e:	4d0f      	ldr	r5, [pc, #60]	; (d717c <_Z19__fetch_global_Wirev+0x40>)
   d7140:	7829      	ldrb	r1, [r5, #0]
   d7142:	f3bf 8f5b 	dmb	ish
   d7146:	f011 0401 	ands.w	r4, r1, #1
{
   d714a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d714c:	d113      	bne.n	d7176 <_Z19__fetch_global_Wirev+0x3a>
   d714e:	4628      	mov	r0, r5
   d7150:	f7fc ffb2 	bl	d40b8 <__cxa_guard_acquire>
   d7154:	b178      	cbz	r0, d7176 <_Z19__fetch_global_Wirev+0x3a>
   d7156:	a801      	add	r0, sp, #4
   d7158:	f7ff ffc0 	bl	d70dc <_Z17acquireWireBufferv>
   d715c:	aa01      	add	r2, sp, #4
   d715e:	4621      	mov	r1, r4
   d7160:	4807      	ldr	r0, [pc, #28]	; (d7180 <_Z19__fetch_global_Wirev+0x44>)
   d7162:	f7ff fc7f 	bl	d6a64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7166:	4628      	mov	r0, r5
   d7168:	f7fc ffab 	bl	d40c2 <__cxa_guard_release>
   d716c:	4a05      	ldr	r2, [pc, #20]	; (d7184 <_Z19__fetch_global_Wirev+0x48>)
   d716e:	4906      	ldr	r1, [pc, #24]	; (d7188 <_Z19__fetch_global_Wirev+0x4c>)
   d7170:	4803      	ldr	r0, [pc, #12]	; (d7180 <_Z19__fetch_global_Wirev+0x44>)
   d7172:	f000 f833 	bl	d71dc <__aeabi_atexit>
	return wire;
}
   d7176:	4802      	ldr	r0, [pc, #8]	; (d7180 <_Z19__fetch_global_Wirev+0x44>)
   d7178:	b007      	add	sp, #28
   d717a:	bd30      	pop	{r4, r5, pc}
   d717c:	2003e7c0 	.word	0x2003e7c0
   d7180:	2003e7c8 	.word	0x2003e7c8
   d7184:	2003e56c 	.word	0x2003e56c
   d7188:	000d6a0d 	.word	0x000d6a0d

000d718c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d718c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d718e:	4c0f      	ldr	r4, [pc, #60]	; (d71cc <_Z20__fetch_global_Wire1v+0x40>)
   d7190:	7823      	ldrb	r3, [r4, #0]
   d7192:	f3bf 8f5b 	dmb	ish
   d7196:	07db      	lsls	r3, r3, #31
{
   d7198:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d719a:	d413      	bmi.n	d71c4 <_Z20__fetch_global_Wire1v+0x38>
   d719c:	4620      	mov	r0, r4
   d719e:	f7fc ff8b 	bl	d40b8 <__cxa_guard_acquire>
   d71a2:	b178      	cbz	r0, d71c4 <_Z20__fetch_global_Wire1v+0x38>
   d71a4:	a801      	add	r0, sp, #4
   d71a6:	f7ff ffb1 	bl	d710c <_Z18acquireWire1Bufferv>
   d71aa:	aa01      	add	r2, sp, #4
   d71ac:	2101      	movs	r1, #1
   d71ae:	4808      	ldr	r0, [pc, #32]	; (d71d0 <_Z20__fetch_global_Wire1v+0x44>)
   d71b0:	f7ff fc58 	bl	d6a64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d71b4:	4620      	mov	r0, r4
   d71b6:	f7fc ff84 	bl	d40c2 <__cxa_guard_release>
   d71ba:	4a06      	ldr	r2, [pc, #24]	; (d71d4 <_Z20__fetch_global_Wire1v+0x48>)
   d71bc:	4906      	ldr	r1, [pc, #24]	; (d71d8 <_Z20__fetch_global_Wire1v+0x4c>)
   d71be:	4804      	ldr	r0, [pc, #16]	; (d71d0 <_Z20__fetch_global_Wire1v+0x44>)
   d71c0:	f000 f80c 	bl	d71dc <__aeabi_atexit>
	return wire;
}
   d71c4:	4802      	ldr	r0, [pc, #8]	; (d71d0 <_Z20__fetch_global_Wire1v+0x44>)
   d71c6:	b006      	add	sp, #24
   d71c8:	bd10      	pop	{r4, pc}
   d71ca:	bf00      	nop
   d71cc:	2003e7c4 	.word	0x2003e7c4
   d71d0:	2003e7dc 	.word	0x2003e7dc
   d71d4:	2003e56c 	.word	0x2003e56c
   d71d8:	000d6a0d 	.word	0x000d6a0d

000d71dc <__aeabi_atexit>:
   d71dc:	460b      	mov	r3, r1
   d71de:	4601      	mov	r1, r0
   d71e0:	4618      	mov	r0, r3
   d71e2:	f000 bc27 	b.w	d7a34 <__cxa_atexit>

000d71e6 <_ZdlPvj>:
   d71e6:	f7fc bf5a 	b.w	d409e <_ZdlPv>

000d71ea <_ZnwjRKSt9nothrow_t>:
   d71ea:	f7fc bf54 	b.w	d4096 <_Znwj>

000d71ee <_ZnajRKSt9nothrow_t>:
   d71ee:	f7fc bf54 	b.w	d409a <_Znaj>

000d71f2 <_ZSt25__throw_bad_function_callv>:
   d71f2:	b508      	push	{r3, lr}
   d71f4:	f7fd fc66 	bl	d4ac4 <abort>

000d71f8 <__aeabi_drsub>:
   d71f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d71fc:	e002      	b.n	d7204 <__adddf3>
   d71fe:	bf00      	nop

000d7200 <__aeabi_dsub>:
   d7200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7204 <__adddf3>:
   d7204:	b530      	push	{r4, r5, lr}
   d7206:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d720a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d720e:	ea94 0f05 	teq	r4, r5
   d7212:	bf08      	it	eq
   d7214:	ea90 0f02 	teqeq	r0, r2
   d7218:	bf1f      	itttt	ne
   d721a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d721e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d722a:	f000 80e2 	beq.w	d73f2 <__adddf3+0x1ee>
   d722e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7236:	bfb8      	it	lt
   d7238:	426d      	neglt	r5, r5
   d723a:	dd0c      	ble.n	d7256 <__adddf3+0x52>
   d723c:	442c      	add	r4, r5
   d723e:	ea80 0202 	eor.w	r2, r0, r2
   d7242:	ea81 0303 	eor.w	r3, r1, r3
   d7246:	ea82 0000 	eor.w	r0, r2, r0
   d724a:	ea83 0101 	eor.w	r1, r3, r1
   d724e:	ea80 0202 	eor.w	r2, r0, r2
   d7252:	ea81 0303 	eor.w	r3, r1, r3
   d7256:	2d36      	cmp	r5, #54	; 0x36
   d7258:	bf88      	it	hi
   d725a:	bd30      	pophi	{r4, r5, pc}
   d725c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7260:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d726c:	d002      	beq.n	d7274 <__adddf3+0x70>
   d726e:	4240      	negs	r0, r0
   d7270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7278:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d727c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7280:	d002      	beq.n	d7288 <__adddf3+0x84>
   d7282:	4252      	negs	r2, r2
   d7284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7288:	ea94 0f05 	teq	r4, r5
   d728c:	f000 80a7 	beq.w	d73de <__adddf3+0x1da>
   d7290:	f1a4 0401 	sub.w	r4, r4, #1
   d7294:	f1d5 0e20 	rsbs	lr, r5, #32
   d7298:	db0d      	blt.n	d72b6 <__adddf3+0xb2>
   d729a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d729e:	fa22 f205 	lsr.w	r2, r2, r5
   d72a2:	1880      	adds	r0, r0, r2
   d72a4:	f141 0100 	adc.w	r1, r1, #0
   d72a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d72ac:	1880      	adds	r0, r0, r2
   d72ae:	fa43 f305 	asr.w	r3, r3, r5
   d72b2:	4159      	adcs	r1, r3
   d72b4:	e00e      	b.n	d72d4 <__adddf3+0xd0>
   d72b6:	f1a5 0520 	sub.w	r5, r5, #32
   d72ba:	f10e 0e20 	add.w	lr, lr, #32
   d72be:	2a01      	cmp	r2, #1
   d72c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d72c4:	bf28      	it	cs
   d72c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d72ca:	fa43 f305 	asr.w	r3, r3, r5
   d72ce:	18c0      	adds	r0, r0, r3
   d72d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d72d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72d8:	d507      	bpl.n	d72ea <__adddf3+0xe6>
   d72da:	f04f 0e00 	mov.w	lr, #0
   d72de:	f1dc 0c00 	rsbs	ip, ip, #0
   d72e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d72e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d72ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d72ee:	d31b      	bcc.n	d7328 <__adddf3+0x124>
   d72f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d72f4:	d30c      	bcc.n	d7310 <__adddf3+0x10c>
   d72f6:	0849      	lsrs	r1, r1, #1
   d72f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d72fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7300:	f104 0401 	add.w	r4, r4, #1
   d7304:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d730c:	f080 809a 	bcs.w	d7444 <__adddf3+0x240>
   d7310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7314:	bf08      	it	eq
   d7316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d731a:	f150 0000 	adcs.w	r0, r0, #0
   d731e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7322:	ea41 0105 	orr.w	r1, r1, r5
   d7326:	bd30      	pop	{r4, r5, pc}
   d7328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d732c:	4140      	adcs	r0, r0
   d732e:	eb41 0101 	adc.w	r1, r1, r1
   d7332:	3c01      	subs	r4, #1
   d7334:	bf28      	it	cs
   d7336:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d733a:	d2e9      	bcs.n	d7310 <__adddf3+0x10c>
   d733c:	f091 0f00 	teq	r1, #0
   d7340:	bf04      	itt	eq
   d7342:	4601      	moveq	r1, r0
   d7344:	2000      	moveq	r0, #0
   d7346:	fab1 f381 	clz	r3, r1
   d734a:	bf08      	it	eq
   d734c:	3320      	addeq	r3, #32
   d734e:	f1a3 030b 	sub.w	r3, r3, #11
   d7352:	f1b3 0220 	subs.w	r2, r3, #32
   d7356:	da0c      	bge.n	d7372 <__adddf3+0x16e>
   d7358:	320c      	adds	r2, #12
   d735a:	dd08      	ble.n	d736e <__adddf3+0x16a>
   d735c:	f102 0c14 	add.w	ip, r2, #20
   d7360:	f1c2 020c 	rsb	r2, r2, #12
   d7364:	fa01 f00c 	lsl.w	r0, r1, ip
   d7368:	fa21 f102 	lsr.w	r1, r1, r2
   d736c:	e00c      	b.n	d7388 <__adddf3+0x184>
   d736e:	f102 0214 	add.w	r2, r2, #20
   d7372:	bfd8      	it	le
   d7374:	f1c2 0c20 	rsble	ip, r2, #32
   d7378:	fa01 f102 	lsl.w	r1, r1, r2
   d737c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7380:	bfdc      	itt	le
   d7382:	ea41 010c 	orrle.w	r1, r1, ip
   d7386:	4090      	lslle	r0, r2
   d7388:	1ae4      	subs	r4, r4, r3
   d738a:	bfa2      	ittt	ge
   d738c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7390:	4329      	orrge	r1, r5
   d7392:	bd30      	popge	{r4, r5, pc}
   d7394:	ea6f 0404 	mvn.w	r4, r4
   d7398:	3c1f      	subs	r4, #31
   d739a:	da1c      	bge.n	d73d6 <__adddf3+0x1d2>
   d739c:	340c      	adds	r4, #12
   d739e:	dc0e      	bgt.n	d73be <__adddf3+0x1ba>
   d73a0:	f104 0414 	add.w	r4, r4, #20
   d73a4:	f1c4 0220 	rsb	r2, r4, #32
   d73a8:	fa20 f004 	lsr.w	r0, r0, r4
   d73ac:	fa01 f302 	lsl.w	r3, r1, r2
   d73b0:	ea40 0003 	orr.w	r0, r0, r3
   d73b4:	fa21 f304 	lsr.w	r3, r1, r4
   d73b8:	ea45 0103 	orr.w	r1, r5, r3
   d73bc:	bd30      	pop	{r4, r5, pc}
   d73be:	f1c4 040c 	rsb	r4, r4, #12
   d73c2:	f1c4 0220 	rsb	r2, r4, #32
   d73c6:	fa20 f002 	lsr.w	r0, r0, r2
   d73ca:	fa01 f304 	lsl.w	r3, r1, r4
   d73ce:	ea40 0003 	orr.w	r0, r0, r3
   d73d2:	4629      	mov	r1, r5
   d73d4:	bd30      	pop	{r4, r5, pc}
   d73d6:	fa21 f004 	lsr.w	r0, r1, r4
   d73da:	4629      	mov	r1, r5
   d73dc:	bd30      	pop	{r4, r5, pc}
   d73de:	f094 0f00 	teq	r4, #0
   d73e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d73e6:	bf06      	itte	eq
   d73e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d73ec:	3401      	addeq	r4, #1
   d73ee:	3d01      	subne	r5, #1
   d73f0:	e74e      	b.n	d7290 <__adddf3+0x8c>
   d73f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d73f6:	bf18      	it	ne
   d73f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d73fc:	d029      	beq.n	d7452 <__adddf3+0x24e>
   d73fe:	ea94 0f05 	teq	r4, r5
   d7402:	bf08      	it	eq
   d7404:	ea90 0f02 	teqeq	r0, r2
   d7408:	d005      	beq.n	d7416 <__adddf3+0x212>
   d740a:	ea54 0c00 	orrs.w	ip, r4, r0
   d740e:	bf04      	itt	eq
   d7410:	4619      	moveq	r1, r3
   d7412:	4610      	moveq	r0, r2
   d7414:	bd30      	pop	{r4, r5, pc}
   d7416:	ea91 0f03 	teq	r1, r3
   d741a:	bf1e      	ittt	ne
   d741c:	2100      	movne	r1, #0
   d741e:	2000      	movne	r0, #0
   d7420:	bd30      	popne	{r4, r5, pc}
   d7422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7426:	d105      	bne.n	d7434 <__adddf3+0x230>
   d7428:	0040      	lsls	r0, r0, #1
   d742a:	4149      	adcs	r1, r1
   d742c:	bf28      	it	cs
   d742e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7432:	bd30      	pop	{r4, r5, pc}
   d7434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7438:	bf3c      	itt	cc
   d743a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d743e:	bd30      	popcc	{r4, r5, pc}
   d7440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d744c:	f04f 0000 	mov.w	r0, #0
   d7450:	bd30      	pop	{r4, r5, pc}
   d7452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7456:	bf1a      	itte	ne
   d7458:	4619      	movne	r1, r3
   d745a:	4610      	movne	r0, r2
   d745c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7460:	bf1c      	itt	ne
   d7462:	460b      	movne	r3, r1
   d7464:	4602      	movne	r2, r0
   d7466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d746a:	bf06      	itte	eq
   d746c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7470:	ea91 0f03 	teqeq	r1, r3
   d7474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7478:	bd30      	pop	{r4, r5, pc}
   d747a:	bf00      	nop

000d747c <__aeabi_ui2d>:
   d747c:	f090 0f00 	teq	r0, #0
   d7480:	bf04      	itt	eq
   d7482:	2100      	moveq	r1, #0
   d7484:	4770      	bxeq	lr
   d7486:	b530      	push	{r4, r5, lr}
   d7488:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d748c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7490:	f04f 0500 	mov.w	r5, #0
   d7494:	f04f 0100 	mov.w	r1, #0
   d7498:	e750      	b.n	d733c <__adddf3+0x138>
   d749a:	bf00      	nop

000d749c <__aeabi_i2d>:
   d749c:	f090 0f00 	teq	r0, #0
   d74a0:	bf04      	itt	eq
   d74a2:	2100      	moveq	r1, #0
   d74a4:	4770      	bxeq	lr
   d74a6:	b530      	push	{r4, r5, lr}
   d74a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d74ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d74b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d74b4:	bf48      	it	mi
   d74b6:	4240      	negmi	r0, r0
   d74b8:	f04f 0100 	mov.w	r1, #0
   d74bc:	e73e      	b.n	d733c <__adddf3+0x138>
   d74be:	bf00      	nop

000d74c0 <__aeabi_f2d>:
   d74c0:	0042      	lsls	r2, r0, #1
   d74c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d74c6:	ea4f 0131 	mov.w	r1, r1, rrx
   d74ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d74ce:	bf1f      	itttt	ne
   d74d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d74d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d74d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d74dc:	4770      	bxne	lr
   d74de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d74e2:	bf08      	it	eq
   d74e4:	4770      	bxeq	lr
   d74e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d74ea:	bf04      	itt	eq
   d74ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d74f0:	4770      	bxeq	lr
   d74f2:	b530      	push	{r4, r5, lr}
   d74f4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d74f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d74fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7500:	e71c      	b.n	d733c <__adddf3+0x138>
   d7502:	bf00      	nop

000d7504 <__aeabi_ul2d>:
   d7504:	ea50 0201 	orrs.w	r2, r0, r1
   d7508:	bf08      	it	eq
   d750a:	4770      	bxeq	lr
   d750c:	b530      	push	{r4, r5, lr}
   d750e:	f04f 0500 	mov.w	r5, #0
   d7512:	e00a      	b.n	d752a <__aeabi_l2d+0x16>

000d7514 <__aeabi_l2d>:
   d7514:	ea50 0201 	orrs.w	r2, r0, r1
   d7518:	bf08      	it	eq
   d751a:	4770      	bxeq	lr
   d751c:	b530      	push	{r4, r5, lr}
   d751e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7522:	d502      	bpl.n	d752a <__aeabi_l2d+0x16>
   d7524:	4240      	negs	r0, r0
   d7526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d752a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d752e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7536:	f43f aed8 	beq.w	d72ea <__adddf3+0xe6>
   d753a:	f04f 0203 	mov.w	r2, #3
   d753e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7542:	bf18      	it	ne
   d7544:	3203      	addne	r2, #3
   d7546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d754a:	bf18      	it	ne
   d754c:	3203      	addne	r2, #3
   d754e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7552:	f1c2 0320 	rsb	r3, r2, #32
   d7556:	fa00 fc03 	lsl.w	ip, r0, r3
   d755a:	fa20 f002 	lsr.w	r0, r0, r2
   d755e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7562:	ea40 000e 	orr.w	r0, r0, lr
   d7566:	fa21 f102 	lsr.w	r1, r1, r2
   d756a:	4414      	add	r4, r2
   d756c:	e6bd      	b.n	d72ea <__adddf3+0xe6>
   d756e:	bf00      	nop

000d7570 <__aeabi_dmul>:
   d7570:	b570      	push	{r4, r5, r6, lr}
   d7572:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d757a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d757e:	bf1d      	ittte	ne
   d7580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7584:	ea94 0f0c 	teqne	r4, ip
   d7588:	ea95 0f0c 	teqne	r5, ip
   d758c:	f000 f8de 	bleq	d774c <__aeabi_dmul+0x1dc>
   d7590:	442c      	add	r4, r5
   d7592:	ea81 0603 	eor.w	r6, r1, r3
   d7596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d759a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d759e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d75a2:	bf18      	it	ne
   d75a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d75a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d75ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d75b0:	d038      	beq.n	d7624 <__aeabi_dmul+0xb4>
   d75b2:	fba0 ce02 	umull	ip, lr, r0, r2
   d75b6:	f04f 0500 	mov.w	r5, #0
   d75ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d75be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d75c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d75c6:	f04f 0600 	mov.w	r6, #0
   d75ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d75ce:	f09c 0f00 	teq	ip, #0
   d75d2:	bf18      	it	ne
   d75d4:	f04e 0e01 	orrne.w	lr, lr, #1
   d75d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d75dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d75e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d75e4:	d204      	bcs.n	d75f0 <__aeabi_dmul+0x80>
   d75e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d75ea:	416d      	adcs	r5, r5
   d75ec:	eb46 0606 	adc.w	r6, r6, r6
   d75f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d75f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d75f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d75fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7608:	bf88      	it	hi
   d760a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d760e:	d81e      	bhi.n	d764e <__aeabi_dmul+0xde>
   d7610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7614:	bf08      	it	eq
   d7616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d761a:	f150 0000 	adcs.w	r0, r0, #0
   d761e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7622:	bd70      	pop	{r4, r5, r6, pc}
   d7624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7628:	ea46 0101 	orr.w	r1, r6, r1
   d762c:	ea40 0002 	orr.w	r0, r0, r2
   d7630:	ea81 0103 	eor.w	r1, r1, r3
   d7634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7638:	bfc2      	ittt	gt
   d763a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d763e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7642:	bd70      	popgt	{r4, r5, r6, pc}
   d7644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7648:	f04f 0e00 	mov.w	lr, #0
   d764c:	3c01      	subs	r4, #1
   d764e:	f300 80ab 	bgt.w	d77a8 <__aeabi_dmul+0x238>
   d7652:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7656:	bfde      	ittt	le
   d7658:	2000      	movle	r0, #0
   d765a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d765e:	bd70      	pople	{r4, r5, r6, pc}
   d7660:	f1c4 0400 	rsb	r4, r4, #0
   d7664:	3c20      	subs	r4, #32
   d7666:	da35      	bge.n	d76d4 <__aeabi_dmul+0x164>
   d7668:	340c      	adds	r4, #12
   d766a:	dc1b      	bgt.n	d76a4 <__aeabi_dmul+0x134>
   d766c:	f104 0414 	add.w	r4, r4, #20
   d7670:	f1c4 0520 	rsb	r5, r4, #32
   d7674:	fa00 f305 	lsl.w	r3, r0, r5
   d7678:	fa20 f004 	lsr.w	r0, r0, r4
   d767c:	fa01 f205 	lsl.w	r2, r1, r5
   d7680:	ea40 0002 	orr.w	r0, r0, r2
   d7684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d768c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7690:	fa21 f604 	lsr.w	r6, r1, r4
   d7694:	eb42 0106 	adc.w	r1, r2, r6
   d7698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d769c:	bf08      	it	eq
   d769e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d76a2:	bd70      	pop	{r4, r5, r6, pc}
   d76a4:	f1c4 040c 	rsb	r4, r4, #12
   d76a8:	f1c4 0520 	rsb	r5, r4, #32
   d76ac:	fa00 f304 	lsl.w	r3, r0, r4
   d76b0:	fa20 f005 	lsr.w	r0, r0, r5
   d76b4:	fa01 f204 	lsl.w	r2, r1, r4
   d76b8:	ea40 0002 	orr.w	r0, r0, r2
   d76bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d76c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d76c4:	f141 0100 	adc.w	r1, r1, #0
   d76c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d76cc:	bf08      	it	eq
   d76ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d76d2:	bd70      	pop	{r4, r5, r6, pc}
   d76d4:	f1c4 0520 	rsb	r5, r4, #32
   d76d8:	fa00 f205 	lsl.w	r2, r0, r5
   d76dc:	ea4e 0e02 	orr.w	lr, lr, r2
   d76e0:	fa20 f304 	lsr.w	r3, r0, r4
   d76e4:	fa01 f205 	lsl.w	r2, r1, r5
   d76e8:	ea43 0302 	orr.w	r3, r3, r2
   d76ec:	fa21 f004 	lsr.w	r0, r1, r4
   d76f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d76f4:	fa21 f204 	lsr.w	r2, r1, r4
   d76f8:	ea20 0002 	bic.w	r0, r0, r2
   d76fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7704:	bf08      	it	eq
   d7706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d770a:	bd70      	pop	{r4, r5, r6, pc}
   d770c:	f094 0f00 	teq	r4, #0
   d7710:	d10f      	bne.n	d7732 <__aeabi_dmul+0x1c2>
   d7712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7716:	0040      	lsls	r0, r0, #1
   d7718:	eb41 0101 	adc.w	r1, r1, r1
   d771c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7720:	bf08      	it	eq
   d7722:	3c01      	subeq	r4, #1
   d7724:	d0f7      	beq.n	d7716 <__aeabi_dmul+0x1a6>
   d7726:	ea41 0106 	orr.w	r1, r1, r6
   d772a:	f095 0f00 	teq	r5, #0
   d772e:	bf18      	it	ne
   d7730:	4770      	bxne	lr
   d7732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7736:	0052      	lsls	r2, r2, #1
   d7738:	eb43 0303 	adc.w	r3, r3, r3
   d773c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7740:	bf08      	it	eq
   d7742:	3d01      	subeq	r5, #1
   d7744:	d0f7      	beq.n	d7736 <__aeabi_dmul+0x1c6>
   d7746:	ea43 0306 	orr.w	r3, r3, r6
   d774a:	4770      	bx	lr
   d774c:	ea94 0f0c 	teq	r4, ip
   d7750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7754:	bf18      	it	ne
   d7756:	ea95 0f0c 	teqne	r5, ip
   d775a:	d00c      	beq.n	d7776 <__aeabi_dmul+0x206>
   d775c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7760:	bf18      	it	ne
   d7762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7766:	d1d1      	bne.n	d770c <__aeabi_dmul+0x19c>
   d7768:	ea81 0103 	eor.w	r1, r1, r3
   d776c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7770:	f04f 0000 	mov.w	r0, #0
   d7774:	bd70      	pop	{r4, r5, r6, pc}
   d7776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d777a:	bf06      	itte	eq
   d777c:	4610      	moveq	r0, r2
   d777e:	4619      	moveq	r1, r3
   d7780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7784:	d019      	beq.n	d77ba <__aeabi_dmul+0x24a>
   d7786:	ea94 0f0c 	teq	r4, ip
   d778a:	d102      	bne.n	d7792 <__aeabi_dmul+0x222>
   d778c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7790:	d113      	bne.n	d77ba <__aeabi_dmul+0x24a>
   d7792:	ea95 0f0c 	teq	r5, ip
   d7796:	d105      	bne.n	d77a4 <__aeabi_dmul+0x234>
   d7798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d779c:	bf1c      	itt	ne
   d779e:	4610      	movne	r0, r2
   d77a0:	4619      	movne	r1, r3
   d77a2:	d10a      	bne.n	d77ba <__aeabi_dmul+0x24a>
   d77a4:	ea81 0103 	eor.w	r1, r1, r3
   d77a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d77ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d77b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d77b4:	f04f 0000 	mov.w	r0, #0
   d77b8:	bd70      	pop	{r4, r5, r6, pc}
   d77ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d77be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d77c2:	bd70      	pop	{r4, r5, r6, pc}

000d77c4 <__aeabi_ddiv>:
   d77c4:	b570      	push	{r4, r5, r6, lr}
   d77c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d77ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d77ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d77d2:	bf1d      	ittte	ne
   d77d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d77d8:	ea94 0f0c 	teqne	r4, ip
   d77dc:	ea95 0f0c 	teqne	r5, ip
   d77e0:	f000 f8a7 	bleq	d7932 <__aeabi_ddiv+0x16e>
   d77e4:	eba4 0405 	sub.w	r4, r4, r5
   d77e8:	ea81 0e03 	eor.w	lr, r1, r3
   d77ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d77f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d77f4:	f000 8088 	beq.w	d7908 <__aeabi_ddiv+0x144>
   d77f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d77fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7808:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d780c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7814:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d781c:	429d      	cmp	r5, r3
   d781e:	bf08      	it	eq
   d7820:	4296      	cmpeq	r6, r2
   d7822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7826:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d782a:	d202      	bcs.n	d7832 <__aeabi_ddiv+0x6e>
   d782c:	085b      	lsrs	r3, r3, #1
   d782e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7832:	1ab6      	subs	r6, r6, r2
   d7834:	eb65 0503 	sbc.w	r5, r5, r3
   d7838:	085b      	lsrs	r3, r3, #1
   d783a:	ea4f 0232 	mov.w	r2, r2, rrx
   d783e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7846:	ebb6 0e02 	subs.w	lr, r6, r2
   d784a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d784e:	bf22      	ittt	cs
   d7850:	1ab6      	subcs	r6, r6, r2
   d7852:	4675      	movcs	r5, lr
   d7854:	ea40 000c 	orrcs.w	r0, r0, ip
   d7858:	085b      	lsrs	r3, r3, #1
   d785a:	ea4f 0232 	mov.w	r2, r2, rrx
   d785e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7862:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7866:	bf22      	ittt	cs
   d7868:	1ab6      	subcs	r6, r6, r2
   d786a:	4675      	movcs	r5, lr
   d786c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7870:	085b      	lsrs	r3, r3, #1
   d7872:	ea4f 0232 	mov.w	r2, r2, rrx
   d7876:	ebb6 0e02 	subs.w	lr, r6, r2
   d787a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d787e:	bf22      	ittt	cs
   d7880:	1ab6      	subcs	r6, r6, r2
   d7882:	4675      	movcs	r5, lr
   d7884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7888:	085b      	lsrs	r3, r3, #1
   d788a:	ea4f 0232 	mov.w	r2, r2, rrx
   d788e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7892:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7896:	bf22      	ittt	cs
   d7898:	1ab6      	subcs	r6, r6, r2
   d789a:	4675      	movcs	r5, lr
   d789c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d78a0:	ea55 0e06 	orrs.w	lr, r5, r6
   d78a4:	d018      	beq.n	d78d8 <__aeabi_ddiv+0x114>
   d78a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d78aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d78ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d78b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d78b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d78ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d78be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d78c2:	d1c0      	bne.n	d7846 <__aeabi_ddiv+0x82>
   d78c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d78c8:	d10b      	bne.n	d78e2 <__aeabi_ddiv+0x11e>
   d78ca:	ea41 0100 	orr.w	r1, r1, r0
   d78ce:	f04f 0000 	mov.w	r0, #0
   d78d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d78d6:	e7b6      	b.n	d7846 <__aeabi_ddiv+0x82>
   d78d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d78dc:	bf04      	itt	eq
   d78de:	4301      	orreq	r1, r0
   d78e0:	2000      	moveq	r0, #0
   d78e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d78e6:	bf88      	it	hi
   d78e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d78ec:	f63f aeaf 	bhi.w	d764e <__aeabi_dmul+0xde>
   d78f0:	ebb5 0c03 	subs.w	ip, r5, r3
   d78f4:	bf04      	itt	eq
   d78f6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d78fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d78fe:	f150 0000 	adcs.w	r0, r0, #0
   d7902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7906:	bd70      	pop	{r4, r5, r6, pc}
   d7908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d790c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7914:	bfc2      	ittt	gt
   d7916:	ebd4 050c 	rsbsgt	r5, r4, ip
   d791a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d791e:	bd70      	popgt	{r4, r5, r6, pc}
   d7920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7924:	f04f 0e00 	mov.w	lr, #0
   d7928:	3c01      	subs	r4, #1
   d792a:	e690      	b.n	d764e <__aeabi_dmul+0xde>
   d792c:	ea45 0e06 	orr.w	lr, r5, r6
   d7930:	e68d      	b.n	d764e <__aeabi_dmul+0xde>
   d7932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7936:	ea94 0f0c 	teq	r4, ip
   d793a:	bf08      	it	eq
   d793c:	ea95 0f0c 	teqeq	r5, ip
   d7940:	f43f af3b 	beq.w	d77ba <__aeabi_dmul+0x24a>
   d7944:	ea94 0f0c 	teq	r4, ip
   d7948:	d10a      	bne.n	d7960 <__aeabi_ddiv+0x19c>
   d794a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d794e:	f47f af34 	bne.w	d77ba <__aeabi_dmul+0x24a>
   d7952:	ea95 0f0c 	teq	r5, ip
   d7956:	f47f af25 	bne.w	d77a4 <__aeabi_dmul+0x234>
   d795a:	4610      	mov	r0, r2
   d795c:	4619      	mov	r1, r3
   d795e:	e72c      	b.n	d77ba <__aeabi_dmul+0x24a>
   d7960:	ea95 0f0c 	teq	r5, ip
   d7964:	d106      	bne.n	d7974 <__aeabi_ddiv+0x1b0>
   d7966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d796a:	f43f aefd 	beq.w	d7768 <__aeabi_dmul+0x1f8>
   d796e:	4610      	mov	r0, r2
   d7970:	4619      	mov	r1, r3
   d7972:	e722      	b.n	d77ba <__aeabi_dmul+0x24a>
   d7974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7978:	bf18      	it	ne
   d797a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d797e:	f47f aec5 	bne.w	d770c <__aeabi_dmul+0x19c>
   d7982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7986:	f47f af0d 	bne.w	d77a4 <__aeabi_dmul+0x234>
   d798a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d798e:	f47f aeeb 	bne.w	d7768 <__aeabi_dmul+0x1f8>
   d7992:	e712      	b.n	d77ba <__aeabi_dmul+0x24a>

000d7994 <__aeabi_d2f>:
   d7994:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7998:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d799c:	bf24      	itt	cs
   d799e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d79a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d79a6:	d90d      	bls.n	d79c4 <__aeabi_d2f+0x30>
   d79a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d79ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d79b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d79b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d79b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d79bc:	bf08      	it	eq
   d79be:	f020 0001 	biceq.w	r0, r0, #1
   d79c2:	4770      	bx	lr
   d79c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d79c8:	d121      	bne.n	d7a0e <__aeabi_d2f+0x7a>
   d79ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d79ce:	bfbc      	itt	lt
   d79d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d79d4:	4770      	bxlt	lr
   d79d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d79de:	f1c2 0218 	rsb	r2, r2, #24
   d79e2:	f1c2 0c20 	rsb	ip, r2, #32
   d79e6:	fa10 f30c 	lsls.w	r3, r0, ip
   d79ea:	fa20 f002 	lsr.w	r0, r0, r2
   d79ee:	bf18      	it	ne
   d79f0:	f040 0001 	orrne.w	r0, r0, #1
   d79f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d79f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d79fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7a00:	ea40 000c 	orr.w	r0, r0, ip
   d7a04:	fa23 f302 	lsr.w	r3, r3, r2
   d7a08:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7a0c:	e7cc      	b.n	d79a8 <__aeabi_d2f+0x14>
   d7a0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7a12:	d107      	bne.n	d7a24 <__aeabi_d2f+0x90>
   d7a14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7a18:	bf1e      	ittt	ne
   d7a1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7a1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7a22:	4770      	bxne	lr
   d7a24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7a28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7a2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7a30:	4770      	bx	lr
   d7a32:	bf00      	nop

000d7a34 <__cxa_atexit>:
   d7a34:	b510      	push	{r4, lr}
   d7a36:	4c05      	ldr	r4, [pc, #20]	; (d7a4c <__cxa_atexit+0x18>)
   d7a38:	4613      	mov	r3, r2
   d7a3a:	b12c      	cbz	r4, d7a48 <__cxa_atexit+0x14>
   d7a3c:	460a      	mov	r2, r1
   d7a3e:	4601      	mov	r1, r0
   d7a40:	2002      	movs	r0, #2
   d7a42:	f3af 8000 	nop.w
   d7a46:	bd10      	pop	{r4, pc}
   d7a48:	4620      	mov	r0, r4
   d7a4a:	e7fc      	b.n	d7a46 <__cxa_atexit+0x12>
   d7a4c:	00000000 	.word	0x00000000

000d7a50 <memcpy>:
   d7a50:	440a      	add	r2, r1
   d7a52:	4291      	cmp	r1, r2
   d7a54:	f100 33ff 	add.w	r3, r0, #4294967295
   d7a58:	d100      	bne.n	d7a5c <memcpy+0xc>
   d7a5a:	4770      	bx	lr
   d7a5c:	b510      	push	{r4, lr}
   d7a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7a62:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7a66:	4291      	cmp	r1, r2
   d7a68:	d1f9      	bne.n	d7a5e <memcpy+0xe>
   d7a6a:	bd10      	pop	{r4, pc}

000d7a6c <memmove>:
   d7a6c:	4288      	cmp	r0, r1
   d7a6e:	b510      	push	{r4, lr}
   d7a70:	eb01 0402 	add.w	r4, r1, r2
   d7a74:	d902      	bls.n	d7a7c <memmove+0x10>
   d7a76:	4284      	cmp	r4, r0
   d7a78:	4623      	mov	r3, r4
   d7a7a:	d807      	bhi.n	d7a8c <memmove+0x20>
   d7a7c:	1e43      	subs	r3, r0, #1
   d7a7e:	42a1      	cmp	r1, r4
   d7a80:	d008      	beq.n	d7a94 <memmove+0x28>
   d7a82:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7a86:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7a8a:	e7f8      	b.n	d7a7e <memmove+0x12>
   d7a8c:	4402      	add	r2, r0
   d7a8e:	4601      	mov	r1, r0
   d7a90:	428a      	cmp	r2, r1
   d7a92:	d100      	bne.n	d7a96 <memmove+0x2a>
   d7a94:	bd10      	pop	{r4, pc}
   d7a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7a9e:	e7f7      	b.n	d7a90 <memmove+0x24>

000d7aa0 <memset>:
   d7aa0:	4402      	add	r2, r0
   d7aa2:	4603      	mov	r3, r0
   d7aa4:	4293      	cmp	r3, r2
   d7aa6:	d100      	bne.n	d7aaa <memset+0xa>
   d7aa8:	4770      	bx	lr
   d7aaa:	f803 1b01 	strb.w	r1, [r3], #1
   d7aae:	e7f9      	b.n	d7aa4 <memset+0x4>

000d7ab0 <srand>:
   d7ab0:	b538      	push	{r3, r4, r5, lr}
   d7ab2:	4b0d      	ldr	r3, [pc, #52]	; (d7ae8 <srand+0x38>)
   d7ab4:	681d      	ldr	r5, [r3, #0]
   d7ab6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7ab8:	4604      	mov	r4, r0
   d7aba:	b97b      	cbnz	r3, d7adc <srand+0x2c>
   d7abc:	2018      	movs	r0, #24
   d7abe:	f7fc ffd9 	bl	d4a74 <malloc>
   d7ac2:	4a0a      	ldr	r2, [pc, #40]	; (d7aec <srand+0x3c>)
   d7ac4:	4b0a      	ldr	r3, [pc, #40]	; (d7af0 <srand+0x40>)
   d7ac6:	63a8      	str	r0, [r5, #56]	; 0x38
   d7ac8:	e9c0 2300 	strd	r2, r3, [r0]
   d7acc:	4b09      	ldr	r3, [pc, #36]	; (d7af4 <srand+0x44>)
   d7ace:	6083      	str	r3, [r0, #8]
   d7ad0:	230b      	movs	r3, #11
   d7ad2:	8183      	strh	r3, [r0, #12]
   d7ad4:	2201      	movs	r2, #1
   d7ad6:	2300      	movs	r3, #0
   d7ad8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7adc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7ade:	2200      	movs	r2, #0
   d7ae0:	611c      	str	r4, [r3, #16]
   d7ae2:	615a      	str	r2, [r3, #20]
   d7ae4:	bd38      	pop	{r3, r4, r5, pc}
   d7ae6:	bf00      	nop
   d7ae8:	2003e508 	.word	0x2003e508
   d7aec:	abcd330e 	.word	0xabcd330e
   d7af0:	e66d1234 	.word	0xe66d1234
   d7af4:	0005deec 	.word	0x0005deec

000d7af8 <strchr>:
   d7af8:	b2c9      	uxtb	r1, r1
   d7afa:	4603      	mov	r3, r0
   d7afc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7b00:	b11a      	cbz	r2, d7b0a <strchr+0x12>
   d7b02:	428a      	cmp	r2, r1
   d7b04:	d1f9      	bne.n	d7afa <strchr+0x2>
   d7b06:	4618      	mov	r0, r3
   d7b08:	4770      	bx	lr
   d7b0a:	2900      	cmp	r1, #0
   d7b0c:	bf18      	it	ne
   d7b0e:	2300      	movne	r3, #0
   d7b10:	e7f9      	b.n	d7b06 <strchr+0xe>

000d7b12 <strchrnul>:
   d7b12:	b510      	push	{r4, lr}
   d7b14:	4604      	mov	r4, r0
   d7b16:	f7ff ffef 	bl	d7af8 <strchr>
   d7b1a:	b918      	cbnz	r0, d7b24 <strchrnul+0x12>
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	f000 f832 	bl	d7b86 <strlen>
   d7b22:	4420      	add	r0, r4
   d7b24:	bd10      	pop	{r4, pc}

000d7b26 <strcmp>:
   d7b26:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7b2e:	2a01      	cmp	r2, #1
   d7b30:	bf28      	it	cs
   d7b32:	429a      	cmpcs	r2, r3
   d7b34:	d0f7      	beq.n	d7b26 <strcmp>
   d7b36:	1ad0      	subs	r0, r2, r3
   d7b38:	4770      	bx	lr

000d7b3a <strcpy>:
   d7b3a:	4603      	mov	r3, r0
   d7b3c:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7b40:	f803 2b01 	strb.w	r2, [r3], #1
   d7b44:	2a00      	cmp	r2, #0
   d7b46:	d1f9      	bne.n	d7b3c <strcpy+0x2>
   d7b48:	4770      	bx	lr
	...

000d7b4c <strdup>:
   d7b4c:	4b02      	ldr	r3, [pc, #8]	; (d7b58 <strdup+0xc>)
   d7b4e:	4601      	mov	r1, r0
   d7b50:	6818      	ldr	r0, [r3, #0]
   d7b52:	f000 b803 	b.w	d7b5c <_strdup_r>
   d7b56:	bf00      	nop
   d7b58:	2003e508 	.word	0x2003e508

000d7b5c <_strdup_r>:
   d7b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b5e:	4604      	mov	r4, r0
   d7b60:	4608      	mov	r0, r1
   d7b62:	460d      	mov	r5, r1
   d7b64:	f000 f80f 	bl	d7b86 <strlen>
   d7b68:	1c42      	adds	r2, r0, #1
   d7b6a:	4611      	mov	r1, r2
   d7b6c:	4620      	mov	r0, r4
   d7b6e:	9201      	str	r2, [sp, #4]
   d7b70:	f7fc ffb0 	bl	d4ad4 <_malloc_r>
   d7b74:	4604      	mov	r4, r0
   d7b76:	b118      	cbz	r0, d7b80 <_strdup_r+0x24>
   d7b78:	9a01      	ldr	r2, [sp, #4]
   d7b7a:	4629      	mov	r1, r5
   d7b7c:	f7ff ff68 	bl	d7a50 <memcpy>
   d7b80:	4620      	mov	r0, r4
   d7b82:	b003      	add	sp, #12
   d7b84:	bd30      	pop	{r4, r5, pc}

000d7b86 <strlen>:
   d7b86:	4603      	mov	r3, r0
   d7b88:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7b8c:	2a00      	cmp	r2, #0
   d7b8e:	d1fb      	bne.n	d7b88 <strlen+0x2>
   d7b90:	1a18      	subs	r0, r3, r0
   d7b92:	3801      	subs	r0, #1
   d7b94:	4770      	bx	lr

000d7b96 <strncmp>:
   d7b96:	b510      	push	{r4, lr}
   d7b98:	b16a      	cbz	r2, d7bb6 <strncmp+0x20>
   d7b9a:	3901      	subs	r1, #1
   d7b9c:	1884      	adds	r4, r0, r2
   d7b9e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7ba2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d7ba6:	4293      	cmp	r3, r2
   d7ba8:	d103      	bne.n	d7bb2 <strncmp+0x1c>
   d7baa:	42a0      	cmp	r0, r4
   d7bac:	d001      	beq.n	d7bb2 <strncmp+0x1c>
   d7bae:	2b00      	cmp	r3, #0
   d7bb0:	d1f5      	bne.n	d7b9e <strncmp+0x8>
   d7bb2:	1a98      	subs	r0, r3, r2
   d7bb4:	bd10      	pop	{r4, pc}
   d7bb6:	4610      	mov	r0, r2
   d7bb8:	e7fc      	b.n	d7bb4 <strncmp+0x1e>

000d7bba <strrchr>:
   d7bba:	b538      	push	{r3, r4, r5, lr}
   d7bbc:	4603      	mov	r3, r0
   d7bbe:	460c      	mov	r4, r1
   d7bc0:	b969      	cbnz	r1, d7bde <strrchr+0x24>
   d7bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7bc6:	f7ff bf97 	b.w	d7af8 <strchr>
   d7bca:	1c43      	adds	r3, r0, #1
   d7bcc:	4605      	mov	r5, r0
   d7bce:	4621      	mov	r1, r4
   d7bd0:	4618      	mov	r0, r3
   d7bd2:	f7ff ff91 	bl	d7af8 <strchr>
   d7bd6:	2800      	cmp	r0, #0
   d7bd8:	d1f7      	bne.n	d7bca <strrchr+0x10>
   d7bda:	4628      	mov	r0, r5
   d7bdc:	bd38      	pop	{r3, r4, r5, pc}
   d7bde:	2500      	movs	r5, #0
   d7be0:	e7f5      	b.n	d7bce <strrchr+0x14>
	...

000d7be4 <_strtol_l.isra.0>:
   d7be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7be8:	4e3a      	ldr	r6, [pc, #232]	; (d7cd4 <_strtol_l.isra.0+0xf0>)
   d7bea:	4686      	mov	lr, r0
   d7bec:	468c      	mov	ip, r1
   d7bee:	4660      	mov	r0, ip
   d7bf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7bf4:	5da5      	ldrb	r5, [r4, r6]
   d7bf6:	f015 0508 	ands.w	r5, r5, #8
   d7bfa:	d1f8      	bne.n	d7bee <_strtol_l.isra.0+0xa>
   d7bfc:	2c2d      	cmp	r4, #45	; 0x2d
   d7bfe:	d133      	bne.n	d7c68 <_strtol_l.isra.0+0x84>
   d7c00:	f89c 4000 	ldrb.w	r4, [ip]
   d7c04:	f04f 0801 	mov.w	r8, #1
   d7c08:	f100 0c02 	add.w	ip, r0, #2
   d7c0c:	2b00      	cmp	r3, #0
   d7c0e:	d05c      	beq.n	d7cca <_strtol_l.isra.0+0xe6>
   d7c10:	2b10      	cmp	r3, #16
   d7c12:	d10c      	bne.n	d7c2e <_strtol_l.isra.0+0x4a>
   d7c14:	2c30      	cmp	r4, #48	; 0x30
   d7c16:	d10a      	bne.n	d7c2e <_strtol_l.isra.0+0x4a>
   d7c18:	f89c 0000 	ldrb.w	r0, [ip]
   d7c1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7c20:	2858      	cmp	r0, #88	; 0x58
   d7c22:	d14d      	bne.n	d7cc0 <_strtol_l.isra.0+0xdc>
   d7c24:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7c28:	2310      	movs	r3, #16
   d7c2a:	f10c 0c02 	add.w	ip, ip, #2
   d7c2e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7c32:	3f01      	subs	r7, #1
   d7c34:	2600      	movs	r6, #0
   d7c36:	fbb7 f9f3 	udiv	r9, r7, r3
   d7c3a:	4630      	mov	r0, r6
   d7c3c:	fb03 7a19 	mls	sl, r3, r9, r7
   d7c40:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7c44:	2d09      	cmp	r5, #9
   d7c46:	d818      	bhi.n	d7c7a <_strtol_l.isra.0+0x96>
   d7c48:	462c      	mov	r4, r5
   d7c4a:	42a3      	cmp	r3, r4
   d7c4c:	dd24      	ble.n	d7c98 <_strtol_l.isra.0+0xb4>
   d7c4e:	1c75      	adds	r5, r6, #1
   d7c50:	d007      	beq.n	d7c62 <_strtol_l.isra.0+0x7e>
   d7c52:	4581      	cmp	r9, r0
   d7c54:	d31d      	bcc.n	d7c92 <_strtol_l.isra.0+0xae>
   d7c56:	d101      	bne.n	d7c5c <_strtol_l.isra.0+0x78>
   d7c58:	45a2      	cmp	sl, r4
   d7c5a:	db1a      	blt.n	d7c92 <_strtol_l.isra.0+0xae>
   d7c5c:	fb00 4003 	mla	r0, r0, r3, r4
   d7c60:	2601      	movs	r6, #1
   d7c62:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7c66:	e7eb      	b.n	d7c40 <_strtol_l.isra.0+0x5c>
   d7c68:	2c2b      	cmp	r4, #43	; 0x2b
   d7c6a:	bf08      	it	eq
   d7c6c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7c70:	46a8      	mov	r8, r5
   d7c72:	bf08      	it	eq
   d7c74:	f100 0c02 	addeq.w	ip, r0, #2
   d7c78:	e7c8      	b.n	d7c0c <_strtol_l.isra.0+0x28>
   d7c7a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7c7e:	2d19      	cmp	r5, #25
   d7c80:	d801      	bhi.n	d7c86 <_strtol_l.isra.0+0xa2>
   d7c82:	3c37      	subs	r4, #55	; 0x37
   d7c84:	e7e1      	b.n	d7c4a <_strtol_l.isra.0+0x66>
   d7c86:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7c8a:	2d19      	cmp	r5, #25
   d7c8c:	d804      	bhi.n	d7c98 <_strtol_l.isra.0+0xb4>
   d7c8e:	3c57      	subs	r4, #87	; 0x57
   d7c90:	e7db      	b.n	d7c4a <_strtol_l.isra.0+0x66>
   d7c92:	f04f 36ff 	mov.w	r6, #4294967295
   d7c96:	e7e4      	b.n	d7c62 <_strtol_l.isra.0+0x7e>
   d7c98:	1c73      	adds	r3, r6, #1
   d7c9a:	d106      	bne.n	d7caa <_strtol_l.isra.0+0xc6>
   d7c9c:	2322      	movs	r3, #34	; 0x22
   d7c9e:	f8ce 3000 	str.w	r3, [lr]
   d7ca2:	4638      	mov	r0, r7
   d7ca4:	b942      	cbnz	r2, d7cb8 <_strtol_l.isra.0+0xd4>
   d7ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7caa:	f1b8 0f00 	cmp.w	r8, #0
   d7cae:	d000      	beq.n	d7cb2 <_strtol_l.isra.0+0xce>
   d7cb0:	4240      	negs	r0, r0
   d7cb2:	2a00      	cmp	r2, #0
   d7cb4:	d0f7      	beq.n	d7ca6 <_strtol_l.isra.0+0xc2>
   d7cb6:	b10e      	cbz	r6, d7cbc <_strtol_l.isra.0+0xd8>
   d7cb8:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7cbc:	6011      	str	r1, [r2, #0]
   d7cbe:	e7f2      	b.n	d7ca6 <_strtol_l.isra.0+0xc2>
   d7cc0:	2430      	movs	r4, #48	; 0x30
   d7cc2:	2b00      	cmp	r3, #0
   d7cc4:	d1b3      	bne.n	d7c2e <_strtol_l.isra.0+0x4a>
   d7cc6:	2308      	movs	r3, #8
   d7cc8:	e7b1      	b.n	d7c2e <_strtol_l.isra.0+0x4a>
   d7cca:	2c30      	cmp	r4, #48	; 0x30
   d7ccc:	d0a4      	beq.n	d7c18 <_strtol_l.isra.0+0x34>
   d7cce:	230a      	movs	r3, #10
   d7cd0:	e7ad      	b.n	d7c2e <_strtol_l.isra.0+0x4a>
   d7cd2:	bf00      	nop
   d7cd4:	000d800b 	.word	0x000d800b

000d7cd8 <strtol>:
   d7cd8:	4613      	mov	r3, r2
   d7cda:	460a      	mov	r2, r1
   d7cdc:	4601      	mov	r1, r0
   d7cde:	4802      	ldr	r0, [pc, #8]	; (d7ce8 <strtol+0x10>)
   d7ce0:	6800      	ldr	r0, [r0, #0]
   d7ce2:	f7ff bf7f 	b.w	d7be4 <_strtol_l.isra.0>
   d7ce6:	bf00      	nop
   d7ce8:	2003e508 	.word	0x2003e508

000d7cec <dynalib_user>:
   d7cec:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d7cfc:	00000000 2c64255b 252c6425 5d66322e     ....[%d,%d,%.2f]
   d7d0c:	62757000 6873696c 203a6465 00007325     .published: %s..

000d7d1c <_ZTVN5spark10LogHandlerE>:
	...
   d7d2c:	000d40a5 000d40c9                       .@...@..

000d7d34 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7d3c:	000d40ed 000d4121 000d5c39 000d40cb     .@..!A..9\...@..
   d7d4c:	65656873 73655474 00003174              sheetTest1..

000d7d58 <_ZTVN5spark13EthernetClassE>:
	...
   d7d60:	000d4b53 000d4b49 000d4b3f 000d4b35     SK..IK..?K..5K..
   d7d70:	000d4b29 000d4b1d 000d6aed 000d6af5     )K...K...j...j..
   d7d80:	000d4b11 000d4b09 000d4aff 000d4af5     .K...K...J...J..
   d7d90:	000d6b25 69726977 5300676e 65747379     %k..wiring.Syste
   d7da0:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   d7db0:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   d7dc0:	6162002e 53006475 61697265 6553006c     ..baud.Serial.Se
   d7dd0:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   d7de0:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d7df0:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d7e00:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d7e10:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d7e20:	0063006d 6e6c0066 006e6600 6f630074     m.c.f.ln.fn.t.co
   d7e30:	64006564 69617465 0000006c              de.detail...

000d7e3c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7e44:	000d501b 000d5041 000d5001 000d6c47     .P..AP...P..Gl..

000d7e54 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7e5c:	000d5461 000d5479 000d5c39 000d40cb     aT..yT..9\...@..

000d7e6c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7e74:	000d548d 000d54a1 000d5ddd 000d5009     .T...T...]...P..

000d7e84 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7e8c:	000d5019 000d504f 000d5b75 000d500b     .P..OP..u[...P..

000d7e9c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7ea4:	000d5017 000d505d 000d53cd 000d5079     .P..]P...S..yP..
   d7eb4:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d7ec4:	007a2553 74637361 00656d69              S%z.asctime.

000d7ed0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7ed8:	000d6101 000d6107 000d6145 000d6115     .a...a..Ea...a..
   d7ee8:	000d6103                                .a..

000d7eec <_ZTV9IPAddress>:
	...
   d7ef4:	000d6649 000d6639 000d663b              If..9f..;f..

000d7f00 <_ZTV9USBSerial>:
	...
   d7f08:	000d6729 000d6791 000d6767 000d4ef5     )g...g..gg...N..
   d7f18:	000d6759 000d672b 000d673b 000d678b     Yg..+g..;g...g..
   d7f28:	000d674b 000d6725                       Kg..%g..

000d7f30 <_ZTVN5spark13CellularClassE>:
	...
   d7f38:	000d689b 000d6891 000d6887 000d683d     .h...h...h..=h..
   d7f48:	000d687b 000d686f 000d6aed 000d6af5     {h..oh...j...j..
   d7f58:	000d6863 000d685b 000d6851 000d6847     ch..[h..Qh..Gh..
   d7f68:	000d6b25                                %k..

000d7f6c <_ZTV11USARTSerial>:
	...
   d7f74:	000d68d5 000d6941 000d6919 000d4ef5     .h..Ai...i...N..
   d7f84:	000d68e9 000d6905 000d68f7 000d6913     .h...i...h...i..
   d7f94:	000d68d7 000d68db                       .h...h..

000d7f9c <_ZTV7TwoWire>:
	...
   d7fa4:	000d6a0d 000d6a57 000d6a2f 000d6a0f     .j..Wj../j...j..
   d7fb4:	000d6a37 000d6a3f 000d6a47 000d6a4f     7j..?j..Gj..Oj..

000d7fc4 <_ZTVN5spark12NetworkClassE>:
	...
   d7fcc:	000d6aad 000d6ab7 000d6ac1 000d6acb     .j...j...j...j..
   d7fdc:	000d6ad5 000d6ae1 000d6aed 000d6af5     .j...j...j...j..
   d7fec:	000d6afd 000d6b09 000d6b11 000d6b1b     .j...k...k...k..
   d7ffc:	000d6b25 75007525 78343025               %k..%u.u%04x.

000d8009 <_ZSt7nothrow>:
	...

000d800a <_ctype_>:
   d800a:	20202000 20202020 28282020 20282828     .         ((((( 
   d801a:	20202020 20202020 20202020 20202020                     
   d802a:	10108820 10101010 10101010 10101010      ...............
   d803a:	04040410 04040404 10040404 10101010     ................
   d804a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d805a:	01010101 01010101 01010101 10101010     ................
   d806a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d807a:	02020202 02020202 02020202 10101010     ................
   d808a:	00000020 00000000 00000000 00000000      ...............
	...

000d810b <link_const_variable_data_end>:
	...

000d810c <link_constructors_location>:
   d810c:	000d44b1 	.word	0x000d44b1
   d8110:	000d4b5d 	.word	0x000d4b5d
   d8114:	000d4cc5 	.word	0x000d4cc5
   d8118:	000d4ecd 	.word	0x000d4ecd
   d811c:	000d5c29 	.word	0x000d5c29
   d8120:	000d5f51 	.word	0x000d5f51
   d8124:	000d5f79 	.word	0x000d5f79
   d8128:	000d68a5 	.word	0x000d68a5
   d812c:	000d6c05 	.word	0x000d6c05
